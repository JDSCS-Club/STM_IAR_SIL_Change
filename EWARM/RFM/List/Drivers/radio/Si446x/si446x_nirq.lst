###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         22/Sep/2022  13:40:03
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\Si446x\si446x_nirq.c
#    Command line      =
#        -f
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\radio\Si446x\si446x_nirq.o.rsp
#        (C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\Si446x\si446x_nirq.c -D
#        USE_HAL_DRIVER -D STM32F407xx -lC
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Drivers\radio\Si446x -o
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\radio\Si446x
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/App\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/Target\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Core/Inc\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Include\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio/Si446x\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/display\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Library\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\display\fonts\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\STM32F4xx_HAL_Driver\Src\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\arm\CMSIS\Core\Include\\") --dependencies=n
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\radio\Si446x\si446x_nirq.o.d
#    Locale            =  C
#    List file         =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Drivers\radio\Si446x\si446x_nirq.lst
#    Object file       =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\radio\Si446x\si446x_nirq.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#
###############################################################################

C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\Si446x\si446x_nirq.c
      1          /*
      2           * Silicon Laboratories Confidential
      3           * Copyright 2011 Silicon Laboratories, Inc.
      4           *
      5           * THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT!
      6           */
      7          
      8          #include "si446x_defs.h"        //  U8, U16, ...

  # warning unrecognized compiler
    ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",744  Warning[Pa183]: 
          #warning directive: unrecognized compiler
      9          #include "si446x_api_lib.h"		//	Si446xCmd, ...
     10          
     11          //SEGMENT_VARIABLE( Si446xChipPend, U8, SEG_BDATA );
     12          //SBIT(Si446xWUTPend,Si446xChipPend,0);
     13          //SBIT(Si446xLowBattPend,Si446xChipPend,1);
     14          //SBIT(Si446xChipReadyPend,Si446xChipPend,2);
     15          //SBIT(Si446xCmdErrPend,Si446xChipPend,2);
     16          //SBIT(Si446xStateChangePend,Si446xChipPend,2);
     17          //SBIT(Si446xFifoUnderflowOverflowErrorPend,Si446xChipPend,2);
     18          //SEGMENT_VARIABLE( Si446xPhPend, U8, SEG_BDATA );
     19          //SEGMENT_VARIABLE( Si446xModemPend, U8, SEG_BDATA );
     20          
     21          #define Si446xWUTPend                           Si446xPhPend0
     22          #define Si446xLowBattPend                       Si446xPhPend1
     23          #define Si446xChipReadyPend                     Si446xPhPend2
     24          #define Si446xCmdErrPend                        Si446xPhPend3
     25          #define Si446xStateChangePend                   Si446xPhPend4
     26          #define Si446xFifoUnderflowOverflowErrorPend    Si446xPhPend5
     27          #define Si446xDummyPhPend6                      Si446xPhPend6
     28          #define Si446xDummyPhPend7                      Si446xPhPend7
     29          
     30          #define Si446xSyncDetectPend                    Si446xModemPend0
     31          #define Si446xPreambleDetectPend                Si446xModemPend1
     32          #define Si446xInvalidPreamblePend               Si446xModemPend2
     33          #define Si446xRssiPend                          Si446xModemPend3
     34          #define Si446xRssiJumpPend                      Si446xModemPend4
     35          #define Si446xInvalidSyncPend                   Si446xModemPend5
     36          #define Si446xDummyModemPend6                   Si446xModemPend6
     37          #define Si446xDummyModemPend7                   Si446xModemPend7
     38          
     39          #define Si446xRxFifoAlmostFullPend              Si446xChipPend0
     40          #define Si446xTxFifoAlmostEmptyPend             Si446xChipPend1
     41          #define Si446xCrc16ErrorPend                    Si446xChipPend2
     42          #define Si446xCrc32ErrorPend                    Si446xChipPend3
     43          #define Si446xPacketRxPend                      Si446xChipPend4
     44          #define Si446xPacketSentPend                    Si446xChipPend5
     45          #define Si446xFilterMissPend                    Si446xChipPend6
     46          #define Si446xFilterMatchPend                   Si446xChipPend7
     47          
     48          /*!
     49           * Do NOT use SEG_BDATA as that is not understood by SDCC!
     50           * Use BITS, WRITE_TO_BIT_ARRAY and READ_FROM_BIT_ARRAY instead to allocate and
     51           * handle bit arrays in a convenient way.
     52           *
     53           * Allocate all 8bits if WRITE_TO_BIT_ARRAY and READ_FROM_BIT_ARRAY macros
     54           * are to be used. Otherwise these macros would read/write bits that are
     55           * placed within that byte by the linker.
     56           */

   \                                 In section .bss, align 1
     57          BITS(Si446xPhPend, 0);
   \                     Si446xPhPend0:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     58          BITS(Si446xPhPend, 1);
   \                     Si446xPhPend1:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     59          BITS(Si446xPhPend, 2);
   \                     Si446xPhPend2:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     60          BITS(Si446xPhPend, 3);
   \                     Si446xPhPend3:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     61          BITS(Si446xPhPend, 4);
   \                     Si446xPhPend4:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     62          BITS(Si446xPhPend, 5);
   \                     Si446xPhPend5:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     63          BITS(Si446xPhPend, 6);
   \                     Si446xPhPend6:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     64          BITS(Si446xPhPend, 7);
   \                     Si446xPhPend7:
   \        0x0                      DS8 1
     65          

   \                                 In section .bss, align 1
     66          BITS(Si446xModemPend, 0);
   \                     Si446xModemPend0:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     67          BITS(Si446xModemPend, 1);
   \                     Si446xModemPend1:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     68          BITS(Si446xModemPend, 2);
   \                     Si446xModemPend2:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     69          BITS(Si446xModemPend, 3);
   \                     Si446xModemPend3:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     70          BITS(Si446xModemPend, 4);
   \                     Si446xModemPend4:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     71          BITS(Si446xModemPend, 5);
   \                     Si446xModemPend5:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     72          BITS(Si446xModemPend, 6);
   \                     Si446xModemPend6:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     73          BITS(Si446xModemPend, 7);
   \                     Si446xModemPend7:
   \        0x0                      DS8 1
     74          

   \                                 In section .bss, align 1
     75          BITS(Si446xChipPend, 0);
   \                     Si446xChipPend0:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     76          BITS(Si446xChipPend, 1);
   \                     Si446xChipPend1:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     77          BITS(Si446xChipPend, 2);
   \                     Si446xChipPend2:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     78          BITS(Si446xChipPend, 3);
   \                     Si446xChipPend3:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     79          BITS(Si446xChipPend, 4);
   \                     Si446xChipPend4:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     80          BITS(Si446xChipPend, 5);
   \                     Si446xChipPend5:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     81          BITS(Si446xChipPend, 6);
   \                     Si446xChipPend6:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     82          BITS(Si446xChipPend, 7);
   \                     Si446xChipPend7:
   \        0x0                      DS8 1
     83          
     84          /*!
     85           * This function is used to handle the assertion of nIRQ of the si446x chip.
     86           *
     87           * @note This function can take up to 6 ms depending on the startup time of the
     88           * si446x chip.
     89           *
     90           */

   \                                 In section .text, align 4, keep-with-next
     91          void si446x_nirq_process(void)
     92          {
   \                     si446x_nirq_process: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
     93          #ifdef SI446X_USER_CONFIG_USE_FRR_ABC_FOR_NIRQ
     94              SEGMENT_VARIABLE(pendBits[3], U8, SEG_DATA);
     95          
     96              si446x_frr_read();
     97          #else
     98              si446x_get_int_status(0, 0, 0);
   \        0x2   0x2200             MOVS     R2,#+0
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x.... 0x....      BL       si446x_get_int_status
     99          //    Si446xPhPend = Si446xCmd.GET_INT_STATUS.PH_PEND;
    100          //    Si446xModemPend = Si446xCmd.GET_INT_STATUS.MODEM_PEND;
    101          //    Si446xChipPend = Si446xCmd.GET_INT_STATUS.CHIP_PEND;
    102              WRITE_TO_BIT_ARRAY(Si446xPhPend, Si446xCmd.GET_INT_STATUS.PH_PEND);
   \        0xC   0x483C             LDR.N    R0,??si446x_nirq_process_0
   \        0xE   0x7881             LDRB     R1,[R0, #+2]
   \       0x10   0xF011 0x0101      ANDS     R1,R1,#0x1
   \       0x14   0x4A3B             LDR.N    R2,??si446x_nirq_process_0+0x4
   \       0x16   0x7011             STRB     R1,[R2, #+0]
   \       0x18   0x7881             LDRB     R1,[R0, #+2]
   \       0x1A   0xF011 0x0102      ANDS     R1,R1,#0x2
   \       0x1E   0x4A3A             LDR.N    R2,??si446x_nirq_process_0+0x8
   \       0x20   0x7011             STRB     R1,[R2, #+0]
   \       0x22   0x7881             LDRB     R1,[R0, #+2]
   \       0x24   0xF011 0x0104      ANDS     R1,R1,#0x4
   \       0x28   0x4A38             LDR.N    R2,??si446x_nirq_process_0+0xC
   \       0x2A   0x7011             STRB     R1,[R2, #+0]
   \       0x2C   0x7881             LDRB     R1,[R0, #+2]
   \       0x2E   0xF011 0x0108      ANDS     R1,R1,#0x8
   \       0x32   0x4A37             LDR.N    R2,??si446x_nirq_process_0+0x10
   \       0x34   0x7011             STRB     R1,[R2, #+0]
   \       0x36   0x7881             LDRB     R1,[R0, #+2]
   \       0x38   0xF011 0x0110      ANDS     R1,R1,#0x10
   \       0x3C   0x4A35             LDR.N    R2,??si446x_nirq_process_0+0x14
   \       0x3E   0x7011             STRB     R1,[R2, #+0]
   \       0x40   0x7881             LDRB     R1,[R0, #+2]
   \       0x42   0xF011 0x0120      ANDS     R1,R1,#0x20
   \       0x46   0x4A34             LDR.N    R2,??si446x_nirq_process_0+0x18
   \       0x48   0x7011             STRB     R1,[R2, #+0]
   \       0x4A   0x7881             LDRB     R1,[R0, #+2]
   \       0x4C   0xF011 0x0140      ANDS     R1,R1,#0x40
   \       0x50   0x4A32             LDR.N    R2,??si446x_nirq_process_0+0x1C
   \       0x52   0x7011             STRB     R1,[R2, #+0]
   \       0x54   0x7881             LDRB     R1,[R0, #+2]
   \       0x56   0xF011 0x0180      ANDS     R1,R1,#0x80
   \       0x5A   0x4A31             LDR.N    R2,??si446x_nirq_process_0+0x20
   \       0x5C   0x7011             STRB     R1,[R2, #+0]
    103              WRITE_TO_BIT_ARRAY(Si446xModemPend, Si446xCmd.GET_INT_STATUS.MODEM_PEND);
   \       0x5E   0x7901             LDRB     R1,[R0, #+4]
   \       0x60   0xF011 0x0101      ANDS     R1,R1,#0x1
   \       0x64   0x4A2F             LDR.N    R2,??si446x_nirq_process_0+0x24
   \       0x66   0x7011             STRB     R1,[R2, #+0]
   \       0x68   0x7901             LDRB     R1,[R0, #+4]
   \       0x6A   0xF011 0x0102      ANDS     R1,R1,#0x2
   \       0x6E   0x4A2E             LDR.N    R2,??si446x_nirq_process_0+0x28
   \       0x70   0x7011             STRB     R1,[R2, #+0]
   \       0x72   0x7901             LDRB     R1,[R0, #+4]
   \       0x74   0xF011 0x0104      ANDS     R1,R1,#0x4
   \       0x78   0x4A2C             LDR.N    R2,??si446x_nirq_process_0+0x2C
   \       0x7A   0x7011             STRB     R1,[R2, #+0]
   \       0x7C   0x7901             LDRB     R1,[R0, #+4]
   \       0x7E   0xF011 0x0108      ANDS     R1,R1,#0x8
   \       0x82   0x4A2B             LDR.N    R2,??si446x_nirq_process_0+0x30
   \       0x84   0x7011             STRB     R1,[R2, #+0]
   \       0x86   0x7901             LDRB     R1,[R0, #+4]
   \       0x88   0xF011 0x0110      ANDS     R1,R1,#0x10
   \       0x8C   0x4A29             LDR.N    R2,??si446x_nirq_process_0+0x34
   \       0x8E   0x7011             STRB     R1,[R2, #+0]
   \       0x90   0x7901             LDRB     R1,[R0, #+4]
   \       0x92   0xF011 0x0120      ANDS     R1,R1,#0x20
   \       0x96   0x4A28             LDR.N    R2,??si446x_nirq_process_0+0x38
   \       0x98   0x7011             STRB     R1,[R2, #+0]
   \       0x9A   0x7901             LDRB     R1,[R0, #+4]
   \       0x9C   0xF011 0x0140      ANDS     R1,R1,#0x40
   \       0xA0   0x4A26             LDR.N    R2,??si446x_nirq_process_0+0x3C
   \       0xA2   0x7011             STRB     R1,[R2, #+0]
   \       0xA4   0x7901             LDRB     R1,[R0, #+4]
   \       0xA6   0xF011 0x0180      ANDS     R1,R1,#0x80
   \       0xAA   0x4A25             LDR.N    R2,??si446x_nirq_process_0+0x40
   \       0xAC   0x7011             STRB     R1,[R2, #+0]
    104              WRITE_TO_BIT_ARRAY(Si446xChipPend, Si446xCmd.GET_INT_STATUS.CHIP_PEND);
   \       0xAE   0x7981             LDRB     R1,[R0, #+6]
   \       0xB0   0xF011 0x0101      ANDS     R1,R1,#0x1
   \       0xB4   0x4A23             LDR.N    R2,??si446x_nirq_process_0+0x44
   \       0xB6   0x7011             STRB     R1,[R2, #+0]
   \       0xB8   0x7981             LDRB     R1,[R0, #+6]
   \       0xBA   0xF011 0x0102      ANDS     R1,R1,#0x2
   \       0xBE   0x4A22             LDR.N    R2,??si446x_nirq_process_0+0x48
   \       0xC0   0x7011             STRB     R1,[R2, #+0]
   \       0xC2   0x7981             LDRB     R1,[R0, #+6]
   \       0xC4   0xF011 0x0104      ANDS     R1,R1,#0x4
   \       0xC8   0x4A20             LDR.N    R2,??si446x_nirq_process_0+0x4C
   \       0xCA   0x7011             STRB     R1,[R2, #+0]
   \       0xCC   0x7981             LDRB     R1,[R0, #+6]
   \       0xCE   0xF011 0x0108      ANDS     R1,R1,#0x8
   \       0xD2   0x4A1F             LDR.N    R2,??si446x_nirq_process_0+0x50
   \       0xD4   0x7011             STRB     R1,[R2, #+0]
   \       0xD6   0x7981             LDRB     R1,[R0, #+6]
   \       0xD8   0xF011 0x0110      ANDS     R1,R1,#0x10
   \       0xDC   0x4A1D             LDR.N    R2,??si446x_nirq_process_0+0x54
   \       0xDE   0x7011             STRB     R1,[R2, #+0]
   \       0xE0   0x7981             LDRB     R1,[R0, #+6]
   \       0xE2   0xF011 0x0120      ANDS     R1,R1,#0x20
   \       0xE6   0x4A1C             LDR.N    R2,??si446x_nirq_process_0+0x58
   \       0xE8   0x7011             STRB     R1,[R2, #+0]
   \       0xEA   0x7981             LDRB     R1,[R0, #+6]
   \       0xEC   0xF011 0x0140      ANDS     R1,R1,#0x40
   \       0xF0   0x4A1A             LDR.N    R2,??si446x_nirq_process_0+0x5C
   \       0xF2   0x7011             STRB     R1,[R2, #+0]
   \       0xF4   0x7980             LDRB     R0,[R0, #+6]
   \       0xF6   0xF010 0x0080      ANDS     R0,R0,#0x80
   \       0xFA   0x4919             LDR.N    R1,??si446x_nirq_process_0+0x60
   \       0xFC   0x7008             STRB     R0,[R1, #+0]
    105          #endif
    106          }
   \       0xFE   0xBD01             POP      {R0,PC}
   \                     ??si446x_nirq_process_0:
   \      0x100   0x....'....        DC32     Si446xCmd
   \      0x104   0x....'....        DC32     Si446xPhPend0
   \      0x108   0x....'....        DC32     Si446xPhPend1
   \      0x10C   0x....'....        DC32     Si446xPhPend2
   \      0x110   0x....'....        DC32     Si446xPhPend3
   \      0x114   0x....'....        DC32     Si446xPhPend4
   \      0x118   0x....'....        DC32     Si446xPhPend5
   \      0x11C   0x....'....        DC32     Si446xPhPend6
   \      0x120   0x....'....        DC32     Si446xPhPend7
   \      0x124   0x....'....        DC32     Si446xModemPend0
   \      0x128   0x....'....        DC32     Si446xModemPend1
   \      0x12C   0x....'....        DC32     Si446xModemPend2
   \      0x130   0x....'....        DC32     Si446xModemPend3
   \      0x134   0x....'....        DC32     Si446xModemPend4
   \      0x138   0x....'....        DC32     Si446xModemPend5
   \      0x13C   0x....'....        DC32     Si446xModemPend6
   \      0x140   0x....'....        DC32     Si446xModemPend7
   \      0x144   0x....'....        DC32     Si446xChipPend0
   \      0x148   0x....'....        DC32     Si446xChipPend1
   \      0x14C   0x....'....        DC32     Si446xChipPend2
   \      0x150   0x....'....        DC32     Si446xChipPend3
   \      0x154   0x....'....        DC32     Si446xChipPend4
   \      0x158   0x....'....        DC32     Si446xChipPend5
   \      0x15C   0x....'....        DC32     Si446xChipPend6
   \      0x160   0x....'....        DC32     Si446xChipPend7

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   si446x_nirq_process
         8   -> si446x_get_int_status


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       1  Si446xChipPend0
       1  Si446xChipPend1
       1  Si446xChipPend2
       1  Si446xChipPend3
       1  Si446xChipPend4
       1  Si446xChipPend5
       1  Si446xChipPend6
       1  Si446xChipPend7
       1  Si446xModemPend0
       1  Si446xModemPend1
       1  Si446xModemPend2
       1  Si446xModemPend3
       1  Si446xModemPend4
       1  Si446xModemPend5
       1  Si446xModemPend6
       1  Si446xModemPend7
       1  Si446xPhPend0
       1  Si446xPhPend1
       1  Si446xPhPend2
       1  Si446xPhPend3
       1  Si446xPhPend4
       1  Si446xPhPend5
       1  Si446xPhPend6
       1  Si446xPhPend7
     356  si446x_nirq_process

 
  24 bytes in section .bss
 356 bytes in section .text
 
 356 bytes of CODE memory
  24 bytes of DATA memory

Errors: none
Warnings: 1
