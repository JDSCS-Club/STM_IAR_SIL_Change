###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         20/Sep/2022  23:37:22
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pcd_ex.c
#    Command line      =
#        -f
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\STM32F4xx_HAL_Driver\stm32f4xx_hal_pcd_ex.o.rsp
#        (C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pcd_ex.c
#        -D USE_HAL_DRIVER -D STM32F407xx -lC
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Drivers\STM32F4xx_HAL_Driver
#        -o
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\STM32F4xx_HAL_Driver
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/App\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/Target\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Core/Inc\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Include\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio/Si446x\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/display\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Library\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\display\fonts\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\STM32F4xx_HAL_Driver\Src\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\arm\CMSIS\Core\Include\\") --dependencies=n
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\STM32F4xx_HAL_Driver\stm32f4xx_hal_pcd_ex.o.d
#    Locale            =  C
#    List file         =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Drivers\STM32F4xx_HAL_Driver\stm32f4xx_hal_pcd_ex.lst
#    Object file       =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\STM32F4xx_HAL_Driver\stm32f4xx_hal_pcd_ex.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pcd_ex.c
      1          /**
      2            ******************************************************************************
      3            * @file    stm32f4xx_hal_pcd_ex.c
      4            * @author  MCD Application Team
      5            * @brief   PCD Extended HAL module driver.
      6            *          This file provides firmware functions to manage the following
      7            *          functionalities of the USB Peripheral Controller:
      8            *           + Extended features functions
      9            *
     10            ******************************************************************************
     11            * @attention
     12            *
     13            * <h2><center>&copy; Copyright (c) 2016 STMicroelectronics.
     14            * All rights reserved.</center></h2>
     15            *
     16            * This software component is licensed by ST under BSD 3-Clause license,
     17            * the "License"; You may not use this file except in compliance with the
     18            * License. You may obtain a copy of the License at:
     19            *                        opensource.org/licenses/BSD-3-Clause
     20            *
     21            ******************************************************************************
     22            */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "stm32f4xx_hal.h"
     26          
     27          /** @addtogroup STM32F4xx_HAL_Driver
     28            * @{
     29            */
     30          
     31          /** @defgroup PCDEx PCDEx
     32            * @brief PCD Extended HAL module driver
     33            * @{
     34            */
     35          
     36          #ifdef HAL_PCD_MODULE_ENABLED
     37          
     38          #if defined (USB_OTG_FS) || defined (USB_OTG_HS)
     39          /* Private types -------------------------------------------------------------*/
     40          /* Private variables ---------------------------------------------------------*/
     41          /* Private constants ---------------------------------------------------------*/
     42          /* Private macros ------------------------------------------------------------*/
     43          /* Private functions ---------------------------------------------------------*/
     44          /* Exported functions --------------------------------------------------------*/
     45          
     46          /** @defgroup PCDEx_Exported_Functions PCDEx Exported Functions
     47            * @{
     48            */
     49          
     50          /** @defgroup PCDEx_Exported_Functions_Group1 Peripheral Control functions
     51            * @brief    PCDEx control functions
     52            *
     53          @verbatim
     54           ===============================================================================
     55                           ##### Extended features functions #####
     56           ===============================================================================
     57              [..]  This section provides functions allowing to:
     58                (+) Update FIFO configuration
     59          
     60          @endverbatim
     61            * @{
     62            */
     63          #if defined (USB_OTG_FS) || defined (USB_OTG_HS)
     64          /**
     65            * @brief  Set Tx FIFO
     66            * @param  hpcd PCD handle
     67            * @param  fifo The number of Tx fifo
     68            * @param  size Fifo size
     69            * @retval HAL status
     70            */

   \                                 In section .text, align 2, keep-with-next
     71          HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
     72          {
   \                     HAL_PCDEx_SetTxFiFo: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0x0003             MOVS     R3,R0
     73            uint8_t i;
     74            uint32_t Tx_Offset;
     75          
     76            /*  TXn min size = 16 words. (n  : Transmit FIFO index)
     77                When a TxFIFO is not used, the Configuration should be as follows:
     78                    case 1 :  n > m    and Txn is not used    (n,m  : Transmit FIFO indexes)
     79                   --> Txm can use the space allocated for Txn.
     80                   case2  :  n < m    and Txn is not used    (n,m  : Transmit FIFO indexes)
     81                   --> Txn should be configured with the minimum space of 16 words
     82               The FIFO is used optimally when used TxFIFOs are allocated in the top
     83                   of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     84               When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
     85          
     86            Tx_Offset = hpcd->Instance->GRXFSIZ;
   \        0x4   0x6818             LDR      R0,[R3, #+0]
   \        0x6   0x6A45             LDR      R5,[R0, #+36]
     87          
     88            if (fifo == 0U)
   \        0x8   0x0008             MOVS     R0,R1
   \        0xA   0xB2C0             UXTB     R0,R0
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD106             BNE.N    ??HAL_PCDEx_SetTxFiFo_0
     89            {
     90              hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
   \       0x10   0x0010             MOVS     R0,R2
   \       0x12   0xB280             UXTH     R0,R0
   \       0x14   0xEA55 0x4000      ORRS     R0,R5,R0, LSL #+16
   \       0x18   0x681E             LDR      R6,[R3, #+0]
   \       0x1A   0x62B0             STR      R0,[R6, #+40]
   \       0x1C   0xE022             B.N      ??HAL_PCDEx_SetTxFiFo_1
     91            }
     92            else
     93            {
     94              Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
   \                     ??HAL_PCDEx_SetTxFiFo_0: (+1)
   \       0x1E   0x6818             LDR      R0,[R3, #+0]
   \       0x20   0x6A80             LDR      R0,[R0, #+40]
   \       0x22   0xEB15 0x4510      ADDS     R5,R5,R0, LSR #+16
     95              for (i = 0U; i < (fifo - 1U); i++)
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0x0004             MOVS     R4,R0
   \                     ??HAL_PCDEx_SetTxFiFo_2: (+1)
   \       0x2A   0x0020             MOVS     R0,R4
   \       0x2C   0xB2C0             UXTB     R0,R0
   \       0x2E   0x000E             MOVS     R6,R1
   \       0x30   0xB2F6             UXTB     R6,R6
   \       0x32   0x1E76             SUBS     R6,R6,#+1
   \       0x34   0x42B0             CMP      R0,R6
   \       0x36   0xD20A             BCS.N    ??HAL_PCDEx_SetTxFiFo_3
     96              {
     97                Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
   \       0x38   0x6818             LDR      R0,[R3, #+0]
   \       0x3A   0x0026             MOVS     R6,R4
   \       0x3C   0xB2F6             UXTB     R6,R6
   \       0x3E   0xEB00 0x0086      ADD      R0,R0,R6, LSL #+2
   \       0x42   0xF8D0 0x0104      LDR      R0,[R0, #+260]
   \       0x46   0xEB15 0x4510      ADDS     R5,R5,R0, LSR #+16
     98              }
   \       0x4A   0x1C64             ADDS     R4,R4,#+1
   \       0x4C   0xE7ED             B.N      ??HAL_PCDEx_SetTxFiFo_2
     99          
    100              /* Multiply Tx_Size by 2 to get higher performance */
    101              hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
   \                     ??HAL_PCDEx_SetTxFiFo_3: (+1)
   \       0x4E   0x6818             LDR      R0,[R3, #+0]
   \       0x50   0x000E             MOVS     R6,R1
   \       0x52   0xB2F6             UXTB     R6,R6
   \       0x54   0xEB00 0x0086      ADD      R0,R0,R6, LSL #+2
   \       0x58   0x0016             MOVS     R6,R2
   \       0x5A   0xB2B6             UXTH     R6,R6
   \       0x5C   0xEA55 0x4606      ORRS     R6,R5,R6, LSL #+16
   \       0x60   0xF8C0 0x6100      STR      R6,[R0, #+256]
    102            }
    103          
    104            return HAL_OK;
   \                     ??HAL_PCDEx_SetTxFiFo_1: (+1)
   \       0x64   0x2000             MOVS     R0,#+0
   \       0x66   0xBC70             POP      {R4-R6}
   \       0x68   0x4770             BX       LR
    105          }
    106          
    107          /**
    108            * @brief  Set Rx FIFO
    109            * @param  hpcd PCD handle
    110            * @param  size Size of Rx fifo
    111            * @retval HAL status
    112            */

   \                                 In section .text, align 2, keep-with-next
    113          HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
    114          {
   \                     HAL_PCDEx_SetRxFiFo: (+1)
   \        0x0   0x0002             MOVS     R2,R0
    115            hpcd->Instance->GRXFSIZ = size;
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB280             UXTH     R0,R0
   \        0x6   0x6813             LDR      R3,[R2, #+0]
   \        0x8   0x6258             STR      R0,[R3, #+36]
    116          
    117            return HAL_OK;
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x4770             BX       LR
    118          }
    119          #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    120          /**
    121            * @brief  Activate LPM feature.
    122            * @param  hpcd PCD handle
    123            * @retval HAL status
    124            */
    125          HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
    126          {
    127            USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
    128          
    129            hpcd->lpm_active = 1U;
    130            hpcd->LPM_State = LPM_L0;
    131            USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
    132            USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
    133          
    134            return HAL_OK;
    135          }
    136          
    137          /**
    138            * @brief  Deactivate LPM feature.
    139            * @param  hpcd PCD handle
    140            * @retval HAL status
    141            */
    142          HAL_StatusTypeDef HAL_PCDEx_DeActivateLPM(PCD_HandleTypeDef *hpcd)
    143          {
    144            USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
    145          
    146            hpcd->lpm_active = 0U;
    147            USBx->GINTMSK &= ~USB_OTG_GINTMSK_LPMINTM;
    148            USBx->GLPMCFG &= ~(USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
    149          
    150            return HAL_OK;
    151          }
    152          #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    153          #if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    154          /**
    155            * @brief  Handle BatteryCharging Process.
    156            * @param  hpcd PCD handle
    157            * @retval HAL status
    158            */
    159          void HAL_PCDEx_BCD_VBUSDetect(PCD_HandleTypeDef *hpcd)
    160          {
    161            USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
    162            uint32_t tickstart = HAL_GetTick();
    163          
    164            /* Enable DCD : Data Contact Detect */
    165            USBx->GCCFG |= USB_OTG_GCCFG_DCDEN;
    166          
    167            /* Wait Detect flag or a timeout is happen*/
    168            while ((USBx->GCCFG & USB_OTG_GCCFG_DCDET) == 0U)
    169            {
    170              /* Check for the Timeout */
    171              if ((HAL_GetTick() - tickstart) > 1000U)
    172              {
    173          #if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    174                hpcd->BCDCallback(hpcd, PCD_BCD_ERROR);
    175          #else
    176                HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_ERROR);
    177          #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    178          
    179                return;
    180              }
    181            }
    182          
    183            /* Right response got */
    184            HAL_Delay(200U);
    185          
    186            /* Check Detect flag*/
    187            if ((USBx->GCCFG & USB_OTG_GCCFG_DCDET) == USB_OTG_GCCFG_DCDET)
    188            {
    189          #if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    190              hpcd->BCDCallback(hpcd, PCD_BCD_CONTACT_DETECTION);
    191          #else
    192              HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CONTACT_DETECTION);
    193          #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    194            }
    195          
    196            /*Primary detection: checks if connected to Standard Downstream Port
    197            (without charging capability) */
    198            USBx->GCCFG &= ~ USB_OTG_GCCFG_DCDEN;
    199            HAL_Delay(50U);
    200            USBx->GCCFG |=  USB_OTG_GCCFG_PDEN;
    201            HAL_Delay(50U);
    202          
    203            if ((USBx->GCCFG & USB_OTG_GCCFG_PDET) == 0U)
    204            {
    205              /* Case of Standard Downstream Port */
    206          #if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    207              hpcd->BCDCallback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
    208          #else
    209              HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_STD_DOWNSTREAM_PORT);
    210          #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    211            }
    212            else
    213            {
    214              /* start secondary detection to check connection to Charging Downstream
    215              Port or Dedicated Charging Port */
    216              USBx->GCCFG &= ~ USB_OTG_GCCFG_PDEN;
    217              HAL_Delay(50U);
    218              USBx->GCCFG |=  USB_OTG_GCCFG_SDEN;
    219              HAL_Delay(50U);
    220          
    221              if ((USBx->GCCFG & USB_OTG_GCCFG_SDET) == USB_OTG_GCCFG_SDET)
    222              {
    223                /* case Dedicated Charging Port  */
    224          #if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    225                hpcd->BCDCallback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
    226          #else
    227                HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DEDICATED_CHARGING_PORT);
    228          #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    229              }
    230              else
    231              {
    232                /* case Charging Downstream Port  */
    233          #if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    234                hpcd->BCDCallback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
    235          #else
    236                HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_CHARGING_DOWNSTREAM_PORT);
    237          #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    238              }
    239            }
    240          
    241            /* Battery Charging capability discovery finished */
    242            (void)HAL_PCDEx_DeActivateBCD(hpcd);
    243          
    244          #if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    245            hpcd->BCDCallback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
    246          #else
    247            HAL_PCDEx_BCD_Callback(hpcd, PCD_BCD_DISCOVERY_COMPLETED);
    248          #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    249          }
    250          
    251          /**
    252            * @brief  Activate BatteryCharging feature.
    253            * @param  hpcd PCD handle
    254            * @retval HAL status
    255            */
    256          HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
    257          {
    258            USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
    259          
    260            USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
    261            USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
    262          
    263            /* Power Down USB transceiver  */
    264            USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
    265          
    266            /* Enable Battery charging */
    267            USBx->GCCFG |= USB_OTG_GCCFG_BCDEN;
    268          
    269            hpcd->battery_charging_active = 1U;
    270          
    271            return HAL_OK;
    272          }
    273          
    274          /**
    275            * @brief  Deactivate BatteryCharging feature.
    276            * @param  hpcd PCD handle
    277            * @retval HAL status
    278            */
    279          HAL_StatusTypeDef HAL_PCDEx_DeActivateBCD(PCD_HandleTypeDef *hpcd)
    280          {
    281            USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
    282          
    283            USBx->GCCFG &= ~(USB_OTG_GCCFG_SDEN);
    284            USBx->GCCFG &= ~(USB_OTG_GCCFG_PDEN);
    285          
    286            /* Disable Battery charging */
    287            USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
    288          
    289            hpcd->battery_charging_active = 0U;
    290          
    291            return HAL_OK;
    292          }
    293          #endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    294          #endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    295          
    296          /**
    297            * @brief  Send LPM message to user layer callback.
    298            * @param  hpcd PCD handle
    299            * @param  msg LPM message
    300            * @retval HAL status
    301            */

   \                                 In section .text, align 2
    302          __weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
    303          {
    304            /* Prevent unused argument(s) compilation warning */
    305            UNUSED(hpcd);
    306            UNUSED(msg);
    307          
    308            /* NOTE : This function should not be modified, when the callback is needed,
    309                      the HAL_PCDEx_LPM_Callback could be implemented in the user file
    310             */
    311          }
   \                     HAL_PCDEx_LPM_Callback: (+1)
   \        0x0   0x4770             BX       LR
    312          
    313          /**
    314            * @brief  Send BatteryCharging message to user layer callback.
    315            * @param  hpcd PCD handle
    316            * @param  msg LPM message
    317            * @retval HAL status
    318            */

   \                                 In section .text, align 2
    319          __weak void HAL_PCDEx_BCD_Callback(PCD_HandleTypeDef *hpcd, PCD_BCD_MsgTypeDef msg)
    320          {
    321            /* Prevent unused argument(s) compilation warning */
    322            UNUSED(hpcd);
    323            UNUSED(msg);
    324          
    325            /* NOTE : This function should not be modified, when the callback is needed,
    326                      the HAL_PCDEx_BCD_Callback could be implemented in the user file
    327             */
    328          }
   \                     HAL_PCDEx_BCD_Callback: (+1)
   \        0x0   0x4770             BX       LR
    329          
    330          /**
    331            * @}
    332            */
    333          
    334          /**
    335            * @}
    336            */
    337          #endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    338          #endif /* HAL_PCD_MODULE_ENABLED */
    339          
    340          /**
    341            * @}
    342            */
    343          
    344          /**
    345            * @}
    346            */
    347          
    348          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   HAL_PCDEx_BCD_Callback
       0   HAL_PCDEx_LPM_Callback
       0   HAL_PCDEx_SetRxFiFo
      12   HAL_PCDEx_SetTxFiFo


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  HAL_PCDEx_BCD_Callback
       2  HAL_PCDEx_LPM_Callback
      14  HAL_PCDEx_SetRxFiFo
     106  HAL_PCDEx_SetTxFiFo

 
 124 bytes in section .text
 
 120 bytes of CODE memory (+ 4 bytes shared)

Errors: none
Warnings: none
