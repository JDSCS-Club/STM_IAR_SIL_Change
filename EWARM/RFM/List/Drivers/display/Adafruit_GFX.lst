###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         27/Sep/2022  19:40:22
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\display\Adafruit_GFX.cpp
#    Command line                 =
#        -f
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\display\Adafruit_GFX.o.rsp
#        (C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\display\Adafruit_GFX.cpp -D
#        USE_HAL_DRIVER -D STM32F407xx -lC
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Drivers\display -o
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\display --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/App\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/Target\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Core/Inc\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Include\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio/Si446x\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/display\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Library\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\display\fonts\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\STM32F4xx_HAL_Driver\Src\
#        -On --c++ --no_exceptions --no_rtti -I "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\display\Adafruit_GFX.o.d
#    Locale                       =  C
#    List file                    =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Drivers\display\Adafruit_GFX.lst
#    Object file                  =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\display\Adafruit_GFX.o
#    Runtime model:                  
#      __CPP_Exceptions           =  Disabled
#      __CPP_Language             =  C++14
#      __CPP_Library              =  DLib
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#
###############################################################################

C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\display\Adafruit_GFX.cpp
      1          /*
      2          This is the core graphics library for all our displays, providing a common
      3          set of graphics primitives (points, lines, circles, etc.).  It needs to be
      4          paired with a hardware-specific library for each display device we carry
      5          (to handle the lower-level functions).
      6          
      7          Adafruit invests time and resources providing this open source code, please
      8          support Adafruit & open-source hardware by purchasing products from Adafruit!
      9           
     10          Copyright (c) 2013 Adafruit Industries.  All rights reserved.
     11          
     12          Redistribution and use in source and binary forms, with or without
     13          modification, are permitted provided that the following conditions are met:
     14          
     15          - Redistributions of source code must retain the above copyright notice,
     16            this list of conditions and the following disclaimer.
     17          - Redistributions in binary form must reproduce the above copyright notice,
     18            this list of conditions and the following disclaimer in the documentation
     19            and/or other materials provided with the distribution.
     20          
     21          THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
     22          AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
     23          IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
     24          ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
     25          LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
     26          CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
     27          SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
     28          INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
     29          CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
     30          ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
     31          POSSIBILITY OF SUCH DAMAGE.
     32          */
     33          
     34          #include "Adafruit_GFX.h"
     35          
     36          //#include "glcdfont.h"
     37          
     38          #include "stdlib.h"
     39          
     40          
     41           #define pgm_read_byte(addr) (*(const unsigned char *)(addr))
     42          
     43          

   \                                 In section .text, align 2, keep-with-next
   \   __vfp Adafruit_GFX::subobject Adafruit_GFX(int16_t, int16_t)
   \                     _ZN12Adafruit_GFXC2Ess: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0xB212             SXTH     R2,R2
   \        0x6   0xB209             SXTH     R1,R1
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       _ZN12Adafruit_GFXC1Ess
   \        0xE   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 2, keep-with-next
     44          Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
     45            WIDTH(w), HEIGHT(h)
     46          {
   \                     _ZN12Adafruit_GFXC1Ess: (+1)
   \        0x0   0x8081             STRH     R1,[R0, #+4]
   \        0x2   0x80C2             STRH     R2,[R0, #+6]
     47            _width    = WIDTH;
   \        0x4   0x8883             LDRH     R3,[R0, #+4]
   \        0x6   0x8103             STRH     R3,[R0, #+8]
     48            _height   = HEIGHT;
   \        0x8   0x88C3             LDRH     R3,[R0, #+6]
   \        0xA   0x8143             STRH     R3,[R0, #+10]
     49            rotation  = 0;
   \        0xC   0x2300             MOVS     R3,#+0
   \        0xE   0x7543             STRB     R3,[R0, #+21]
     50            cursor_y  = cursor_x    = 0;
   \       0x10   0x2300             MOVS     R3,#+0
   \       0x12   0x8183             STRH     R3,[R0, #+12]
   \       0x14   0x8983             LDRH     R3,[R0, #+12]
   \       0x16   0x81C3             STRH     R3,[R0, #+14]
     51            textsize  = 1;
   \       0x18   0x2301             MOVS     R3,#+1
   \       0x1A   0x7503             STRB     R3,[R0, #+20]
     52            textcolor = textbgcolor = 0xFFFF;
   \       0x1C   0xF64F 0x73FF      MOVW     R3,#+65535
   \       0x20   0x8243             STRH     R3,[R0, #+18]
   \       0x22   0x8A43             LDRH     R3,[R0, #+18]
   \       0x24   0x8203             STRH     R3,[R0, #+16]
     53            wrap      = true;
   \       0x26   0x2301             MOVS     R3,#+1
   \       0x28   0x7583             STRB     R3,[R0, #+22]
     54          }
   \       0x2A   0x4770             BX       LR
     55          
     56          // Draw a circle outline

   \                                 In section .text, align 2, keep-with-next
     57          void Adafruit_GFX::drawCircle(int16_t x0, int16_t y0, int16_t r,
     58              uint16_t color) {
   \                     _ZN12Adafruit_GFX10drawCircleEssst: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   \        0xA   0x9C0C             LDR      R4,[SP, #+48]
     59            int16_t f = 1 - r;
   \        0xC   0xF8BD 0x8008      LDRH     R8,[SP, #+8]
   \       0x10   0xF1D8 0x0801      RSBS     R8,R8,#+1
     60            int16_t ddF_x = 1;
   \       0x14   0xF05F 0x0901      MOVS     R9,#+1
     61            int16_t ddF_y = -2 * r;
   \       0x18   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \       0x1C   0x0040             LSLS     R0,R0,#+1
   \       0x1E   0x4240             RSBS     R0,R0,#+0
   \       0x20   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     62            int16_t x = 0;
   \       0x24   0xF05F 0x0A00      MOVS     R10,#+0
     63            int16_t y = r;
   \       0x28   0xF9BD 0xB008      LDRSH    R11,[SP, #+8]
     64          
     65            drawPixel(x0  , y0+r, color);
   \       0x2C   0x0023             MOVS     R3,R4
   \       0x2E   0xB29B             UXTH     R3,R3
   \       0x30   0xF8BD 0x2008      LDRH     R2,[SP, #+8]
   \       0x34   0x19D2             ADDS     R2,R2,R7
   \       0x36   0xB212             SXTH     R2,R2
   \       0x38   0x0031             MOVS     R1,R6
   \       0x3A   0xB209             SXTH     R1,R1
   \       0x3C   0x0028             MOVS     R0,R5
   \       0x3E   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x42   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0x46   0x47E0             BLX      R12
     66            drawPixel(x0  , y0-r, color);
   \       0x48   0x0023             MOVS     R3,R4
   \       0x4A   0xB29B             UXTH     R3,R3
   \       0x4C   0xF8BD 0x2008      LDRH     R2,[SP, #+8]
   \       0x50   0x1ABA             SUBS     R2,R7,R2
   \       0x52   0xB212             SXTH     R2,R2
   \       0x54   0x0031             MOVS     R1,R6
   \       0x56   0xB209             SXTH     R1,R1
   \       0x58   0x0028             MOVS     R0,R5
   \       0x5A   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x5E   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0x62   0x47E0             BLX      R12
     67            drawPixel(x0+r, y0  , color);
   \       0x64   0x0023             MOVS     R3,R4
   \       0x66   0xB29B             UXTH     R3,R3
   \       0x68   0x003A             MOVS     R2,R7
   \       0x6A   0xB212             SXTH     R2,R2
   \       0x6C   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \       0x70   0x1989             ADDS     R1,R1,R6
   \       0x72   0xB209             SXTH     R1,R1
   \       0x74   0x0028             MOVS     R0,R5
   \       0x76   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x7A   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0x7E   0x47E0             BLX      R12
     68            drawPixel(x0-r, y0  , color);
   \       0x80   0x0023             MOVS     R3,R4
   \       0x82   0xB29B             UXTH     R3,R3
   \       0x84   0x003A             MOVS     R2,R7
   \       0x86   0xB212             SXTH     R2,R2
   \       0x88   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \       0x8C   0x1A71             SUBS     R1,R6,R1
   \       0x8E   0xB209             SXTH     R1,R1
   \       0x90   0x0028             MOVS     R0,R5
   \       0x92   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x96   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0x9A   0x47E0             BLX      R12
     69          
     70            while (x<y) {
   \                     ??drawCircle_0: (+1)
   \       0x9C   0x4650             MOV      R0,R10
   \       0x9E   0x4659             MOV      R1,R11
   \       0xA0   0xB200             SXTH     R0,R0
   \       0xA2   0xB209             SXTH     R1,R1
   \       0xA4   0x4288             CMP      R0,R1
   \       0xA6   0xF280 0x8086      BGE.W    ??drawCircle_1
     71              if (f >= 0) {
   \       0xAA   0x4640             MOV      R0,R8
   \       0xAC   0xB200             SXTH     R0,R0
   \       0xAE   0x2800             CMP      R0,#+0
   \       0xB0   0xD40A             BMI.N    ??drawCircle_2
     72                y--;
   \       0xB2   0xF1BB 0x0B01      SUBS     R11,R11,#+1
     73                ddF_y += 2;
   \       0xB6   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \       0xBA   0x1C80             ADDS     R0,R0,#+2
   \       0xBC   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     74                f += ddF_y;
   \       0xC0   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \       0xC4   0xEB10 0x0808      ADDS     R8,R0,R8
     75              }
     76              x++;
   \                     ??drawCircle_2: (+1)
   \       0xC8   0xF11A 0x0A01      ADDS     R10,R10,#+1
     77              ddF_x += 2;
   \       0xCC   0xF119 0x0902      ADDS     R9,R9,#+2
     78              f += ddF_x;
   \       0xD0   0xEB19 0x0808      ADDS     R8,R9,R8
     79            
     80              drawPixel(x0 + x, y0 + y, color);
   \       0xD4   0x0023             MOVS     R3,R4
   \       0xD6   0xB29B             UXTH     R3,R3
   \       0xD8   0xEB1B 0x0207      ADDS     R2,R11,R7
   \       0xDC   0xB212             SXTH     R2,R2
   \       0xDE   0xEB1A 0x0106      ADDS     R1,R10,R6
   \       0xE2   0xB209             SXTH     R1,R1
   \       0xE4   0x0028             MOVS     R0,R5
   \       0xE6   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0xEA   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0xEE   0x47E0             BLX      R12
     81              drawPixel(x0 - x, y0 + y, color);
   \       0xF0   0x0023             MOVS     R3,R4
   \       0xF2   0xB29B             UXTH     R3,R3
   \       0xF4   0xEB1B 0x0207      ADDS     R2,R11,R7
   \       0xF8   0xB212             SXTH     R2,R2
   \       0xFA   0xEBB6 0x010A      SUBS     R1,R6,R10
   \       0xFE   0xB209             SXTH     R1,R1
   \      0x100   0x0028             MOVS     R0,R5
   \      0x102   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \      0x106   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x10A   0x47E0             BLX      R12
     82              drawPixel(x0 + x, y0 - y, color);
   \      0x10C   0x0023             MOVS     R3,R4
   \      0x10E   0xB29B             UXTH     R3,R3
   \      0x110   0xEBB7 0x020B      SUBS     R2,R7,R11
   \      0x114   0xB212             SXTH     R2,R2
   \      0x116   0xEB1A 0x0106      ADDS     R1,R10,R6
   \      0x11A   0xB209             SXTH     R1,R1
   \      0x11C   0x0028             MOVS     R0,R5
   \      0x11E   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \      0x122   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x126   0x47E0             BLX      R12
     83              drawPixel(x0 - x, y0 - y, color);
   \      0x128   0x0023             MOVS     R3,R4
   \      0x12A   0xB29B             UXTH     R3,R3
   \      0x12C   0xEBB7 0x020B      SUBS     R2,R7,R11
   \      0x130   0xB212             SXTH     R2,R2
   \      0x132   0xEBB6 0x010A      SUBS     R1,R6,R10
   \      0x136   0xB209             SXTH     R1,R1
   \      0x138   0x0028             MOVS     R0,R5
   \      0x13A   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \      0x13E   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x142   0x47E0             BLX      R12
     84              drawPixel(x0 + y, y0 + x, color);
   \      0x144   0x0023             MOVS     R3,R4
   \      0x146   0xB29B             UXTH     R3,R3
   \      0x148   0xEB1A 0x0207      ADDS     R2,R10,R7
   \      0x14C   0xB212             SXTH     R2,R2
   \      0x14E   0xEB1B 0x0106      ADDS     R1,R11,R6
   \      0x152   0xB209             SXTH     R1,R1
   \      0x154   0x0028             MOVS     R0,R5
   \      0x156   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \      0x15A   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x15E   0x47E0             BLX      R12
     85              drawPixel(x0 - y, y0 + x, color);
   \      0x160   0x0023             MOVS     R3,R4
   \      0x162   0xB29B             UXTH     R3,R3
   \      0x164   0xEB1A 0x0207      ADDS     R2,R10,R7
   \      0x168   0xB212             SXTH     R2,R2
   \      0x16A   0xEBB6 0x010B      SUBS     R1,R6,R11
   \      0x16E   0xB209             SXTH     R1,R1
   \      0x170   0x0028             MOVS     R0,R5
   \      0x172   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \      0x176   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x17A   0x47E0             BLX      R12
     86              drawPixel(x0 + y, y0 - x, color);
   \      0x17C   0x0023             MOVS     R3,R4
   \      0x17E   0xB29B             UXTH     R3,R3
   \      0x180   0xEBB7 0x020A      SUBS     R2,R7,R10
   \      0x184   0xB212             SXTH     R2,R2
   \      0x186   0xEB1B 0x0106      ADDS     R1,R11,R6
   \      0x18A   0xB209             SXTH     R1,R1
   \      0x18C   0x0028             MOVS     R0,R5
   \      0x18E   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \      0x192   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x196   0x47E0             BLX      R12
     87              drawPixel(x0 - y, y0 - x, color);
   \      0x198   0x0023             MOVS     R3,R4
   \      0x19A   0xB29B             UXTH     R3,R3
   \      0x19C   0xEBB7 0x020A      SUBS     R2,R7,R10
   \      0x1A0   0xB212             SXTH     R2,R2
   \      0x1A2   0xEBB6 0x010B      SUBS     R1,R6,R11
   \      0x1A6   0xB209             SXTH     R1,R1
   \      0x1A8   0x0028             MOVS     R0,R5
   \      0x1AA   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \      0x1AE   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x1B2   0x47E0             BLX      R12
   \      0x1B4   0xE772             B.N      ??drawCircle_0
     88            }
     89          }
   \                     ??drawCircle_1: (+1)
   \      0x1B6   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}
     90          

   \                                 In section .text, align 2, keep-with-next
     91          void Adafruit_GFX::drawCircleHelper( int16_t x0, int16_t y0,
     92                         int16_t r, uint8_t cornername, uint16_t color) {
   \                     _ZN12Adafruit_GFX16drawCircleHelperEsssht: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   \        0xA   0x9C0D             LDR      R4,[SP, #+52]
     93            int16_t f     = 1 - r;
   \        0xC   0xF8BD 0x8008      LDRH     R8,[SP, #+8]
   \       0x10   0xF1D8 0x0801      RSBS     R8,R8,#+1
     94            int16_t ddF_x = 1;
   \       0x14   0xF05F 0x0901      MOVS     R9,#+1
     95            int16_t ddF_y = -2 * r;
   \       0x18   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \       0x1C   0x0040             LSLS     R0,R0,#+1
   \       0x1E   0x4240             RSBS     R0,R0,#+0
   \       0x20   0xF8AD 0x0000      STRH     R0,[SP, #+0]
     96            int16_t x     = 0;
   \       0x24   0xF05F 0x0A00      MOVS     R10,#+0
     97            int16_t y     = r;
   \       0x28   0xF9BD 0xB008      LDRSH    R11,[SP, #+8]
     98          
     99            while (x<y) {
   \                     ??drawCircleHelper_0: (+1)
   \       0x2C   0x4650             MOV      R0,R10
   \       0x2E   0x4659             MOV      R1,R11
   \       0x30   0xB200             SXTH     R0,R0
   \       0x32   0xB209             SXTH     R1,R1
   \       0x34   0x4288             CMP      R0,R1
   \       0x36   0xF280 0x8097      BGE.W    ??drawCircleHelper_1
    100              if (f >= 0) {
   \       0x3A   0x4640             MOV      R0,R8
   \       0x3C   0xB200             SXTH     R0,R0
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD40A             BMI.N    ??drawCircleHelper_2
    101                y--;
   \       0x42   0xF1BB 0x0B01      SUBS     R11,R11,#+1
    102                ddF_y += 2;
   \       0x46   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \       0x4A   0x1C80             ADDS     R0,R0,#+2
   \       0x4C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    103                f     += ddF_y;
   \       0x50   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \       0x54   0xEB10 0x0808      ADDS     R8,R0,R8
    104              }
    105              x++;
   \                     ??drawCircleHelper_2: (+1)
   \       0x58   0xF11A 0x0A01      ADDS     R10,R10,#+1
    106              ddF_x += 2;
   \       0x5C   0xF119 0x0902      ADDS     R9,R9,#+2
    107              f     += ddF_x;
   \       0x60   0xEB19 0x0808      ADDS     R8,R9,R8
    108              if (cornername & 0x4) {
   \       0x64   0xF89D 0x0030      LDRB     R0,[SP, #+48]
   \       0x68   0x0740             LSLS     R0,R0,#+29
   \       0x6A   0xD51B             BPL.N    ??drawCircleHelper_3
    109                drawPixel(x0 + x, y0 + y, color);
   \       0x6C   0x0023             MOVS     R3,R4
   \       0x6E   0xB29B             UXTH     R3,R3
   \       0x70   0xEB1B 0x0207      ADDS     R2,R11,R7
   \       0x74   0xB212             SXTH     R2,R2
   \       0x76   0xEB1A 0x0106      ADDS     R1,R10,R6
   \       0x7A   0xB209             SXTH     R1,R1
   \       0x7C   0x0028             MOVS     R0,R5
   \       0x7E   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x82   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0x86   0x47E0             BLX      R12
    110                drawPixel(x0 + y, y0 + x, color);
   \       0x88   0x0023             MOVS     R3,R4
   \       0x8A   0xB29B             UXTH     R3,R3
   \       0x8C   0xEB1A 0x0207      ADDS     R2,R10,R7
   \       0x90   0xB212             SXTH     R2,R2
   \       0x92   0xEB1B 0x0106      ADDS     R1,R11,R6
   \       0x96   0xB209             SXTH     R1,R1
   \       0x98   0x0028             MOVS     R0,R5
   \       0x9A   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x9E   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0xA2   0x47E0             BLX      R12
    111              } 
    112              if (cornername & 0x2) {
   \                     ??drawCircleHelper_3: (+1)
   \       0xA4   0xF89D 0x0030      LDRB     R0,[SP, #+48]
   \       0xA8   0x0780             LSLS     R0,R0,#+30
   \       0xAA   0xD51B             BPL.N    ??drawCircleHelper_4
    113                drawPixel(x0 + x, y0 - y, color);
   \       0xAC   0x0023             MOVS     R3,R4
   \       0xAE   0xB29B             UXTH     R3,R3
   \       0xB0   0xEBB7 0x020B      SUBS     R2,R7,R11
   \       0xB4   0xB212             SXTH     R2,R2
   \       0xB6   0xEB1A 0x0106      ADDS     R1,R10,R6
   \       0xBA   0xB209             SXTH     R1,R1
   \       0xBC   0x0028             MOVS     R0,R5
   \       0xBE   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0xC2   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0xC6   0x47E0             BLX      R12
    114                drawPixel(x0 + y, y0 - x, color);
   \       0xC8   0x0023             MOVS     R3,R4
   \       0xCA   0xB29B             UXTH     R3,R3
   \       0xCC   0xEBB7 0x020A      SUBS     R2,R7,R10
   \       0xD0   0xB212             SXTH     R2,R2
   \       0xD2   0xEB1B 0x0106      ADDS     R1,R11,R6
   \       0xD6   0xB209             SXTH     R1,R1
   \       0xD8   0x0028             MOVS     R0,R5
   \       0xDA   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0xDE   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0xE2   0x47E0             BLX      R12
    115              }
    116              if (cornername & 0x8) {
   \                     ??drawCircleHelper_4: (+1)
   \       0xE4   0xF89D 0x0030      LDRB     R0,[SP, #+48]
   \       0xE8   0x0700             LSLS     R0,R0,#+28
   \       0xEA   0xD51B             BPL.N    ??drawCircleHelper_5
    117                drawPixel(x0 - y, y0 + x, color);
   \       0xEC   0x0023             MOVS     R3,R4
   \       0xEE   0xB29B             UXTH     R3,R3
   \       0xF0   0xEB1A 0x0207      ADDS     R2,R10,R7
   \       0xF4   0xB212             SXTH     R2,R2
   \       0xF6   0xEBB6 0x010B      SUBS     R1,R6,R11
   \       0xFA   0xB209             SXTH     R1,R1
   \       0xFC   0x0028             MOVS     R0,R5
   \       0xFE   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \      0x102   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x106   0x47E0             BLX      R12
    118                drawPixel(x0 - x, y0 + y, color);
   \      0x108   0x0023             MOVS     R3,R4
   \      0x10A   0xB29B             UXTH     R3,R3
   \      0x10C   0xEB1B 0x0207      ADDS     R2,R11,R7
   \      0x110   0xB212             SXTH     R2,R2
   \      0x112   0xEBB6 0x010A      SUBS     R1,R6,R10
   \      0x116   0xB209             SXTH     R1,R1
   \      0x118   0x0028             MOVS     R0,R5
   \      0x11A   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \      0x11E   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x122   0x47E0             BLX      R12
    119              }
    120              if (cornername & 0x1) {
   \                     ??drawCircleHelper_5: (+1)
   \      0x124   0xF89D 0x0030      LDRB     R0,[SP, #+48]
   \      0x128   0x07C0             LSLS     R0,R0,#+31
   \      0x12A   0xF57F 0xAF7F      BPL.W    ??drawCircleHelper_0
    121                drawPixel(x0 - y, y0 - x, color);
   \      0x12E   0x0023             MOVS     R3,R4
   \      0x130   0xB29B             UXTH     R3,R3
   \      0x132   0xEBB7 0x020A      SUBS     R2,R7,R10
   \      0x136   0xB212             SXTH     R2,R2
   \      0x138   0xEBB6 0x010B      SUBS     R1,R6,R11
   \      0x13C   0xB209             SXTH     R1,R1
   \      0x13E   0x0028             MOVS     R0,R5
   \      0x140   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \      0x144   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x148   0x47E0             BLX      R12
    122                drawPixel(x0 - x, y0 - y, color);
   \      0x14A   0x0023             MOVS     R3,R4
   \      0x14C   0xB29B             UXTH     R3,R3
   \      0x14E   0xEBB7 0x020B      SUBS     R2,R7,R11
   \      0x152   0xB212             SXTH     R2,R2
   \      0x154   0xEBB6 0x010A      SUBS     R1,R6,R10
   \      0x158   0xB209             SXTH     R1,R1
   \      0x15A   0x0028             MOVS     R0,R5
   \      0x15C   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \      0x160   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x164   0x47E0             BLX      R12
   \      0x166   0xE761             B.N      ??drawCircleHelper_0
    123              }
    124            }
    125          }
   \                     ??drawCircleHelper_1: (+1)
   \      0x168   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}
    126          

   \                                 In section .text, align 2, keep-with-next
    127          void Adafruit_GFX::fillCircle(int16_t x0, int16_t y0, int16_t r,
    128          			      uint16_t color) {
   \                     _ZN12Adafruit_GFX10fillCircleEssst: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   \        0xA   0x4698             MOV      R8,R3
   \        0xC   0x9C0A             LDR      R4,[SP, #+40]
    129            drawFastVLine(x0, y0-r, 2*r+1, color);
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0xB280             UXTH     R0,R0
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0x4643             MOV      R3,R8
   \       0x16   0xB21B             SXTH     R3,R3
   \       0x18   0x005B             LSLS     R3,R3,#+1
   \       0x1A   0x1C5B             ADDS     R3,R3,#+1
   \       0x1C   0xB21B             SXTH     R3,R3
   \       0x1E   0xEBB7 0x0208      SUBS     R2,R7,R8
   \       0x22   0xB212             SXTH     R2,R2
   \       0x24   0x0031             MOVS     R1,R6
   \       0x26   0xB209             SXTH     R1,R1
   \       0x28   0x0028             MOVS     R0,R5
   \       0x2A   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x2E   0xF8DC 0xC008      LDR      R12,[R12, #+8]
   \       0x32   0x47E0             BLX      R12
    130            fillCircleHelper(x0, y0, r, 3, 0, color);
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0xB280             UXTH     R0,R0
   \       0x38   0x9002             STR      R0,[SP, #+8]
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0x9001             STR      R0,[SP, #+4]
   \       0x3E   0x2003             MOVS     R0,#+3
   \       0x40   0x9000             STR      R0,[SP, #+0]
   \       0x42   0x4643             MOV      R3,R8
   \       0x44   0xB21B             SXTH     R3,R3
   \       0x46   0x003A             MOVS     R2,R7
   \       0x48   0xB212             SXTH     R2,R2
   \       0x4A   0x0031             MOVS     R1,R6
   \       0x4C   0xB209             SXTH     R1,R1
   \       0x4E   0x0028             MOVS     R0,R5
   \       0x50   0x.... 0x....      BL       _ZN12Adafruit_GFX16fillCircleHelperEssshst
    131          }
   \       0x54   0xE8BD 0x81FF      POP      {R0-R8,PC}
    132          
    133          // Used to do circles and roundrects

   \                                 In section .text, align 2, keep-with-next
    134          void Adafruit_GFX::fillCircleHelper(int16_t x0, int16_t y0, int16_t r,
    135              uint8_t cornername, int16_t delta, uint16_t color) {
   \                     _ZN12Adafruit_GFX16fillCircleHelperEssshst: (+1)
   \        0x0   0xE92D 0x4FFF      PUSH     {R0-R11,LR}
   \        0x4   0xB081             SUB      SP,SP,#+4
   \        0x6   0x0005             MOVS     R5,R0
   \        0x8   0xF9BD 0x603C      LDRSH    R6,[SP, #+60]
   \        0xC   0x9C10             LDR      R4,[SP, #+64]
    136          
    137            int16_t f     = 1 - r;
   \        0xE   0xF8BD 0x7010      LDRH     R7,[SP, #+16]
   \       0x12   0xF1D7 0x0701      RSBS     R7,R7,#+1
    138            int16_t ddF_x = 1;
   \       0x16   0xF05F 0x0801      MOVS     R8,#+1
    139            int16_t ddF_y = -2 * r;
   \       0x1A   0xF8BD 0x9010      LDRH     R9,[SP, #+16]
   \       0x1E   0xEA5F 0x0949      LSLS     R9,R9,#+1
   \       0x22   0xF1D9 0x0900      RSBS     R9,R9,#+0
    140            int16_t x     = 0;
   \       0x26   0xF05F 0x0B00      MOVS     R11,#+0
    141            int16_t y     = r;
   \       0x2A   0xF9BD 0xA010      LDRSH    R10,[SP, #+16]
    142          
    143            while (x<y) {
   \                     ??fillCircleHelper_0: (+1)
   \       0x2E   0x4658             MOV      R0,R11
   \       0x30   0x4651             MOV      R1,R10
   \       0x32   0xB200             SXTH     R0,R0
   \       0x34   0xB209             SXTH     R1,R1
   \       0x36   0x4288             CMP      R0,R1
   \       0x38   0xDA74             BGE.N    ??fillCircleHelper_1
    144              if (f >= 0) {
   \       0x3A   0x0038             MOVS     R0,R7
   \       0x3C   0xB200             SXTH     R0,R0
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD405             BMI.N    ??fillCircleHelper_2
    145                y--;
   \       0x42   0xF1BA 0x0A01      SUBS     R10,R10,#+1
    146                ddF_y += 2;
   \       0x46   0xF119 0x0902      ADDS     R9,R9,#+2
    147                f     += ddF_y;
   \       0x4A   0xEB19 0x0707      ADDS     R7,R9,R7
    148              }
    149              x++;
   \                     ??fillCircleHelper_2: (+1)
   \       0x4E   0xF11B 0x0B01      ADDS     R11,R11,#+1
    150              ddF_x += 2;
   \       0x52   0xF118 0x0802      ADDS     R8,R8,#+2
    151              f     += ddF_x;
   \       0x56   0xEB18 0x0707      ADDS     R7,R8,R7
    152          
    153              if (cornername & 0x1) {
   \       0x5A   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \       0x5E   0x07C0             LSLS     R0,R0,#+31
   \       0x60   0xD52D             BPL.N    ??fillCircleHelper_3
    154                drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
   \       0x62   0x0020             MOVS     R0,R4
   \       0x64   0xB280             UXTH     R0,R0
   \       0x66   0x9000             STR      R0,[SP, #+0]
   \       0x68   0xEB16 0x034A      ADDS     R3,R6,R10, LSL #+1
   \       0x6C   0x1C5B             ADDS     R3,R3,#+1
   \       0x6E   0xB21B             SXTH     R3,R3
   \       0x70   0xF8BD 0x200C      LDRH     R2,[SP, #+12]
   \       0x74   0xEBB2 0x020A      SUBS     R2,R2,R10
   \       0x78   0xB212             SXTH     R2,R2
   \       0x7A   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \       0x7E   0xEB1B 0x0101      ADDS     R1,R11,R1
   \       0x82   0xB209             SXTH     R1,R1
   \       0x84   0x0028             MOVS     R0,R5
   \       0x86   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x8A   0xF8DC 0xC008      LDR      R12,[R12, #+8]
   \       0x8E   0x47E0             BLX      R12
    155                drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
   \       0x90   0x0020             MOVS     R0,R4
   \       0x92   0xB280             UXTH     R0,R0
   \       0x94   0x9000             STR      R0,[SP, #+0]
   \       0x96   0xEB16 0x034B      ADDS     R3,R6,R11, LSL #+1
   \       0x9A   0x1C5B             ADDS     R3,R3,#+1
   \       0x9C   0xB21B             SXTH     R3,R3
   \       0x9E   0xF8BD 0x200C      LDRH     R2,[SP, #+12]
   \       0xA2   0xEBB2 0x020B      SUBS     R2,R2,R11
   \       0xA6   0xB212             SXTH     R2,R2
   \       0xA8   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \       0xAC   0xEB1A 0x0101      ADDS     R1,R10,R1
   \       0xB0   0xB209             SXTH     R1,R1
   \       0xB2   0x0028             MOVS     R0,R5
   \       0xB4   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0xB8   0xF8DC 0xC008      LDR      R12,[R12, #+8]
   \       0xBC   0x47E0             BLX      R12
    156              }
    157              if (cornername & 0x2) {
   \                     ??fillCircleHelper_3: (+1)
   \       0xBE   0xF89D 0x0038      LDRB     R0,[SP, #+56]
   \       0xC2   0x0780             LSLS     R0,R0,#+30
   \       0xC4   0xD5B3             BPL.N    ??fillCircleHelper_0
    158                drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
   \       0xC6   0x0020             MOVS     R0,R4
   \       0xC8   0xB280             UXTH     R0,R0
   \       0xCA   0x9000             STR      R0,[SP, #+0]
   \       0xCC   0xEB16 0x034A      ADDS     R3,R6,R10, LSL #+1
   \       0xD0   0x1C5B             ADDS     R3,R3,#+1
   \       0xD2   0xB21B             SXTH     R3,R3
   \       0xD4   0xF8BD 0x200C      LDRH     R2,[SP, #+12]
   \       0xD8   0xEBB2 0x020A      SUBS     R2,R2,R10
   \       0xDC   0xB212             SXTH     R2,R2
   \       0xDE   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \       0xE2   0xEBB1 0x010B      SUBS     R1,R1,R11
   \       0xE6   0xB209             SXTH     R1,R1
   \       0xE8   0x0028             MOVS     R0,R5
   \       0xEA   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0xEE   0xF8DC 0xC008      LDR      R12,[R12, #+8]
   \       0xF2   0x47E0             BLX      R12
    159                drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
   \       0xF4   0x0020             MOVS     R0,R4
   \       0xF6   0xB280             UXTH     R0,R0
   \       0xF8   0x9000             STR      R0,[SP, #+0]
   \       0xFA   0xEB16 0x034B      ADDS     R3,R6,R11, LSL #+1
   \       0xFE   0x1C5B             ADDS     R3,R3,#+1
   \      0x100   0xB21B             SXTH     R3,R3
   \      0x102   0xF8BD 0x200C      LDRH     R2,[SP, #+12]
   \      0x106   0xEBB2 0x020B      SUBS     R2,R2,R11
   \      0x10A   0xB212             SXTH     R2,R2
   \      0x10C   0xF8BD 0x1008      LDRH     R1,[SP, #+8]
   \      0x110   0xEBB1 0x010A      SUBS     R1,R1,R10
   \      0x114   0xB209             SXTH     R1,R1
   \      0x116   0x0028             MOVS     R0,R5
   \      0x118   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \      0x11C   0xF8DC 0xC008      LDR      R12,[R12, #+8]
   \      0x120   0x47E0             BLX      R12
   \      0x122   0xE784             B.N      ??fillCircleHelper_0
    160              }
    161            }
    162          }
   \                     ??fillCircleHelper_1: (+1)
   \      0x124   0xB005             ADD      SP,SP,#+20
   \      0x126   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    163          
    164          // Bresenham's algorithm - thx wikpedia

   \                                 In section .text, align 2, keep-with-next
    165          void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
    166          			    int16_t x1, int16_t y1,
    167          			    uint16_t color) {
   \                     _ZN12Adafruit_GFX8drawLineEsssst: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   \        0xA   0x4698             MOV      R8,R3
   \        0xC   0xF9BD 0x9030      LDRSH    R9,[SP, #+48]
   \       0x10   0x9C0D             LDR      R4,[SP, #+52]
    168            int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   \       0x12   0x4640             MOV      R0,R8
   \       0x14   0xB200             SXTH     R0,R0
   \       0x16   0x0031             MOVS     R1,R6
   \       0x18   0xB209             SXTH     R1,R1
   \       0x1A   0x1A40             SUBS     R0,R0,R1
   \       0x1C   0x.... 0x....      BL       abs
   \       0x20   0x4682             MOV      R10,R0
   \       0x22   0x4648             MOV      R0,R9
   \       0x24   0xB200             SXTH     R0,R0
   \       0x26   0x0039             MOVS     R1,R7
   \       0x28   0xB209             SXTH     R1,R1
   \       0x2A   0x1A40             SUBS     R0,R0,R1
   \       0x2C   0x.... 0x....      BL       abs
   \       0x30   0x4582             CMP      R10,R0
   \       0x32   0xDA01             BGE.N    ??drawLine_0
   \       0x34   0x2001             MOVS     R0,#+1
   \       0x36   0xE000             B.N      ??drawLine_1
   \                     ??drawLine_0: (+1)
   \       0x38   0x2000             MOVS     R0,#+0
   \                     ??drawLine_1: (+1)
   \       0x3A   0xB2C0             UXTB     R0,R0
   \       0x3C   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    169            int16_t dx, dy;
    170            int16_t err;
    171            int16_t ystep;
    172          
    173            if (steep) {
   \       0x40   0xF9BD 0x0002      LDRSH    R0,[SP, #+2]
   \       0x44   0x2800             CMP      R0,#+0
   \       0x46   0xD005             BEQ.N    ??drawLine_2
    174              swap(x0, y0);
   \       0x48   0x0030             MOVS     R0,R6
   \       0x4A   0x003E             MOVS     R6,R7
   \       0x4C   0x0007             MOVS     R7,R0
    175              swap(x1, y1);
   \       0x4E   0x4640             MOV      R0,R8
   \       0x50   0x46C8             MOV      R8,R9
   \       0x52   0x4681             MOV      R9,R0
    176            }
    177          
    178            if (x0 > x1) {
   \                     ??drawLine_2: (+1)
   \       0x54   0x4640             MOV      R0,R8
   \       0x56   0x0031             MOVS     R1,R6
   \       0x58   0xB200             SXTH     R0,R0
   \       0x5A   0xB209             SXTH     R1,R1
   \       0x5C   0x4288             CMP      R0,R1
   \       0x5E   0xDA05             BGE.N    ??drawLine_3
    179              swap(x0, x1);
   \       0x60   0x0030             MOVS     R0,R6
   \       0x62   0x4646             MOV      R6,R8
   \       0x64   0x4680             MOV      R8,R0
    180              swap(y0, y1);
   \       0x66   0x0038             MOVS     R0,R7
   \       0x68   0x464F             MOV      R7,R9
   \       0x6A   0x4681             MOV      R9,R0
    181            }
    182          
    183          
    184            dx = x1 - x0;
   \                     ??drawLine_3: (+1)
   \       0x6C   0xEBB8 0x0006      SUBS     R0,R8,R6
   \       0x70   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    185            dy = abs(y1 - y0);
   \       0x74   0x4648             MOV      R0,R9
   \       0x76   0xB200             SXTH     R0,R0
   \       0x78   0x0039             MOVS     R1,R7
   \       0x7A   0xB209             SXTH     R1,R1
   \       0x7C   0x1A40             SUBS     R0,R0,R1
   \       0x7E   0x.... 0x....      BL       abs
   \       0x82   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    186          
    187            err = dx / 2;
   \       0x86   0xF9BD 0x0000      LDRSH    R0,[SP, #+0]
   \       0x8A   0x2102             MOVS     R1,#+2
   \       0x8C   0xFB90 0xFAF1      SDIV     R10,R0,R1
    188            
    189          
    190            if (y0 < y1) {
   \       0x90   0x0038             MOVS     R0,R7
   \       0x92   0x4649             MOV      R1,R9
   \       0x94   0xB200             SXTH     R0,R0
   \       0x96   0xB209             SXTH     R1,R1
   \       0x98   0x4288             CMP      R0,R1
   \       0x9A   0xDA02             BGE.N    ??drawLine_4
    191              ystep = 1;
   \       0x9C   0xF05F 0x0B01      MOVS     R11,#+1
   \       0xA0   0xE001             B.N      ??drawLine_5
    192            } else {
    193              ystep = -1;
   \                     ??drawLine_4: (+1)
   \       0xA2   0xF05F 0x3BFF      MOVS     R11,#+4294967295
    194            }
    195          
    196            for (; x0<=x1; x0++) {
   \                     ??drawLine_5: (+1)
   \       0xA6   0x4640             MOV      R0,R8
   \       0xA8   0x0031             MOVS     R1,R6
   \       0xAA   0xB200             SXTH     R0,R0
   \       0xAC   0xB209             SXTH     R1,R1
   \       0xAE   0x4288             CMP      R0,R1
   \       0xB0   0xDB2C             BLT.N    ??drawLine_6
    197              if (steep) {
   \       0xB2   0xF9BD 0x0002      LDRSH    R0,[SP, #+2]
   \       0xB6   0x2800             CMP      R0,#+0
   \       0xB8   0xD00C             BEQ.N    ??drawLine_7
    198                drawPixel(y0, x0, color);
   \       0xBA   0x0023             MOVS     R3,R4
   \       0xBC   0xB29B             UXTH     R3,R3
   \       0xBE   0x0032             MOVS     R2,R6
   \       0xC0   0xB212             SXTH     R2,R2
   \       0xC2   0x0039             MOVS     R1,R7
   \       0xC4   0xB209             SXTH     R1,R1
   \       0xC6   0x0028             MOVS     R0,R5
   \       0xC8   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0xCC   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0xD0   0x47E0             BLX      R12
   \       0xD2   0xE00B             B.N      ??drawLine_8
    199              } else {
    200                drawPixel(x0, y0, color);
   \                     ??drawLine_7: (+1)
   \       0xD4   0x0023             MOVS     R3,R4
   \       0xD6   0xB29B             UXTH     R3,R3
   \       0xD8   0x003A             MOVS     R2,R7
   \       0xDA   0xB212             SXTH     R2,R2
   \       0xDC   0x0031             MOVS     R1,R6
   \       0xDE   0xB209             SXTH     R1,R1
   \       0xE0   0x0028             MOVS     R0,R5
   \       0xE2   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0xE6   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0xEA   0x47E0             BLX      R12
    201              }
    202              err -= dy;
   \                     ??drawLine_8: (+1)
   \       0xEC   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \       0xF0   0xEBBA 0x0A00      SUBS     R10,R10,R0
    203              if (err < 0) {
   \       0xF4   0x4650             MOV      R0,R10
   \       0xF6   0xB200             SXTH     R0,R0
   \       0xF8   0x2800             CMP      R0,#+0
   \       0xFA   0xD505             BPL.N    ??drawLine_9
    204                y0 += ystep;
   \       0xFC   0xEB1B 0x0707      ADDS     R7,R11,R7
    205                err += dx;
   \      0x100   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \      0x104   0xEB10 0x0A0A      ADDS     R10,R0,R10
    206              }
    207            }
   \                     ??drawLine_9: (+1)
   \      0x108   0x1C76             ADDS     R6,R6,#+1
   \      0x10A   0xE7CC             B.N      ??drawLine_5
    208          }
   \                     ??drawLine_6: (+1)
   \      0x10C   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}
    209          
    210          // Draw a rectangle

   \                                 In section .text, align 2, keep-with-next
    211          void Adafruit_GFX::drawRect(int16_t x, int16_t y,
    212          			    int16_t w, int16_t h,
    213          			    uint16_t color) {
   \                     _ZN12Adafruit_GFX8drawRectEsssst: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   \        0xA   0x4698             MOV      R8,R3
   \        0xC   0xF9BD 0x9020      LDRSH    R9,[SP, #+32]
   \       0x10   0x9C09             LDR      R4,[SP, #+36]
    214            drawFastHLine(x, y, w, color);
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0xB280             UXTH     R0,R0
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0x4643             MOV      R3,R8
   \       0x1A   0xB21B             SXTH     R3,R3
   \       0x1C   0x003A             MOVS     R2,R7
   \       0x1E   0xB212             SXTH     R2,R2
   \       0x20   0x0031             MOVS     R1,R6
   \       0x22   0xB209             SXTH     R1,R1
   \       0x24   0x0028             MOVS     R0,R5
   \       0x26   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x2A   0xF8DC 0xC00C      LDR      R12,[R12, #+12]
   \       0x2E   0x47E0             BLX      R12
    215            drawFastHLine(x, y+h-1, w, color);
   \       0x30   0x0020             MOVS     R0,R4
   \       0x32   0xB280             UXTH     R0,R0
   \       0x34   0x9000             STR      R0,[SP, #+0]
   \       0x36   0x4643             MOV      R3,R8
   \       0x38   0xB21B             SXTH     R3,R3
   \       0x3A   0xEB19 0x0007      ADDS     R0,R9,R7
   \       0x3E   0x1E42             SUBS     R2,R0,#+1
   \       0x40   0xB212             SXTH     R2,R2
   \       0x42   0x0031             MOVS     R1,R6
   \       0x44   0xB209             SXTH     R1,R1
   \       0x46   0x0028             MOVS     R0,R5
   \       0x48   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x4C   0xF8DC 0xC00C      LDR      R12,[R12, #+12]
   \       0x50   0x47E0             BLX      R12
    216            drawFastVLine(x, y, h, color);
   \       0x52   0x0020             MOVS     R0,R4
   \       0x54   0xB280             UXTH     R0,R0
   \       0x56   0x9000             STR      R0,[SP, #+0]
   \       0x58   0x464B             MOV      R3,R9
   \       0x5A   0xB21B             SXTH     R3,R3
   \       0x5C   0x003A             MOVS     R2,R7
   \       0x5E   0xB212             SXTH     R2,R2
   \       0x60   0x0031             MOVS     R1,R6
   \       0x62   0xB209             SXTH     R1,R1
   \       0x64   0x0028             MOVS     R0,R5
   \       0x66   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x6A   0xF8DC 0xC008      LDR      R12,[R12, #+8]
   \       0x6E   0x47E0             BLX      R12
    217            drawFastVLine(x+w-1, y, h, color);
   \       0x70   0x0020             MOVS     R0,R4
   \       0x72   0xB280             UXTH     R0,R0
   \       0x74   0x9000             STR      R0,[SP, #+0]
   \       0x76   0x464B             MOV      R3,R9
   \       0x78   0xB21B             SXTH     R3,R3
   \       0x7A   0x003A             MOVS     R2,R7
   \       0x7C   0xB212             SXTH     R2,R2
   \       0x7E   0xEB18 0x0006      ADDS     R0,R8,R6
   \       0x82   0x1E41             SUBS     R1,R0,#+1
   \       0x84   0xB209             SXTH     R1,R1
   \       0x86   0x0028             MOVS     R0,R5
   \       0x88   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x8C   0xF8DC 0xC008      LDR      R12,[R12, #+8]
   \       0x90   0x47E0             BLX      R12
    218          }
   \       0x92   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}
    219          

   \                                 In section .text, align 2, keep-with-next
    220          void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
    221          				 int16_t h, uint16_t color) {
   \                     _ZN12Adafruit_GFX13drawFastVLineEssst: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
   \        0x8   0x001F             MOVS     R7,R3
    222            // Update in subclasses if desired!
    223            drawLine(x, y, x, y+h-1, color);
   \        0xA   0xF8BD 0x0020      LDRH     R0,[SP, #+32]
   \        0xE   0x9001             STR      R0,[SP, #+4]
   \       0x10   0x19B8             ADDS     R0,R7,R6
   \       0x12   0x1E40             SUBS     R0,R0,#+1
   \       0x14   0xB200             SXTH     R0,R0
   \       0x16   0x9000             STR      R0,[SP, #+0]
   \       0x18   0x002B             MOVS     R3,R5
   \       0x1A   0xB21B             SXTH     R3,R3
   \       0x1C   0x0032             MOVS     R2,R6
   \       0x1E   0xB212             SXTH     R2,R2
   \       0x20   0x0029             MOVS     R1,R5
   \       0x22   0xB209             SXTH     R1,R1
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0xF8D4 0xC000      LDR      R12,[R4, #+0]
   \       0x2A   0xF8DC 0xC004      LDR      R12,[R12, #+4]
   \       0x2E   0x47E0             BLX      R12
    224          }
   \       0x30   0xBDF7             POP      {R0-R2,R4-R7,PC}
    225          

   \                                 In section .text, align 2, keep-with-next
    226          void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
    227          				 int16_t w, uint16_t color) {
   \                     _ZN12Adafruit_GFX13drawFastHLineEssst: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
   \        0x8   0x001F             MOVS     R7,R3
    228            // Update in subclasses if desired!
    229            drawLine(x, y, x+w-1, y, color);
   \        0xA   0xF8BD 0x0020      LDRH     R0,[SP, #+32]
   \        0xE   0x9001             STR      R0,[SP, #+4]
   \       0x10   0x0030             MOVS     R0,R6
   \       0x12   0xB200             SXTH     R0,R0
   \       0x14   0x9000             STR      R0,[SP, #+0]
   \       0x16   0x1978             ADDS     R0,R7,R5
   \       0x18   0x1E43             SUBS     R3,R0,#+1
   \       0x1A   0xB21B             SXTH     R3,R3
   \       0x1C   0x0032             MOVS     R2,R6
   \       0x1E   0xB212             SXTH     R2,R2
   \       0x20   0x0029             MOVS     R1,R5
   \       0x22   0xB209             SXTH     R1,R1
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0xF8D4 0xC000      LDR      R12,[R4, #+0]
   \       0x2A   0xF8DC 0xC004      LDR      R12,[R12, #+4]
   \       0x2E   0x47E0             BLX      R12
    230          }
   \       0x30   0xBDF7             POP      {R0-R2,R4-R7,PC}
    231          

   \                                 In section .text, align 2, keep-with-next
    232          void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
    233          			    uint16_t color) {
   \                     _ZN12Adafruit_GFX8fillRectEsssst: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
   \        0xC   0xF9BD 0x8020      LDRSH    R8,[SP, #+32]
    234            // Update in subclasses if desired!
    235            for (int16_t i=x; i<x+w; i++) {
   \       0x10   0x46A9             MOV      R9,R5
   \                     ??fillRect_0: (+1)
   \       0x12   0x4648             MOV      R0,R9
   \       0x14   0xB200             SXTH     R0,R0
   \       0x16   0x0039             MOVS     R1,R7
   \       0x18   0xB209             SXTH     R1,R1
   \       0x1A   0xFA01 0xF185      SXTAH    R1,R1,R5
   \       0x1E   0x4288             CMP      R0,R1
   \       0x20   0xDA11             BGE.N    ??fillRect_1
    236              drawFastVLine(i, y, h, color);
   \       0x22   0xF8BD 0x0024      LDRH     R0,[SP, #+36]
   \       0x26   0x9000             STR      R0,[SP, #+0]
   \       0x28   0x4643             MOV      R3,R8
   \       0x2A   0xB21B             SXTH     R3,R3
   \       0x2C   0x0032             MOVS     R2,R6
   \       0x2E   0xB212             SXTH     R2,R2
   \       0x30   0x4649             MOV      R1,R9
   \       0x32   0xB209             SXTH     R1,R1
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0xF8D4 0xC000      LDR      R12,[R4, #+0]
   \       0x3A   0xF8DC 0xC008      LDR      R12,[R12, #+8]
   \       0x3E   0x47E0             BLX      R12
    237            }
   \       0x40   0xF119 0x0901      ADDS     R9,R9,#+1
   \       0x44   0xE7E5             B.N      ??fillRect_0
    238          }
   \                     ??fillRect_1: (+1)
   \       0x46   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}
    239          

   \                                 In section .text, align 2, keep-with-next
    240          void Adafruit_GFX::fillScreen(uint16_t color) {
   \                     _ZN12Adafruit_GFX10fillScreenEt: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    241            fillRect(0, 0, _width, _height, color);
   \        0x6   0x0028             MOVS     R0,R5
   \        0x8   0xB280             UXTH     R0,R0
   \        0xA   0x9001             STR      R0,[SP, #+4]
   \        0xC   0xF9B4 0x000A      LDRSH    R0,[R4, #+10]
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0xF9B4 0x3008      LDRSH    R3,[R4, #+8]
   \       0x16   0x2200             MOVS     R2,#+0
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x6826             LDR      R6,[R4, #+0]
   \       0x1E   0x6976             LDR      R6,[R6, #+20]
   \       0x20   0x47B0             BLX      R6
    242          }
   \       0x22   0xBD73             POP      {R0,R1,R4-R6,PC}
    243          
    244          // Draw a rounded rectangle

   \                                 In section .text, align 2, keep-with-next
    245          void Adafruit_GFX::drawRoundRect(int16_t x, int16_t y, int16_t w,
    246            int16_t h, int16_t r, uint16_t color) {
   \                     _ZN12Adafruit_GFX13drawRoundRectEssssst: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   \        0xA   0x4698             MOV      R8,R3
   \        0xC   0xF9BD 0x9028      LDRSH    R9,[SP, #+40]
   \       0x10   0xF9BD 0xA02C      LDRSH    R10,[SP, #+44]
   \       0x14   0x9C0C             LDR      R4,[SP, #+48]
    247            // smarter version
    248            drawFastHLine(x+r  , y    , w-2*r, color); // Top
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0xB280             UXTH     R0,R0
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0x4643             MOV      R3,R8
   \       0x1E   0xB21B             SXTH     R3,R3
   \       0x20   0x4650             MOV      R0,R10
   \       0x22   0xB200             SXTH     R0,R0
   \       0x24   0xEBB3 0x0340      SUBS     R3,R3,R0, LSL #+1
   \       0x28   0xB21B             SXTH     R3,R3
   \       0x2A   0x003A             MOVS     R2,R7
   \       0x2C   0xB212             SXTH     R2,R2
   \       0x2E   0xEB1A 0x0106      ADDS     R1,R10,R6
   \       0x32   0xB209             SXTH     R1,R1
   \       0x34   0x0028             MOVS     R0,R5
   \       0x36   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x3A   0xF8DC 0xC00C      LDR      R12,[R12, #+12]
   \       0x3E   0x47E0             BLX      R12
    249            drawFastHLine(x+r  , y+h-1, w-2*r, color); // Bottom
   \       0x40   0x0020             MOVS     R0,R4
   \       0x42   0xB280             UXTH     R0,R0
   \       0x44   0x9000             STR      R0,[SP, #+0]
   \       0x46   0x4643             MOV      R3,R8
   \       0x48   0xB21B             SXTH     R3,R3
   \       0x4A   0x4650             MOV      R0,R10
   \       0x4C   0xB200             SXTH     R0,R0
   \       0x4E   0xEBB3 0x0340      SUBS     R3,R3,R0, LSL #+1
   \       0x52   0xB21B             SXTH     R3,R3
   \       0x54   0xEB19 0x0007      ADDS     R0,R9,R7
   \       0x58   0x1E42             SUBS     R2,R0,#+1
   \       0x5A   0xB212             SXTH     R2,R2
   \       0x5C   0xEB1A 0x0106      ADDS     R1,R10,R6
   \       0x60   0xB209             SXTH     R1,R1
   \       0x62   0x0028             MOVS     R0,R5
   \       0x64   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x68   0xF8DC 0xC00C      LDR      R12,[R12, #+12]
   \       0x6C   0x47E0             BLX      R12
    250            drawFastVLine(x    , y+r  , h-2*r, color); // Left
   \       0x6E   0x0020             MOVS     R0,R4
   \       0x70   0xB280             UXTH     R0,R0
   \       0x72   0x9000             STR      R0,[SP, #+0]
   \       0x74   0x464B             MOV      R3,R9
   \       0x76   0xB21B             SXTH     R3,R3
   \       0x78   0x4650             MOV      R0,R10
   \       0x7A   0xB200             SXTH     R0,R0
   \       0x7C   0xEBB3 0x0340      SUBS     R3,R3,R0, LSL #+1
   \       0x80   0xB21B             SXTH     R3,R3
   \       0x82   0xEB1A 0x0207      ADDS     R2,R10,R7
   \       0x86   0xB212             SXTH     R2,R2
   \       0x88   0x0031             MOVS     R1,R6
   \       0x8A   0xB209             SXTH     R1,R1
   \       0x8C   0x0028             MOVS     R0,R5
   \       0x8E   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x92   0xF8DC 0xC008      LDR      R12,[R12, #+8]
   \       0x96   0x47E0             BLX      R12
    251            drawFastVLine(x+w-1, y+r  , h-2*r, color); // Right
   \       0x98   0x0020             MOVS     R0,R4
   \       0x9A   0xB280             UXTH     R0,R0
   \       0x9C   0x9000             STR      R0,[SP, #+0]
   \       0x9E   0x464B             MOV      R3,R9
   \       0xA0   0xB21B             SXTH     R3,R3
   \       0xA2   0x4650             MOV      R0,R10
   \       0xA4   0xB200             SXTH     R0,R0
   \       0xA6   0xEBB3 0x0340      SUBS     R3,R3,R0, LSL #+1
   \       0xAA   0xB21B             SXTH     R3,R3
   \       0xAC   0xEB1A 0x0207      ADDS     R2,R10,R7
   \       0xB0   0xB212             SXTH     R2,R2
   \       0xB2   0xEB18 0x0006      ADDS     R0,R8,R6
   \       0xB6   0x1E41             SUBS     R1,R0,#+1
   \       0xB8   0xB209             SXTH     R1,R1
   \       0xBA   0x0028             MOVS     R0,R5
   \       0xBC   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0xC0   0xF8DC 0xC008      LDR      R12,[R12, #+8]
   \       0xC4   0x47E0             BLX      R12
    252            // draw four corners
    253            drawCircleHelper(x+r    , y+r    , r, 1, color);
   \       0xC6   0x0020             MOVS     R0,R4
   \       0xC8   0xB280             UXTH     R0,R0
   \       0xCA   0x9001             STR      R0,[SP, #+4]
   \       0xCC   0x2001             MOVS     R0,#+1
   \       0xCE   0x9000             STR      R0,[SP, #+0]
   \       0xD0   0x4653             MOV      R3,R10
   \       0xD2   0xB21B             SXTH     R3,R3
   \       0xD4   0xEB1A 0x0207      ADDS     R2,R10,R7
   \       0xD8   0xB212             SXTH     R2,R2
   \       0xDA   0xEB1A 0x0106      ADDS     R1,R10,R6
   \       0xDE   0xB209             SXTH     R1,R1
   \       0xE0   0x0028             MOVS     R0,R5
   \       0xE2   0x.... 0x....      BL       _ZN12Adafruit_GFX16drawCircleHelperEsssht
    254            drawCircleHelper(x+w-r-1, y+r    , r, 2, color);
   \       0xE6   0x0020             MOVS     R0,R4
   \       0xE8   0xB280             UXTH     R0,R0
   \       0xEA   0x9001             STR      R0,[SP, #+4]
   \       0xEC   0x2002             MOVS     R0,#+2
   \       0xEE   0x9000             STR      R0,[SP, #+0]
   \       0xF0   0x4653             MOV      R3,R10
   \       0xF2   0xB21B             SXTH     R3,R3
   \       0xF4   0xEB1A 0x0207      ADDS     R2,R10,R7
   \       0xF8   0xB212             SXTH     R2,R2
   \       0xFA   0xEB18 0x0006      ADDS     R0,R8,R6
   \       0xFE   0xEBB0 0x000A      SUBS     R0,R0,R10
   \      0x102   0x1E41             SUBS     R1,R0,#+1
   \      0x104   0xB209             SXTH     R1,R1
   \      0x106   0x0028             MOVS     R0,R5
   \      0x108   0x.... 0x....      BL       _ZN12Adafruit_GFX16drawCircleHelperEsssht
    255            drawCircleHelper(x+w-r-1, y+h-r-1, r, 4, color);
   \      0x10C   0x0020             MOVS     R0,R4
   \      0x10E   0xB280             UXTH     R0,R0
   \      0x110   0x9001             STR      R0,[SP, #+4]
   \      0x112   0x2004             MOVS     R0,#+4
   \      0x114   0x9000             STR      R0,[SP, #+0]
   \      0x116   0x4653             MOV      R3,R10
   \      0x118   0xB21B             SXTH     R3,R3
   \      0x11A   0xEB19 0x0007      ADDS     R0,R9,R7
   \      0x11E   0xEBB0 0x000A      SUBS     R0,R0,R10
   \      0x122   0x1E42             SUBS     R2,R0,#+1
   \      0x124   0xB212             SXTH     R2,R2
   \      0x126   0xEB18 0x0006      ADDS     R0,R8,R6
   \      0x12A   0xEBB0 0x000A      SUBS     R0,R0,R10
   \      0x12E   0x1E41             SUBS     R1,R0,#+1
   \      0x130   0xB209             SXTH     R1,R1
   \      0x132   0x0028             MOVS     R0,R5
   \      0x134   0x.... 0x....      BL       _ZN12Adafruit_GFX16drawCircleHelperEsssht
    256            drawCircleHelper(x+r    , y+h-r-1, r, 8, color);
   \      0x138   0x0020             MOVS     R0,R4
   \      0x13A   0xB280             UXTH     R0,R0
   \      0x13C   0x9001             STR      R0,[SP, #+4]
   \      0x13E   0x2008             MOVS     R0,#+8
   \      0x140   0x9000             STR      R0,[SP, #+0]
   \      0x142   0x4653             MOV      R3,R10
   \      0x144   0xB21B             SXTH     R3,R3
   \      0x146   0xEB19 0x0007      ADDS     R0,R9,R7
   \      0x14A   0xEBB0 0x000A      SUBS     R0,R0,R10
   \      0x14E   0x1E42             SUBS     R2,R0,#+1
   \      0x150   0xB212             SXTH     R2,R2
   \      0x152   0xEB1A 0x0106      ADDS     R1,R10,R6
   \      0x156   0xB209             SXTH     R1,R1
   \      0x158   0x0028             MOVS     R0,R5
   \      0x15A   0x.... 0x....      BL       _ZN12Adafruit_GFX16drawCircleHelperEsssht
    257          }
   \      0x15E   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}
    258          
    259          // Fill a rounded rectangle

   \                                 In section .text, align 2, keep-with-next
    260          void Adafruit_GFX::fillRoundRect(int16_t x, int16_t y, int16_t w,
    261          				 int16_t h, int16_t r, uint16_t color) {
   \                     _ZN12Adafruit_GFX13fillRoundRectEssssst: (+1)
   \        0x0   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   \        0xA   0x4698             MOV      R8,R3
   \        0xC   0xF9BD 0xA030      LDRSH    R10,[SP, #+48]
   \       0x10   0xF9BD 0x9034      LDRSH    R9,[SP, #+52]
   \       0x14   0x9C0E             LDR      R4,[SP, #+56]
    262            // smarter version
    263            fillRect(x+r, y, w-2*r, h, color);
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0xB280             UXTH     R0,R0
   \       0x1A   0x9001             STR      R0,[SP, #+4]
   \       0x1C   0x4650             MOV      R0,R10
   \       0x1E   0xB200             SXTH     R0,R0
   \       0x20   0x9000             STR      R0,[SP, #+0]
   \       0x22   0x4643             MOV      R3,R8
   \       0x24   0xB21B             SXTH     R3,R3
   \       0x26   0x4648             MOV      R0,R9
   \       0x28   0xB200             SXTH     R0,R0
   \       0x2A   0xEBB3 0x0340      SUBS     R3,R3,R0, LSL #+1
   \       0x2E   0xB21B             SXTH     R3,R3
   \       0x30   0x003A             MOVS     R2,R7
   \       0x32   0xB212             SXTH     R2,R2
   \       0x34   0xEB19 0x0106      ADDS     R1,R9,R6
   \       0x38   0xB209             SXTH     R1,R1
   \       0x3A   0x0028             MOVS     R0,R5
   \       0x3C   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x40   0xF8DC 0xC014      LDR      R12,[R12, #+20]
   \       0x44   0x47E0             BLX      R12
    264          
    265            // draw four corners
    266            fillCircleHelper(x+w-r-1, y+r, r, 1, h-2*r-1, color);
   \       0x46   0x0020             MOVS     R0,R4
   \       0x48   0xB280             UXTH     R0,R0
   \       0x4A   0x9002             STR      R0,[SP, #+8]
   \       0x4C   0xEBBA 0x0049      SUBS     R0,R10,R9, LSL #+1
   \       0x50   0x1E40             SUBS     R0,R0,#+1
   \       0x52   0xB200             SXTH     R0,R0
   \       0x54   0x9001             STR      R0,[SP, #+4]
   \       0x56   0x2001             MOVS     R0,#+1
   \       0x58   0x9000             STR      R0,[SP, #+0]
   \       0x5A   0x464B             MOV      R3,R9
   \       0x5C   0xB21B             SXTH     R3,R3
   \       0x5E   0xEB19 0x0207      ADDS     R2,R9,R7
   \       0x62   0xB212             SXTH     R2,R2
   \       0x64   0xEB18 0x0006      ADDS     R0,R8,R6
   \       0x68   0xEBB0 0x0009      SUBS     R0,R0,R9
   \       0x6C   0x1E41             SUBS     R1,R0,#+1
   \       0x6E   0xB209             SXTH     R1,R1
   \       0x70   0x0028             MOVS     R0,R5
   \       0x72   0x.... 0x....      BL       _ZN12Adafruit_GFX16fillCircleHelperEssshst
    267            fillCircleHelper(x+r    , y+r, r, 2, h-2*r-1, color);
   \       0x76   0x0020             MOVS     R0,R4
   \       0x78   0xB280             UXTH     R0,R0
   \       0x7A   0x9002             STR      R0,[SP, #+8]
   \       0x7C   0xEBBA 0x0049      SUBS     R0,R10,R9, LSL #+1
   \       0x80   0x1E40             SUBS     R0,R0,#+1
   \       0x82   0xB200             SXTH     R0,R0
   \       0x84   0x9001             STR      R0,[SP, #+4]
   \       0x86   0x2002             MOVS     R0,#+2
   \       0x88   0x9000             STR      R0,[SP, #+0]
   \       0x8A   0x464B             MOV      R3,R9
   \       0x8C   0xB21B             SXTH     R3,R3
   \       0x8E   0xEB19 0x0207      ADDS     R2,R9,R7
   \       0x92   0xB212             SXTH     R2,R2
   \       0x94   0xEB19 0x0106      ADDS     R1,R9,R6
   \       0x98   0xB209             SXTH     R1,R1
   \       0x9A   0x0028             MOVS     R0,R5
   \       0x9C   0x.... 0x....      BL       _ZN12Adafruit_GFX16fillCircleHelperEssshst
    268          }
   \       0xA0   0xE8BD 0x87FF      POP      {R0-R10,PC}
    269          
    270          // Draw a triangle

   \                                 In section .text, align 2, keep-with-next
    271          void Adafruit_GFX::drawTriangle(int16_t x0, int16_t y0,
    272          				int16_t x1, int16_t y1,
    273          				int16_t x2, int16_t y2, uint16_t color) {
   \                     _ZN12Adafruit_GFX12drawTriangleEsssssst: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   \        0xA   0x4698             MOV      R8,R3
   \        0xC   0xF9BD 0x9030      LDRSH    R9,[SP, #+48]
   \       0x10   0xF9BD 0xA034      LDRSH    R10,[SP, #+52]
   \       0x14   0xF9BD 0xB038      LDRSH    R11,[SP, #+56]
   \       0x18   0x9C0F             LDR      R4,[SP, #+60]
    274            drawLine(x0, y0, x1, y1, color);
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0xB280             UXTH     R0,R0
   \       0x1E   0x9001             STR      R0,[SP, #+4]
   \       0x20   0x4648             MOV      R0,R9
   \       0x22   0xB200             SXTH     R0,R0
   \       0x24   0x9000             STR      R0,[SP, #+0]
   \       0x26   0x4643             MOV      R3,R8
   \       0x28   0xB21B             SXTH     R3,R3
   \       0x2A   0x003A             MOVS     R2,R7
   \       0x2C   0xB212             SXTH     R2,R2
   \       0x2E   0x0031             MOVS     R1,R6
   \       0x30   0xB209             SXTH     R1,R1
   \       0x32   0x0028             MOVS     R0,R5
   \       0x34   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x38   0xF8DC 0xC004      LDR      R12,[R12, #+4]
   \       0x3C   0x47E0             BLX      R12
    275            drawLine(x1, y1, x2, y2, color);
   \       0x3E   0x0020             MOVS     R0,R4
   \       0x40   0xB280             UXTH     R0,R0
   \       0x42   0x9001             STR      R0,[SP, #+4]
   \       0x44   0x4658             MOV      R0,R11
   \       0x46   0xB200             SXTH     R0,R0
   \       0x48   0x9000             STR      R0,[SP, #+0]
   \       0x4A   0x4653             MOV      R3,R10
   \       0x4C   0xB21B             SXTH     R3,R3
   \       0x4E   0x464A             MOV      R2,R9
   \       0x50   0xB212             SXTH     R2,R2
   \       0x52   0x4641             MOV      R1,R8
   \       0x54   0xB209             SXTH     R1,R1
   \       0x56   0x0028             MOVS     R0,R5
   \       0x58   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x5C   0xF8DC 0xC004      LDR      R12,[R12, #+4]
   \       0x60   0x47E0             BLX      R12
    276            drawLine(x2, y2, x0, y0, color);
   \       0x62   0x0020             MOVS     R0,R4
   \       0x64   0xB280             UXTH     R0,R0
   \       0x66   0x9001             STR      R0,[SP, #+4]
   \       0x68   0x0038             MOVS     R0,R7
   \       0x6A   0xB200             SXTH     R0,R0
   \       0x6C   0x9000             STR      R0,[SP, #+0]
   \       0x6E   0x0033             MOVS     R3,R6
   \       0x70   0xB21B             SXTH     R3,R3
   \       0x72   0x465A             MOV      R2,R11
   \       0x74   0xB212             SXTH     R2,R2
   \       0x76   0x4651             MOV      R1,R10
   \       0x78   0xB209             SXTH     R1,R1
   \       0x7A   0x0028             MOVS     R0,R5
   \       0x7C   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x80   0xF8DC 0xC004      LDR      R12,[R12, #+4]
   \       0x84   0x47E0             BLX      R12
    277          }
   \       0x86   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}
    278          
    279          // Fill a triangle

   \                                 In section .text, align 2, keep-with-next
    280          void Adafruit_GFX::fillTriangle ( int16_t x0, int16_t y0,
    281          				  int16_t x1, int16_t y1,
    282          				  int16_t x2, int16_t y2, uint16_t color) {
   \                     _ZN12Adafruit_GFX12fillTriangleEsssssst: (+1)
   \        0x0   0xE92D 0x4FF7      PUSH     {R0-R2,R4-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x001C             MOVS     R4,R3
   \        0x8   0xF9BD 0x5048      LDRSH    R5,[SP, #+72]
    283          
    284            int16_t a, b, y, last;
    285          
    286            // Sort coordinates by Y order (y2 >= y1 >= y0)
    287            if (y0 > y1) {
   \        0xC   0x0028             MOVS     R0,R5
   \        0xE   0xF9BD 0x1020      LDRSH    R1,[SP, #+32]
   \       0x12   0xB200             SXTH     R0,R0
   \       0x14   0x4288             CMP      R0,R1
   \       0x16   0xDA09             BGE.N    ??fillTriangle_0
    288              swap(y0, y1); swap(x0, x1);
   \       0x18   0xF9BD 0x0020      LDRSH    R0,[SP, #+32]
   \       0x1C   0xF8AD 0x5020      STRH     R5,[SP, #+32]
   \       0x20   0x0005             MOVS     R5,R0
   \       0x22   0xF9BD 0x001C      LDRSH    R0,[SP, #+28]
   \       0x26   0xF8AD 0x401C      STRH     R4,[SP, #+28]
   \       0x2A   0x0004             MOVS     R4,R0
    289            }
    290            if (y1 > y2) {
   \                     ??fillTriangle_0: (+1)
   \       0x2C   0xF9BD 0x0050      LDRSH    R0,[SP, #+80]
   \       0x30   0x0029             MOVS     R1,R5
   \       0x32   0xB209             SXTH     R1,R1
   \       0x34   0x4288             CMP      R0,R1
   \       0x36   0xDA09             BGE.N    ??fillTriangle_1
    291              swap(y2, y1); swap(x2, x1);
   \       0x38   0xF9BD 0x0050      LDRSH    R0,[SP, #+80]
   \       0x3C   0xF8AD 0x5050      STRH     R5,[SP, #+80]
   \       0x40   0x0005             MOVS     R5,R0
   \       0x42   0xF9BD 0x004C      LDRSH    R0,[SP, #+76]
   \       0x46   0xF8AD 0x404C      STRH     R4,[SP, #+76]
   \       0x4A   0x0004             MOVS     R4,R0
    292            }
    293            if (y0 > y1) {
   \                     ??fillTriangle_1: (+1)
   \       0x4C   0x0028             MOVS     R0,R5
   \       0x4E   0xF9BD 0x1020      LDRSH    R1,[SP, #+32]
   \       0x52   0xB200             SXTH     R0,R0
   \       0x54   0x4288             CMP      R0,R1
   \       0x56   0xDA09             BGE.N    ??fillTriangle_2
    294              swap(y0, y1); swap(x0, x1);
   \       0x58   0xF9BD 0x0020      LDRSH    R0,[SP, #+32]
   \       0x5C   0xF8AD 0x5020      STRH     R5,[SP, #+32]
   \       0x60   0x0005             MOVS     R5,R0
   \       0x62   0xF9BD 0x001C      LDRSH    R0,[SP, #+28]
   \       0x66   0xF8AD 0x401C      STRH     R4,[SP, #+28]
   \       0x6A   0x0004             MOVS     R4,R0
    295            }
    296          
    297            if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
   \                     ??fillTriangle_2: (+1)
   \       0x6C   0xF9BD 0x0020      LDRSH    R0,[SP, #+32]
   \       0x70   0xF9BD 0x1050      LDRSH    R1,[SP, #+80]
   \       0x74   0x4288             CMP      R0,R1
   \       0x76   0xD135             BNE.N    ??fillTriangle_3
    298              a = b = x0;
   \       0x78   0xF9BD 0x701C      LDRSH    R7,[SP, #+28]
   \       0x7C   0x46B8             MOV      R8,R7
    299              if(x1 < a)      a = x1;
   \       0x7E   0x0020             MOVS     R0,R4
   \       0x80   0x4641             MOV      R1,R8
   \       0x82   0xB200             SXTH     R0,R0
   \       0x84   0xB209             SXTH     R1,R1
   \       0x86   0x4288             CMP      R0,R1
   \       0x88   0xDA01             BGE.N    ??fillTriangle_4
   \       0x8A   0x46A0             MOV      R8,R4
   \       0x8C   0xE006             B.N      ??fillTriangle_5
    300              else if(x1 > b) b = x1;
   \                     ??fillTriangle_4: (+1)
   \       0x8E   0x0038             MOVS     R0,R7
   \       0x90   0x0021             MOVS     R1,R4
   \       0x92   0xB200             SXTH     R0,R0
   \       0x94   0xB209             SXTH     R1,R1
   \       0x96   0x4288             CMP      R0,R1
   \       0x98   0xDA00             BGE.N    ??fillTriangle_5
   \       0x9A   0x0027             MOVS     R7,R4
    301              if(x2 < a)      a = x2;
   \                     ??fillTriangle_5: (+1)
   \       0x9C   0xF9BD 0x004C      LDRSH    R0,[SP, #+76]
   \       0xA0   0x4641             MOV      R1,R8
   \       0xA2   0xB209             SXTH     R1,R1
   \       0xA4   0x4288             CMP      R0,R1
   \       0xA6   0xDA03             BGE.N    ??fillTriangle_6
   \       0xA8   0xF9BD 0x004C      LDRSH    R0,[SP, #+76]
   \       0xAC   0x4680             MOV      R8,R0
   \       0xAE   0xE008             B.N      ??fillTriangle_7
    302              else if(x2 > b) b = x2;
   \                     ??fillTriangle_6: (+1)
   \       0xB0   0x0038             MOVS     R0,R7
   \       0xB2   0xF9BD 0x104C      LDRSH    R1,[SP, #+76]
   \       0xB6   0xB200             SXTH     R0,R0
   \       0xB8   0x4288             CMP      R0,R1
   \       0xBA   0xDA02             BGE.N    ??fillTriangle_7
   \       0xBC   0xF9BD 0x004C      LDRSH    R0,[SP, #+76]
   \       0xC0   0x0007             MOVS     R7,R0
    303              drawFastHLine(a, y0, b-a+1, color);
   \                     ??fillTriangle_7: (+1)
   \       0xC2   0xF8BD 0x0054      LDRH     R0,[SP, #+84]
   \       0xC6   0x9000             STR      R0,[SP, #+0]
   \       0xC8   0xEBB7 0x0308      SUBS     R3,R7,R8
   \       0xCC   0x1C5B             ADDS     R3,R3,#+1
   \       0xCE   0xB21B             SXTH     R3,R3
   \       0xD0   0xF9BD 0x2020      LDRSH    R2,[SP, #+32]
   \       0xD4   0x4641             MOV      R1,R8
   \       0xD6   0xB209             SXTH     R1,R1
   \       0xD8   0x9806             LDR      R0,[SP, #+24]
   \       0xDA   0x9E06             LDR      R6,[SP, #+24]
   \       0xDC   0x6836             LDR      R6,[R6, #+0]
   \       0xDE   0x68F6             LDR      R6,[R6, #+12]
   \       0xE0   0x47B0             BLX      R6
    304              return;
   \       0xE2   0xE0C5             B.N      ??fillTriangle_8
    305            }
    306          
    307            int16_t
    308              dx01 = x1 - x0,
   \                     ??fillTriangle_3: (+1)
   \       0xE4   0xF8BD 0x001C      LDRH     R0,[SP, #+28]
   \       0xE8   0x1A20             SUBS     R0,R4,R0
   \       0xEA   0xF8AD 0x0012      STRH     R0,[SP, #+18]
    309              dy01 = y1 - y0,
   \       0xEE   0xF8BD 0x0020      LDRH     R0,[SP, #+32]
   \       0xF2   0x1A28             SUBS     R0,R5,R0
   \       0xF4   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    310              dx02 = x2 - x0,
   \       0xF8   0xF8BD 0x104C      LDRH     R1,[SP, #+76]
   \       0xFC   0xF8BD 0x001C      LDRH     R0,[SP, #+28]
   \      0x100   0x1A09             SUBS     R1,R1,R0
   \      0x102   0xF8AD 0x1006      STRH     R1,[SP, #+6]
    311              dy02 = y2 - y0,
   \      0x106   0xF8BD 0x1050      LDRH     R1,[SP, #+80]
   \      0x10A   0xF8BD 0x0020      LDRH     R0,[SP, #+32]
   \      0x10E   0x1A09             SUBS     R1,R1,R0
   \      0x110   0xF8AD 0x100A      STRH     R1,[SP, #+10]
    312              dx12 = x2 - x1,
   \      0x114   0xF8BD 0x004C      LDRH     R0,[SP, #+76]
   \      0x118   0x1B00             SUBS     R0,R0,R4
   \      0x11A   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    313              dy12 = y2 - y1;
   \      0x11E   0xF8BD 0x0050      LDRH     R0,[SP, #+80]
   \      0x122   0x1B40             SUBS     R0,R0,R5
   \      0x124   0xF8AD 0x000E      STRH     R0,[SP, #+14]
    314            int32_t
    315              sa   = 0,
   \      0x128   0xF05F 0x0A00      MOVS     R10,#+0
    316              sb   = 0;
   \      0x12C   0xF05F 0x0B00      MOVS     R11,#+0
    317          
    318            // For upper part of triangle, find scanline crossings for segments
    319            // 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
    320            // is included here (and second loop will be skipped, avoiding a /0
    321            // error there), otherwise scanline y1 is skipped here and handled
    322            // in the second loop...which also avoids a /0 error here if y0=y1
    323            // (flat-topped triangle).
    324            if(y1 == y2) last = y1;   // Include y1 scanline
   \      0x130   0x0028             MOVS     R0,R5
   \      0x132   0xF9BD 0x1050      LDRSH    R1,[SP, #+80]
   \      0x136   0xB200             SXTH     R0,R0
   \      0x138   0x4288             CMP      R0,R1
   \      0x13A   0xD102             BNE.N    ??fillTriangle_9
   \      0x13C   0xF8AD 0x500C      STRH     R5,[SP, #+12]
   \      0x140   0xE002             B.N      ??fillTriangle_10
    325            else         last = y1-1; // Skip it
   \                     ??fillTriangle_9: (+1)
   \      0x142   0x1E68             SUBS     R0,R5,#+1
   \      0x144   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    326          
    327            for(y=y0; y<=last; y++) {
   \                     ??fillTriangle_10: (+1)
   \      0x148   0xF9BD 0x7020      LDRSH    R7,[SP, #+32]
   \                     ??fillTriangle_11: (+1)
   \      0x14C   0xF9BD 0x000C      LDRSH    R0,[SP, #+12]
   \      0x150   0x0039             MOVS     R1,R7
   \      0x152   0xB209             SXTH     R1,R1
   \      0x154   0x4288             CMP      R0,R1
   \      0x156   0xDB3A             BLT.N    ??fillTriangle_12
    328              a   = x0 + sa / dy01;
   \      0x158   0xF8BD 0x101C      LDRH     R1,[SP, #+28]
   \      0x15C   0xF9BD 0x0010      LDRSH    R0,[SP, #+16]
   \      0x160   0xFB9A 0xF0F0      SDIV     R0,R10,R0
   \      0x164   0x1841             ADDS     R1,R0,R1
   \      0x166   0x000E             MOVS     R6,R1
    329              b   = x0 + sb / dy02;
   \      0x168   0xF8BD 0x101C      LDRH     R1,[SP, #+28]
   \      0x16C   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \      0x170   0xFB9B 0xF0F0      SDIV     R0,R11,R0
   \      0x174   0x1841             ADDS     R1,R0,R1
   \      0x176   0xF8AD 0x1004      STRH     R1,[SP, #+4]
    330              sa += dx01;
   \      0x17A   0xF9BD 0x0012      LDRSH    R0,[SP, #+18]
   \      0x17E   0xFA0A 0xFA80      SXTAH    R10,R10,R0
    331              sb += dx02;
   \      0x182   0xF9BD 0x0006      LDRSH    R0,[SP, #+6]
   \      0x186   0xFA0B 0xFB80      SXTAH    R11,R11,R0
    332              /* longhand:
    333              a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
    334              b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    335              */
    336              if(a > b) swap(a,b);
   \      0x18A   0xF9BD 0x0004      LDRSH    R0,[SP, #+4]
   \      0x18E   0x0031             MOVS     R1,R6
   \      0x190   0xB209             SXTH     R1,R1
   \      0x192   0x4288             CMP      R0,R1
   \      0x194   0xDA05             BGE.N    ??fillTriangle_13
   \      0x196   0x0030             MOVS     R0,R6
   \      0x198   0xF9BD 0x1004      LDRSH    R1,[SP, #+4]
   \      0x19C   0x000E             MOVS     R6,R1
   \      0x19E   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    337              drawFastHLine(a, y, b-a+1, color);
   \                     ??fillTriangle_13: (+1)
   \      0x1A2   0xF8BD 0x0054      LDRH     R0,[SP, #+84]
   \      0x1A6   0x9000             STR      R0,[SP, #+0]
   \      0x1A8   0xF8BD 0x3004      LDRH     R3,[SP, #+4]
   \      0x1AC   0x1B9B             SUBS     R3,R3,R6
   \      0x1AE   0x1C5B             ADDS     R3,R3,#+1
   \      0x1B0   0xB21B             SXTH     R3,R3
   \      0x1B2   0x003A             MOVS     R2,R7
   \      0x1B4   0xB212             SXTH     R2,R2
   \      0x1B6   0x0031             MOVS     R1,R6
   \      0x1B8   0xB209             SXTH     R1,R1
   \      0x1BA   0x9806             LDR      R0,[SP, #+24]
   \      0x1BC   0xF8DD 0xC018      LDR      R12,[SP, #+24]
   \      0x1C0   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x1C4   0xF8DC 0xC00C      LDR      R12,[R12, #+12]
   \      0x1C8   0x47E0             BLX      R12
    338            }
   \      0x1CA   0x1C7F             ADDS     R7,R7,#+1
   \      0x1CC   0xE7BE             B.N      ??fillTriangle_11
    339          
    340            // For lower part of triangle, find scanline crossings for segments
    341            // 0-2 and 1-2.  This loop is skipped if y1=y2.
    342            sa = dx12 * (y - y1);
   \                     ??fillTriangle_12: (+1)
   \      0x1CE   0xF9BD 0x8008      LDRSH    R8,[SP, #+8]
   \      0x1D2   0x0039             MOVS     R1,R7
   \      0x1D4   0xB209             SXTH     R1,R1
   \      0x1D6   0x0028             MOVS     R0,R5
   \      0x1D8   0xB200             SXTH     R0,R0
   \      0x1DA   0x1A09             SUBS     R1,R1,R0
   \      0x1DC   0xFB01 0xF808      MUL      R8,R1,R8
    343            sb = dx02 * (y - y0);
   \      0x1E0   0xF9BD 0x9006      LDRSH    R9,[SP, #+6]
   \      0x1E4   0x0039             MOVS     R1,R7
   \      0x1E6   0xB209             SXTH     R1,R1
   \      0x1E8   0xF9BD 0x0020      LDRSH    R0,[SP, #+32]
   \      0x1EC   0x1A09             SUBS     R1,R1,R0
   \      0x1EE   0xFB01 0xF909      MUL      R9,R1,R9
    344            for(; y<=y2; y++) {
   \                     ??fillTriangle_14: (+1)
   \      0x1F2   0xF9BD 0x0050      LDRSH    R0,[SP, #+80]
   \      0x1F6   0x0039             MOVS     R1,R7
   \      0x1F8   0xB209             SXTH     R1,R1
   \      0x1FA   0x4288             CMP      R0,R1
   \      0x1FC   0xDB38             BLT.N    ??fillTriangle_15
    345              a   = x1 + sa / dy12;
   \      0x1FE   0xF9BD 0x000E      LDRSH    R0,[SP, #+14]
   \      0x202   0xFB98 0xF0F0      SDIV     R0,R8,R0
   \      0x206   0x1900             ADDS     R0,R0,R4
   \      0x208   0x0006             MOVS     R6,R0
    346              b   = x0 + sb / dy02;
   \      0x20A   0xF8BD 0x101C      LDRH     R1,[SP, #+28]
   \      0x20E   0xF9BD 0x000A      LDRSH    R0,[SP, #+10]
   \      0x212   0xFB99 0xF0F0      SDIV     R0,R9,R0
   \      0x216   0x1841             ADDS     R1,R0,R1
   \      0x218   0xF8AD 0x1004      STRH     R1,[SP, #+4]
    347              sa += dx12;
   \      0x21C   0xF9BD 0x0008      LDRSH    R0,[SP, #+8]
   \      0x220   0xFA08 0xF880      SXTAH    R8,R8,R0
    348              sb += dx02;
   \      0x224   0xF9BD 0x0006      LDRSH    R0,[SP, #+6]
   \      0x228   0xFA09 0xF980      SXTAH    R9,R9,R0
    349              /* longhand:
    350              a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
    351              b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
    352              */
    353              if(a > b) swap(a,b);
   \      0x22C   0xF9BD 0x0004      LDRSH    R0,[SP, #+4]
   \      0x230   0x0031             MOVS     R1,R6
   \      0x232   0xB209             SXTH     R1,R1
   \      0x234   0x4288             CMP      R0,R1
   \      0x236   0xDA05             BGE.N    ??fillTriangle_16
   \      0x238   0x0030             MOVS     R0,R6
   \      0x23A   0xF9BD 0x1004      LDRSH    R1,[SP, #+4]
   \      0x23E   0x000E             MOVS     R6,R1
   \      0x240   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    354              drawFastHLine(a, y, b-a+1, color);
   \                     ??fillTriangle_16: (+1)
   \      0x244   0xF8BD 0x0054      LDRH     R0,[SP, #+84]
   \      0x248   0x9000             STR      R0,[SP, #+0]
   \      0x24A   0xF8BD 0x3004      LDRH     R3,[SP, #+4]
   \      0x24E   0x1B9B             SUBS     R3,R3,R6
   \      0x250   0x1C5B             ADDS     R3,R3,#+1
   \      0x252   0xB21B             SXTH     R3,R3
   \      0x254   0x003A             MOVS     R2,R7
   \      0x256   0xB212             SXTH     R2,R2
   \      0x258   0x0031             MOVS     R1,R6
   \      0x25A   0xB209             SXTH     R1,R1
   \      0x25C   0x9806             LDR      R0,[SP, #+24]
   \      0x25E   0xF8DD 0xC018      LDR      R12,[SP, #+24]
   \      0x262   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x266   0xF8DC 0xC00C      LDR      R12,[R12, #+12]
   \      0x26A   0x47E0             BLX      R12
    355            }
   \      0x26C   0x1C7F             ADDS     R7,R7,#+1
   \      0x26E   0xE7C0             B.N      ??fillTriangle_14
    356          }
   \                     ??fillTriangle_15: (+1)
   \                     ??fillTriangle_8: (+1)
   \      0x270   0xB009             ADD      SP,SP,#+36
   \      0x272   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    357          

   \                                 In section .text, align 2, keep-with-next
    358          void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
    359          			      const uint8_t *bitmap, int16_t w, int16_t h,
    360          			      uint16_t color) {
   \                     _ZN12Adafruit_GFX10drawBitmapEssPKhsst: (+1)
   \        0x0   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x4693             MOV      R11,R2
   \        0x8   0x001E             MOVS     R6,R3
   \        0xA   0xF9BD 0x7028      LDRSH    R7,[SP, #+40]
   \        0xE   0x9C0C             LDR      R4,[SP, #+48]
    361          
    362            int16_t i, j, byteWidth = (w + 7) / 8;
   \       0x10   0x0038             MOVS     R0,R7
   \       0x12   0xB200             SXTH     R0,R0
   \       0x14   0x1DC0             ADDS     R0,R0,#+7
   \       0x16   0x2108             MOVS     R1,#+8
   \       0x18   0xFB90 0xF9F1      SDIV     R9,R0,R1
    363          
    364            for(j=0; j<h; j++) {
   \       0x1C   0xF05F 0x0A00      MOVS     R10,#+0
   \                     ??drawBitmap_0: (+1)
   \       0x20   0x4650             MOV      R0,R10
   \       0x22   0xF9BD 0x102C      LDRSH    R1,[SP, #+44]
   \       0x26   0xB200             SXTH     R0,R0
   \       0x28   0x4288             CMP      R0,R1
   \       0x2A   0xDA2D             BGE.N    ??drawBitmap_1
    365              for(i=0; i<w; i++ ) {
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0x4680             MOV      R8,R0
   \                     ??drawBitmap_2: (+1)
   \       0x30   0x4640             MOV      R0,R8
   \       0x32   0x0039             MOVS     R1,R7
   \       0x34   0xB200             SXTH     R0,R0
   \       0x36   0xB209             SXTH     R1,R1
   \       0x38   0x4288             CMP      R0,R1
   \       0x3A   0xDA22             BGE.N    ??drawBitmap_3
    366                if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   \       0x3C   0x4640             MOV      R0,R8
   \       0x3E   0xB200             SXTH     R0,R0
   \       0x40   0x2108             MOVS     R1,#+8
   \       0x42   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \       0x46   0xFB1A 0xF109      SMULBB   R1,R10,R9
   \       0x4A   0x4431             ADD      R1,R6,R1
   \       0x4C   0x5C08             LDRB     R0,[R1, R0]
   \       0x4E   0x2180             MOVS     R1,#+128
   \       0x50   0xF018 0x0207      ANDS     R2,R8,#0x7
   \       0x54   0xB2C9             UXTB     R1,R1
   \       0x56   0x40D1             LSRS     R1,R1,R2
   \       0x58   0x4208             TST      R0,R1
   \       0x5A   0xD00F             BEQ.N    ??drawBitmap_4
    367                  drawPixel(x+i, y+j, color);
   \       0x5C   0x0023             MOVS     R3,R4
   \       0x5E   0xB29B             UXTH     R3,R3
   \       0x60   0xEB1A 0x020B      ADDS     R2,R10,R11
   \       0x64   0xB212             SXTH     R2,R2
   \       0x66   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \       0x6A   0xEB18 0x0101      ADDS     R1,R8,R1
   \       0x6E   0xB209             SXTH     R1,R1
   \       0x70   0x0028             MOVS     R0,R5
   \       0x72   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x76   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0x7A   0x47E0             BLX      R12
    368                }
    369              }
   \                     ??drawBitmap_4: (+1)
   \       0x7C   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0x80   0xE7D6             B.N      ??drawBitmap_2
    370            }
   \                     ??drawBitmap_3: (+1)
   \       0x82   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \       0x86   0xE7CB             B.N      ??drawBitmap_0
    371          }
   \                     ??drawBitmap_1: (+1)
   \       0x88   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}
    372          
    373          // Draw a 1-bit color bitmap at the specified x, y position from the
    374          // provided bitmap buffer (must be PROGMEM memory) using color as the
    375          // foreground color and bg as the background color.

   \                                 In section .text, align 2, keep-with-next
    376          void Adafruit_GFX::drawBitmap(int16_t x, int16_t y,
    377                      const uint8_t *bitmap, int16_t w, int16_t h,
    378                      uint16_t color, uint16_t bg) {
   \                     _ZN12Adafruit_GFX10drawBitmapEssPKhsstt: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0xF9BD 0x7028      LDRSH    R7,[SP, #+40]
   \        0xE   0xF8DD 0xB034      LDR      R11,[SP, #+52]
    379          
    380            int16_t i, j, byteWidth = (w + 7) / 8;
   \       0x12   0x0038             MOVS     R0,R7
   \       0x14   0xB200             SXTH     R0,R0
   \       0x16   0x1DC0             ADDS     R0,R0,#+7
   \       0x18   0x2108             MOVS     R1,#+8
   \       0x1A   0xFB90 0xF9F1      SDIV     R9,R0,R1
    381            
    382            for(j=0; j<h; j++) {
   \       0x1E   0xF05F 0x0A00      MOVS     R10,#+0
   \                     ??drawBitmap_5: (+1)
   \       0x22   0x4650             MOV      R0,R10
   \       0x24   0xF9BD 0x102C      LDRSH    R1,[SP, #+44]
   \       0x28   0xB200             SXTH     R0,R0
   \       0x2A   0x4288             CMP      R0,R1
   \       0x2C   0xDA3B             BGE.N    ??drawBitmap_6
    383              for(i=0; i<w; i++ ) {
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0x4680             MOV      R8,R0
   \                     ??drawBitmap_7: (+1)
   \       0x32   0x4640             MOV      R0,R8
   \       0x34   0x0039             MOVS     R1,R7
   \       0x36   0xB200             SXTH     R0,R0
   \       0x38   0xB209             SXTH     R1,R1
   \       0x3A   0x4288             CMP      R0,R1
   \       0x3C   0xDA30             BGE.N    ??drawBitmap_8
    384                if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (128 >> (i & 7))) {
   \       0x3E   0x4640             MOV      R0,R8
   \       0x40   0xB200             SXTH     R0,R0
   \       0x42   0x2108             MOVS     R1,#+8
   \       0x44   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \       0x48   0x9900             LDR      R1,[SP, #+0]
   \       0x4A   0xFB1A 0xF209      SMULBB   R2,R10,R9
   \       0x4E   0x4411             ADD      R1,R1,R2
   \       0x50   0x5C08             LDRB     R0,[R1, R0]
   \       0x52   0x2180             MOVS     R1,#+128
   \       0x54   0xF018 0x0207      ANDS     R2,R8,#0x7
   \       0x58   0xB2C9             UXTB     R1,R1
   \       0x5A   0x40D1             LSRS     R1,R1,R2
   \       0x5C   0x4208             TST      R0,R1
   \       0x5E   0xD00E             BEQ.N    ??drawBitmap_9
    385                  drawPixel(x+i, y+j, color);
   \       0x60   0xF8BD 0x3030      LDRH     R3,[SP, #+48]
   \       0x64   0xEB1A 0x0206      ADDS     R2,R10,R6
   \       0x68   0xB212             SXTH     R2,R2
   \       0x6A   0xEB18 0x0105      ADDS     R1,R8,R5
   \       0x6E   0xB209             SXTH     R1,R1
   \       0x70   0x0020             MOVS     R0,R4
   \       0x72   0xF8D4 0xC000      LDR      R12,[R4, #+0]
   \       0x76   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0x7A   0x47E0             BLX      R12
   \       0x7C   0xE00D             B.N      ??drawBitmap_10
    386                }
    387                else {
    388                	drawPixel(x+i, y+j, bg);
   \                     ??drawBitmap_9: (+1)
   \       0x7E   0x465B             MOV      R3,R11
   \       0x80   0xB29B             UXTH     R3,R3
   \       0x82   0xEB1A 0x0206      ADDS     R2,R10,R6
   \       0x86   0xB212             SXTH     R2,R2
   \       0x88   0xEB18 0x0105      ADDS     R1,R8,R5
   \       0x8C   0xB209             SXTH     R1,R1
   \       0x8E   0x0020             MOVS     R0,R4
   \       0x90   0xF8D4 0xC000      LDR      R12,[R4, #+0]
   \       0x94   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0x98   0x47E0             BLX      R12
    389                }
    390              }
   \                     ??drawBitmap_10: (+1)
   \       0x9A   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0x9E   0xE7C8             B.N      ??drawBitmap_7
    391            }
   \                     ??drawBitmap_8: (+1)
   \       0xA0   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \       0xA4   0xE7BD             B.N      ??drawBitmap_5
    392          }
   \                     ??drawBitmap_6: (+1)
   \       0xA6   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}
    393          
    394          
    395          // Draw a 1-bit color Buffer
    396          //      Matrix Type
    397          //	[0][0][0][0][0][0][0]		[0]
    398          //	[1][1][1][1][1][1][1]		[1]
    399          //	[2][2][2][2][2][2][2]	...	[2]
    400          //			...
    401          //	[7][7][7][7][7][7][7]		[7]

   \                                 In section .text, align 2, keep-with-next
    402          void Adafruit_GFX::drawBitBuf( int16_t x, int16_t y,
    403              const uint8_t *bitBuf, int16_t w, int16_t h,
    404              uint16_t color, uint16_t bg )
    405          {
   \                     _ZN12Adafruit_GFX10drawBitBufEssPKhsstt: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \        0x4   0x0006             MOVS     R6,R0
   \        0x6   0x000F             MOVS     R7,R1
   \        0x8   0x4690             MOV      R8,R2
   \        0xA   0xF9BD 0x9030      LDRSH    R9,[SP, #+48]
   \        0xE   0x9C0E             LDR      R4,[SP, #+56]
   \       0x10   0x9D0F             LDR      R5,[SP, #+60]
    406          
    407              int16_t i, j;
    408              int16_t byteWidth = ( w + 7 ) / 8;
                             ^
Warning[Pe177]: variable "byteWidth" was declared but never referenced
   \       0x12   0x4648             MOV      R0,R9
   \       0x14   0xB200             SXTH     R0,R0
   \       0x16   0x1DC0             ADDS     R0,R0,#+7
   \       0x18   0x2108             MOVS     R1,#+8
   \       0x1A   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \       0x1E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    409          
    410              for ( j = 0; j < h; j++ )
   \       0x22   0xF05F 0x0B00      MOVS     R11,#+0
   \                     ??drawBitBuf_0: (+1)
   \       0x26   0x4658             MOV      R0,R11
   \       0x28   0xF9BD 0x1034      LDRSH    R1,[SP, #+52]
   \       0x2C   0xB200             SXTH     R0,R0
   \       0x2E   0x4288             CMP      R0,R1
   \       0x30   0xDA42             BGE.N    ??drawBitBuf_1
    411              {
    412                  for ( i = 0; i < w; i++ )
   \       0x32   0x2000             MOVS     R0,#+0
   \       0x34   0x4682             MOV      R10,R0
   \                     ??drawBitBuf_2: (+1)
   \       0x36   0x4650             MOV      R0,R10
   \       0x38   0x4649             MOV      R1,R9
   \       0x3A   0xB200             SXTH     R0,R0
   \       0x3C   0xB209             SXTH     R1,R1
   \       0x3E   0x4288             CMP      R0,R1
   \       0x40   0xDA37             BGE.N    ??drawBitBuf_3
    413                  {
    414          //            if ( pgm_read_byte( bitBuf + j * byteWidth + i / 8 ) & ( 128 >> ( i & 7 ) ) )
    415                      if ( ( pgm_read_byte( bitBuf + w * (j/8) + i ) >> ( j % 8 ) ) & 0x1 )
   \       0x42   0x4659             MOV      R1,R11
   \       0x44   0xB209             SXTH     R1,R1
   \       0x46   0x2208             MOVS     R2,#+8
   \       0x48   0x464B             MOV      R3,R9
   \       0x4A   0xB21B             SXTH     R3,R3
   \       0x4C   0x4658             MOV      R0,R11
   \       0x4E   0xB200             SXTH     R0,R0
   \       0x50   0xF05F 0x0C08      MOVS     R12,#+8
   \       0x54   0xFB90 0xF0FC      SDIV     R0,R0,R12
   \       0x58   0x4343             MULS     R3,R0,R3
   \       0x5A   0x9802             LDR      R0,[SP, #+8]
   \       0x5C   0x4418             ADD      R0,R0,R3
   \       0x5E   0x4653             MOV      R3,R10
   \       0x60   0xB21B             SXTH     R3,R3
   \       0x62   0x5CC0             LDRB     R0,[R0, R3]
   \       0x64   0xFB91 0xF3F2      SDIV     R3,R1,R2
   \       0x68   0xFB02 0x1113      MLS      R1,R2,R3,R1
   \       0x6C   0x4108             ASRS     R0,R0,R1
   \       0x6E   0x07C0             LSLS     R0,R0,#+31
   \       0x70   0xD50E             BPL.N    ??drawBitBuf_4
    416                      {
    417                          drawPixel( x + i, y + j, color );
   \       0x72   0x0023             MOVS     R3,R4
   \       0x74   0xB29B             UXTH     R3,R3
   \       0x76   0xEB1B 0x0208      ADDS     R2,R11,R8
   \       0x7A   0xB212             SXTH     R2,R2
   \       0x7C   0xEB1A 0x0107      ADDS     R1,R10,R7
   \       0x80   0xB209             SXTH     R1,R1
   \       0x82   0x0030             MOVS     R0,R6
   \       0x84   0xF8D6 0xC000      LDR      R12,[R6, #+0]
   \       0x88   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0x8C   0x47E0             BLX      R12
   \       0x8E   0xE00D             B.N      ??drawBitBuf_5
    418                      }
    419                      else
    420                      {
    421                          drawPixel( x + i, y + j, bg );
   \                     ??drawBitBuf_4: (+1)
   \       0x90   0x002B             MOVS     R3,R5
   \       0x92   0xB29B             UXTH     R3,R3
   \       0x94   0xEB1B 0x0208      ADDS     R2,R11,R8
   \       0x98   0xB212             SXTH     R2,R2
   \       0x9A   0xEB1A 0x0107      ADDS     R1,R10,R7
   \       0x9E   0xB209             SXTH     R1,R1
   \       0xA0   0x0030             MOVS     R0,R6
   \       0xA2   0xF8D6 0xC000      LDR      R12,[R6, #+0]
   \       0xA6   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0xAA   0x47E0             BLX      R12
    422                      }
    423                  }
   \                     ??drawBitBuf_5: (+1)
   \       0xAC   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \       0xB0   0xE7C1             B.N      ??drawBitBuf_2
    424              }
   \                     ??drawBitBuf_3: (+1)
   \       0xB2   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \       0xB6   0xE7B6             B.N      ??drawBitBuf_0
    425          }
   \                     ??drawBitBuf_1: (+1)
   \       0xB8   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}
    426          
    427          //Draw XBitMap Files (*.xbm), exported from GIMP,
    428          //Usage: Export from GIMP to *.xbm, rename *.xbm to *.c and open in editor.
    429          //C Array can be directly used with this function

   \                                 In section .text, align 2, keep-with-next
    430          void Adafruit_GFX::drawXBitmap(int16_t x, int16_t y,
    431                                        const uint8_t *bitmap, int16_t w, int16_t h,
    432                                        uint16_t color) {
   \                     _ZN12Adafruit_GFX11drawXBitmapEssPKhsst: (+1)
   \        0x0   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x4693             MOV      R11,R2
   \        0x8   0x001E             MOVS     R6,R3
   \        0xA   0xF9BD 0x7028      LDRSH    R7,[SP, #+40]
   \        0xE   0x9C0C             LDR      R4,[SP, #+48]
    433            
    434            int16_t i, j, byteWidth = (w + 7) / 8;
   \       0x10   0x0038             MOVS     R0,R7
   \       0x12   0xB200             SXTH     R0,R0
   \       0x14   0x1DC0             ADDS     R0,R0,#+7
   \       0x16   0x2108             MOVS     R1,#+8
   \       0x18   0xFB90 0xF9F1      SDIV     R9,R0,R1
    435            
    436            for(j=0; j<h; j++) {
   \       0x1C   0xF05F 0x0A00      MOVS     R10,#+0
   \                     ??drawXBitmap_0: (+1)
   \       0x20   0x4650             MOV      R0,R10
   \       0x22   0xF9BD 0x102C      LDRSH    R1,[SP, #+44]
   \       0x26   0xB200             SXTH     R0,R0
   \       0x28   0x4288             CMP      R0,R1
   \       0x2A   0xDA32             BGE.N    ??drawXBitmap_1
    437              for(i=0; i<w; i++ ) {
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0x4680             MOV      R8,R0
   \                     ??drawXBitmap_2: (+1)
   \       0x30   0x4640             MOV      R0,R8
   \       0x32   0x0039             MOVS     R1,R7
   \       0x34   0xB200             SXTH     R0,R0
   \       0x36   0xB209             SXTH     R1,R1
   \       0x38   0x4288             CMP      R0,R1
   \       0x3A   0xDA27             BGE.N    ??drawXBitmap_3
    438                if(pgm_read_byte(bitmap + j * byteWidth + i / 8) & (1 << (i % 8))) {
   \       0x3C   0x4641             MOV      R1,R8
   \       0x3E   0xB209             SXTH     R1,R1
   \       0x40   0x2008             MOVS     R0,#+8
   \       0x42   0x4642             MOV      R2,R8
   \       0x44   0xB212             SXTH     R2,R2
   \       0x46   0x2308             MOVS     R3,#+8
   \       0x48   0xFB92 0xF2F3      SDIV     R2,R2,R3
   \       0x4C   0xFB1A 0xF309      SMULBB   R3,R10,R9
   \       0x50   0x4433             ADD      R3,R6,R3
   \       0x52   0x5C9A             LDRB     R2,[R3, R2]
   \       0x54   0x2301             MOVS     R3,#+1
   \       0x56   0xFB91 0xFCF0      SDIV     R12,R1,R0
   \       0x5A   0xFB00 0x111C      MLS      R1,R0,R12,R1
   \       0x5E   0xFA13 0xF101      LSLS     R1,R3,R1
   \       0x62   0x420A             TST      R2,R1
   \       0x64   0xD00F             BEQ.N    ??drawXBitmap_4
    439                  drawPixel(x+i, y+j, color);
   \       0x66   0x0023             MOVS     R3,R4
   \       0x68   0xB29B             UXTH     R3,R3
   \       0x6A   0xEB1A 0x020B      ADDS     R2,R10,R11
   \       0x6E   0xB212             SXTH     R2,R2
   \       0x70   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \       0x74   0xEB18 0x0101      ADDS     R1,R8,R1
   \       0x78   0xB209             SXTH     R1,R1
   \       0x7A   0x0028             MOVS     R0,R5
   \       0x7C   0xF8D5 0xC000      LDR      R12,[R5, #+0]
   \       0x80   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0x84   0x47E0             BLX      R12
    440                }
    441              }
   \                     ??drawXBitmap_4: (+1)
   \       0x86   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0x8A   0xE7D1             B.N      ??drawXBitmap_2
    442            }
   \                     ??drawXBitmap_3: (+1)
   \       0x8C   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \       0x90   0xE7C6             B.N      ??drawXBitmap_0
    443          }
   \                     ??drawXBitmap_1: (+1)
   \       0x92   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}
    444          //
    445          //#if ARDUINO >= 100
    446          //size_t Adafruit_GFX::write(uint8_t c) {
    447          //#else
    448          //void Adafruit_GFX::write(uint8_t c) {
    449          //#endif
    450          //  if (c == '\n') {
    451          //    cursor_y += textsize*8;
    452          //    cursor_x  = 0;
    453          //  } else if (c == '\r') {
    454          //    // skip em
    455          //  } else {
    456          //    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    457          //    cursor_x += textsize*6;
    458          //    if (wrap && (cursor_x > (_width - textsize*6))) {
    459          //      cursor_y += textsize*8;
    460          //      cursor_x = 0;
    461          //    }
    462          //  }
    463          //#if ARDUINO >= 100
    464          //  return 1;
    465          //#endif
    466          //}
    467          
    468          //
    469          //// Draw a character
    470          //void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
    471          //			    uint16_t color, uint16_t bg, uint8_t size) {
    472          //  if((x >= _width)            || // Clip right
    473          //     (y >= _height)           || // Clip bottom
    474          //     ((x + 6 * size - 1) < 0) || // Clip left
    475          //     ((y + 8 * size - 1) < 0))   // Clip top
    476          //    return;
    477          //
    478          //  for (int8_t i=0; i<6; i++ ) {
    479          //    uint8_t line;
    480          //    if (i == 5)
    481          //      line = 0x0;
    482          //    else
    483          //      line = pgm_read_byte(FONT_5x7+(c*5)+i);
    484          //    for (int8_t j = 0; j<8; j++) {
    485          //      if (line & 0x1) {
    486          //        if (size == 1) // default size
    487          //          drawPixel(x+i, y+j, color);
    488          //        else {  // big size
    489          //          fillRect(x+(i*size), y+(j*size), size, size, color);
    490          //        }
    491          //      } else if (bg != color) {
    492          //        if (size == 1) // default size
    493          //          drawPixel(x+i, y+j, bg);
    494          //        else {  // big size
    495          //          fillRect(x+i*size, y+j*size, size, size, bg);
    496          //        }
    497          //      }
    498          //      line >>= 1;
    499          //    }
    500          //  }
    501          //}
    502          

   \                                 In section .text, align 2, keep-with-next
    503          void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
    504            cursor_x = x;
   \                     _ZN12Adafruit_GFX9setCursorEss: (+1)
   \        0x0   0x8181             STRH     R1,[R0, #+12]
    505            cursor_y = y;
   \        0x2   0x81C2             STRH     R2,[R0, #+14]
    506          }
   \        0x4   0x4770             BX       LR
    507          

   \                                 In section .text, align 2, keep-with-next
    508          void Adafruit_GFX::getCursor( int16_t *pX, int16_t *pY ) {
    509              if( pX )     *pX = cursor_x;
   \                     _ZN12Adafruit_GFX9getCursorEPsS0_: (+1)
   \        0x0   0x2900             CMP      R1,#+0
   \        0x2   0xD001             BEQ.N    ??getCursor_0
   \        0x4   0x8983             LDRH     R3,[R0, #+12]
   \        0x6   0x800B             STRH     R3,[R1, #+0]
    510              if( pY )     *pY = cursor_y;
   \                     ??getCursor_0: (+1)
   \        0x8   0x2A00             CMP      R2,#+0
   \        0xA   0xD001             BEQ.N    ??getCursor_1
   \        0xC   0x89C3             LDRH     R3,[R0, #+14]
   \        0xE   0x8013             STRH     R3,[R2, #+0]
    511          }
   \                     ??getCursor_1: (+1)
   \       0x10   0x4770             BX       LR
    512          

   \                                 In section .text, align 2, keep-with-next
    513          void Adafruit_GFX::setTextSize(uint8_t s) {
    514            textsize = (s > 0) ? s : 1;
   \                     _ZN12Adafruit_GFX11setTextSizeEh: (+1)
   \        0x0   0x000A             MOVS     R2,R1
   \        0x2   0xB2D2             UXTB     R2,R2
   \        0x4   0x2A00             CMP      R2,#+0
   \        0x6   0xD001             BEQ.N    ??setTextSize_0
   \        0x8   0x000A             MOVS     R2,R1
   \        0xA   0xE000             B.N      ??setTextSize_1
   \                     ??setTextSize_0: (+1)
   \        0xC   0x2201             MOVS     R2,#+1
   \                     ??setTextSize_1: (+1)
   \        0xE   0x7502             STRB     R2,[R0, #+20]
    515          }
   \       0x10   0x4770             BX       LR
    516          

   \                                 In section .text, align 2, keep-with-next
    517          void Adafruit_GFX::setTextColor(uint16_t c) {
    518            // For 'transparent' background, we'll set the bg 
    519            // to the same as fg instead of using a flag
    520            textcolor = textbgcolor = c;
   \                     _ZN12Adafruit_GFX12setTextColorEt: (+1)
   \        0x0   0x8241             STRH     R1,[R0, #+18]
   \        0x2   0x8A42             LDRH     R2,[R0, #+18]
   \        0x4   0x8202             STRH     R2,[R0, #+16]
    521          }
   \        0x6   0x4770             BX       LR
    522          

   \                                 In section .text, align 2, keep-with-next
    523          void Adafruit_GFX::setTextColor(uint16_t c, uint16_t b) {
    524            textcolor   = c;
   \                     _ZN12Adafruit_GFX12setTextColorEtt: (+1)
   \        0x0   0x8201             STRH     R1,[R0, #+16]
    525            textbgcolor = b; 
   \        0x2   0x8242             STRH     R2,[R0, #+18]
    526          }
   \        0x4   0x4770             BX       LR
    527          

   \                                 In section .text, align 2, keep-with-next
    528          void Adafruit_GFX::setTextWrap(bool w) {
    529            wrap = w;
   \                     _ZN12Adafruit_GFX11setTextWrapEb: (+1)
   \        0x0   0x7581             STRB     R1,[R0, #+22]
    530          }
   \        0x2   0x4770             BX       LR
    531          

   \                                 In section .text, align 2, keep-with-next
    532          uint8_t Adafruit_GFX::getRotation(void) const {
    533            return rotation;
   \                     _ZNK12Adafruit_GFX11getRotationEv: (+1)
   \        0x0   0x7D40             LDRB     R0,[R0, #+21]
   \        0x2   0x4770             BX       LR
    534          }
    535          

   \                                 In section .text, align 2, keep-with-next
    536          void Adafruit_GFX::setRotation(uint8_t x) {
    537            rotation = (x & 3);
   \                     _ZN12Adafruit_GFX11setRotationEh: (+1)
   \        0x0   0xF011 0x0203      ANDS     R2,R1,#0x3
   \        0x4   0x7542             STRB     R2,[R0, #+21]
    538            switch(rotation) {
   \        0x6   0x7D42             LDRB     R2,[R0, #+21]
   \        0x8   0x2A00             CMP      R2,#+0
   \        0xA   0xD005             BEQ.N    ??setRotation_0
   \        0xC   0x2A02             CMP      R2,#+2
   \        0xE   0xD003             BEQ.N    ??setRotation_0
   \       0x10   0xD307             BCC.N    ??setRotation_1
   \       0x12   0x2A03             CMP      R2,#+3
   \       0x14   0xD005             BEQ.N    ??setRotation_1
   \       0x16   0xE008             B.N      ??setRotation_2
    539             case 0:
    540             case 2:
    541              _width  = WIDTH;
   \                     ??setRotation_0: (+1)
   \       0x18   0x8882             LDRH     R2,[R0, #+4]
   \       0x1A   0x8102             STRH     R2,[R0, #+8]
    542              _height = HEIGHT;
   \       0x1C   0x88C2             LDRH     R2,[R0, #+6]
   \       0x1E   0x8142             STRH     R2,[R0, #+10]
    543              break;
   \       0x20   0xE003             B.N      ??setRotation_2
    544             case 1:
    545             case 3:
    546              _width  = HEIGHT;
   \                     ??setRotation_1: (+1)
   \       0x22   0x88C2             LDRH     R2,[R0, #+6]
   \       0x24   0x8102             STRH     R2,[R0, #+8]
    547              _height = WIDTH;
   \       0x26   0x8882             LDRH     R2,[R0, #+4]
   \       0x28   0x8142             STRH     R2,[R0, #+10]
    548              break;
    549            }
    550          }
   \                     ??setRotation_2: (+1)
   \       0x2A   0x4770             BX       LR
    551          
    552          // Return the size of the display (per current rotation)

   \                                 In section .text, align 2, keep-with-next
    553          int16_t Adafruit_GFX::width(void) const {
    554            return _width;
   \                     _ZNK12Adafruit_GFX5widthEv: (+1)
   \        0x0   0xF9B0 0x0008      LDRSH    R0,[R0, #+8]
   \        0x4   0x4770             BX       LR
    555          }
    556           

   \                                 In section .text, align 2, keep-with-next
    557          int16_t Adafruit_GFX::height(void) const {
    558            return _height;
   \                     _ZNK12Adafruit_GFX6heightEv: (+1)
   \        0x0   0xF9B0 0x000A      LDRSH    R0,[R0, #+10]
   \        0x4   0x4770             BX       LR
    559          }
    560          
    561          //void Adafruit_GFX::invertDisplay(bool i) {
    562          //  // Do nothing, must be subclassed if supported
    563          //}
    564          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Adafruit_GFX::Adafruit_GFX(int16_t, int16_t)
      48   Adafruit_GFX::drawBitBuf(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t, uint16_t)
        48   -- Indirect call
      40   Adafruit_GFX::drawBitmap(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t)
        40   -- Indirect call
      40   Adafruit_GFX::drawBitmap(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t, uint16_t)
        40   -- Indirect call
      48   Adafruit_GFX::drawCircle(int16_t, int16_t, int16_t, uint16_t)
        48   -- Indirect call
      48   Adafruit_GFX::drawCircleHelper(int16_t, int16_t, int16_t, uint8_t, uint16_t)
        48   -- Indirect call
      32   Adafruit_GFX::drawFastHLine(int16_t, int16_t, int16_t, uint16_t)
        32   -- Indirect call
      32   Adafruit_GFX::drawFastVLine(int16_t, int16_t, int16_t, uint16_t)
        32   -- Indirect call
      48   Adafruit_GFX::drawLine(int16_t, int16_t, int16_t, int16_t, uint16_t)
        48   -- Indirect call
        48   -> abs
      32   Adafruit_GFX::drawRect(int16_t, int16_t, int16_t, int16_t, uint16_t)
        32   -- Indirect call
      40   Adafruit_GFX::drawRoundRect(int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t)
        40   -- Indirect call
        40   -> Adafruit_GFX::drawCircleHelper(int16_t, int16_t, int16_t, uint8_t, uint16_t)
      48   Adafruit_GFX::drawTriangle(int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t)
        48   -- Indirect call
      40   Adafruit_GFX::drawXBitmap(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t)
        40   -- Indirect call
      40   Adafruit_GFX::fillCircle(int16_t, int16_t, int16_t, uint16_t)
        40   -- Indirect call
        40   -> Adafruit_GFX::fillCircleHelper(int16_t, int16_t, int16_t, uint8_t, int16_t, uint16_t)
      56   Adafruit_GFX::fillCircleHelper(int16_t, int16_t, int16_t, uint8_t, int16_t, uint16_t)
        56   -- Indirect call
      32   Adafruit_GFX::fillRect(int16_t, int16_t, int16_t, int16_t, uint16_t)
        32   -- Indirect call
      48   Adafruit_GFX::fillRoundRect(int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t)
        48   -- Indirect call
        48   -> Adafruit_GFX::fillCircleHelper(int16_t, int16_t, int16_t, uint8_t, int16_t, uint16_t)
      24   Adafruit_GFX::fillScreen(uint16_t)
        24   -- Indirect call
      72   Adafruit_GFX::fillTriangle(int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t)
        72   -- Indirect call
       0   Adafruit_GFX::getCursor(int16_t *, int16_t *)
       0   Adafruit_GFX::getRotation() const
       0   Adafruit_GFX::height() const
       0   Adafruit_GFX::setCursor(int16_t, int16_t)
       0   Adafruit_GFX::setRotation(uint8_t)
       0   Adafruit_GFX::setTextColor(uint16_t)
       0   Adafruit_GFX::setTextColor(uint16_t, uint16_t)
       0   Adafruit_GFX::setTextSize(uint8_t)
       0   Adafruit_GFX::setTextWrap(bool)
       8   Adafruit_GFX::subobject Adafruit_GFX(int16_t, int16_t)
         8   -> Adafruit_GFX::Adafruit_GFX(int16_t, int16_t)
       0   Adafruit_GFX::width() const


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      44  Adafruit_GFX::Adafruit_GFX(int16_t, int16_t)
     188  Adafruit_GFX::drawBitBuf(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t, uint16_t)
     140  Adafruit_GFX::drawBitmap(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t)
     170  Adafruit_GFX::drawBitmap(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t, uint16_t)
     442  Adafruit_GFX::drawCircle(int16_t, int16_t, int16_t, uint16_t)
     364  Adafruit_GFX::drawCircleHelper(int16_t, int16_t, int16_t, uint8_t, uint16_t)
      50  Adafruit_GFX::drawFastHLine(int16_t, int16_t, int16_t, uint16_t)
      50  Adafruit_GFX::drawFastVLine(int16_t, int16_t, int16_t, uint16_t)
     272  Adafruit_GFX::drawLine(int16_t, int16_t, int16_t, int16_t, uint16_t)
     150  Adafruit_GFX::drawRect(int16_t, int16_t, int16_t, int16_t, uint16_t)
     354  Adafruit_GFX::drawRoundRect(int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t)
     138  Adafruit_GFX::drawTriangle(int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t)
     150  Adafruit_GFX::drawXBitmap(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t)
      88  Adafruit_GFX::fillCircle(int16_t, int16_t, int16_t, uint16_t)
     298  Adafruit_GFX::fillCircleHelper(int16_t, int16_t, int16_t, uint8_t, int16_t, uint16_t)
      74  Adafruit_GFX::fillRect(int16_t, int16_t, int16_t, int16_t, uint16_t)
     164  Adafruit_GFX::fillRoundRect(int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t)
      36  Adafruit_GFX::fillScreen(uint16_t)
     630  Adafruit_GFX::fillTriangle(int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t)
      18  Adafruit_GFX::getCursor(int16_t *, int16_t *)
       4  Adafruit_GFX::getRotation() const
       6  Adafruit_GFX::height() const
       6  Adafruit_GFX::setCursor(int16_t, int16_t)
      44  Adafruit_GFX::setRotation(uint8_t)
       8  Adafruit_GFX::setTextColor(uint16_t)
       6  Adafruit_GFX::setTextColor(uint16_t, uint16_t)
      18  Adafruit_GFX::setTextSize(uint8_t)
       4  Adafruit_GFX::setTextWrap(bool)
      16  Adafruit_GFX::subobject Adafruit_GFX(int16_t, int16_t)
       6  Adafruit_GFX::width() const
      60  -- Other

 
    60 bytes in section .rodata
 3'938 bytes in section .text
 
 3'938 bytes of CODE  memory
     0 bytes of CONST memory (+ 60 bytes shared)

Errors: none
Warnings: 1
