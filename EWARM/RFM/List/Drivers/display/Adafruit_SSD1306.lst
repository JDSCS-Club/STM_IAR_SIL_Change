###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         22/Sep/2022  13:40:04
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\display\Adafruit_SSD1306.cpp
#        [UTF-8]
#    Command line                 =
#        -f
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\display\Adafruit_SSD1306.o.rsp
#        (C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\display\Adafruit_SSD1306.cpp
#        -D USE_HAL_DRIVER -D STM32F407xx -lC
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Drivers\display -o
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\display --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/App\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/Target\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Core/Inc\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Include\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio/Si446x\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/display\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Library\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\display\fonts\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\STM32F4xx_HAL_Driver\Src\
#        -On --c++ --no_exceptions --no_rtti -I "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\display\Adafruit_SSD1306.o.d
#    Locale                       =  C
#    List file                    =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Drivers\display\Adafruit_SSD1306.lst
#    Object file                  =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Drivers\display\Adafruit_SSD1306.o
#    Runtime model:                  
#      __CPP_Exceptions           =  Disabled
#      __CPP_Language             =  C++14
#      __CPP_Library              =  DLib
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  1
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#      __iar_require _Printf      =  flags,widths
#
###############################################################################

C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\display\Adafruit_SSD1306.cpp
      1          
      2          #include <stdio.h>
      3          #include <stdlib.h>
      4          #include "string.h"
      5          
      6          //#include "glcdfont.h"
      7          
      8          #include "Adafruit_GFX.h"
      9          #include "Adafruit_SSD1306.h"

   \                                 In section .text, align 2
   \   __vfp void Adafruit_SSD1306::debug(int)
   \                     _ZN16Adafruit_SSD13065debugEi: (+1)
   \        0x0   0x7781             STRB     R1,[R0, #+30]
   \        0x2   0x4770             BX       LR
     10          
     11          #include "math.h"               //  min()
     12          
     13          #include "PHan_Lib.h"           //  PHan_HanFontLoad()
     14          
     15          #if defined(PHANFONT_LOCAL)		//	한글폰트 사용시. 문자코드 변환 사용.
     16          #include "unicode.h"            //  UTF8ToCP949()
     17          #endif	//	defined(PHANFONT_LOCAL)
     18          
     19          #if defined(_WIN32)
     20          
     21          #include "x86_hal_driver.h"     //  HAL_Delay()
     22          
     23          #else   //  STM32
     24          
     25          #if defined(STM32F407xx)
     26          #include "stm32f4xx.h"
     27          #elif defined(STM32F207xx)
     28          #include "stm32f2xx.h"
     29          #endif
     30          
     31          #endif
     32          
     33          #ifndef min
     34          #define max(a,b) (((a) > (b)) ? (a) : (b))
     35          #define min(a,b) (((a) < (b)) ? (a) : (b))
     36          #endif
     37          
     38          
     39          #define SSD1306_CMD   0x00
     40          #define SSD1306_DATA  0x40
     41          
     42          
     43          #define pgm_read_byte(addr) (*(const unsigned char *)(addr))
     44          
     45          

   \                                 In section .bss, align 2
     46          uint8_t Buffer_CMD[]  = {SSD1306_CMD, 0x00};
   \                     Buffer_CMD:
   \        0x0                      DS8 2

   \                                 In section .data, align 4
     47          uint8_t Buffer_DATA[129]= {SSD1306_DATA,};
   \                     Buffer_DATA:
   \        0x0   0x40 0x00          DC8 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x16   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x2D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x44   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x5B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x72   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x81                      DS8 3
     48          
     49          //========================================================================

   \                                 In section .data, align 4
     50          static uint8_t bufMenu[SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8] =
   \                     bufMenu:
   \        0x0   0x00 0x06          DC8 0, 6, 10, 254, 10, 230, 0, 240, 0, 248, 0, 252, 0, 0, 0, 0, 0, 0, 0

   \              0x0A 0xFE    

   \              0x0A 0xE6    

   \              0x00 0xF0    

   \              0x00 0xF8    

   \              0x00 0xFC    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x13   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x2A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x41   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x58   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x6E   0x78 0x48          DC8 120, 72, 254, 130, 186, 186, 130, 186, 186, 130, 186, 186, 130, 186

   \              0xFE 0x82    

   \              0xBA 0xBA    

   \              0x82 0xBA    

   \              0xBA 0x82    

   \              0xBA 0xBA    

   \              0x82 0xBA
   \       0x7C   0xBA 0x82          DC8 186, 130, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0xFE 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x91   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0xA8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0xBF   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0xD6   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0xED   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \      0x104   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \      0x11B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \      0x132   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \      0x149   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \      0x160   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \      0x177   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \      0x18E   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \      0x1A5   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \      0x1BC   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \      0x1D3   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \      0x1EA   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
     51          //========================================================================
     52          {
     53              //  128 X 8
     54              0x00,0x06,0x0A,0xFE,0x0A,0xE6,0x00,0xF0,0x00,0xF8,0x00,0xFC,0x00,0x00,0x00,0x00,
     55              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     56              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     57              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     58              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     59              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     60              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x48,
     61              0xFE,0x82,0xBA,0xBA,0x82,0xBA,0xBA,0x82,0xBA,0xBA,0x82,0xBA,0xBA,0x82,0xFE,0x00,
     62          
     63              //  128 X 8
     64              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     65              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     66              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     67              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     68              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     69              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     70              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     71              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     72          
     73              //  128 X 8
     74              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     75              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     76              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     77              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     78              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     79              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     80              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     81              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     82          
     83              //  128 X 8
     84              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     85              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     86              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     87              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     88              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     89              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     90              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     91              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
     92          };
     93          
     94          // the memory buffer for the LCD

   \                                 In section .data, align 4
     95          static uint8_t buffer[SSD1306_LCDHEIGHT * SSD1306_LCDWIDTH / 8] =
   \                     buffer:
   \        0x0   0x00 0x06          DC8 0, 6, 10, 254, 10, 230, 0, 240, 0, 248, 0, 252, 0, 0, 0, 0, 0, 0, 0

   \              0x0A 0xFE    

   \              0x0A 0xE6    

   \              0x00 0xF0    

   \              0x00 0xF8    

   \              0x00 0xFC    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x13   0x00 0x00          DC8 0, 0, 0, 0, 132, 72, 254, 50, 180, 72, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x84 0x48    

   \              0xFE 0x32    

   \              0xB4 0x48    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x27   0x00 0x00          DC8 0, 0, 254, 6, 10, 18, 18, 18, 18, 18, 10, 6, 254, 0, 0, 0, 0, 0, 0

   \              0xFE 0x06    

   \              0x0A 0x12    

   \              0x12 0x12    

   \              0x12 0x12    

   \              0x0A 0x06    

   \              0xFE 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x3A   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 134, 2, 120, 132, 164, 104, 2, 134, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x86    

   \              0x02 0x78    

   \              0x84 0xA4    

   \              0x68 0x02    

   \              0x86 0x00    

   \              0x00
   \       0x4D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 122, 134, 132, 180, 164, 166, 122

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x0E 0x7A    

   \              0x86 0x84    

   \              0xB4 0xA4    

   \              0xA6 0x7A
   \       0x5F   0x0E 0x00          DC8 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 72, 254, 130

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x78    

   \              0x48 0xFE    

   \              0x82
   \       0x72   0xBA 0xBA          DC8 186, 186, 130, 186, 186, 130, 186, 186, 130, 186, 186, 130, 254, 0

   \              0x82 0xBA    

   \              0xBA 0x82    

   \              0xBA 0xBA    

   \              0x82 0xBA    

   \              0xBA 0x82    

   \              0xFE 0x00
   \       0x80   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x97   0x00 0x00          DC8 0, 0, 1, 1, 0, 0, 0, 0, 0, 224, 240, 48, 48, 48, 48, 48, 48, 48, 49

   \              0x01 0x01    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0xE0    

   \              0xF0 0x30    

   \              0x30 0x30    

   \              0x30 0x30    

   \              0x30 0x30    

   \              0x31
   \       0xAA   0x31 0xF1          DC8 49, 241, 225, 1, 1, 225, 241, 49, 49, 49, 48, 48, 48, 48, 48, 48

   \              0xE1 0x01    

   \              0x01 0xE1    

   \              0xF1 0x31    

   \              0x31 0x31    

   \              0x30 0x30    

   \              0x30 0x30    

   \              0x30 0x30
   \       0xBA   0xF0 0xE0          DC8 240, 224, 0, 0, 0, 0, 0, 0, 0, 1, 1, 48, 48, 48, 48, 49, 49, 48, 48

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x01    

   \              0x01 0x30    

   \              0x30 0x30    

   \              0x30 0x31    

   \              0x31 0x30    

   \              0x30
   \       0xCD   0x30 0x30          DC8 48, 48, 48, 240, 240, 0, 0, 48, 48, 48, 48, 49, 49, 48, 48, 48, 49

   \              0x30 0xF0    

   \              0xF0 0x00    

   \              0x00 0x30    

   \              0x30 0x30    

   \              0x30 0x31    

   \              0x31 0x30    

   \              0x30 0x30    

   \              0x31
   \       0xDE   0x31 0xF0          DC8 49, 240, 240, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0xF0 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0xF3   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 192, 192, 0, 192, 192

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x40    

   \              0xC0 0xC0    

   \              0x00 0xC0    

   \              0xC0
   \      0x106   0x40 0x00          DC8 64, 0, 64, 192, 64, 64, 192, 0, 64, 192, 0, 0, 192, 64, 0, 64, 192

   \              0x40 0xC0    

   \              0x40 0x40    

   \              0xC0 0x00    

   \              0x40 0xC0    

   \              0x00 0x00    

   \              0xC0 0x40    

   \              0x00 0x40    

   \              0xC0
   \      0x117   0x00 0x00          DC8 0, 0, 192, 64, 0, 0, 0, 0, 0, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0xC0 0x40    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0xFF    

   \              0xFF 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \      0x12B   0xFF 0xFF          DC8 255, 255, 0, 0, 255, 255, 96, 96, 96, 96, 96, 96, 96, 96, 96, 255

   \              0x00 0x00    

   \              0xFF 0xFF    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0xFF
   \      0x13B   0xFF 0x00          DC8 255, 0, 0, 0, 14, 14, 14, 0, 0, 0, 96, 96, 96, 96, 96, 96, 96, 96

   \              0x00 0x00    

   \              0x0E 0x0E    

   \              0x0E 0x00    

   \              0x00 0x00    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60
   \      0x14D   0x60 0x60          DC8 96, 96, 96, 255, 255, 0, 0, 224, 224, 96, 96, 96, 96, 96, 96, 96

   \              0x60 0xFF    

   \              0xFF 0x00    

   \              0x00 0xE0    

   \              0xE0 0x60    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60
   \      0x15D   0x60 0x60          DC8 96, 96, 127, 127, 0, 0, 0, 0, 0, 128, 128, 0, 0, 128, 128, 0, 0

   \              0x7F 0x7F    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x80    

   \              0x80 0x00    

   \              0x00 0x80    

   \              0x80 0x00    

   \              0x00
   \      0x16E   0x80 0x80          DC8 128, 128, 128, 0, 0, 128, 128, 128, 0, 128, 128, 128, 0, 128, 128

   \              0x80 0x00    

   \              0x00 0x80    

   \              0x80 0x80    

   \              0x00 0x80    

   \              0x80 0x80    

   \              0x00 0x80    

   \              0x80
   \      0x17D   0x80 0x80          DC8 128, 128, 128, 32, 63, 3, 60, 3, 63, 32, 0, 32, 63, 34, 39, 48, 0

   \              0x80 0x20    

   \              0x3F 0x03    

   \              0x3C 0x03    

   \              0x3F 0x20    

   \              0x00 0x20    

   \              0x3F 0x22    

   \              0x27 0x30    

   \              0x00
   \      0x18E   0x20 0x3F          DC8 32, 63, 3, 12, 63, 32, 0, 0, 31, 32, 32, 31, 0, 0, 0, 0, 0, 0, 63

   \              0x03 0x0C    

   \              0x3F 0x20    

   \              0x00 0x00    

   \              0x1F 0x20    

   \              0x20 0x1F    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x3F
   \      0x1A1   0x7F 0x60          DC8 127, 96, 96, 96, 96, 96, 96, 96, 96, 96, 127, 63, 0, 0, 63, 127, 96

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x7F 0x3F    

   \              0x00 0x00    

   \              0x3F 0x7F    

   \              0x60
   \      0x1B2   0x60 0x60          DC8 96, 96, 96, 96, 96, 96, 96, 96, 127, 63, 0, 0, 0, 7, 7, 7, 0, 0, 0

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x7F 0x3F    

   \              0x00 0x00    

   \              0x00 0x07    

   \              0x07 0x07    

   \              0x00 0x00    

   \              0x00
   \      0x1C5   0x60 0x60          DC8 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 127, 127, 0, 0, 127

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x7F    

   \              0x7F 0x00    

   \              0x00 0x7F
   \      0x1D5   0x7F 0x60          DC8 127, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 0, 0, 0, 0, 0, 64

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x60 0x60    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x40
   \      0x1E7   0x7F 0x04          DC8 127, 4, 4, 127, 64, 0, 63, 64, 64, 64, 63, 0, 64, 127, 7, 120, 7

   \              0x04 0x7F    

   \              0x40 0x00    

   \              0x3F 0x40    

   \              0x40 0x40    

   \              0x3F 0x00    

   \              0x40 0x7F    

   \              0x07 0x78    

   \              0x07
   \      0x1F8   0x7F 0x40          DC8 127, 64, 0, 64, 127, 68, 78, 97

   \              0x00 0x40    

   \              0x7F 0x44    

   \              0x4E 0x61
     96          {
     97          //  128 X 8
     98          0x00,0x06,0x0A,0xFE,0x0A,0xE6,0x00,0xF0,0x00,0xF8,0x00,0xFC,0x00,0x00,0x00,0x00,
     99          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x84,0x48,0xFE,0x32,0xB4,0x48,0x00,0x00,0x00,
    100          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x06,0x0A,0x12,0x12,0x12,0x12,
    101          0x12,0x0A,0x06,0xFE,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    102          0x00,0x00,0x00,0x86,0x02,0x78,0x84,0xA4,0x68,0x02,0x86,0x00,0x00,0x00,0x00,0x00,
    103          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0E,0x7A,0x86,0x84,0xB4,0xA4,0xA6,0x7A,0x0E,
    104          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x48,
    105          0xFE,0x82,0xBA,0xBA,0x82,0xBA,0xBA,0x82,0xBA,0xBA,0x82,0xBA,0xBA,0x82,0xFE,0x00,
    106          
    107          //  128 X 8
    108          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    109          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x00,0x00,0x00,0x00,0x00,
    110          0xE0,0xF0,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x31,0x31,0xF1,0xE1,0x01,0x01,0xE1,
    111          0xF1,0x31,0x31,0x31,0x30,0x30,0x30,0x30,0x30,0x30,0xF0,0xE0,0x00,0x00,0x00,0x00,
    112          0x00,0x00,0x00,0x01,0x01,0x30,0x30,0x30,0x30,0x31,0x31,0x30,0x30,0x30,0x30,0x30,
    113          0xF0,0xF0,0x00,0x00,0x30,0x30,0x30,0x30,0x31,0x31,0x30,0x30,0x30,0x31,0x31,0xF0,
    114          0xF0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    115          0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
    116          
    117          //  128 X 8
    118          0x40,0xC0,0xC0,0x00,0xC0,0xC0,0x40,0x00,0x40,0xC0,0x40,0x40,0xC0,0x00,0x40,0xC0,
    119          0x00,0x00,0xC0,0x40,0x00,0x40,0xC0,0x00,0x00,0xC0,0x40,0x00,0x00,0x00,0x00,0x00,
    120          0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF,0x00,0x00,0xFF,
    121          0xFF,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0xFF,0xFF,0x00,0x00,0x00,0x0E,
    122          0x0E,0x0E,0x00,0x00,0x00,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
    123          0xFF,0xFF,0x00,0x00,0xE0,0xE0,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x7F,
    124          0x7F,0x00,0x00,0x00,0x00,0x00,0x80,0x80,0x00,0x00,0x80,0x80,0x00,0x00,0x80,0x80,
    125          0x80,0x00,0x00,0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x00,0x80,0x80,0x80,0x80,0x80,
    126          
    127          //  128 X 8
    128          0x20,0x3F,0x03,0x3C,0x03,0x3F,0x20,0x00,0x20,0x3F,0x22,0x27,0x30,0x00,0x20,0x3F,
    129          0x03,0x0C,0x3F,0x20,0x00,0x00,0x1F,0x20,0x20,0x1F,0x00,0x00,0x00,0x00,0x00,0x00,
    130          0x3F,0x7F,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x7F,0x3F,0x00,0x00,0x3F,
    131          0x7F,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x7F,0x3F,0x00,0x00,0x00,0x07,
    132          0x07,0x07,0x00,0x00,0x00,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
    133          0x7F,0x7F,0x00,0x00,0x7F,0x7F,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,0x60,
    134          0x60,0x00,0x00,0x00,0x00,0x00,0x40,0x7F,0x04,0x04,0x7F,0x40,0x00,0x3F,0x40,0x40,
    135          0x40,0x3F,0x00,0x40,0x7F,0x07,0x78,0x07,0x7F,0x40,0x00,0x40,0x7F,0x44,0x4E,0x61
    136          };
    137          
    138          #define ssd1306_swap(a, b) { int16_t t = a; a = b; b = t; }
    139          
    140          #if defined(_WIN32)
    141          #else       //  STM32
    142          
    143          extern I2C_HandleTypeDef hi2c3;
    144          
    145          #endif
    146          
    147          // the most basic function, set a single pixel

   \                                 In section .text, align 2, keep-with-next
    148          void Adafruit_SSD1306::drawPixel( int16_t x, int16_t y, uint16_t color )
    149          {
   \                     _ZN16Adafruit_SSD13069drawPixelEsst: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000E             MOVS     R6,R1
   \        0x6   0x0017             MOVS     R7,R2
   \        0x8   0x001D             MOVS     R5,R3
    150              if ( ( x < 0 ) || ( x >= width() ) || ( y < 0 ) || ( y >= height() ) )
   \        0xA   0x0030             MOVS     R0,R6
   \        0xC   0xB200             SXTH     R0,R0
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD411             BMI.N    ??drawPixel_0
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x18   0x0031             MOVS     R1,R6
   \       0x1A   0xB209             SXTH     R1,R1
   \       0x1C   0x4281             CMP      R1,R0
   \       0x1E   0xDA0A             BGE.N    ??drawPixel_0
   \       0x20   0x0038             MOVS     R0,R7
   \       0x22   0xB200             SXTH     R0,R0
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD406             BMI.N    ??drawPixel_0
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x2E   0x0039             MOVS     R1,R7
   \       0x30   0xB209             SXTH     R1,R1
   \       0x32   0x4281             CMP      R1,R0
   \       0x34   0xDB00             BLT.N    ??drawPixel_1
    151                  return;
   \                     ??drawPixel_0: (+1)
   \       0x36   0xE07B             B.N      ??drawPixel_2
    152          
    153              // check rotation, move pixel around if necessary
    154              switch ( getRotation() )
   \                     ??drawPixel_1: (+1)
   \       0x38   0x0020             MOVS     R0,R4
   \       0x3A   0x.... 0x....      BL       _ZNK12Adafruit_GFX11getRotationEv
   \       0x3E   0x2801             CMP      R0,#+1
   \       0x40   0xD004             BEQ.N    ??drawPixel_3
   \       0x42   0xD318             BCC.N    ??drawPixel_4
   \       0x44   0x2803             CMP      R0,#+3
   \       0x46   0xD010             BEQ.N    ??drawPixel_5
   \       0x48   0xD308             BCC.N    ??drawPixel_6
   \       0x4A   0xE014             B.N      ??drawPixel_4
    155              {
    156              case 1:
    157                  ssd1306_swap( x, y );
   \                     ??drawPixel_3: (+1)
   \       0x4C   0x0031             MOVS     R1,R6
   \       0x4E   0x0038             MOVS     R0,R7
   \       0x50   0x000F             MOVS     R7,R1
    158                  x = WIDTH - x - 1;
   \       0x52   0x88A1             LDRH     R1,[R4, #+4]
   \       0x54   0x1A08             SUBS     R0,R1,R0
   \       0x56   0x1E40             SUBS     R0,R0,#+1
   \       0x58   0x0006             MOVS     R6,R0
    159                  break;
   \       0x5A   0xE00C             B.N      ??drawPixel_4
    160              case 2:
    161                  x = WIDTH - x - 1;
   \                     ??drawPixel_6: (+1)
   \       0x5C   0x88A0             LDRH     R0,[R4, #+4]
   \       0x5E   0x1B86             SUBS     R6,R0,R6
   \       0x60   0x1E76             SUBS     R6,R6,#+1
    162                  y = HEIGHT - y - 1;
   \       0x62   0x88E0             LDRH     R0,[R4, #+6]
   \       0x64   0x1BC7             SUBS     R7,R0,R7
   \       0x66   0x1E7F             SUBS     R7,R7,#+1
    163                  break;
   \       0x68   0xE005             B.N      ??drawPixel_4
    164              case 3:
    165                  ssd1306_swap( x, y );
   \                     ??drawPixel_5: (+1)
   \       0x6A   0x0030             MOVS     R0,R6
   \       0x6C   0x003E             MOVS     R6,R7
    166                  y = HEIGHT - y - 1;
   \       0x6E   0x88E1             LDRH     R1,[R4, #+6]
   \       0x70   0x1A08             SUBS     R0,R1,R0
   \       0x72   0x1E40             SUBS     R0,R0,#+1
   \       0x74   0x0007             MOVS     R7,R0
    167                  break;
    168              }
    169          
    170              // x is which column
    171              switch ( color )
   \                     ??drawPixel_4: (+1)
   \       0x76   0x0028             MOVS     R0,R5
   \       0x78   0xB280             UXTH     R0,R0
   \       0x7A   0x2800             CMP      R0,#+0
   \       0x7C   0xD01F             BEQ.N    ??drawPixel_7
   \       0x7E   0x2802             CMP      R0,#+2
   \       0x80   0xD03A             BEQ.N    ??drawPixel_8
   \       0x82   0xD255             BCS.N    ??drawPixel_9
    172              {
    173              case WHITE:   buffer[x + ( y / 8 ) * SSD1306_LCDWIDTH] |= ( 1 << ( y & 7 ) ); break;
   \                     ??drawPixel_10: (+1)
   \       0x84   0x.... 0x....      LDR.W    R1,??DataTable11
   \       0x88   0x0038             MOVS     R0,R7
   \       0x8A   0xB200             SXTH     R0,R0
   \       0x8C   0x2208             MOVS     R2,#+8
   \       0x8E   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \       0x92   0x01C0             LSLS     R0,R0,#+7
   \       0x94   0xFA00 0xF286      SXTAH    R2,R0,R6
   \       0x98   0x0038             MOVS     R0,R7
   \       0x9A   0xB200             SXTH     R0,R0
   \       0x9C   0x2308             MOVS     R3,#+8
   \       0x9E   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \       0xA2   0x01C0             LSLS     R0,R0,#+7
   \       0xA4   0xFA00 0xF086      SXTAH    R0,R0,R6
   \       0xA8   0x5C0B             LDRB     R3,[R1, R0]
   \       0xAA   0xF05F 0x0C01      MOVS     R12,#+1
   \       0xAE   0xF017 0x0007      ANDS     R0,R7,#0x7
   \       0xB2   0xFA1C 0xFC00      LSLS     R12,R12,R0
   \       0xB6   0xEA5C 0x0303      ORRS     R3,R12,R3
   \       0xBA   0x548B             STRB     R3,[R1, R2]
   \       0xBC   0xE038             B.N      ??drawPixel_9
    174              case BLACK:   buffer[x + ( y / 8 ) * SSD1306_LCDWIDTH] &= ~( 1 << ( y & 7 ) ); break;
   \                     ??drawPixel_7: (+1)
   \       0xBE   0x.... 0x....      LDR.W    R1,??DataTable11
   \       0xC2   0x0038             MOVS     R0,R7
   \       0xC4   0xB200             SXTH     R0,R0
   \       0xC6   0x2208             MOVS     R2,#+8
   \       0xC8   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \       0xCC   0x01C0             LSLS     R0,R0,#+7
   \       0xCE   0xFA00 0xF286      SXTAH    R2,R0,R6
   \       0xD2   0x0038             MOVS     R0,R7
   \       0xD4   0xB200             SXTH     R0,R0
   \       0xD6   0x2308             MOVS     R3,#+8
   \       0xD8   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \       0xDC   0x01C0             LSLS     R0,R0,#+7
   \       0xDE   0xFA00 0xF086      SXTAH    R0,R0,R6
   \       0xE2   0x5C0B             LDRB     R3,[R1, R0]
   \       0xE4   0xF05F 0x0C01      MOVS     R12,#+1
   \       0xE8   0xF017 0x0007      ANDS     R0,R7,#0x7
   \       0xEC   0xFA1C 0xFC00      LSLS     R12,R12,R0
   \       0xF0   0xEA33 0x030C      BICS     R3,R3,R12
   \       0xF4   0x548B             STRB     R3,[R1, R2]
   \       0xF6   0xE01B             B.N      ??drawPixel_9
    175              case INVERSE: buffer[x + ( y / 8 ) * SSD1306_LCDWIDTH] ^= ( 1 << ( y & 7 ) ); break;
   \                     ??drawPixel_8: (+1)
   \       0xF8   0x.... 0x....      LDR.W    R1,??DataTable11
   \       0xFC   0x0038             MOVS     R0,R7
   \       0xFE   0xB200             SXTH     R0,R0
   \      0x100   0x2208             MOVS     R2,#+8
   \      0x102   0xFB90 0xF0F2      SDIV     R0,R0,R2
   \      0x106   0x01C0             LSLS     R0,R0,#+7
   \      0x108   0xFA00 0xF286      SXTAH    R2,R0,R6
   \      0x10C   0x0038             MOVS     R0,R7
   \      0x10E   0xB200             SXTH     R0,R0
   \      0x110   0x2308             MOVS     R3,#+8
   \      0x112   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \      0x116   0x01C0             LSLS     R0,R0,#+7
   \      0x118   0xFA00 0xF086      SXTAH    R0,R0,R6
   \      0x11C   0x5C0B             LDRB     R3,[R1, R0]
   \      0x11E   0xF05F 0x0C01      MOVS     R12,#+1
   \      0x122   0xF017 0x0007      ANDS     R0,R7,#0x7
   \      0x126   0xFA1C 0xFC00      LSLS     R12,R12,R0
   \      0x12A   0xEA9C 0x0303      EORS     R3,R12,R3
   \      0x12E   0x548B             STRB     R3,[R1, R2]
    176              }
    177          }
   \                     ??drawPixel_9: (+1)
   \                     ??drawPixel_2: (+1)
   \      0x130   0xBDF1             POP      {R0,R4-R7,PC}
    178          
    179          
    180          // initializer for I2C - we only indicate the reset pin!

   \                                 In section .text, align 2, keep-with-next
   \   __vfp Adafruit_SSD1306::subobject Adafruit_SSD1306(int8_t)
   \                     _ZN16Adafruit_SSD1306C2Ea: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0xB249             SXTB     R1,R1
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       _ZN16Adafruit_SSD1306C1Ea
   \        0xC   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 2, keep-with-next
    181          Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
    182          Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT)
    183          {
   \                     _ZN16Adafruit_SSD1306C1Ea: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x2220             MOVS     R2,#+32
   \        0x8   0x2180             MOVS     R1,#+128
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       _ZN12Adafruit_GFXC2Ess
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable13
   \       0x14   0x6020             STR      R0,[R4, #+0]
    184            sclk = dc = cs = sid = -1;
   \       0x16   0xF05F 0x30FF      MOVS     R0,#+4294967295
   \       0x1A   0x7660             STRB     R0,[R4, #+25]
   \       0x1C   0x7760             STRB     R0,[R4, #+29]
   \       0x1E   0x76E0             STRB     R0,[R4, #+27]
   \       0x20   0x76A0             STRB     R0,[R4, #+26]
    185            dbg = 1;		//	Default Enable Debug Print
   \       0x22   0x2001             MOVS     R0,#+1
   \       0x24   0x77A0             STRB     R0,[R4, #+30]
    186            rst = reset;
   \       0x26   0x7725             STRB     R5,[R4, #+28]
    187          }
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0xBD32             POP      {R1,R4,R5,PC}
    188          
    189          

   \                                 In section .text, align 2, keep-with-next
    190          void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset)
    191          {
   \                     _ZN16Adafruit_SSD13065beginEhhb: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
   \        0x8   0x001F             MOVS     R7,R3
    192            _vccstate = vccstate;
   \        0xA   0x7625             STRB     R5,[R4, #+24]
    193            _i2caddr = i2caddr;
   \        0xC   0x75E6             STRB     R6,[R4, #+23]
    194          
    195            // Init sequence
    196            ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
   \        0xE   0x21AE             MOVS     R1,#+174
   \       0x10   0x0020             MOVS     R0,R4
   \       0x12   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    197            ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
   \       0x16   0x21D5             MOVS     R1,#+213
   \       0x18   0x0020             MOVS     R0,R4
   \       0x1A   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    198            ssd1306_command(0x80);                                  // the suggested ratio 0x80
   \       0x1E   0x2180             MOVS     R1,#+128
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    199          
    200            ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
   \       0x26   0x21A8             MOVS     R1,#+168
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    201            ssd1306_command(SSD1306_LCDHEIGHT - 1);
   \       0x2E   0x211F             MOVS     R1,#+31
   \       0x30   0x0020             MOVS     R0,R4
   \       0x32   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    202          
    203            ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
   \       0x36   0x21D3             MOVS     R1,#+211
   \       0x38   0x0020             MOVS     R0,R4
   \       0x3A   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    204            ssd1306_command(0x0);                                   // no offset
   \       0x3E   0x2100             MOVS     R1,#+0
   \       0x40   0x0020             MOVS     R0,R4
   \       0x42   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    205            ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
   \       0x46   0x2140             MOVS     R1,#+64
   \       0x48   0x0020             MOVS     R0,R4
   \       0x4A   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    206            ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
   \       0x4E   0x218D             MOVS     R1,#+141
   \       0x50   0x0020             MOVS     R0,R4
   \       0x52   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    207            if (vccstate == SSD1306_EXTERNALVCC)
   \       0x56   0x0028             MOVS     R0,R5
   \       0x58   0xB2C0             UXTB     R0,R0
   \       0x5A   0x2801             CMP      R0,#+1
   \       0x5C   0xD104             BNE.N    ??begin_0
    208              { ssd1306_command(0x10); }
   \       0x5E   0x2110             MOVS     R1,#+16
   \       0x60   0x0020             MOVS     R0,R4
   \       0x62   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
   \       0x66   0xE003             B.N      ??begin_1
    209            else
    210              { ssd1306_command(0x14); }
   \                     ??begin_0: (+1)
   \       0x68   0x2114             MOVS     R1,#+20
   \       0x6A   0x0020             MOVS     R0,R4
   \       0x6C   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    211            ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
   \                     ??begin_1: (+1)
   \       0x70   0x2120             MOVS     R1,#+32
   \       0x72   0x0020             MOVS     R0,R4
   \       0x74   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    212            ssd1306_command(0x00);                                  // 0x0 act like ks0108
   \       0x78   0x2100             MOVS     R1,#+0
   \       0x7A   0x0020             MOVS     R0,R4
   \       0x7C   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    213            ssd1306_command(SSD1306_SEGREMAP | 0x1);
   \       0x80   0x21A1             MOVS     R1,#+161
   \       0x82   0x0020             MOVS     R0,R4
   \       0x84   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    214            ssd1306_command(SSD1306_COMSCANDEC);
   \       0x88   0x21C8             MOVS     R1,#+200
   \       0x8A   0x0020             MOVS     R0,R4
   \       0x8C   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    215          
    216           #if defined SSD1306_128_32
    217            ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
   \       0x90   0x21DA             MOVS     R1,#+218
   \       0x92   0x0020             MOVS     R0,R4
   \       0x94   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    218            ssd1306_command(0x02);
   \       0x98   0x2102             MOVS     R1,#+2
   \       0x9A   0x0020             MOVS     R0,R4
   \       0x9C   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    219            ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
   \       0xA0   0x2181             MOVS     R1,#+129
   \       0xA2   0x0020             MOVS     R0,R4
   \       0xA4   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    220            ssd1306_command(0x8F);
   \       0xA8   0x218F             MOVS     R1,#+143
   \       0xAA   0x0020             MOVS     R0,R4
   \       0xAC   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    221          
    222          #elif defined SSD1306_128_64
    223            ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
    224            ssd1306_command(0x12);
    225            ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
    226            if (vccstate == SSD1306_EXTERNALVCC)
    227              { ssd1306_command(0x9F); }
    228            else
    229              { ssd1306_command(0xCF); }
    230          
    231          #elif defined SSD1306_96_16
    232            ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
    233            ssd1306_command(0x2);   //ada x12
    234            ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
    235            if (vccstate == SSD1306_EXTERNALVCC)
    236              { ssd1306_command(0x10); }
    237            else
    238              { ssd1306_command(0xAF); }
    239          
    240          #endif
    241          
    242            ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
   \       0xB0   0x21D9             MOVS     R1,#+217
   \       0xB2   0x0020             MOVS     R0,R4
   \       0xB4   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    243            if (vccstate == SSD1306_EXTERNALVCC)
   \       0xB8   0x0028             MOVS     R0,R5
   \       0xBA   0xB2C0             UXTB     R0,R0
   \       0xBC   0x2801             CMP      R0,#+1
   \       0xBE   0xD104             BNE.N    ??begin_2
    244              { ssd1306_command(0x22); }
   \       0xC0   0x2122             MOVS     R1,#+34
   \       0xC2   0x0020             MOVS     R0,R4
   \       0xC4   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
   \       0xC8   0xE003             B.N      ??begin_3
    245            else
    246              { ssd1306_command(0xF1); }
   \                     ??begin_2: (+1)
   \       0xCA   0x21F1             MOVS     R1,#+241
   \       0xCC   0x0020             MOVS     R0,R4
   \       0xCE   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    247            ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
   \                     ??begin_3: (+1)
   \       0xD2   0x21DB             MOVS     R1,#+219
   \       0xD4   0x0020             MOVS     R0,R4
   \       0xD6   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    248            ssd1306_command(0x40);
   \       0xDA   0x2140             MOVS     R1,#+64
   \       0xDC   0x0020             MOVS     R0,R4
   \       0xDE   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    249            ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
   \       0xE2   0x21A4             MOVS     R1,#+164
   \       0xE4   0x0020             MOVS     R0,R4
   \       0xE6   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    250            ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
   \       0xEA   0x21A6             MOVS     R1,#+166
   \       0xEC   0x0020             MOVS     R0,R4
   \       0xEE   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    251          
    252            ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
   \       0xF2   0x212E             MOVS     R1,#+46
   \       0xF4   0x0020             MOVS     R0,R4
   \       0xF6   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    253          
    254            ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
   \       0xFA   0x21AF             MOVS     R1,#+175
   \       0xFC   0x0020             MOVS     R0,R4
   \       0xFE   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    255          }
   \      0x102   0xBDF1             POP      {R0,R4-R7,PC}
    256          
    257          

   \                                 In section .text, align 2, keep-with-next
    258          void Adafruit_SSD1306::invertDisplay(uint8_t i)
    259          {
   \                     _ZN16Adafruit_SSD130613invertDisplayEh: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    260            if (i)
   \        0x6   0x0028             MOVS     R0,R5
   \        0x8   0xB2C0             UXTB     R0,R0
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD004             BEQ.N    ??invertDisplay_0
    261            {
    262              ssd1306_command(SSD1306_INVERTDISPLAY);
   \        0xE   0x21A7             MOVS     R1,#+167
   \       0x10   0x0020             MOVS     R0,R4
   \       0x12   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
   \       0x16   0xE003             B.N      ??invertDisplay_1
    263            }
    264            else
    265            {
    266              ssd1306_command(SSD1306_NORMALDISPLAY);
   \                     ??invertDisplay_0: (+1)
   \       0x18   0x21A6             MOVS     R1,#+166
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    267            }
    268          }
   \                     ??invertDisplay_1: (+1)
   \       0x20   0xBD31             POP      {R0,R4,R5,PC}
    269          

   \                                 In section .text, align 2, keep-with-next
    270          void Adafruit_SSD1306::ssd1306_command(uint8_t c)
    271          {
   \                     _ZN16Adafruit_SSD130615ssd1306_commandEh: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    272            Buffer_CMD[1] = c;
   \        0x6   0x.... 0x....      LDR.W    R6,??DataTable15
   \        0xA   0x7075             STRB     R5,[R6, #+1]
    273          #if defined(_WIN32)
    274          #else   //  STM32
    275            while(HAL_I2C_Master_Transmit(&hi2c3,_i2caddr,Buffer_CMD,0x02,0x10) != HAL_OK)
   \                     ??ssd1306_command_0: (+1)
   \        0xC   0x2010             MOVS     R0,#+16
   \        0xE   0x9000             STR      R0,[SP, #+0]
   \       0x10   0x2302             MOVS     R3,#+2
   \       0x12   0x0032             MOVS     R2,R6
   \       0x14   0xF994 0x0017      LDRSB    R0,[R4, #+23]
   \       0x18   0x0001             MOVS     R1,R0
   \       0x1A   0xB289             UXTH     R1,R1
   \       0x1C   0x.... 0x....      LDR.W    R0,??DataTable17
   \       0x20   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD1F1             BNE.N    ??ssd1306_command_0
    276            {
    277          
    278            }
    279          #endif
    280          }
   \       0x28   0xBD73             POP      {R0,R1,R4-R6,PC}
    281          

   \                                 In section .text, align 2, keep-with-next
    282          void Adafruit_SSD1306::ssd1306_data(uint16_t a)
    283          {
   \                     _ZN16Adafruit_SSD130612ssd1306_dataEt: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    284            uint8_t i;
    285            
    286            for(i = 0; i < 128 ; i++)
   \        0x6   0x2600             MOVS     R6,#+0
   \                     ??ssd1306_data_0: (+1)
   \        0x8   0x0030             MOVS     R0,R6
   \        0xA   0xB2C0             UXTB     R0,R0
   \        0xC   0x2880             CMP      R0,#+128
   \        0xE   0xDA0E             BGE.N    ??ssd1306_data_1
    287            {
    288              Buffer_DATA[i+1] = buffer[a+i];
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable11
   \       0x14   0x0031             MOVS     R1,R6
   \       0x16   0xB2C9             UXTB     R1,R1
   \       0x18   0xFA11 0xF185      UXTAH    R1,R1,R5
   \       0x1C   0x5C40             LDRB     R0,[R0, R1]
   \       0x1E   0x.... 0x....      LDR.W    R1,??DataTable16
   \       0x22   0x0032             MOVS     R2,R6
   \       0x24   0xB2D2             UXTB     R2,R2
   \       0x26   0x4411             ADD      R1,R1,R2
   \       0x28   0x7048             STRB     R0,[R1, #+1]
    289            }
   \       0x2A   0x1C76             ADDS     R6,R6,#+1
   \       0x2C   0xE7EC             B.N      ??ssd1306_data_0
    290          
    291          #if defined(_WIN32)
    292          #else   //  STM32
    293            while(HAL_I2C_Master_Transmit(&hi2c3,_i2caddr,Buffer_DATA,129,0x10) != HAL_OK)
   \                     ??ssd1306_data_1: (+1)
   \       0x2E   0x2010             MOVS     R0,#+16
   \       0x30   0x9000             STR      R0,[SP, #+0]
   \       0x32   0x2381             MOVS     R3,#+129
   \       0x34   0x.... 0x....      LDR.W    R2,??DataTable16
   \       0x38   0xF994 0x0017      LDRSB    R0,[R4, #+23]
   \       0x3C   0x0001             MOVS     R1,R0
   \       0x3E   0xB289             UXTH     R1,R1
   \       0x40   0x.... 0x....      LDR.W    R0,??DataTable17
   \       0x44   0x.... 0x....      BL       HAL_I2C_Master_Transmit
   \       0x48   0x2800             CMP      R0,#+0
   \       0x4A   0xD1F0             BNE.N    ??ssd1306_data_1
    294            {
    295          
    296            }
    297          #endif
    298          }
   \       0x4C   0xBD73             POP      {R0,R1,R4-R6,PC}
    299          
    300          
    301          
    302          // startscrollright
    303          // Activate a right handed scroll for rows start through stop
    304          // Hint, the display is 16 rows tall. To scroll the whole display, run:
    305          // display.scrollright(0x00, 0x0F)

   \                                 In section .text, align 2, keep-with-next
    306          void Adafruit_SSD1306::startscrollright(uint8_t start, uint8_t stop)
    307          {
   \                     _ZN16Adafruit_SSD130616startscrollrightEhh: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    308            ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL);
   \        0x8   0x2126             MOVS     R1,#+38
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    309            ssd1306_command(0X00);
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    310            ssd1306_command(start);
   \       0x18   0x0029             MOVS     R1,R5
   \       0x1A   0xB2C9             UXTB     R1,R1
   \       0x1C   0x0020             MOVS     R0,R4
   \       0x1E   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    311            ssd1306_command(0X00);
   \       0x22   0x2100             MOVS     R1,#+0
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    312            ssd1306_command(stop);
   \       0x2A   0x0031             MOVS     R1,R6
   \       0x2C   0xB2C9             UXTB     R1,R1
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    313            ssd1306_command(0X00);
   \       0x34   0x2100             MOVS     R1,#+0
   \       0x36   0x0020             MOVS     R0,R4
   \       0x38   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    314            ssd1306_command(0XFF);
   \       0x3C   0x21FF             MOVS     R1,#+255
   \       0x3E   0x0020             MOVS     R0,R4
   \       0x40   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    315            ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   \       0x44   0x212F             MOVS     R1,#+47
   \       0x46   0x0020             MOVS     R0,R4
   \       0x48   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    316          }
   \       0x4C   0xBD70             POP      {R4-R6,PC}
    317          
    318          // startscrollleft
    319          // Activate a right handed scroll for rows start through stop
    320          // Hint, the display is 16 rows tall. To scroll the whole display, run:
    321          // display.scrollright(0x00, 0x0F)

   \                                 In section .text, align 2, keep-with-next
    322          void Adafruit_SSD1306::startscrollleft(uint8_t start, uint8_t stop)
    323          {
   \                     _ZN16Adafruit_SSD130615startscrollleftEhh: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    324            ssd1306_command(SSD1306_LEFT_HORIZONTAL_SCROLL);
   \        0x8   0x2127             MOVS     R1,#+39
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    325            ssd1306_command(0X00);
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    326            ssd1306_command(start);
   \       0x18   0x0029             MOVS     R1,R5
   \       0x1A   0xB2C9             UXTB     R1,R1
   \       0x1C   0x0020             MOVS     R0,R4
   \       0x1E   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    327            ssd1306_command(0X00);
   \       0x22   0x2100             MOVS     R1,#+0
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    328            ssd1306_command(stop);
   \       0x2A   0x0031             MOVS     R1,R6
   \       0x2C   0xB2C9             UXTB     R1,R1
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    329            ssd1306_command(0X00);
   \       0x34   0x2100             MOVS     R1,#+0
   \       0x36   0x0020             MOVS     R0,R4
   \       0x38   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    330            ssd1306_command(0XFF);
   \       0x3C   0x21FF             MOVS     R1,#+255
   \       0x3E   0x0020             MOVS     R0,R4
   \       0x40   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    331            ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   \       0x44   0x212F             MOVS     R1,#+47
   \       0x46   0x0020             MOVS     R0,R4
   \       0x48   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    332          }
   \       0x4C   0xBD70             POP      {R4-R6,PC}
    333          
    334          // startscrolldiagright
    335          // Activate a diagonal scroll for rows start through stop
    336          // Hint, the display is 16 rows tall. To scroll the whole display, run:
    337          // display.scrollright(0x00, 0x0F)

   \                                 In section .text, align 2, keep-with-next
    338          void Adafruit_SSD1306::startscrolldiagright(uint8_t start, uint8_t stop)
    339          {
   \                     _ZN16Adafruit_SSD130620startscrolldiagrightEhh: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    340            ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
   \        0x8   0x21A3             MOVS     R1,#+163
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    341            ssd1306_command(0X00);
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    342            ssd1306_command(SSD1306_LCDHEIGHT);
   \       0x18   0x2120             MOVS     R1,#+32
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    343            ssd1306_command(SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL);
   \       0x20   0x2129             MOVS     R1,#+41
   \       0x22   0x0020             MOVS     R0,R4
   \       0x24   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    344            ssd1306_command(0X00);
   \       0x28   0x2100             MOVS     R1,#+0
   \       0x2A   0x0020             MOVS     R0,R4
   \       0x2C   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    345            ssd1306_command(start);
   \       0x30   0x0029             MOVS     R1,R5
   \       0x32   0xB2C9             UXTB     R1,R1
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    346            ssd1306_command(0X00);
   \       0x3A   0x2100             MOVS     R1,#+0
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    347            ssd1306_command(stop);
   \       0x42   0x0031             MOVS     R1,R6
   \       0x44   0xB2C9             UXTB     R1,R1
   \       0x46   0x0020             MOVS     R0,R4
   \       0x48   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    348            ssd1306_command(0X01);
   \       0x4C   0x2101             MOVS     R1,#+1
   \       0x4E   0x0020             MOVS     R0,R4
   \       0x50   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    349            ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   \       0x54   0x212F             MOVS     R1,#+47
   \       0x56   0x0020             MOVS     R0,R4
   \       0x58   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    350          }
   \       0x5C   0xBD70             POP      {R4-R6,PC}
    351          
    352          // startscrolldiagleft
    353          // Activate a diagonal scroll for rows start through stop
    354          // Hint, the display is 16 rows tall. To scroll the whole display, run:
    355          // display.scrollright(0x00, 0x0F)

   \                                 In section .text, align 2, keep-with-next
    356          void Adafruit_SSD1306::startscrolldiagleft(uint8_t start, uint8_t stop)
    357          {
   \                     _ZN16Adafruit_SSD130619startscrolldiagleftEhh: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
    358            ssd1306_command(SSD1306_SET_VERTICAL_SCROLL_AREA);
   \        0x8   0x21A3             MOVS     R1,#+163
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    359            ssd1306_command(0X00);
   \       0x10   0x2100             MOVS     R1,#+0
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    360            ssd1306_command(SSD1306_LCDHEIGHT);
   \       0x18   0x2120             MOVS     R1,#+32
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    361            ssd1306_command(SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL);
   \       0x20   0x212A             MOVS     R1,#+42
   \       0x22   0x0020             MOVS     R0,R4
   \       0x24   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    362            ssd1306_command(0X00);
   \       0x28   0x2100             MOVS     R1,#+0
   \       0x2A   0x0020             MOVS     R0,R4
   \       0x2C   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    363            ssd1306_command(start);
   \       0x30   0x0029             MOVS     R1,R5
   \       0x32   0xB2C9             UXTB     R1,R1
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    364            ssd1306_command(0X00);
   \       0x3A   0x2100             MOVS     R1,#+0
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    365            ssd1306_command(stop);
   \       0x42   0x0031             MOVS     R1,R6
   \       0x44   0xB2C9             UXTB     R1,R1
   \       0x46   0x0020             MOVS     R0,R4
   \       0x48   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    366            ssd1306_command(0X01);
   \       0x4C   0x2101             MOVS     R1,#+1
   \       0x4E   0x0020             MOVS     R0,R4
   \       0x50   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    367            ssd1306_command(SSD1306_ACTIVATE_SCROLL);
   \       0x54   0x212F             MOVS     R1,#+47
   \       0x56   0x0020             MOVS     R0,R4
   \       0x58   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    368          }
   \       0x5C   0xBD70             POP      {R4-R6,PC}
    369          

   \                                 In section .text, align 2, keep-with-next
    370          void Adafruit_SSD1306::stopscroll(void)
    371          {
   \                     _ZN16Adafruit_SSD130610stopscrollEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    372            ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
   \        0x4   0x212E             MOVS     R1,#+46
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    373          }
   \        0xC   0xBD10             POP      {R4,PC}
    374          
    375          // Dim the display
    376          // dim = true: display is dimmed
    377          // dim = false: display is normal

   \                                 In section .text, align 2, keep-with-next
    378          void Adafruit_SSD1306::dim(bool dim)
    379          {
   \                     _ZN16Adafruit_SSD13063dimEb: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    380            uint8_t contrast;
    381          
    382            if (dim)
   \        0x6   0x0028             MOVS     R0,R5
   \        0x8   0xB2C0             UXTB     R0,R0
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD001             BEQ.N    ??dim_0
    383            {
    384              contrast = 0; // Dimmed display
   \        0xE   0x2600             MOVS     R6,#+0
   \       0x10   0xE006             B.N      ??dim_1
    385            }
    386            else
    387            {
    388              if (_vccstate == SSD1306_EXTERNALVCC)
   \                     ??dim_0: (+1)
   \       0x12   0xF994 0x0018      LDRSB    R0,[R4, #+24]
   \       0x16   0x2801             CMP      R0,#+1
   \       0x18   0xD101             BNE.N    ??dim_2
    389              {
    390                contrast = 0x9F;
   \       0x1A   0x269F             MOVS     R6,#+159
   \       0x1C   0xE000             B.N      ??dim_1
    391              }
    392              else
    393              {
    394                contrast = 0xCF;
   \                     ??dim_2: (+1)
   \       0x1E   0x26CF             MOVS     R6,#+207
    395              }
    396            }
    397            // the range of contrast to too small to be really useful
    398            // it is useful to dim the display
    399            ssd1306_command(SSD1306_SETCONTRAST);
   \                     ??dim_1: (+1)
   \       0x20   0x2181             MOVS     R1,#+129
   \       0x22   0x0020             MOVS     R0,R4
   \       0x24   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    400            ssd1306_command(contrast);
   \       0x28   0x0031             MOVS     R1,R6
   \       0x2A   0xB2C9             UXTB     R1,R1
   \       0x2C   0x0020             MOVS     R0,R4
   \       0x2E   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    401          }
   \       0x32   0xBD70             POP      {R4-R6,PC}
    402          

   \                                 In section .text, align 2, keep-with-next
    403          void Adafruit_SSD1306::display(void) 
    404          {
   \                     _ZN16Adafruit_SSD13067displayEv: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    405            ssd1306_command(SSD1306_COLUMNADDR);
   \        0x4   0x2121             MOVS     R1,#+33
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    406            ssd1306_command(0);   // Column start address (0 = reset)
   \        0xC   0x2100             MOVS     R1,#+0
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    407            ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
   \       0x14   0x217F             MOVS     R1,#+127
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    408          
    409            ssd1306_command(SSD1306_PAGEADDR);
   \       0x1C   0x2122             MOVS     R1,#+34
   \       0x1E   0x0020             MOVS     R0,R4
   \       0x20   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    410            ssd1306_command(0); // Page start address (0 = reset)
   \       0x24   0x2100             MOVS     R1,#+0
   \       0x26   0x0020             MOVS     R0,R4
   \       0x28   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    411            #if SSD1306_LCDHEIGHT == 64
    412              ssd1306_command(7); // Page end address
    413            #endif
    414            #if SSD1306_LCDHEIGHT == 32
    415              ssd1306_command(3); // Page end address
   \       0x2C   0x2103             MOVS     R1,#+3
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x.... 0x....      BL       _ZN16Adafruit_SSD130615ssd1306_commandEh
    416            #endif
    417            #if SSD1306_LCDHEIGHT == 16
    418              ssd1306_command(1); // Page end address
    419            #endif
    420            
    421            // save I2C bitrate
    422          #ifdef TWBR
    423            uint8_t twbrbackup = TWBR;
    424            TWBR = 12; // upgrade to 400KHz!
    425          #endif
    426          
    427          //I2C write
    428            for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i += 128) 
   \       0x34   0x2500             MOVS     R5,#+0
   \                     ??display_0: (+1)
   \       0x36   0x0028             MOVS     R0,R5
   \       0x38   0xB280             UXTH     R0,R0
   \       0x3A   0xF5B0 0x7F00      CMP      R0,#+512
   \       0x3E   0xDA06             BGE.N    ??display_1
    429            {
    430              
    431              ssd1306_data(i);
   \       0x40   0x0029             MOVS     R1,R5
   \       0x42   0xB289             UXTH     R1,R1
   \       0x44   0x0020             MOVS     R0,R4
   \       0x46   0x.... 0x....      BL       _ZN16Adafruit_SSD130612ssd1306_dataEt
    432            }
   \       0x4A   0x3580             ADDS     R5,R5,#+128
   \       0x4C   0xE7F3             B.N      ??display_0
    433          
    434          #ifdef TWBR
    435              TWBR = twbrbackup;
    436          #endif
    437            
    438          }
   \                     ??display_1: (+1)
   \       0x4E   0xBD31             POP      {R0,R4,R5,PC}
    439          
    440          // clear everything

   \                                 In section .text, align 2, keep-with-next
    441          void Adafruit_SSD1306::clearDisplay(void)
    442          {
   \                     _ZN16Adafruit_SSD130612clearDisplayEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    443            
    444            memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
   \        0x4   0xF44F 0x7300      MOV      R3,#+512
   \        0x8   0x2200             MOVS     R2,#+0
   \        0xA   0x.... 0x....      LDR.W    R1,??DataTable16_1
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       _ZN16Adafruit_SSD13066memsetEPhtt
    445          }
   \       0x14   0xBD10             POP      {R4,PC}
    446          
    447          

   \                                 In section .text, align 2, keep-with-next
    448          void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
    449          {
   \                     _ZN16Adafruit_SSD130613drawFastHLineEssst: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \        0x4   0x9C0C             LDR      R4,[SP, #+48]
    450            bool bSwap = false;
   \        0x6   0x2600             MOVS     R6,#+0
    451            switch(rotation)
   \        0x8   0x7D45             LDRB     R5,[R0, #+21]
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD005             BEQ.N    ??drawFastHLine_0
   \        0xE   0x2D02             CMP      R5,#+2
   \       0x10   0xD00E             BEQ.N    ??drawFastHLine_1
   \       0x12   0xD303             BCC.N    ??drawFastHLine_2
   \       0x14   0x2D03             CMP      R5,#+3
   \       0x16   0xD014             BEQ.N    ??drawFastHLine_3
   \       0x18   0xE01D             B.N      ??drawFastHLine_4
    452            {
    453              case 0:
    454                // 0 degree rotation, do nothing
    455                break;
   \                     ??drawFastHLine_0: (+1)
   \       0x1A   0xE01C             B.N      ??drawFastHLine_4
    456              case 1:
    457                // 90 degree rotation, swap x & y for rotation, then invert x
    458                bSwap = true;
   \                     ??drawFastHLine_2: (+1)
   \       0x1C   0x2501             MOVS     R5,#+1
   \       0x1E   0x002E             MOVS     R6,R5
    459                ssd1306_swap(x, y);
   \       0x20   0x000F             MOVS     R7,R1
   \       0x22   0x0015             MOVS     R5,R2
   \       0x24   0x003A             MOVS     R2,R7
    460                x = WIDTH - x - 1;
   \       0x26   0x8887             LDRH     R7,[R0, #+4]
   \       0x28   0x1B7D             SUBS     R5,R7,R5
   \       0x2A   0x1E6D             SUBS     R5,R5,#+1
   \       0x2C   0x0029             MOVS     R1,R5
    461                break;
   \       0x2E   0xE012             B.N      ??drawFastHLine_4
    462              case 2:
    463                // 180 degree rotation, invert x and y - then shift y around for height.
    464                x = WIDTH - x - 1;
   \                     ??drawFastHLine_1: (+1)
   \       0x30   0x8885             LDRH     R5,[R0, #+4]
   \       0x32   0x1A69             SUBS     R1,R5,R1
   \       0x34   0x1E49             SUBS     R1,R1,#+1
    465                y = HEIGHT - y - 1;
   \       0x36   0x88C5             LDRH     R5,[R0, #+6]
   \       0x38   0x1AAA             SUBS     R2,R5,R2
   \       0x3A   0x1E52             SUBS     R2,R2,#+1
    466                x -= (w-1);
   \       0x3C   0x1AC9             SUBS     R1,R1,R3
   \       0x3E   0x1C49             ADDS     R1,R1,#+1
    467                break;
   \       0x40   0xE009             B.N      ??drawFastHLine_4
    468              case 3:
    469                // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
    470                bSwap = true;
   \                     ??drawFastHLine_3: (+1)
   \       0x42   0x2501             MOVS     R5,#+1
   \       0x44   0x002E             MOVS     R6,R5
    471                ssd1306_swap(x, y);
   \       0x46   0x000D             MOVS     R5,R1
   \       0x48   0x0011             MOVS     R1,R2
    472                y = HEIGHT - y - 1;
   \       0x4A   0x88C7             LDRH     R7,[R0, #+6]
   \       0x4C   0x1B7D             SUBS     R5,R7,R5
   \       0x4E   0x1E6D             SUBS     R5,R5,#+1
    473                y -= (w-1);
   \       0x50   0x1AED             SUBS     R5,R5,R3
   \       0x52   0x1C6D             ADDS     R5,R5,#+1
   \       0x54   0x002A             MOVS     R2,R5
    474                break;
    475            }
    476          
    477            if(bSwap)
   \                     ??drawFastHLine_4: (+1)
   \       0x56   0x0035             MOVS     R5,R6
   \       0x58   0xB2ED             UXTB     R5,R5
   \       0x5A   0x2D00             CMP      R5,#+0
   \       0x5C   0xF000 0x80F3      BEQ.W    ??drawFastHLine_5
    478            {
    479              drawFastVLineInternal(x, y, w, color);
   \       0x60   0xF8AD 0x4002      STRH     R4,[SP, #+2]
   \       0x64   0x001F             MOVS     R7,R3
   \       0x66   0xF8AD 0x2000      STRH     R2,[SP, #+0]
   \       0x6A   0xF8AD 0x1004      STRH     R1,[SP, #+4]
   \       0x6E   0x9002             STR      R0,[SP, #+8]
   \       0x70   0xF9BD 0x5004      LDRSH    R5,[SP, #+4]
   \       0x74   0x2D00             CMP      R5,#+0
   \       0x76   0xF100 0x80E5      BMI.W    ??drawFastHLine_6
   \       0x7A   0xF9BD 0x5004      LDRSH    R5,[SP, #+4]
   \       0x7E   0xF8DD 0xC008      LDR      R12,[SP, #+8]
   \       0x82   0xF9BC 0xC004      LDRSH    R12,[R12, #+4]
   \       0x86   0x4565             CMP      R5,R12
   \       0x88   0xF280 0x80DC      BGE.W    ??drawFastHLine_6
   \       0x8C   0xF9BD 0x5000      LDRSH    R5,[SP, #+0]
   \       0x90   0x2D00             CMP      R5,#+0
   \       0x92   0xD505             BPL.N    ??drawFastHLine_7
   \       0x94   0xF8BD 0x5000      LDRH     R5,[SP, #+0]
   \       0x98   0x19EF             ADDS     R7,R5,R7
   \       0x9A   0x2500             MOVS     R5,#+0
   \       0x9C   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \                     ??drawFastHLine_7: (+1)
   \       0xA0   0x9D02             LDR      R5,[SP, #+8]
   \       0xA2   0xF9B5 0x5006      LDRSH    R5,[R5, #+6]
   \       0xA6   0xF9BD 0xC000      LDRSH    R12,[SP, #+0]
   \       0xAA   0xFA0C 0xFC87      SXTAH    R12,R12,R7
   \       0xAE   0x4565             CMP      R5,R12
   \       0xB0   0xDA07             BGE.N    ??drawFastHLine_8
   \       0xB2   0x9D02             LDR      R5,[SP, #+8]
   \       0xB4   0xF8B5 0xC006      LDRH     R12,[R5, #+6]
   \       0xB8   0xF8BD 0x5000      LDRH     R5,[SP, #+0]
   \       0xBC   0xEBBC 0x0C05      SUBS     R12,R12,R5
   \       0xC0   0x4667             MOV      R7,R12
   \                     ??drawFastHLine_8: (+1)
   \       0xC2   0x003D             MOVS     R5,R7
   \       0xC4   0xB22D             SXTH     R5,R5
   \       0xC6   0x2D01             CMP      R5,#+1
   \       0xC8   0xF2C0 0x80BC      BLT.W    ??drawFastHLine_9
   \                     ??drawFastHLine_10: (+1)
   \       0xCC   0xF8BD 0x5000      LDRH     R5,[SP, #+0]
   \       0xD0   0x46BC             MOV      R12,R7
   \       0xD2   0x.... 0x....      LDR.W    LR,??DataTable16_1
   \       0xD6   0x46A8             MOV      R8,R5
   \       0xD8   0xFA5F 0xF888      UXTB     R8,R8
   \       0xDC   0xEA5F 0x08E8      ASRS     R8,R8,#+3
   \       0xE0   0xEA5F 0x18C8      LSLS     R8,R8,#+7
   \       0xE4   0x44C6             ADD      LR,LR,R8
   \       0xE6   0xF9BD 0x8004      LDRSH    R8,[SP, #+4]
   \       0xEA   0x44C6             ADD      LR,LR,R8
   \       0xEC   0xF015 0x0807      ANDS     R8,R5,#0x7
   \       0xF0   0x46C1             MOV      R9,R8
   \       0xF2   0xFA5F 0xF989      UXTB     R9,R9
   \       0xF6   0xF1B9 0x0F00      CMP      R9,#+0
   \       0xFA   0xD042             BEQ.N    ??drawFastHLine_11
   \       0xFC   0xF1D8 0x0808      RSBS     R8,R8,#+8
   \      0x100   0x.... 0x....      LDR.W    R9,??DataTable25
   \      0x104   0x46C2             MOV      R10,R8
   \      0x106   0xFA5F 0xFA8A      UXTB     R10,R10
   \      0x10A   0xF819 0x900A      LDRB     R9,[R9, R10]
   \      0x10E   0x46E2             MOV      R10,R12
   \      0x110   0x46C3             MOV      R11,R8
   \      0x112   0xFA5F 0xFA8A      UXTB     R10,R10
   \      0x116   0xFA5F 0xFB8B      UXTB     R11,R11
   \      0x11A   0x45DA             CMP      R10,R11
   \      0x11C   0xD207             BCS.N    ??drawFastHLine_12
   \      0x11E   0xF04F 0x0AFF      MOV      R10,#+255
   \      0x122   0xEBB8 0x0B0C      SUBS     R11,R8,R12
   \      0x126   0xFA5A 0xFA0B      ASRS     R10,R10,R11
   \      0x12A   0xEA1A 0x0909      ANDS     R9,R10,R9
   \                     ??drawFastHLine_12: (+1)
   \      0x12E   0xF8BD 0xA002      LDRH     R10,[SP, #+2]
   \      0x132   0xF1BA 0x0F00      CMP      R10,#+0
   \      0x136   0xD00B             BEQ.N    ??drawFastHLine_13
   \      0x138   0xF1BA 0x0F02      CMP      R10,#+2
   \      0x13C   0xD001             BEQ.N    ??drawFastHLine_14
   \      0x13E   0xD30E             BCC.N    ??drawFastHLine_15
   \      0x140   0xE013             B.N      ??drawFastHLine_16
   \                     ??drawFastHLine_14: (+1)
   \      0x142   0xF89E 0xA000      LDRB     R10,[LR, #+0]
   \      0x146   0xEA99 0x0A0A      EORS     R10,R9,R10
   \      0x14A   0xF88E 0xA000      STRB     R10,[LR, #+0]
   \      0x14E   0xE00C             B.N      ??drawFastHLine_16
   \                     ??drawFastHLine_13: (+1)
   \      0x150   0xF89E 0xA000      LDRB     R10,[LR, #+0]
   \      0x154   0xEA3A 0x0A09      BICS     R10,R10,R9
   \      0x158   0xF88E 0xA000      STRB     R10,[LR, #+0]
   \      0x15C   0xE005             B.N      ??drawFastHLine_16
   \                     ??drawFastHLine_15: (+1)
   \      0x15E   0xF89E 0xA000      LDRB     R10,[LR, #+0]
   \      0x162   0xEA59 0x0A0A      ORRS     R10,R9,R10
   \      0x166   0xF88E 0xA000      STRB     R10,[LR, #+0]
   \                     ??drawFastHLine_16: (+1)
   \      0x16A   0x46E2             MOV      R10,R12
   \      0x16C   0x46C3             MOV      R11,R8
   \      0x16E   0xFA5F 0xFA8A      UXTB     R10,R10
   \      0x172   0xFA5F 0xFB8B      UXTB     R11,R11
   \      0x176   0x45DA             CMP      R10,R11
   \      0x178   0xD364             BCC.N    ??drawFastHLine_9
   \                     ??drawFastHLine_17: (+1)
   \      0x17A   0xEBBC 0x0C08      SUBS     R12,R12,R8
   \      0x17E   0xF11E 0x0E80      ADDS     LR,LR,#+128
   \                     ??drawFastHLine_11: (+1)
   \      0x182   0x46E1             MOV      R9,R12
   \      0x184   0xFA5F 0xF989      UXTB     R9,R9
   \      0x188   0xF1B9 0x0F08      CMP      R9,#+8
   \      0x18C   0xDB2B             BLT.N    ??drawFastHLine_18
   \      0x18E   0xF8BD 0x9002      LDRH     R9,[SP, #+2]
   \      0x192   0xF1B9 0x0F02      CMP      R9,#+2
   \      0x196   0xD110             BNE.N    ??drawFastHLine_19
   \                     ??drawFastHLine_20: (+1)
   \      0x198   0xF89E 0x9000      LDRB     R9,[LR, #+0]
   \      0x19C   0xEA7F 0x0909      MVNS     R9,R9
   \      0x1A0   0xF88E 0x9000      STRB     R9,[LR, #+0]
   \      0x1A4   0xF11E 0x0E80      ADDS     LR,LR,#+128
   \      0x1A8   0xF1BC 0x0C08      SUBS     R12,R12,#+8
   \      0x1AC   0x46E1             MOV      R9,R12
   \      0x1AE   0xFA5F 0xF989      UXTB     R9,R9
   \      0x1B2   0xF1B9 0x0F08      CMP      R9,#+8
   \      0x1B6   0xDAEF             BGE.N    ??drawFastHLine_20
   \      0x1B8   0xE015             B.N      ??drawFastHLine_18
   \                     ??drawFastHLine_19: (+1)
   \      0x1BA   0xF8BD 0x9002      LDRH     R9,[SP, #+2]
   \      0x1BE   0xF1B9 0x0F01      CMP      R9,#+1
   \      0x1C2   0xD102             BNE.N    ??drawFastHLine_21
   \      0x1C4   0xF04F 0x09FF      MOV      R9,#+255
   \      0x1C8   0xE001             B.N      ??drawFastHLine_22
   \                     ??drawFastHLine_21: (+1)
   \      0x1CA   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??drawFastHLine_22: (+1)
   \      0x1CE   0xF88E 0x9000      STRB     R9,[LR, #+0]
   \      0x1D2   0xF11E 0x0E80      ADDS     LR,LR,#+128
   \      0x1D6   0xF1BC 0x0C08      SUBS     R12,R12,#+8
   \      0x1DA   0x46E2             MOV      R10,R12
   \      0x1DC   0xFA5F 0xFA8A      UXTB     R10,R10
   \      0x1E0   0xF1BA 0x0F08      CMP      R10,#+8
   \      0x1E4   0xDAF3             BGE.N    ??drawFastHLine_22
   \                     ??drawFastHLine_18: (+1)
   \      0x1E6   0x46E1             MOV      R9,R12
   \      0x1E8   0xFA5F 0xF989      UXTB     R9,R9
   \      0x1EC   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x1F0   0xD027             BEQ.N    ??drawFastHLine_23
   \      0x1F2   0xF01C 0x0907      ANDS     R9,R12,#0x7
   \      0x1F6   0x46C8             MOV      R8,R9
   \      0x1F8   0x.... 0x....      LDR.W    R9,??DataTable26
   \      0x1FC   0x46C2             MOV      R10,R8
   \      0x1FE   0xFA5F 0xFA8A      UXTB     R10,R10
   \      0x202   0xF819 0x900A      LDRB     R9,[R9, R10]
   \      0x206   0xF8BD 0xA002      LDRH     R10,[SP, #+2]
   \      0x20A   0xF1BA 0x0F00      CMP      R10,#+0
   \      0x20E   0xD00B             BEQ.N    ??drawFastHLine_24
   \      0x210   0xF1BA 0x0F02      CMP      R10,#+2
   \      0x214   0xD001             BEQ.N    ??drawFastHLine_25
   \      0x216   0xD30E             BCC.N    ??drawFastHLine_26
   \      0x218   0xE013             B.N      ??drawFastHLine_23
   \                     ??drawFastHLine_25: (+1)
   \      0x21A   0xF89E 0xA000      LDRB     R10,[LR, #+0]
   \      0x21E   0xEA99 0x0A0A      EORS     R10,R9,R10
   \      0x222   0xF88E 0xA000      STRB     R10,[LR, #+0]
   \      0x226   0xE00C             B.N      ??drawFastHLine_23
   \                     ??drawFastHLine_24: (+1)
   \      0x228   0xF89E 0xA000      LDRB     R10,[LR, #+0]
   \      0x22C   0xEA3A 0x0A09      BICS     R10,R10,R9
   \      0x230   0xF88E 0xA000      STRB     R10,[LR, #+0]
   \      0x234   0xE005             B.N      ??drawFastHLine_23
   \                     ??drawFastHLine_26: (+1)
   \      0x236   0xF89E 0xA000      LDRB     R10,[LR, #+0]
   \      0x23A   0xEA59 0x0A0A      ORRS     R10,R9,R10
   \      0x23E   0xF88E 0xA000      STRB     R10,[LR, #+0]
   \                     ??drawFastHLine_23: (+1)
   \      0x242   0xE7FF             B.N      ??drawFastHLine_9
    480            }
   \                     ??drawFastHLine_6: (+1)
   \                     ??drawFastHLine_9: (+1)
   \      0x244   0xE08C             B.N      ??drawFastHLine_27
    481            else
    482            {
    483              drawFastHLineInternal(x, y, w, color);
   \                     ??drawFastHLine_5: (+1)
   \      0x246   0x0025             MOVS     R5,R4
   \      0x248   0x4698             MOV      R8,R3
   \      0x24A   0x0017             MOVS     R7,R2
   \      0x24C   0x468C             MOV      R12,R1
   \      0x24E   0x4686             MOV      LR,R0
   \      0x250   0x46B9             MOV      R9,R7
   \      0x252   0xFA0F 0xF989      SXTH     R9,R9
   \      0x256   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x25A   0xF100 0x8081      BMI.W    ??drawFastHLine_28
   \      0x25E   0x46B9             MOV      R9,R7
   \      0x260   0xF9BE 0xA006      LDRSH    R10,[LR, #+6]
   \      0x264   0xFA0F 0xF989      SXTH     R9,R9
   \      0x268   0x45D1             CMP      R9,R10
   \      0x26A   0xDA79             BGE.N    ??drawFastHLine_28
   \      0x26C   0x46E1             MOV      R9,R12
   \      0x26E   0xFA0F 0xF989      SXTH     R9,R9
   \      0x272   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x276   0xD504             BPL.N    ??drawFastHLine_29
   \      0x278   0xEB1C 0x0808      ADDS     R8,R12,R8
   \      0x27C   0xF05F 0x0900      MOVS     R9,#+0
   \      0x280   0x46CC             MOV      R12,R9
   \                     ??drawFastHLine_29: (+1)
   \      0x282   0xF9BE 0x9004      LDRSH    R9,[LR, #+4]
   \      0x286   0x46C2             MOV      R10,R8
   \      0x288   0xFA0F 0xFA8A      SXTH     R10,R10
   \      0x28C   0xFA0A 0xFA8C      SXTAH    R10,R10,R12
   \      0x290   0x45D1             CMP      R9,R10
   \      0x292   0xDA04             BGE.N    ??drawFastHLine_30
   \      0x294   0xF8BE 0x9004      LDRH     R9,[LR, #+4]
   \      0x298   0xEBB9 0x090C      SUBS     R9,R9,R12
   \      0x29C   0x46C8             MOV      R8,R9
   \                     ??drawFastHLine_30: (+1)
   \      0x29E   0x46C1             MOV      R9,R8
   \      0x2A0   0xFA0F 0xF989      SXTH     R9,R9
   \      0x2A4   0xF1B9 0x0F01      CMP      R9,#+1
   \      0x2A8   0xDB5A             BLT.N    ??drawFastHLine_31
   \                     ??drawFastHLine_32: (+1)
   \      0x2AA   0x.... 0x....      LDR.W    R9,??DataTable16_1
   \      0x2AE   0x46BA             MOV      R10,R7
   \      0x2B0   0xFA0F 0xFA8A      SXTH     R10,R10
   \      0x2B4   0xF05F 0x0B08      MOVS     R11,#+8
   \      0x2B8   0xFB9A 0xFAFB      SDIV     R10,R10,R11
   \      0x2BC   0xEA5F 0x1ACA      LSLS     R10,R10,#+7
   \      0x2C0   0x44D1             ADD      R9,R9,R10
   \      0x2C2   0x46E2             MOV      R10,R12
   \      0x2C4   0xFA0F 0xFA8A      SXTH     R10,R10
   \      0x2C8   0x44D1             ADD      R9,R9,R10
   \      0x2CA   0xF05F 0x0B01      MOVS     R11,#+1
   \      0x2CE   0xF017 0x0A07      ANDS     R10,R7,#0x7
   \      0x2D2   0xFA1B 0xFA0A      LSLS     R10,R11,R10
   \      0x2D6   0x46AB             MOV      R11,R5
   \      0x2D8   0xFA1F 0xFB8B      UXTH     R11,R11
   \      0x2DC   0xF1BB 0x0F00      CMP      R11,#+0
   \      0x2E0   0xD016             BEQ.N    ??drawFastHLine_33
   \      0x2E2   0xF1BB 0x0F02      CMP      R11,#+2
   \      0x2E6   0xD001             BEQ.N    ??drawFastHLine_34
   \      0x2E8   0xD328             BCC.N    ??drawFastHLine_35
   \      0x2EA   0xE038             B.N      ??drawFastHLine_36
   \                     ??drawFastHLine_34: (+1)
   \      0x2EC   0x46C3             MOV      R11,R8
   \      0x2EE   0xF1BB 0x0801      SUBS     R8,R11,#+1
   \      0x2F2   0xFA0F 0xFB8B      SXTH     R11,R11
   \      0x2F6   0xF1BB 0x0F00      CMP      R11,#+0
   \      0x2FA   0xD008             BEQ.N    ??drawFastHLine_37
   \      0x2FC   0xF899 0xB000      LDRB     R11,[R9, #+0]
   \      0x300   0xEA9A 0x0B0B      EORS     R11,R10,R11
   \      0x304   0xF889 0xB000      STRB     R11,[R9, #+0]
   \      0x308   0xF119 0x0901      ADDS     R9,R9,#+1
   \      0x30C   0xE7EE             B.N      ??drawFastHLine_34
   \                     ??drawFastHLine_37: (+1)
   \      0x30E   0xE026             B.N      ??drawFastHLine_36
   \                     ??drawFastHLine_33: (+1)
   \      0x310   0xFA5F 0xFA8A      UXTB     R10,R10
   \      0x314   0xEA7F 0x0A0A      MVNS     R10,R10
   \                     ??drawFastHLine_38: (+1)
   \      0x318   0x46C3             MOV      R11,R8
   \      0x31A   0xF1BB 0x0801      SUBS     R8,R11,#+1
   \      0x31E   0xFA0F 0xFB8B      SXTH     R11,R11
   \      0x322   0xF1BB 0x0F00      CMP      R11,#+0
   \      0x326   0xD008             BEQ.N    ??drawFastHLine_39
   \      0x328   0xF899 0xB000      LDRB     R11,[R9, #+0]
   \      0x32C   0xEA1A 0x0B0B      ANDS     R11,R10,R11
   \      0x330   0xF889 0xB000      STRB     R11,[R9, #+0]
   \      0x334   0xF119 0x0901      ADDS     R9,R9,#+1
   \      0x338   0xE7EE             B.N      ??drawFastHLine_38
   \                     ??drawFastHLine_39: (+1)
   \      0x33A   0xE010             B.N      ??drawFastHLine_36
   \                     ??drawFastHLine_35: (+1)
   \      0x33C   0x46C3             MOV      R11,R8
   \      0x33E   0xF1BB 0x0801      SUBS     R8,R11,#+1
   \      0x342   0xFA0F 0xFB8B      SXTH     R11,R11
   \      0x346   0xF1BB 0x0F00      CMP      R11,#+0
   \      0x34A   0xD008             BEQ.N    ??drawFastHLine_40
   \      0x34C   0xF899 0xB000      LDRB     R11,[R9, #+0]
   \      0x350   0xEA5A 0x0B0B      ORRS     R11,R10,R11
   \      0x354   0xF889 0xB000      STRB     R11,[R9, #+0]
   \      0x358   0xF119 0x0901      ADDS     R9,R9,#+1
   \      0x35C   0xE7EE             B.N      ??drawFastHLine_35
   \                     ??drawFastHLine_40: (+1)
   \                     ??drawFastHLine_36: (+1)
   \      0x35E   0xE7FF             B.N      ??drawFastHLine_31
    484            }
    485          }
   \                     ??drawFastHLine_28: (+1)
   \                     ??drawFastHLine_31: (+1)
   \                     ??drawFastHLine_27: (+1)
   \      0x360   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}
    486          
    487          void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color)
    488          {
    489            // Do bounds/limit checks
    490            if(y < 0 || y >= HEIGHT) { return; }
    491          
    492            // make sure we don't try to draw below 0
    493            if(x < 0)
    494            {
    495              w += x;
    496              x = 0;
    497            }
    498          
    499            // make sure we don't go off the edge of the display
    500            if( (x + w) > WIDTH)
    501            {
    502              w = (WIDTH - x);
    503            }
    504          
    505            // if our width is now negative, punt
    506            if(w <= 0) { return; }
    507          
    508            // set up the pointer for  movement through the buffer
    509            register uint8_t *pBuf = buffer;
    510            // adjust the buffer pointer for the current row
    511            pBuf += ((y/8) * SSD1306_LCDWIDTH);
    512            // and offset x columns in
    513            pBuf += x;
    514          
    515            register uint8_t mask = 1 << (y&7);
    516          
    517            switch (color)
    518            {
    519            case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
    520              case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
    521            case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
    522            }
    523          }
    524          

   \                                 In section .text, align 2, keep-with-next
    525          void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
    526          {
   \                     _ZN16Adafruit_SSD130613drawFastVLineEssst: (+1)
   \        0x0   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \        0x4   0x9C0C             LDR      R4,[SP, #+48]
    527            bool bSwap = false;
   \        0x6   0x2600             MOVS     R6,#+0
    528            switch(rotation)
   \        0x8   0x7D45             LDRB     R5,[R0, #+21]
   \        0xA   0x2D00             CMP      R5,#+0
   \        0xC   0xD005             BEQ.N    ??drawFastVLine_0
   \        0xE   0x2D02             CMP      R5,#+2
   \       0x10   0xD010             BEQ.N    ??drawFastVLine_1
   \       0x12   0xD303             BCC.N    ??drawFastVLine_2
   \       0x14   0x2D03             CMP      R5,#+3
   \       0x16   0xD016             BEQ.N    ??drawFastVLine_3
   \       0x18   0xE01D             B.N      ??drawFastVLine_4
    529            {
    530              case 0:
    531                break;
   \                     ??drawFastVLine_0: (+1)
   \       0x1A   0xE01C             B.N      ??drawFastVLine_4
    532              case 1:
    533                // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
    534                bSwap = true;
   \                     ??drawFastVLine_2: (+1)
   \       0x1C   0x2501             MOVS     R5,#+1
   \       0x1E   0x002E             MOVS     R6,R5
    535                ssd1306_swap(x, y);
   \       0x20   0x000F             MOVS     R7,R1
   \       0x22   0x0015             MOVS     R5,R2
   \       0x24   0x003A             MOVS     R2,R7
    536                x = WIDTH - x - 1;
   \       0x26   0x8887             LDRH     R7,[R0, #+4]
   \       0x28   0x1B7D             SUBS     R5,R7,R5
   \       0x2A   0x1E6D             SUBS     R5,R5,#+1
    537                x -= (h-1);
   \       0x2C   0x1AED             SUBS     R5,R5,R3
   \       0x2E   0x1C6D             ADDS     R5,R5,#+1
   \       0x30   0x0029             MOVS     R1,R5
    538                break;
   \       0x32   0xE010             B.N      ??drawFastVLine_4
    539              case 2:
    540                // 180 degree rotation, invert x and y - then shift y around for height.
    541                x = WIDTH - x - 1;
   \                     ??drawFastVLine_1: (+1)
   \       0x34   0x8885             LDRH     R5,[R0, #+4]
   \       0x36   0x1A69             SUBS     R1,R5,R1
   \       0x38   0x1E49             SUBS     R1,R1,#+1
    542                y = HEIGHT - y - 1;
   \       0x3A   0x88C5             LDRH     R5,[R0, #+6]
   \       0x3C   0x1AAA             SUBS     R2,R5,R2
   \       0x3E   0x1E52             SUBS     R2,R2,#+1
    543                y -= (h-1);
   \       0x40   0x1AD2             SUBS     R2,R2,R3
   \       0x42   0x1C52             ADDS     R2,R2,#+1
    544                break;
   \       0x44   0xE007             B.N      ??drawFastVLine_4
    545              case 3:
    546                // 270 degree rotation, swap x & y for rotation, then invert y
    547                bSwap = true;
   \                     ??drawFastVLine_3: (+1)
   \       0x46   0x2501             MOVS     R5,#+1
   \       0x48   0x002E             MOVS     R6,R5
    548                ssd1306_swap(x, y);
   \       0x4A   0x000D             MOVS     R5,R1
   \       0x4C   0x0011             MOVS     R1,R2
    549                y = HEIGHT - y - 1;
   \       0x4E   0x88C7             LDRH     R7,[R0, #+6]
   \       0x50   0x1B7D             SUBS     R5,R7,R5
   \       0x52   0x1E6D             SUBS     R5,R5,#+1
   \       0x54   0x002A             MOVS     R2,R5
    550                break;
    551            }
    552          
    553            if(bSwap)
   \                     ??drawFastVLine_4: (+1)
   \       0x56   0x0035             MOVS     R5,R6
   \       0x58   0xB2ED             UXTB     R5,R5
   \       0x5A   0x2D00             CMP      R5,#+0
   \       0x5C   0xF000 0x808E      BEQ.W    ??drawFastVLine_5
    554            {
    555              drawFastHLineInternal(x, y, h, color);
   \       0x60   0x0025             MOVS     R5,R4
   \       0x62   0x4698             MOV      R8,R3
   \       0x64   0x0017             MOVS     R7,R2
   \       0x66   0x468C             MOV      R12,R1
   \       0x68   0x4686             MOV      LR,R0
   \       0x6A   0x46B9             MOV      R9,R7
   \       0x6C   0xFA0F 0xF989      SXTH     R9,R9
   \       0x70   0xF1B9 0x0F00      CMP      R9,#+0
   \       0x74   0xF100 0x8081      BMI.W    ??drawFastVLine_6
   \       0x78   0x46B9             MOV      R9,R7
   \       0x7A   0xF9BE 0xA006      LDRSH    R10,[LR, #+6]
   \       0x7E   0xFA0F 0xF989      SXTH     R9,R9
   \       0x82   0x45D1             CMP      R9,R10
   \       0x84   0xDA79             BGE.N    ??drawFastVLine_6
   \       0x86   0x46E1             MOV      R9,R12
   \       0x88   0xFA0F 0xF989      SXTH     R9,R9
   \       0x8C   0xF1B9 0x0F00      CMP      R9,#+0
   \       0x90   0xD504             BPL.N    ??drawFastVLine_7
   \       0x92   0xEB1C 0x0808      ADDS     R8,R12,R8
   \       0x96   0xF05F 0x0900      MOVS     R9,#+0
   \       0x9A   0x46CC             MOV      R12,R9
   \                     ??drawFastVLine_7: (+1)
   \       0x9C   0xF9BE 0x9004      LDRSH    R9,[LR, #+4]
   \       0xA0   0x46C2             MOV      R10,R8
   \       0xA2   0xFA0F 0xFA8A      SXTH     R10,R10
   \       0xA6   0xFA0A 0xFA8C      SXTAH    R10,R10,R12
   \       0xAA   0x45D1             CMP      R9,R10
   \       0xAC   0xDA04             BGE.N    ??drawFastVLine_8
   \       0xAE   0xF8BE 0x9004      LDRH     R9,[LR, #+4]
   \       0xB2   0xEBB9 0x090C      SUBS     R9,R9,R12
   \       0xB6   0x46C8             MOV      R8,R9
   \                     ??drawFastVLine_8: (+1)
   \       0xB8   0x46C1             MOV      R9,R8
   \       0xBA   0xFA0F 0xF989      SXTH     R9,R9
   \       0xBE   0xF1B9 0x0F01      CMP      R9,#+1
   \       0xC2   0xDB5A             BLT.N    ??drawFastVLine_9
   \                     ??drawFastVLine_10: (+1)
   \       0xC4   0x.... 0x....      LDR.W    R9,??DataTable11
   \       0xC8   0x46BA             MOV      R10,R7
   \       0xCA   0xFA0F 0xFA8A      SXTH     R10,R10
   \       0xCE   0xF05F 0x0B08      MOVS     R11,#+8
   \       0xD2   0xFB9A 0xFAFB      SDIV     R10,R10,R11
   \       0xD6   0xEA5F 0x1ACA      LSLS     R10,R10,#+7
   \       0xDA   0x44D1             ADD      R9,R9,R10
   \       0xDC   0x46E2             MOV      R10,R12
   \       0xDE   0xFA0F 0xFA8A      SXTH     R10,R10
   \       0xE2   0x44D1             ADD      R9,R9,R10
   \       0xE4   0xF05F 0x0B01      MOVS     R11,#+1
   \       0xE8   0xF017 0x0A07      ANDS     R10,R7,#0x7
   \       0xEC   0xFA1B 0xFA0A      LSLS     R10,R11,R10
   \       0xF0   0x46AB             MOV      R11,R5
   \       0xF2   0xFA1F 0xFB8B      UXTH     R11,R11
   \       0xF6   0xF1BB 0x0F00      CMP      R11,#+0
   \       0xFA   0xD016             BEQ.N    ??drawFastVLine_11
   \       0xFC   0xF1BB 0x0F02      CMP      R11,#+2
   \      0x100   0xD001             BEQ.N    ??drawFastVLine_12
   \      0x102   0xD328             BCC.N    ??drawFastVLine_13
   \      0x104   0xE038             B.N      ??drawFastVLine_14
   \                     ??drawFastVLine_12: (+1)
   \      0x106   0x46C3             MOV      R11,R8
   \      0x108   0xF1BB 0x0801      SUBS     R8,R11,#+1
   \      0x10C   0xFA0F 0xFB8B      SXTH     R11,R11
   \      0x110   0xF1BB 0x0F00      CMP      R11,#+0
   \      0x114   0xD008             BEQ.N    ??drawFastVLine_15
   \      0x116   0xF899 0xB000      LDRB     R11,[R9, #+0]
   \      0x11A   0xEA9A 0x0B0B      EORS     R11,R10,R11
   \      0x11E   0xF889 0xB000      STRB     R11,[R9, #+0]
   \      0x122   0xF119 0x0901      ADDS     R9,R9,#+1
   \      0x126   0xE7EE             B.N      ??drawFastVLine_12
   \                     ??drawFastVLine_15: (+1)
   \      0x128   0xE026             B.N      ??drawFastVLine_14
   \                     ??drawFastVLine_11: (+1)
   \      0x12A   0xFA5F 0xFA8A      UXTB     R10,R10
   \      0x12E   0xEA7F 0x0A0A      MVNS     R10,R10
   \                     ??drawFastVLine_16: (+1)
   \      0x132   0x46C3             MOV      R11,R8
   \      0x134   0xF1BB 0x0801      SUBS     R8,R11,#+1
   \      0x138   0xFA0F 0xFB8B      SXTH     R11,R11
   \      0x13C   0xF1BB 0x0F00      CMP      R11,#+0
   \      0x140   0xD008             BEQ.N    ??drawFastVLine_17
   \      0x142   0xF899 0xB000      LDRB     R11,[R9, #+0]
   \      0x146   0xEA1A 0x0B0B      ANDS     R11,R10,R11
   \      0x14A   0xF889 0xB000      STRB     R11,[R9, #+0]
   \      0x14E   0xF119 0x0901      ADDS     R9,R9,#+1
   \      0x152   0xE7EE             B.N      ??drawFastVLine_16
   \                     ??drawFastVLine_17: (+1)
   \      0x154   0xE010             B.N      ??drawFastVLine_14
   \                     ??drawFastVLine_13: (+1)
   \      0x156   0x46C3             MOV      R11,R8
   \      0x158   0xF1BB 0x0801      SUBS     R8,R11,#+1
   \      0x15C   0xFA0F 0xFB8B      SXTH     R11,R11
   \      0x160   0xF1BB 0x0F00      CMP      R11,#+0
   \      0x164   0xD008             BEQ.N    ??drawFastVLine_18
   \      0x166   0xF899 0xB000      LDRB     R11,[R9, #+0]
   \      0x16A   0xEA5A 0x0B0B      ORRS     R11,R10,R11
   \      0x16E   0xF889 0xB000      STRB     R11,[R9, #+0]
   \      0x172   0xF119 0x0901      ADDS     R9,R9,#+1
   \      0x176   0xE7EE             B.N      ??drawFastVLine_13
   \                     ??drawFastVLine_18: (+1)
   \                     ??drawFastVLine_14: (+1)
   \      0x178   0xE7FF             B.N      ??drawFastVLine_9
    556            }
   \                     ??drawFastVLine_6: (+1)
   \                     ??drawFastVLine_9: (+1)
   \      0x17A   0xE0F1             B.N      ??drawFastVLine_19
    557            else
    558            {
    559              drawFastVLineInternal(x, y, h, color);
   \                     ??drawFastVLine_5: (+1)
   \      0x17C   0xF8AD 0x4002      STRH     R4,[SP, #+2]
   \      0x180   0x001F             MOVS     R7,R3
   \      0x182   0xF8AD 0x2000      STRH     R2,[SP, #+0]
   \      0x186   0xF8AD 0x1004      STRH     R1,[SP, #+4]
   \      0x18A   0x9002             STR      R0,[SP, #+8]
   \      0x18C   0xF9BD 0x5004      LDRSH    R5,[SP, #+4]
   \      0x190   0x2D00             CMP      R5,#+0
   \      0x192   0xF100 0x80E5      BMI.W    ??drawFastVLine_20
   \      0x196   0xF9BD 0x5004      LDRSH    R5,[SP, #+4]
   \      0x19A   0xF8DD 0xC008      LDR      R12,[SP, #+8]
   \      0x19E   0xF9BC 0xC004      LDRSH    R12,[R12, #+4]
   \      0x1A2   0x4565             CMP      R5,R12
   \      0x1A4   0xF280 0x80DC      BGE.W    ??drawFastVLine_20
   \      0x1A8   0xF9BD 0x5000      LDRSH    R5,[SP, #+0]
   \      0x1AC   0x2D00             CMP      R5,#+0
   \      0x1AE   0xD505             BPL.N    ??drawFastVLine_21
   \      0x1B0   0xF8BD 0x5000      LDRH     R5,[SP, #+0]
   \      0x1B4   0x19EF             ADDS     R7,R5,R7
   \      0x1B6   0x2500             MOVS     R5,#+0
   \      0x1B8   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \                     ??drawFastVLine_21: (+1)
   \      0x1BC   0x9D02             LDR      R5,[SP, #+8]
   \      0x1BE   0xF9B5 0x5006      LDRSH    R5,[R5, #+6]
   \      0x1C2   0xF9BD 0xC000      LDRSH    R12,[SP, #+0]
   \      0x1C6   0xFA0C 0xFC87      SXTAH    R12,R12,R7
   \      0x1CA   0x4565             CMP      R5,R12
   \      0x1CC   0xDA07             BGE.N    ??drawFastVLine_22
   \      0x1CE   0x9D02             LDR      R5,[SP, #+8]
   \      0x1D0   0xF8B5 0xC006      LDRH     R12,[R5, #+6]
   \      0x1D4   0xF8BD 0x5000      LDRH     R5,[SP, #+0]
   \      0x1D8   0xEBBC 0x0C05      SUBS     R12,R12,R5
   \      0x1DC   0x4667             MOV      R7,R12
   \                     ??drawFastVLine_22: (+1)
   \      0x1DE   0x003D             MOVS     R5,R7
   \      0x1E0   0xB22D             SXTH     R5,R5
   \      0x1E2   0x2D01             CMP      R5,#+1
   \      0x1E4   0xF2C0 0x80BC      BLT.W    ??drawFastVLine_23
   \                     ??drawFastVLine_24: (+1)
   \      0x1E8   0xF8BD 0x5000      LDRH     R5,[SP, #+0]
   \      0x1EC   0x46BC             MOV      R12,R7
   \      0x1EE   0x.... 0x....      LDR.W    LR,??DataTable11
   \      0x1F2   0x46A8             MOV      R8,R5
   \      0x1F4   0xFA5F 0xF888      UXTB     R8,R8
   \      0x1F8   0xEA5F 0x08E8      ASRS     R8,R8,#+3
   \      0x1FC   0xEA5F 0x18C8      LSLS     R8,R8,#+7
   \      0x200   0x44C6             ADD      LR,LR,R8
   \      0x202   0xF9BD 0x8004      LDRSH    R8,[SP, #+4]
   \      0x206   0x44C6             ADD      LR,LR,R8
   \      0x208   0xF015 0x0807      ANDS     R8,R5,#0x7
   \      0x20C   0x46C1             MOV      R9,R8
   \      0x20E   0xFA5F 0xF989      UXTB     R9,R9
   \      0x212   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x216   0xD042             BEQ.N    ??drawFastVLine_25
   \      0x218   0xF1D8 0x0808      RSBS     R8,R8,#+8
   \      0x21C   0x.... 0x....      LDR.W    R9,??DataTable25
   \      0x220   0x46C2             MOV      R10,R8
   \      0x222   0xFA5F 0xFA8A      UXTB     R10,R10
   \      0x226   0xF819 0x900A      LDRB     R9,[R9, R10]
   \      0x22A   0x46E2             MOV      R10,R12
   \      0x22C   0x46C3             MOV      R11,R8
   \      0x22E   0xFA5F 0xFA8A      UXTB     R10,R10
   \      0x232   0xFA5F 0xFB8B      UXTB     R11,R11
   \      0x236   0x45DA             CMP      R10,R11
   \      0x238   0xD207             BCS.N    ??drawFastVLine_26
   \      0x23A   0xF04F 0x0AFF      MOV      R10,#+255
   \      0x23E   0xEBB8 0x0B0C      SUBS     R11,R8,R12
   \      0x242   0xFA5A 0xFA0B      ASRS     R10,R10,R11
   \      0x246   0xEA1A 0x0909      ANDS     R9,R10,R9
   \                     ??drawFastVLine_26: (+1)
   \      0x24A   0xF8BD 0xA002      LDRH     R10,[SP, #+2]
   \      0x24E   0xF1BA 0x0F00      CMP      R10,#+0
   \      0x252   0xD00B             BEQ.N    ??drawFastVLine_27
   \      0x254   0xF1BA 0x0F02      CMP      R10,#+2
   \      0x258   0xD001             BEQ.N    ??drawFastVLine_28
   \      0x25A   0xD30E             BCC.N    ??drawFastVLine_29
   \      0x25C   0xE013             B.N      ??drawFastVLine_30
   \                     ??drawFastVLine_28: (+1)
   \      0x25E   0xF89E 0xA000      LDRB     R10,[LR, #+0]
   \      0x262   0xEA99 0x0A0A      EORS     R10,R9,R10
   \      0x266   0xF88E 0xA000      STRB     R10,[LR, #+0]
   \      0x26A   0xE00C             B.N      ??drawFastVLine_30
   \                     ??drawFastVLine_27: (+1)
   \      0x26C   0xF89E 0xA000      LDRB     R10,[LR, #+0]
   \      0x270   0xEA3A 0x0A09      BICS     R10,R10,R9
   \      0x274   0xF88E 0xA000      STRB     R10,[LR, #+0]
   \      0x278   0xE005             B.N      ??drawFastVLine_30
   \                     ??drawFastVLine_29: (+1)
   \      0x27A   0xF89E 0xA000      LDRB     R10,[LR, #+0]
   \      0x27E   0xEA59 0x0A0A      ORRS     R10,R9,R10
   \      0x282   0xF88E 0xA000      STRB     R10,[LR, #+0]
   \                     ??drawFastVLine_30: (+1)
   \      0x286   0x46E2             MOV      R10,R12
   \      0x288   0x46C3             MOV      R11,R8
   \      0x28A   0xFA5F 0xFA8A      UXTB     R10,R10
   \      0x28E   0xFA5F 0xFB8B      UXTB     R11,R11
   \      0x292   0x45DA             CMP      R10,R11
   \      0x294   0xD364             BCC.N    ??drawFastVLine_23
   \                     ??drawFastVLine_31: (+1)
   \      0x296   0xEBBC 0x0C08      SUBS     R12,R12,R8
   \      0x29A   0xF11E 0x0E80      ADDS     LR,LR,#+128
   \                     ??drawFastVLine_25: (+1)
   \      0x29E   0x46E1             MOV      R9,R12
   \      0x2A0   0xFA5F 0xF989      UXTB     R9,R9
   \      0x2A4   0xF1B9 0x0F08      CMP      R9,#+8
   \      0x2A8   0xDB2B             BLT.N    ??drawFastVLine_32
   \      0x2AA   0xF8BD 0x9002      LDRH     R9,[SP, #+2]
   \      0x2AE   0xF1B9 0x0F02      CMP      R9,#+2
   \      0x2B2   0xD110             BNE.N    ??drawFastVLine_33
   \                     ??drawFastVLine_34: (+1)
   \      0x2B4   0xF89E 0x9000      LDRB     R9,[LR, #+0]
   \      0x2B8   0xEA7F 0x0909      MVNS     R9,R9
   \      0x2BC   0xF88E 0x9000      STRB     R9,[LR, #+0]
   \      0x2C0   0xF11E 0x0E80      ADDS     LR,LR,#+128
   \      0x2C4   0xF1BC 0x0C08      SUBS     R12,R12,#+8
   \      0x2C8   0x46E1             MOV      R9,R12
   \      0x2CA   0xFA5F 0xF989      UXTB     R9,R9
   \      0x2CE   0xF1B9 0x0F08      CMP      R9,#+8
   \      0x2D2   0xDAEF             BGE.N    ??drawFastVLine_34
   \      0x2D4   0xE015             B.N      ??drawFastVLine_32
   \                     ??drawFastVLine_33: (+1)
   \      0x2D6   0xF8BD 0x9002      LDRH     R9,[SP, #+2]
   \      0x2DA   0xF1B9 0x0F01      CMP      R9,#+1
   \      0x2DE   0xD102             BNE.N    ??drawFastVLine_35
   \      0x2E0   0xF04F 0x09FF      MOV      R9,#+255
   \      0x2E4   0xE001             B.N      ??drawFastVLine_36
   \                     ??drawFastVLine_35: (+1)
   \      0x2E6   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??drawFastVLine_36: (+1)
   \      0x2EA   0xF88E 0x9000      STRB     R9,[LR, #+0]
   \      0x2EE   0xF11E 0x0E80      ADDS     LR,LR,#+128
   \      0x2F2   0xF1BC 0x0C08      SUBS     R12,R12,#+8
   \      0x2F6   0x46E2             MOV      R10,R12
   \      0x2F8   0xFA5F 0xFA8A      UXTB     R10,R10
   \      0x2FC   0xF1BA 0x0F08      CMP      R10,#+8
   \      0x300   0xDAF3             BGE.N    ??drawFastVLine_36
   \                     ??drawFastVLine_32: (+1)
   \      0x302   0x46E1             MOV      R9,R12
   \      0x304   0xFA5F 0xF989      UXTB     R9,R9
   \      0x308   0xF1B9 0x0F00      CMP      R9,#+0
   \      0x30C   0xD027             BEQ.N    ??drawFastVLine_37
   \      0x30E   0xF01C 0x0907      ANDS     R9,R12,#0x7
   \      0x312   0x46C8             MOV      R8,R9
   \      0x314   0x.... 0x....      LDR.W    R9,??DataTable26
   \      0x318   0x46C2             MOV      R10,R8
   \      0x31A   0xFA5F 0xFA8A      UXTB     R10,R10
   \      0x31E   0xF819 0x900A      LDRB     R9,[R9, R10]
   \      0x322   0xF8BD 0xA002      LDRH     R10,[SP, #+2]
   \      0x326   0xF1BA 0x0F00      CMP      R10,#+0
   \      0x32A   0xD00B             BEQ.N    ??drawFastVLine_38
   \      0x32C   0xF1BA 0x0F02      CMP      R10,#+2
   \      0x330   0xD001             BEQ.N    ??drawFastVLine_39
   \      0x332   0xD30E             BCC.N    ??drawFastVLine_40
   \      0x334   0xE013             B.N      ??drawFastVLine_37
   \                     ??drawFastVLine_39: (+1)
   \      0x336   0xF89E 0xA000      LDRB     R10,[LR, #+0]
   \      0x33A   0xEA99 0x0A0A      EORS     R10,R9,R10
   \      0x33E   0xF88E 0xA000      STRB     R10,[LR, #+0]
   \      0x342   0xE00C             B.N      ??drawFastVLine_37
   \                     ??drawFastVLine_38: (+1)
   \      0x344   0xF89E 0xA000      LDRB     R10,[LR, #+0]
   \      0x348   0xEA3A 0x0A09      BICS     R10,R10,R9
   \      0x34C   0xF88E 0xA000      STRB     R10,[LR, #+0]
   \      0x350   0xE005             B.N      ??drawFastVLine_37
   \                     ??drawFastVLine_40: (+1)
   \      0x352   0xF89E 0xA000      LDRB     R10,[LR, #+0]
   \      0x356   0xEA59 0x0A0A      ORRS     R10,R9,R10
   \      0x35A   0xF88E 0xA000      STRB     R10,[LR, #+0]
   \                     ??drawFastVLine_37: (+1)
   \      0x35E   0xE7FF             B.N      ??drawFastVLine_23
    560            }
    561          }
   \                     ??drawFastVLine_20: (+1)
   \                     ??drawFastVLine_23: (+1)
   \                     ??drawFastVLine_19: (+1)
   \      0x360   0xE8BD 0x8FF7      POP      {R0-R2,R4-R11,PC}
    562          
    563          
    564          void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
    565          {
    566          
    567            // do nothing if we're off the left or right side of the screen
    568            if(x < 0 || x >= WIDTH) { return; }
    569          
    570            // make sure we don't try to draw below 0
    571            if(__y < 0)
    572            {
    573              // __y is negative, this will subtract enough from __h to account for __y being 0
    574              __h += __y;
    575              __y = 0;
    576          
    577            }
    578          
    579            // make sure we don't go past the height of the display
    580            if( (__y + __h) > HEIGHT)
    581            {
    582              __h = (HEIGHT - __y);
    583            }
    584          
    585            // if our height is now negative, punt
    586            if(__h <= 0)
    587            {
    588              return;
    589            }
    590          
    591            // this display doesn't need ints for coordinates, use local byte registers for faster juggling
    592            register uint8_t y = __y;
    593            register uint8_t h = __h;
    594          
    595          
    596            // set up the pointer for fast movement through the buffer
    597            register uint8_t *pBuf = buffer;
    598            // adjust the buffer pointer for the current row
    599            pBuf += ((y/8) * SSD1306_LCDWIDTH);
    600            // and offset x columns in
    601            pBuf += x;
    602          
    603            // do the first partial byte, if necessary - this requires some masking
    604            register uint8_t mod = (y&7);
    605            if(mod)
    606            {
    607              // mask off the high n bits we want to set
    608              mod = 8-mod;
    609          
    610              // note - lookup table results in a nearly 10% performance improvement in fill* functions
    611              // register uint8_t mask = ~(0xFF >> (mod));

   \                                 In section .data, align 4
    612              static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
   \                     _ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask:
   \        0x0   0x00 0x80          DC8 0, 128, 192, 224, 240, 248, 252, 254

   \              0xC0 0xE0    

   \              0xF0 0xF8    

   \              0xFC 0xFE
    613              register uint8_t mask = premask[mod];
    614          
    615              // adjust the mask if we're not going to reach the end of this byte
    616              if( h < mod) 
    617              {
    618                mask &= (0XFF >> (mod-h));
    619              }
    620          
    621            switch (color)
    622              {
    623              case WHITE:   *pBuf |=  mask;  break;
    624              case BLACK:   *pBuf &= ~mask;  break;
    625              case INVERSE: *pBuf ^=  mask;  break;
    626              }
    627          
    628              // fast exit if we're done here!
    629              if(h<mod) { return; }
    630          
    631              h -= mod;
    632          
    633              pBuf += SSD1306_LCDWIDTH;
    634            }
    635          
    636          
    637            // write solid bytes while we can - effectively doing 8 rows at a time
    638            if(h >= 8)
    639            {
    640              if (color == INVERSE) 
    641              {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
    642                do
    643                {
    644                *pBuf=~(*pBuf);
    645          
    646                  // adjust the buffer forward 8 rows worth of data
    647                  pBuf += SSD1306_LCDWIDTH;
    648          
    649                  // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
    650                  h -= 8;
    651                } while(h >= 8);
    652                }
    653              else {
    654                // store a local value to work with
    655                register uint8_t val = (color == WHITE) ? 255 : 0;
    656          
    657                do  {
    658                  // write our value in
    659                *pBuf = val;
    660          
    661                  // adjust the buffer forward 8 rows worth of data
    662                  pBuf += SSD1306_LCDWIDTH;
    663          
    664                  // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
    665                  h -= 8;
    666                } while(h >= 8);
    667                }
    668              }
    669          
    670            // now do the final partial byte, if necessary
    671            if(h)
    672            {
    673              mod = h & 7;
    674              // this time we want to mask the low bits of the byte, vs the high bits we did above
    675              // register uint8_t mask = (1 << mod) - 1;
    676              // note - lookup table results in a nearly 10% performance improvement in fill* functions

   \                                 In section .data, align 4
    677              static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
   \                     _ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask:
   \        0x0   0x00 0x01          DC8 0, 1, 3, 7, 15, 31, 63, 127

   \              0x03 0x07    

   \              0x0F 0x1F    

   \              0x3F 0x7F
    678              register uint8_t mask = postmask[mod];
    679              switch (color)
    680              {
    681                case WHITE:   *pBuf |=  mask;  break;
    682                case BLACK:   *pBuf &= ~mask;  break;
    683                case INVERSE: *pBuf ^=  mask;  break;
    684              }
    685            }
    686          }
    687          

   \                                 In section .text, align 2, keep-with-next
    688          void Adafruit_SSD1306::memset(uint8_t buffer[], uint16_t start_address, uint16_t destination_address)
    689          {
   \                     _ZN16Adafruit_SSD13066memsetEPhtt: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
    690            uint16_t x;
    691            
    692            for(x = start_address; x < destination_address; x++)
   \        0x2   0x0014             MOVS     R4,R2
   \                     ??memset_0: (+1)
   \        0x4   0x0025             MOVS     R5,R4
   \        0x6   0x001E             MOVS     R6,R3
   \        0x8   0xB2AD             UXTH     R5,R5
   \        0xA   0xB2B6             UXTH     R6,R6
   \        0xC   0x42B5             CMP      R5,R6
   \        0xE   0xD205             BCS.N    ??memset_1
    693            {
    694              buffer[x] = 0x00;
   \       0x10   0x2500             MOVS     R5,#+0
   \       0x12   0x0026             MOVS     R6,R4
   \       0x14   0xB2B6             UXTH     R6,R6
   \       0x16   0x558D             STRB     R5,[R1, R6]
    695            }
   \       0x18   0x1C64             ADDS     R4,R4,#+1
   \       0x1A   0xE7F3             B.N      ??memset_0
    696          }
   \                     ??memset_1: (+1)
   \       0x1C   0xBC70             POP      {R4-R6}
   \       0x1E   0x4770             BX       LR
    697          

   \                                 In section .rodata, align 4
    698          const int bitval_r[8 * 2] = {
   \                     bitval_r:
   \        0x0   0x0000'0080        DC32 128, 64, 32, 16, 8, 4, 2, 1, 32'768, 16'384, 8'192, 4'096, 2'048

   \              0x0000'0040  

   \              0x0000'0020  

   \              0x0000'0010  

   \              0x0000'0008  

   \              0x0000'0004  

   \              0x0000'0002  

   \              0x0000'0001  

   \              0x0000'8000  

   \              0x0000'4000  

   \              0x0000'2000  

   \              0x0000'1000  

   \              0x0000'0800
   \       0x34   0x0000'0400        DC32 1'024, 512, 256

   \              0x0000'0200  

   \              0x0000'0100
    699              0x80,
    700              0x40,
    701              0x20,
    702              0x10,
    703              0x08,
    704              0x04,
    705              0x02,
    706              0x01,
    707              0x8000,
    708              0x4000,
    709              0x2000,
    710              0x1000,
    711              0x0800,
    712              0x0400,
    713              0x0200,
    714              0x0100,
    715          };
    716          
    717          
    718          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    719          void Adafruit_SSD1306::printf( const char* _format )
    720          //========================================================================
    721          {
   \                     _ZN16Adafruit_SSD13066printfEPKc: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB0A9             SUB      SP,SP,#+164
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
    722              uint16_t i, j;
    723              uint8_t page;
                             ^
Warning[Pe550]: variable "page" was set but never used
    724          
    725              int bIsCharHan;
    726          
    727              page = cursor_y / 8;
   \        0xA   0xF9B4 0x000E      LDRSH    R0,[R4, #+14]
   \        0xE   0x2108             MOVS     R1,#+8
   \       0x10   0xFB90 0xF6F1      SDIV     R6,R0,R1
    728          
    729              PHAN_FONT_OBJ   FontPtr;    //  Font Render Buffer
    730          
    731          #if defined(_WIN32) || !defined(PHANFONT_LOCAL)		//	문자코드 변환 사용 X
    732          
    733              const char *format;
    734              //	Windows에선 Multibyte문자열은 UTF-8파일이라도,
    735              //		자동으로 CP949로 변환되어 저장됨.
    736              format = _format;
    737          #else
    738          
    739              //	한글폰트 사용시. 문자코드 변환 사용.
    740              char format[128];
    741              memset( (uint8_t *)format, 0, 128 );
   \       0x14   0x2380             MOVS     R3,#+128
   \       0x16   0x2200             MOVS     R2,#+0
   \       0x18   0xA909             ADD      R1,SP,#+36
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x.... 0x....      BL       _ZN16Adafruit_SSD13066memsetEPhtt
    742              UTF8ToCP949( _format, format );
   \       0x20   0xA909             ADD      R1,SP,#+36
   \       0x22   0x0028             MOVS     R0,R5
   \       0x24   0x.... 0x....      BL       UTF8ToCP949
    743          
    744          #endif
    745          
    746              if ( dbg )
    747              {
    748              	//::printf( "%s - Text:%s\n", __func__, format );
    749              }
    750          
    751              for ( i = 0; format[i] != '\0'; i++ )
   \       0x28   0x2700             MOVS     R7,#+0
   \                     ??printf_0: (+1)
   \       0x2A   0xA909             ADD      R1,SP,#+36
   \       0x2C   0x0038             MOVS     R0,R7
   \       0x2E   0xB280             UXTH     R0,R0
   \       0x30   0x5C08             LDRB     R0,[R1, R0]
   \       0x32   0x2800             CMP      R0,#+0
   \       0x34   0xF000 0x80B2      BEQ.W    ??printf_1
    752              {
    753                  //  한글체크
    754                  if ( (uint8_t)format[i] > 0x80 )		//	문자.
   \       0x38   0x0038             MOVS     R0,R7
   \       0x3A   0xB280             UXTH     R0,R0
   \       0x3C   0x5C08             LDRB     R0,[R1, R0]
   \       0x3E   0x2881             CMP      R0,#+129
   \       0x40   0xDB54             BLT.N    ??printf_2
    755                  {
    756                      bIsCharHan = 1;
   \       0x42   0x2001             MOVS     R0,#+1
   \       0x44   0x4683             MOV      R11,R0
    757          
    758                      //	한글폰트
    759                      PHan_HanFontLoad( (const uint8_t *)&format[i], &FontPtr );
   \       0x46   0x4669             MOV      R1,SP
   \       0x48   0xA809             ADD      R0,SP,#+36
   \       0x4A   0x003A             MOVS     R2,R7
   \       0x4C   0xB292             UXTH     R2,R2
   \       0x4E   0x4410             ADD      R0,R0,R2
   \       0x50   0x.... 0x....      BL       PHan_HanFontLoad
    760          
    761                      for ( j = 0; j < 16; j++ )
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0x4680             MOV      R8,R0
   \                     ??printf_3: (+1)
   \       0x58   0x4640             MOV      R0,R8
   \       0x5A   0xB280             UXTH     R0,R0
   \       0x5C   0x2810             CMP      R0,#+16
   \       0x5E   0xF280 0x8097      BGE.W    ??printf_4
    762                      {
    763                          uint16_t	dotByte;
    764                          int bIdx;
    765          
    766                          //	2 Byte - 한글
    767                          dotByte = FontPtr.FontBuffer[j * 2];
   \       0x62   0x4668             MOV      R0,SP
   \       0x64   0x4641             MOV      R1,R8
   \       0x66   0xB289             UXTH     R1,R1
   \       0x68   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \       0x6C   0xF890 0x9004      LDRB     R9,[R0, #+4]
    768                          dotByte |= ( FontPtr.FontBuffer[( j * 2 ) + 1] ) << 8;
   \       0x70   0x4668             MOV      R0,SP
   \       0x72   0x4641             MOV      R1,R8
   \       0x74   0xB289             UXTH     R1,R1
   \       0x76   0xEB00 0x0041      ADD      R0,R0,R1, LSL #+1
   \       0x7A   0x7940             LDRB     R0,[R0, #+5]
   \       0x7C   0xEA59 0x2900      ORRS     R9,R9,R0, LSL #+8
    769          
    770                          //  16 X 16 Font ( 한글 )
    771                          for ( bIdx = 0; bIdx < 16; bIdx++ )
   \       0x80   0xF05F 0x0A00      MOVS     R10,#+0
   \                     ??printf_5: (+1)
   \       0x84   0xF1BA 0x0F10      CMP      R10,#+16
   \       0x88   0xDA2D             BGE.N    ??printf_6
    772                          {
    773                              if ( dotByte & bitval_r[bIdx] )
   \       0x8A   0x.... 0x....      LDR.W    R0,??DataTable34
   \       0x8E   0xF850 0x102A      LDR      R1,[R0, R10, LSL #+2]
   \       0x92   0x4648             MOV      R0,R9
   \       0x94   0xB280             UXTH     R0,R0
   \       0x96   0x4208             TST      R0,R1
   \       0x98   0xD011             BEQ.N    ??printf_7
    774                              {
    775                                  drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 1 );
   \       0x9A   0x2301             MOVS     R3,#+1
   \       0x9C   0x89E2             LDRH     R2,[R4, #+14]
   \       0x9E   0xEB18 0x0202      ADDS     R2,R8,R2
   \       0xA2   0xB212             SXTH     R2,R2
   \       0xA4   0x89A1             LDRH     R1,[R4, #+12]
   \       0xA6   0xEB11 0x01C7      ADDS     R1,R1,R7, LSL #+3
   \       0xAA   0xEB1A 0x0101      ADDS     R1,R10,R1
   \       0xAE   0xB209             SXTH     R1,R1
   \       0xB0   0x0020             MOVS     R0,R4
   \       0xB2   0xF8D4 0xC000      LDR      R12,[R4, #+0]
   \       0xB6   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0xBA   0x47E0             BLX      R12
   \       0xBC   0xE010             B.N      ??printf_8
    776                              }
    777                              else
    778                              {
    779                                  drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 0 );
   \                     ??printf_7: (+1)
   \       0xBE   0x2300             MOVS     R3,#+0
   \       0xC0   0x89E2             LDRH     R2,[R4, #+14]
   \       0xC2   0xEB18 0x0202      ADDS     R2,R8,R2
   \       0xC6   0xB212             SXTH     R2,R2
   \       0xC8   0x89A1             LDRH     R1,[R4, #+12]
   \       0xCA   0xEB11 0x01C7      ADDS     R1,R1,R7, LSL #+3
   \       0xCE   0xEB1A 0x0101      ADDS     R1,R10,R1
   \       0xD2   0xB209             SXTH     R1,R1
   \       0xD4   0x0020             MOVS     R0,R4
   \       0xD6   0xF8D4 0xC000      LDR      R12,[R4, #+0]
   \       0xDA   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \       0xDE   0x47E0             BLX      R12
    780                              }
    781                          }
   \                     ??printf_8: (+1)
   \       0xE0   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \       0xE4   0xE7CE             B.N      ??printf_5
    782                      }
   \                     ??printf_6: (+1)
   \       0xE6   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0xEA   0xE7B5             B.N      ??printf_3
    783                  }
    784                  else
    785                  {
    786                      bIsCharHan = 0;
   \                     ??printf_2: (+1)
   \       0xEC   0x2000             MOVS     R0,#+0
   \       0xEE   0x4683             MOV      R11,R0
    787          
    788                      //	영문폰트
    789                      //*
    790                      PHan_EngFontLoad( (const uint8_t*)&format[i], &FontPtr );
   \       0xF0   0x4669             MOV      R1,SP
   \       0xF2   0xA809             ADD      R0,SP,#+36
   \       0xF4   0x003A             MOVS     R2,R7
   \       0xF6   0xB292             UXTH     R2,R2
   \       0xF8   0x4410             ADD      R0,R0,R2
   \       0xFA   0x.... 0x....      BL       PHan_EngFontLoad
    791          
    792                      for ( j = 0; j < 16; j++ )
   \       0xFE   0x2000             MOVS     R0,#+0
   \      0x100   0x4680             MOV      R8,R0
   \                     ??printf_9: (+1)
   \      0x102   0x4640             MOV      R0,R8
   \      0x104   0xB280             UXTH     R0,R0
   \      0x106   0x2810             CMP      R0,#+16
   \      0x108   0xDA42             BGE.N    ??printf_4
    793                      {
    794                          uint16_t	dotByte;
    795                          int bIdx;
    796          
    797                          dotByte = FontPtr.FontBuffer[j];
   \      0x10A   0x4668             MOV      R0,SP
   \      0x10C   0x4641             MOV      R1,R8
   \      0x10E   0xB289             UXTH     R1,R1
   \      0x110   0x4408             ADD      R0,R0,R1
   \      0x112   0xF890 0x9004      LDRB     R9,[R0, #+4]
    798                          dotByte |= ( FontPtr.FontBuffer[j + 1] ) << 8;
   \      0x116   0x4668             MOV      R0,SP
   \      0x118   0x4641             MOV      R1,R8
   \      0x11A   0xB289             UXTH     R1,R1
   \      0x11C   0x4408             ADD      R0,R0,R1
   \      0x11E   0x7940             LDRB     R0,[R0, #+5]
   \      0x120   0xEA59 0x2900      ORRS     R9,R9,R0, LSL #+8
    799          
    800                          //  8 X 16 Font ( 영문 )
    801                          for ( bIdx = 0; bIdx < 8; bIdx++ )
   \      0x124   0xF05F 0x0A00      MOVS     R10,#+0
   \                     ??printf_10: (+1)
   \      0x128   0xF1BA 0x0F08      CMP      R10,#+8
   \      0x12C   0xDA2D             BGE.N    ??printf_11
    802                          {
    803                              if ( dotByte & bitval_r[bIdx] )
   \      0x12E   0x.... 0x....      LDR.W    R0,??DataTable34
   \      0x132   0xF850 0x102A      LDR      R1,[R0, R10, LSL #+2]
   \      0x136   0x4648             MOV      R0,R9
   \      0x138   0xB280             UXTH     R0,R0
   \      0x13A   0x4208             TST      R0,R1
   \      0x13C   0xD011             BEQ.N    ??printf_12
    804                              {
    805                                  drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 1 );
   \      0x13E   0x2301             MOVS     R3,#+1
   \      0x140   0x89E2             LDRH     R2,[R4, #+14]
   \      0x142   0xEB18 0x0202      ADDS     R2,R8,R2
   \      0x146   0xB212             SXTH     R2,R2
   \      0x148   0x89A1             LDRH     R1,[R4, #+12]
   \      0x14A   0xEB11 0x01C7      ADDS     R1,R1,R7, LSL #+3
   \      0x14E   0xEB1A 0x0101      ADDS     R1,R10,R1
   \      0x152   0xB209             SXTH     R1,R1
   \      0x154   0x0020             MOVS     R0,R4
   \      0x156   0xF8D4 0xC000      LDR      R12,[R4, #+0]
   \      0x15A   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x15E   0x47E0             BLX      R12
   \      0x160   0xE010             B.N      ??printf_13
    806                              }
    807                              else
    808                              {
    809                                  drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 0 );
   \                     ??printf_12: (+1)
   \      0x162   0x2300             MOVS     R3,#+0
   \      0x164   0x89E2             LDRH     R2,[R4, #+14]
   \      0x166   0xEB18 0x0202      ADDS     R2,R8,R2
   \      0x16A   0xB212             SXTH     R2,R2
   \      0x16C   0x89A1             LDRH     R1,[R4, #+12]
   \      0x16E   0xEB11 0x01C7      ADDS     R1,R1,R7, LSL #+3
   \      0x172   0xEB1A 0x0101      ADDS     R1,R10,R1
   \      0x176   0xB209             SXTH     R1,R1
   \      0x178   0x0020             MOVS     R0,R4
   \      0x17A   0xF8D4 0xC000      LDR      R12,[R4, #+0]
   \      0x17E   0xF8DC 0xC000      LDR      R12,[R12, #+0]
   \      0x182   0x47E0             BLX      R12
    810                              }
    811                          }
   \                     ??printf_13: (+1)
   \      0x184   0xF11A 0x0A01      ADDS     R10,R10,#+1
   \      0x188   0xE7CE             B.N      ??printf_10
    812                      }
   \                     ??printf_11: (+1)
   \      0x18A   0xF118 0x0801      ADDS     R8,R8,#+1
   \      0x18E   0xE7B8             B.N      ??printf_9
    813          
    814                      /*/
    815                      
    816                      for ( j = 0; j < 8; j++ )
    817                      {
    818                          //  8 X 16 Font ( 영문 / 숫자 )
    819                          buffer[cursor_x + page * 128 + i * 8 + j] = FONT_8X16[( format[i] - 32 ) * 16 + j];
    820                          buffer[cursor_x + ( page + 1 ) * 128 + i * 8 + j] = FONT_8X16[( format[i] - 32 ) * 16 + j + 8];
    821                      }
    822                      //  */
    823                  }
    824          
    825          
    826                  if ( bIsCharHan )
   \                     ??printf_4: (+1)
   \      0x190   0xF1BB 0x0F00      CMP      R11,#+0
   \      0x194   0xD000             BEQ.N    ??printf_14
    827                  {
    828                      //  한글인경우 2 Byte
    829                      i++;
   \      0x196   0x1C7F             ADDS     R7,R7,#+1
    830                  }
    831          
    832              }
   \                     ??printf_14: (+1)
   \      0x198   0x1C7F             ADDS     R7,R7,#+1
   \      0x19A   0xE746             B.N      ??printf_0
    833          }
   \                     ??printf_1: (+1)
   \      0x19C   0xB029             ADD      SP,SP,#+164
   \      0x19E   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    834          
    835          
    836          //========================================================================
    837          
    838          #define OLED_RESET 0
    839          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __vfp void __sti__routine()
   \                     __sti__routine: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    840          Adafruit_SSD1306 display( OLED_RESET );
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x.... 0x....      LDR.W    R0,??DataTable8
   \        0x8   0x.... 0x....      BL       _ZN16Adafruit_SSD1306C1Ea
   \        0xC   0xBD01             POP      {R0,PC}

   \                                 In section .bss, align 4
   \                     display:
   \        0x0                      DS8 32
    841          /* USER CODE END PFP */
    842          
    843          /* USER CODE BEGIN 0 */
    844          #define NUMFLAKES 10
    845          #define XPOS 0
    846          #define YPOS 1
    847          #define DELTAY 2
    848          
    849          
    850          #define LOGO16_GLCD_HEIGHT 16 
    851          #define LOGO16_GLCD_WIDTH  16 

   \                                 In section .rodata, align 4
    852          static const unsigned char logo16_glcd_bmp[] =
   \                     logo16_glcd_bmp:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 32, 0, 96, 0, 224, 0, 224, 238, 204, 126, 206, 127, 222

   \              0x00 0x20    

   \              0x00 0x60    

   \              0x00 0xE0    

   \              0x00 0xE0    

   \              0xEE 0xCC    

   \              0x7E 0xCE    

   \              0x7F 0xDE
   \       0x10   0x7F 0xFF          DC8 127, 255, 63, 251, 59, 51, 17, 39, 0, 14, 0, 14, 0, 12, 0, 0

   \              0x3F 0xFB    

   \              0x3B 0x33    

   \              0x11 0x27    

   \              0x00 0x0E    

   \              0x00 0x0E    

   \              0x00 0x0C    

   \              0x00 0x00
    853          {
    854          0x00,0x00,0x00,0x20,0x00,0x60,0x00,0xE0,0x00,0xE0,0xEE,0xCC,0x7E,0xCE,0x7F,0xDE,
    855          0x7F,0xFF,0x3F,0xFB,0x3B,0x33,0x11,0x27,0x00,0x0E,0x00,0x0E,0x00,0x0C,0x00,0x00
    856          };
    857          
    858          
    859          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    860          uint8_t * GetLCDFrameBuffer( void )
    861          //========================================================================
    862          {
    863              //  LCD Frame Buffer
    864              return buffer;
   \                     GetLCDFrameBuffer: (+1)
   \        0x0   0x....             LDR.N    R0,??DataTable16_1
   \        0x2   0x4770             BX       LR
    865          }
    866          

   \                                 In section .bss, align 4
    867          int g_bInitLCD = 0;
   \                     g_bInitLCD:
   \        0x0                      DS8 4
    868          
    869          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    870          int LCDInit( void )
    871          //========================================================================
    872          {
   \                     LCDInit: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    873              display.begin( SSD1306_SWITCHCAPVCC, 0x78 );
   \        0x2   0x2301             MOVS     R3,#+1
   \        0x4   0x2278             MOVS     R2,#+120
   \        0x6   0x2102             MOVS     R1,#+2
   \        0x8   0x.... 0x....      LDR.W    R0,??DataTable35
   \        0xC   0x.... 0x....      BL       _ZN16Adafruit_SSD13065beginEhhb
    874          
    875              g_bInitLCD = 1;
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0x.... 0x....      LDR.W    R1,??DataTable35_1
   \       0x16   0x6008             STR      R0,[R1, #+0]
    876          
    877              return 0;
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0xBD02             POP      {R1,PC}
    878          }
    879          
    880          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    881          int LCDCheck( void )
    882          //========================================================================
    883          {
    884              return 0;
   \                     LCDCheck: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x4770             BX       LR
    885          }
    886          
    887          
    888          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    889          void LCDBattery( int nLevel )
    890          //========================================================================
    891          {
   \                     LCDBattery: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB0A2             SUB      SP,SP,#+136
   \        0x4   0x0004             MOVS     R4,R0
    892              if ( g_bInitLCD == false ) return;
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD021             BEQ.N    ??LCDBattery_0
    893          
    894              //  Size : 17 x 7
    895              //  Area : ( 110, 1 ) ~ ( 127, 7 )
    896              //  Level : 0 ~ 6   ( Battery )
    897          
    898              const uint8_t bmpRSSI[7][17] = {
    899                  { 0x3C, 0x24, 0x7F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x55, 0x49, 0x55, 0x41, 0x41, 0x41, 0x41, 0x41, 0x7F },  // -[    X    ] - 방전
    900                  { 0x3C, 0x24, 0x7F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x7F },  // -[         ]
    901                  { 0x3C, 0x24, 0x7F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x5D, 0x5D, 0x41, 0x7F },  // -[       0 ]
    902                  { 0x3C, 0x24, 0x7F, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x7F },  // -[     0 0 ]
    903                  { 0x3C, 0x24, 0x7F, 0x41, 0x41, 0x41, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x7F },  // -[   0 0 0 ]
    904                  { 0x3C, 0x24, 0x7F, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x5D, 0x5D, 0x41, 0x7F },  // -[ 0 0 0 0 ]
    905                  { 0x3C, 0x24, 0x7F, 0x41, 0x41, 0x41, 0x51, 0x49, 0x4D, 0x7F, 0x59, 0x49, 0x45, 0x41, 0x41, 0x41, 0x7F },  // -[    z    ] - 충전중
    906              };
   \                     ??LCDBattery_1: (+1)
   \       0x10   0xA804             ADD      R0,SP,#+16
   \       0x12   0x.... 0x....      LDR.W    R1,??DataTable35_2
   \       0x16   0x2278             MOVS     R2,#+120
   \       0x18   0x.... 0x....      BL       __aeabi_memcpy4
    907          
    908              if ( nLevel > 6 ) nLevel = 6;
   \       0x1C   0x2C07             CMP      R4,#+7
   \       0x1E   0xDB01             BLT.N    ??LCDBattery_2
   \       0x20   0x2006             MOVS     R0,#+6
   \       0x22   0x0004             MOVS     R4,R0
    909          
    910              display.drawBitBuf( 110, 1, bmpRSSI[nLevel], 17, 7, WHITE, BLACK );
   \                     ??LCDBattery_2: (+1)
   \       0x24   0x.... 0x....      LDR.W    R5,??DataTable35
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x9003             STR      R0,[SP, #+12]
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0x9002             STR      R0,[SP, #+8]
   \       0x30   0x2007             MOVS     R0,#+7
   \       0x32   0x9001             STR      R0,[SP, #+4]
   \       0x34   0x2011             MOVS     R0,#+17
   \       0x36   0x9000             STR      R0,[SP, #+0]
   \       0x38   0xA804             ADD      R0,SP,#+16
   \       0x3A   0x2111             MOVS     R1,#+17
   \       0x3C   0xFB01 0xF104      MUL      R1,R1,R4
   \       0x40   0xEB00 0x0301      ADD      R3,R0,R1
   \       0x44   0x2201             MOVS     R2,#+1
   \       0x46   0x216E             MOVS     R1,#+110
   \       0x48   0x0028             MOVS     R0,R5
   \       0x4A   0x.... 0x....      BL       _ZN12Adafruit_GFX10drawBitBufEssPKhsstt
    911              display.display();
   \       0x4E   0x0028             MOVS     R0,R5
   \       0x50   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
    912          }
   \                     ??LCDBattery_0: (+1)
   \       0x54   0xB023             ADD      SP,SP,#+140
   \       0x56   0xBD30             POP      {R4,R5,PC}
    913          
    914          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    915          void LCDRSSI( int nLevel )
    916          //========================================================================
    917          {
   \                     LCDRSSI: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB095             SUB      SP,SP,#+84
   \        0x4   0x0004             MOVS     R4,R0
    918              if ( g_bInitLCD == false ) return;
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD021             BEQ.N    ??LCDRSSI_0
    919          
    920              //  Area : ( 1, 1 ) ~ ( 11, 7 )
    921              //  Level : 0 ~ 5   ( RSSI(수신감도) : Received Signal Strength Indicator )
    922          
    923              const uint8_t bmpRSSI[6][11] = {
    924                  { 0x03, 0x05, 0x7F, 0x05, 0x03, 0x50, 0x20, 0x50, 0x00, },      // | x
    925                  { 0x03, 0x05, 0x7F, 0x05, 0x03, 0x00, },                        // | 0
    926                  { 0x03, 0x05, 0x7F, 0x05, 0x73, 0x00, },
    927                  { 0x03, 0x05, 0x7F, 0x05, 0x73, 0x00, 0x78, 0x00, },
    928                  { 0x03, 0x05, 0x7F, 0x05, 0x73, 0x00, 0x78, 0x00, 0x7C},
    929                  { 0x03, 0x05, 0x7F, 0x05, 0x73, 0x00, 0x78, 0x00, 0x7C, 0x00, 0x7E },
    930              };
   \                     ??LCDRSSI_1: (+1)
   \       0x10   0xA804             ADD      R0,SP,#+16
   \       0x12   0x.... 0x....      LDR.W    R1,??DataTable35_3
   \       0x16   0x2244             MOVS     R2,#+68
   \       0x18   0x.... 0x....      BL       __aeabi_memcpy4
    931          
    932              if ( nLevel > 5 ) nLevel = 5;
   \       0x1C   0x2C06             CMP      R4,#+6
   \       0x1E   0xDB01             BLT.N    ??LCDRSSI_2
   \       0x20   0x2005             MOVS     R0,#+5
   \       0x22   0x0004             MOVS     R4,R0
    933          
    934              display.drawBitBuf( 1, 1, bmpRSSI[nLevel], 11, 7, WHITE, BLACK );
   \                     ??LCDRSSI_2: (+1)
   \       0x24   0x.... 0x....      LDR.W    R5,??DataTable35
   \       0x28   0x2000             MOVS     R0,#+0
   \       0x2A   0x9003             STR      R0,[SP, #+12]
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0x9002             STR      R0,[SP, #+8]
   \       0x30   0x2007             MOVS     R0,#+7
   \       0x32   0x9001             STR      R0,[SP, #+4]
   \       0x34   0x200B             MOVS     R0,#+11
   \       0x36   0x9000             STR      R0,[SP, #+0]
   \       0x38   0xA804             ADD      R0,SP,#+16
   \       0x3A   0x210B             MOVS     R1,#+11
   \       0x3C   0xFB01 0xF104      MUL      R1,R1,R4
   \       0x40   0xEB00 0x0301      ADD      R3,R0,R1
   \       0x44   0x2201             MOVS     R2,#+1
   \       0x46   0x2101             MOVS     R1,#+1
   \       0x48   0x0028             MOVS     R0,R5
   \       0x4A   0x.... 0x....      BL       _ZN12Adafruit_GFX10drawBitBufEssPKhsstt
    935              display.display();
   \       0x4E   0x0028             MOVS     R0,R5
   \       0x50   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
    936          }
   \                     ??LCDRSSI_0: (+1)
   \       0x54   0xB015             ADD      SP,SP,#+84
   \       0x56   0xBD30             POP      {R4,R5,PC}
    937          
    938          
    939          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    940          void LCDLight( int bOnOff )
    941          //========================================================================
    942          {
   \                     LCDLight: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB088             SUB      SP,SP,#+32
   \        0x4   0x0004             MOVS     R4,R0
    943              if ( g_bInitLCD == false ) return;
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD01F             BEQ.N    ??LCDLight_0
    944          
    945              //  Area : ( 1, 1 ) ~ ( 11, 7 )
    946              //  Level : 0(Off) / 1(On) ( Light On/Off )
    947          
    948              const uint8_t bmpLight[2][7] = {
    949                  { 0x00, 0x10, 0xF0, 0xF0, 0xF0, 0x10, 0x00, },      // Light Off
    950                  { 0x02, 0x14, 0xF0, 0xF7, 0xF0, 0x14, 0x02, },      // Light On
    951              };
   \                     ??LCDLight_1: (+1)
   \       0x10   0xA804             ADD      R0,SP,#+16
   \       0x12   0x.... 0x....      LDR.W    R1,??DataTable35_4
   \       0x16   0x2210             MOVS     R2,#+16
   \       0x18   0x.... 0x....      BL       __aeabi_memcpy4
    952          
    953              const uint8_t *pBmp = NULL;
   \       0x1C   0x2000             MOVS     R0,#+0
    954          
    955              if ( bOnOff )
   \       0x1E   0x2C00             CMP      R4,#+0
   \       0x20   0xD002             BEQ.N    ??LCDLight_2
    956              {
    957                  //  On
    958                  pBmp = bmpLight[1];
   \       0x22   0xF10D 0x0517      ADD      R5,SP,#+23
   \       0x26   0xE000             B.N      ??LCDLight_3
    959              }
    960              else
    961              {
    962                  //  Off
    963                  pBmp = bmpLight[0];
   \                     ??LCDLight_2: (+1)
   \       0x28   0xAD04             ADD      R5,SP,#+16
    964              }
    965          
    966              display.drawBitBuf( 90, 0, pBmp, 7, 8, WHITE, BLACK );
   \                     ??LCDLight_3: (+1)
   \       0x2A   0x.... 0x....      LDR.W    R6,??DataTable35
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0x9003             STR      R0,[SP, #+12]
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0x9002             STR      R0,[SP, #+8]
   \       0x36   0x2008             MOVS     R0,#+8
   \       0x38   0x9001             STR      R0,[SP, #+4]
   \       0x3A   0x2007             MOVS     R0,#+7
   \       0x3C   0x9000             STR      R0,[SP, #+0]
   \       0x3E   0x002B             MOVS     R3,R5
   \       0x40   0x2200             MOVS     R2,#+0
   \       0x42   0x215A             MOVS     R1,#+90
   \       0x44   0x0030             MOVS     R0,R6
   \       0x46   0x.... 0x....      BL       _ZN12Adafruit_GFX10drawBitBufEssPKhsstt
    967              display.display();
   \       0x4A   0x0030             MOVS     R0,R6
   \       0x4C   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
    968          }
   \                     ??LCDLight_0: (+1)
   \       0x50   0xB008             ADD      SP,SP,#+32
   \       0x52   0xBD70             POP      {R4-R6,PC}
    969          
    970          
    971          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    972          void LCDSpeaker( int nLevel )
    973          //========================================================================
    974          {
   \                     LCDSpeaker: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB09A             SUB      SP,SP,#+104
   \        0x4   0x0004             MOVS     R4,R0
    975              if ( g_bInitLCD == false ) return;
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD025             BEQ.N    ??LCDSpeaker_0
    976          
    977              //  Area : ( 1, 1 ) ~ ( 11, 7 )
    978              //  Level : 0(Off) / 1(On) ( Light On/Off )
    979          
    980              //  Speaker Icon ( 11 X 9 )
    981              const uint8_t bmpSpk[4][22] = {
    982          //        { 0x38, 0x38, 0x7C, 0xFE, 0x00, },                                  // Speaker Icon
    983                  { 0x38, 0x38, 0x7C, 0xFE, 0x00, 0x28, 0x10, 0x28, 0x00,  },         // Speaker Off ( 0 )
    984                  { 0x38, 0x38, 0x7C, 0xFE, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 
    985                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  },   // Speaker On ( Level 1 )
    986                  { 0x38, 0x38, 0x7C, 0xFE, 0x00, 0x38, 0x82, 0x7C, 0x00, 0x00, 0x00,
    987                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  },   // Speaker On ( Level 2 )
    988                  { 0x38, 0x38, 0x7C, 0xFE, 0x00, 0x38, 0x82, 0x7C, 0x01, 0x82, 0x7C,
    989                    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,  },   // Speaker On ( Level 3 )
    990              };
   \                     ??LCDSpeaker_1: (+1)
   \       0x10   0xA804             ADD      R0,SP,#+16
   \       0x12   0x.... 0x....      LDR.W    R1,??DataTable35_5
   \       0x16   0x2258             MOVS     R2,#+88
   \       0x18   0x.... 0x....      BL       __aeabi_memcpy4
    991          
    992              const uint8_t *pBmp = NULL;
   \       0x1C   0x2500             MOVS     R5,#+0
    993          
    994              if ( nLevel < 0 && nLevel > 3 ) nLevel = 0;
   \       0x1E   0x2C00             CMP      R4,#+0
   \       0x20   0xD503             BPL.N    ??LCDSpeaker_2
   \       0x22   0x2C04             CMP      R4,#+4
   \       0x24   0xDB01             BLT.N    ??LCDSpeaker_2
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0x0004             MOVS     R4,R0
    995          
    996              //========================================================================
    997              pBmp = bmpSpk[nLevel];
   \                     ??LCDSpeaker_2: (+1)
   \       0x2A   0xA804             ADD      R0,SP,#+16
   \       0x2C   0x2116             MOVS     R1,#+22
   \       0x2E   0xFB01 0xF104      MUL      R1,R1,R4
   \       0x32   0xEB00 0x0601      ADD      R6,R0,R1
    998              //========================================================================
    999          
   1000              display.drawBitBuf( 50, 0, pBmp, 11, 9, WHITE, BLACK );
   \       0x36   0x.... 0x....      LDR.W    R7,??DataTable35
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0x9003             STR      R0,[SP, #+12]
   \       0x3E   0x2001             MOVS     R0,#+1
   \       0x40   0x9002             STR      R0,[SP, #+8]
   \       0x42   0x2009             MOVS     R0,#+9
   \       0x44   0x9001             STR      R0,[SP, #+4]
   \       0x46   0x200B             MOVS     R0,#+11
   \       0x48   0x9000             STR      R0,[SP, #+0]
   \       0x4A   0x0033             MOVS     R3,R6
   \       0x4C   0x2200             MOVS     R2,#+0
   \       0x4E   0x2132             MOVS     R1,#+50
   \       0x50   0x0038             MOVS     R0,R7
   \       0x52   0x.... 0x....      BL       _ZN12Adafruit_GFX10drawBitBufEssPKhsstt
   1001              display.display();
   \       0x56   0x0038             MOVS     R0,R7
   \       0x58   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1002          }
   \                     ??LCDSpeaker_0: (+1)
   \       0x5C   0xB01B             ADD      SP,SP,#+108
   \       0x5E   0xBDF0             POP      {R4-R7,PC}
   1003          
   1004          
   1005          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1006          void LCDMenu( void )
   1007          //========================================================================
   1008          {
   \                     LCDMenu: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   1009              if ( g_bInitLCD == false ) return;
   \        0x2   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0x6   0x6800             LDR      R0,[R0, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD00D             BEQ.N    ??LCDMenu_0
   1010          
   1011              memcpy( buffer, bufMenu, sizeof( bufMenu ) );
   \                     ??LCDMenu_1: (+1)
   \        0xC   0xF44F 0x7400      MOV      R4,#+512
   \       0x10   0x.... 0x....      LDR.W    R5,??DataTable35_7
   \       0x14   0x....             LDR.N    R6,??DataTable16_1
   \       0x16   0x0022             MOVS     R2,R4
   \       0x18   0x0029             MOVS     R1,R5
   \       0x1A   0x0030             MOVS     R0,R6
   \       0x1C   0x.... 0x....      BL       __aeabi_memcpy
   1012              display.display();
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable35
   \       0x24   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1013          }
   \                     ??LCDMenu_0: (+1)
   \       0x28   0xBD70             POP      {R4-R6,PC}
   1014          
   1015          
   1016          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1017          void    LCDMenuUpDown       ( int nUpDown ) //  0( Off ) / 1( ▲Up ) / 2( ▼Down ) / 3( ▲Up/▼Down ) 
   1018          //========================================================================
   1019          {
   \                     LCDMenuUpDown: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB09A             SUB      SP,SP,#+104
   \        0x4   0x0004             MOVS     R4,R0
   1020              //  0( Off ) / 1( ▲Up ) / 2(       ) / 3( ▲Up   ) 
   1021              //                           ▼Down        ▼Down 
   1022          
   1023              if ( g_bInitLCD == false ) return;
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD025             BEQ.N    ??LCDMenuUpDown_0
   1024          
   1025              //  Area : ( 2, 16 ) ~ ( 13, 32 )
   1026              //  Level : 0(Off) / 1(On) ( Light On/Off )
   1027          
   1028              //  Speaker Icon ( 11 X 16 )
   1029              const uint8_t bmpMenuUpDown[4][22] = {
   1030                  { 0x00, },                                                                      //  0 ( Off )
   1031                  { 0x40, 0x60, 0x70, 0x78, 0x7C, 0x7E, 0x7C, 0x78, 0x70, 0x60, 0x40, 0x00, },    //  1 ( ▲Up )
   1032                  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
   1033                    0x02, 0x06, 0x0E, 0x1E, 0x3E, 0x7E, 0x3E, 0x1E, 0x0E, 0x06, 0x02 },           //  2 ( ▼Down )
   1034                  { 0x40, 0x60, 0x70, 0x78, 0x7C, 0x7E, 0x7C, 0x78, 0x70, 0x60, 0x40,             //  3 ( ▲Up )
   1035                    0x02, 0x06, 0x0E, 0x1E, 0x3E, 0x7E, 0x3E, 0x1E, 0x0E, 0x06, 0x02 },           //    ( ▼Down )
   1036              };
   \                     ??LCDMenuUpDown_1: (+1)
   \       0x10   0xA804             ADD      R0,SP,#+16
   \       0x12   0x.... 0x....      LDR.W    R1,??DataTable35_8
   \       0x16   0x2258             MOVS     R2,#+88
   \       0x18   0x.... 0x....      BL       __aeabi_memcpy4
   1037          
   1038              const uint8_t* pBmp = NULL;
   \       0x1C   0x2500             MOVS     R5,#+0
   1039          
   1040              if ( nUpDown < 0 && nUpDown > 3 ) nUpDown = 0;
   \       0x1E   0x2C00             CMP      R4,#+0
   \       0x20   0xD503             BPL.N    ??LCDMenuUpDown_2
   \       0x22   0x2C04             CMP      R4,#+4
   \       0x24   0xDB01             BLT.N    ??LCDMenuUpDown_2
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0x0004             MOVS     R4,R0
   1041          
   1042              pBmp = bmpMenuUpDown[nUpDown];
   \                     ??LCDMenuUpDown_2: (+1)
   \       0x2A   0xA804             ADD      R0,SP,#+16
   \       0x2C   0x2116             MOVS     R1,#+22
   \       0x2E   0xFB01 0xF104      MUL      R1,R1,R4
   \       0x32   0xEB00 0x0601      ADD      R6,R0,R1
   1043          
   1044              display.drawBitBuf( 5, 13, pBmp, 11, 16, WHITE, BLACK );
   \       0x36   0x.... 0x....      LDR.W    R7,??DataTable35
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0x9003             STR      R0,[SP, #+12]
   \       0x3E   0x2001             MOVS     R0,#+1
   \       0x40   0x9002             STR      R0,[SP, #+8]
   \       0x42   0x2010             MOVS     R0,#+16
   \       0x44   0x9001             STR      R0,[SP, #+4]
   \       0x46   0x200B             MOVS     R0,#+11
   \       0x48   0x9000             STR      R0,[SP, #+0]
   \       0x4A   0x0033             MOVS     R3,R6
   \       0x4C   0x220D             MOVS     R2,#+13
   \       0x4E   0x2105             MOVS     R1,#+5
   \       0x50   0x0038             MOVS     R0,R7
   \       0x52   0x.... 0x....      BL       _ZN12Adafruit_GFX10drawBitBufEssPKhsstt
   1045              display.display();
   \       0x56   0x0038             MOVS     R0,R7
   \       0x58   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1046          }
   \                     ??LCDMenuUpDown_0: (+1)
   \       0x5C   0xB01B             ADD      SP,SP,#+108
   \       0x5E   0xBDF0             POP      {R4-R7,PC}
   1047          
   1048          
   1049          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1050          void LCDSetCursor( int x, int y )
   1051          //========================================================================
   1052          {
   \                     LCDSetCursor: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   1053              if ( g_bInitLCD == false ) return;
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0xA   0x6800             LDR      R0,[R0, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD007             BEQ.N    ??LCDSetCursor_0
   1054          
   1055              display.setCursor( x, y );
   \                     ??LCDSetCursor_1: (+1)
   \       0x10   0x002A             MOVS     R2,R5
   \       0x12   0xB212             SXTH     R2,R2
   \       0x14   0x0021             MOVS     R1,R4
   \       0x16   0xB209             SXTH     R1,R1
   \       0x18   0x.... 0x....      LDR.W    R0,??DataTable35
   \       0x1C   0x.... 0x....      BL       _ZN12Adafruit_GFX9setCursorEss
   1056          }
   \                     ??LCDSetCursor_0: (+1)
   \       0x20   0xBD31             POP      {R0,R4,R5,PC}
   1057          
   1058          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1059          void    LCDEnableDebug		( int bEnable )  		//  print LCD Display
   1060          //========================================================================
   1061          {
   \                     LCDEnableDebug: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   1062              if ( g_bInitLCD == false ) return;
   \        0x4   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0x8   0x6800             LDR      R0,[R0, #+0]
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD004             BEQ.N    ??LCDEnableDebug_0
   1063          
   1064              display.debug(bEnable);		//	LCD Debug Print
   \                     ??LCDEnableDebug_1: (+1)
   \        0xE   0x0021             MOVS     R1,R4
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable35
   \       0x14   0x.... 0x....      BL       _ZN16Adafruit_SSD13065debugEi
   1065          }
   \                     ??LCDEnableDebug_0: (+1)
   \       0x18   0xBD10             POP      {R4,PC}
   1066          
   1067          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1068          void LCDPrintf( char * str )
   1069          //========================================================================
   1070          {
   \                     LCDPrintf: (+1)
   \        0x0   0xB53E             PUSH     {R1-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   1071              if ( g_bInitLCD == false ) return;
   \        0x4   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0x8   0x6800             LDR      R0,[R0, #+0]
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD01D             BEQ.N    ??LCDPrintf_0
   1072          
   1073          //    display.clearDisplay();
   1074          
   1075              //  (0, 11) ~ (128, 32 )
   1076              int16_t x, y;
   1077          
   1078              display.getCursor( &x, &y );
   \                     ??LCDPrintf_1: (+1)
   \        0xE   0x.... 0x....      LDR.W    R5,??DataTable35
   \       0x12   0xF10D 0x020A      ADD      R2,SP,#+10
   \       0x16   0xA902             ADD      R1,SP,#+8
   \       0x18   0x0028             MOVS     R0,R5
   \       0x1A   0x.... 0x....      BL       _ZN12Adafruit_GFX9getCursorEPsS0_
   1079          
   1080              //	글씨 출력 영역 Clear
   1081              display.fillRect( x, 11, 128 - x, 21, 0 );    //  Clear
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0x9001             STR      R0,[SP, #+4]
   \       0x22   0x2015             MOVS     R0,#+21
   \       0x24   0x9000             STR      R0,[SP, #+0]
   \       0x26   0xF8BD 0x3008      LDRH     R3,[SP, #+8]
   \       0x2A   0xF1D3 0x0380      RSBS     R3,R3,#+128
   \       0x2E   0xB21B             SXTH     R3,R3
   \       0x30   0x220B             MOVS     R2,#+11
   \       0x32   0xF9BD 0x1008      LDRSH    R1,[SP, #+8]
   \       0x36   0x0028             MOVS     R0,R5
   \       0x38   0x.... 0x....      BL       _ZN12Adafruit_GFX8fillRectEsssst
   1082          
   1083          //    display.setCursor( 28, 8 );
   1084              display.printf( str );
   \       0x3C   0x0021             MOVS     R1,R4
   \       0x3E   0x0028             MOVS     R0,R5
   \       0x40   0x.... 0x....      BL       _ZN16Adafruit_SSD13066printfEPKc
   1085              display.display();
   \       0x44   0x0028             MOVS     R0,R5
   \       0x46   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1086          }
   \                     ??LCDPrintf_0: (+1)
   \       0x4A   0xBD37             POP      {R0-R2,R4,R5,PC}
   1087          
   1088          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1089          void    LCDPrintfXY         ( int x, int y, char *str )  //  print LCD Display
   1090          //========================================================================
   1091          {
   \                     LCDPrintfXY: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
   1092              if ( g_bInitLCD == false ) return;
   \        0x8   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0xC   0x6800             LDR      R0,[R0, #+0]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD008             BEQ.N    ??LCDPrintfXY_0
   1093          
   1094          	//  Main화면 Clear
   1095          	LCDClearMain();
   \                     ??LCDPrintfXY_1: (+1)
   \       0x12   0x.... 0x....      BL       LCDClearMain
   1096          
   1097              LCDSetCursor( x, y );
   \       0x16   0x0029             MOVS     R1,R5
   \       0x18   0x0020             MOVS     R0,R4
   \       0x1A   0x.... 0x....      BL       LCDSetCursor
   1098          
   1099              LCDPrintf( str );
   \       0x1E   0x0030             MOVS     R0,R6
   \       0x20   0x.... 0x....      BL       LCDPrintf
   1100          }
   \                     ??LCDPrintfXY_0: (+1)
   \       0x24   0xBD70             POP      {R4-R6,PC}
   1101          
   1102          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1103          void LCDClear( void )
   1104          //========================================================================
   1105          {
   \                     LCDClear: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   1106              if ( g_bInitLCD == false ) return;
   \        0x2   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0x6   0x6800             LDR      R0,[R0, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD007             BEQ.N    ??LCDClear_0
   1107          
   1108              display.clearDisplay();
   \                     ??LCDClear_1: (+1)
   \        0xC   0x.... 0x....      LDR.W    R4,??DataTable35
   \       0x10   0x0020             MOVS     R0,R4
   \       0x12   0x.... 0x....      BL       _ZN16Adafruit_SSD130612clearDisplayEv
   1109              display.display();
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1110          }
   \                     ??LCDClear_0: (+1)
   \       0x1C   0xBD10             POP      {R4,PC}
   1111          
   1112          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1113          void LCDClearTitle( void )
   1114          //========================================================================
   1115          {
   \                     LCDClearTitle: (+1)
   \        0x0   0xB5E0             PUSH     {R5-R7,LR}
   1116              //  Title 영역 Clear
   1117              if ( g_bInitLCD == false ) return;
   \        0x2   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0x6   0x6800             LDR      R0,[R0, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD00A             BEQ.N    ??LCDClearTitle_0
   1118          
   1119              display.fillRect( 0, 0, 128, 10, BLACK );
   \                     ??LCDClearTitle_1: (+1)
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9001             STR      R0,[SP, #+4]
   \       0x10   0x200A             MOVS     R0,#+10
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0x2380             MOVS     R3,#+128
   \       0x16   0x2200             MOVS     R2,#+0
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable35
   \       0x1E   0x.... 0x....      BL       _ZN12Adafruit_GFX8fillRectEsssst
   1120          //    display.display();
   1121          }
   \                     ??LCDClearTitle_0: (+1)
   \       0x22   0xBD07             POP      {R0-R2,PC}
   1122          
   1123          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1124          void LCDClearMain( void )
   1125          //========================================================================
   1126          {
   \                     LCDClearMain: (+1)
   \        0x0   0xB5E0             PUSH     {R5-R7,LR}
   1127              //  Main 영역 Clear
   1128              if ( g_bInitLCD == false ) return;
   \        0x2   0x.... 0x....      LDR.W    R0,??DataTable35_1
   \        0x6   0x6800             LDR      R0,[R0, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD00A             BEQ.N    ??LCDClearMain_0
   1129          
   1130              display.fillRect( 0, 10, 128, 22, BLACK );
   \                     ??LCDClearMain_1: (+1)
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x9001             STR      R0,[SP, #+4]
   \       0x10   0x2016             MOVS     R0,#+22
   \       0x12   0x9000             STR      R0,[SP, #+0]
   \       0x14   0x2380             MOVS     R3,#+128
   \       0x16   0x220A             MOVS     R2,#+10
   \       0x18   0x2100             MOVS     R1,#+0
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable35
   \       0x1E   0x.... 0x....      BL       _ZN12Adafruit_GFX8fillRectEsssst
   1131          //    display.display();
   1132          }
   \                     ??LCDClearMain_0: (+1)
   \       0x22   0xBD07             POP      {R0-R2,PC}
   1133          
   1134          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1135          void    LCDDrawRect        ( int x, int y, int w, int h, int color )  //  Clear LCD Display
   1136          //========================================================================
   1137          {
   \                     LCDDrawRect: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
   \        0xA   0x001F             MOVS     R7,R3
   \        0xC   0xF8DD 0x8028      LDR      R8,[SP, #+40]
   1138              display.fillRect( x, y, w, h, color );
   \       0x10   0x.... 0x....      LDR.W    R9,??DataTable35
   \       0x14   0x4640             MOV      R0,R8
   \       0x16   0xB280             UXTH     R0,R0
   \       0x18   0x9001             STR      R0,[SP, #+4]
   \       0x1A   0x0038             MOVS     R0,R7
   \       0x1C   0xB200             SXTH     R0,R0
   \       0x1E   0x9000             STR      R0,[SP, #+0]
   \       0x20   0x0033             MOVS     R3,R6
   \       0x22   0xB21B             SXTH     R3,R3
   \       0x24   0x002A             MOVS     R2,R5
   \       0x26   0xB212             SXTH     R2,R2
   \       0x28   0x0021             MOVS     R1,R4
   \       0x2A   0xB209             SXTH     R1,R1
   \       0x2C   0x4648             MOV      R0,R9
   \       0x2E   0x.... 0x....      BL       _ZN12Adafruit_GFX8fillRectEsssst
   1139              display.display();
   \       0x32   0x4648             MOV      R0,R9
   \       0x34   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1140          }
   \       0x38   0xE8BD 0x83F7      POP      {R0-R2,R4-R9,PC}
   1141          
   1142          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1143          void testdrawline( void )
   1144          //========================================================================
   1145          {
   \                     testdrawline: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   1146              for ( int16_t i = 0; i < display.width(); i += 4 ) {
   \        0x2   0x2500             MOVS     R5,#+0
   \                     ??testdrawline_0: (+1)
   \        0x4   0x.... 0x....      LDR.W    R4,??DataTable35
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \        0xE   0x0029             MOVS     R1,R5
   \       0x10   0xB209             SXTH     R1,R1
   \       0x12   0x4281             CMP      R1,R0
   \       0x14   0xDA13             BGE.N    ??testdrawline_1
   1147                  display.drawLine( 0, 0, i, display.height() - 1, WHITE );
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x1C   0x2101             MOVS     R1,#+1
   \       0x1E   0x9101             STR      R1,[SP, #+4]
   \       0x20   0x1E40             SUBS     R0,R0,#+1
   \       0x22   0xB200             SXTH     R0,R0
   \       0x24   0x9000             STR      R0,[SP, #+0]
   \       0x26   0x002B             MOVS     R3,R5
   \       0x28   0xB21B             SXTH     R3,R3
   \       0x2A   0x2200             MOVS     R2,#+0
   \       0x2C   0x2100             MOVS     R1,#+0
   \       0x2E   0x0020             MOVS     R0,R4
   \       0x30   0x.... 0x....      BL       _ZN12Adafruit_GFX8drawLineEsssst
   1148                  display.display();
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1149              }
   \       0x3A   0x1D2D             ADDS     R5,R5,#+4
   \       0x3C   0xE7E2             B.N      ??testdrawline_0
   1150              for ( int16_t i = 0; i < display.height(); i += 4 ) {
   \                     ??testdrawline_1: (+1)
   \       0x3E   0x2500             MOVS     R5,#+0
   \                     ??testdrawline_2: (+1)
   \       0x40   0x0020             MOVS     R0,R4
   \       0x42   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x46   0x0029             MOVS     R1,R5
   \       0x48   0xB209             SXTH     R1,R1
   \       0x4A   0x4281             CMP      R1,R0
   \       0x4C   0xDA13             BGE.N    ??testdrawline_3
   1151                  display.drawLine( 0, 0, display.width() - 1, i, WHITE );
   \       0x4E   0x0020             MOVS     R0,R4
   \       0x50   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x54   0x2101             MOVS     R1,#+1
   \       0x56   0x9101             STR      R1,[SP, #+4]
   \       0x58   0x0029             MOVS     R1,R5
   \       0x5A   0xB209             SXTH     R1,R1
   \       0x5C   0x9100             STR      R1,[SP, #+0]
   \       0x5E   0x1E43             SUBS     R3,R0,#+1
   \       0x60   0xB21B             SXTH     R3,R3
   \       0x62   0x2200             MOVS     R2,#+0
   \       0x64   0x2100             MOVS     R1,#+0
   \       0x66   0x0020             MOVS     R0,R4
   \       0x68   0x.... 0x....      BL       _ZN12Adafruit_GFX8drawLineEsssst
   1152                  display.display();
   \       0x6C   0x0020             MOVS     R0,R4
   \       0x6E   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1153              }
   \       0x72   0x1D2D             ADDS     R5,R5,#+4
   \       0x74   0xE7E4             B.N      ??testdrawline_2
   1154              HAL_Delay( 250 );
   \                     ??testdrawline_3: (+1)
   \       0x76   0x20FA             MOVS     R0,#+250
   \       0x78   0x.... 0x....      BL       HAL_Delay
   1155          
   1156              display.clearDisplay();
   \       0x7C   0x0020             MOVS     R0,R4
   \       0x7E   0x.... 0x....      BL       _ZN16Adafruit_SSD130612clearDisplayEv
   1157              for ( int16_t i = 0; i < display.width(); i += 4 ) {
   \       0x82   0x2500             MOVS     R5,#+0
   \                     ??testdrawline_4: (+1)
   \       0x84   0x0020             MOVS     R0,R4
   \       0x86   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x8A   0x0029             MOVS     R1,R5
   \       0x8C   0xB209             SXTH     R1,R1
   \       0x8E   0x4281             CMP      R1,R0
   \       0x90   0xDA13             BGE.N    ??testdrawline_5
   1158                  display.drawLine( 0, display.height() - 1, i, 0, WHITE );
   \       0x92   0x0020             MOVS     R0,R4
   \       0x94   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x98   0x2101             MOVS     R1,#+1
   \       0x9A   0x9101             STR      R1,[SP, #+4]
   \       0x9C   0x2100             MOVS     R1,#+0
   \       0x9E   0x9100             STR      R1,[SP, #+0]
   \       0xA0   0x002B             MOVS     R3,R5
   \       0xA2   0xB21B             SXTH     R3,R3
   \       0xA4   0x1E42             SUBS     R2,R0,#+1
   \       0xA6   0xB212             SXTH     R2,R2
   \       0xA8   0x2100             MOVS     R1,#+0
   \       0xAA   0x0020             MOVS     R0,R4
   \       0xAC   0x.... 0x....      BL       _ZN12Adafruit_GFX8drawLineEsssst
   1159                  display.display();
   \       0xB0   0x0020             MOVS     R0,R4
   \       0xB2   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1160              }
   \       0xB6   0x1D2D             ADDS     R5,R5,#+4
   \       0xB8   0xE7E4             B.N      ??testdrawline_4
   1161              for ( int16_t i = display.height() - 1; i >= 0; i -= 4 ) {
   \                     ??testdrawline_5: (+1)
   \       0xBA   0x0020             MOVS     R0,R4
   \       0xBC   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0xC0   0x1E45             SUBS     R5,R0,#+1
   \                     ??testdrawline_6: (+1)
   \       0xC2   0x0028             MOVS     R0,R5
   \       0xC4   0xB200             SXTH     R0,R0
   \       0xC6   0x2800             CMP      R0,#+0
   \       0xC8   0xD418             BMI.N    ??testdrawline_7
   1162                  display.drawLine( 0, display.height() - 1, display.width() - 1, i, WHITE );
   \       0xCA   0x0020             MOVS     R0,R4
   \       0xCC   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0xD0   0x0006             MOVS     R6,R0
   \       0xD2   0x0020             MOVS     R0,R4
   \       0xD4   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0xD8   0x2101             MOVS     R1,#+1
   \       0xDA   0x9101             STR      R1,[SP, #+4]
   \       0xDC   0x0029             MOVS     R1,R5
   \       0xDE   0xB209             SXTH     R1,R1
   \       0xE0   0x9100             STR      R1,[SP, #+0]
   \       0xE2   0x1E73             SUBS     R3,R6,#+1
   \       0xE4   0xB21B             SXTH     R3,R3
   \       0xE6   0x1E42             SUBS     R2,R0,#+1
   \       0xE8   0xB212             SXTH     R2,R2
   \       0xEA   0x2100             MOVS     R1,#+0
   \       0xEC   0x0020             MOVS     R0,R4
   \       0xEE   0x.... 0x....      BL       _ZN12Adafruit_GFX8drawLineEsssst
   1163                  display.display();
   \       0xF2   0x0020             MOVS     R0,R4
   \       0xF4   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1164              }
   \       0xF8   0x1F2D             SUBS     R5,R5,#+4
   \       0xFA   0xE7E2             B.N      ??testdrawline_6
   1165              HAL_Delay( 250 );
   \                     ??testdrawline_7: (+1)
   \       0xFC   0x20FA             MOVS     R0,#+250
   \       0xFE   0x.... 0x....      BL       HAL_Delay
   1166          
   1167              display.clearDisplay();
   \      0x102   0x0020             MOVS     R0,R4
   \      0x104   0x.... 0x....      BL       _ZN16Adafruit_SSD130612clearDisplayEv
   1168              for ( int16_t i = display.width() - 1; i >= 0; i -= 4 ) {
   \      0x108   0x0020             MOVS     R0,R4
   \      0x10A   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \      0x10E   0x1E45             SUBS     R5,R0,#+1
   \                     ??testdrawline_8: (+1)
   \      0x110   0x0028             MOVS     R0,R5
   \      0x112   0xB200             SXTH     R0,R0
   \      0x114   0x2800             CMP      R0,#+0
   \      0x116   0xD418             BMI.N    ??testdrawline_9
   1169                  display.drawLine( display.width() - 1, display.height() - 1, i, 0, WHITE );
   \      0x118   0x0020             MOVS     R0,R4
   \      0x11A   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \      0x11E   0x0006             MOVS     R6,R0
   \      0x120   0x0020             MOVS     R0,R4
   \      0x122   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \      0x126   0x2101             MOVS     R1,#+1
   \      0x128   0x9101             STR      R1,[SP, #+4]
   \      0x12A   0x2100             MOVS     R1,#+0
   \      0x12C   0x9100             STR      R1,[SP, #+0]
   \      0x12E   0x002B             MOVS     R3,R5
   \      0x130   0xB21B             SXTH     R3,R3
   \      0x132   0x1E72             SUBS     R2,R6,#+1
   \      0x134   0xB212             SXTH     R2,R2
   \      0x136   0x1E41             SUBS     R1,R0,#+1
   \      0x138   0xB209             SXTH     R1,R1
   \      0x13A   0x0020             MOVS     R0,R4
   \      0x13C   0x.... 0x....      BL       _ZN12Adafruit_GFX8drawLineEsssst
   1170                  display.display();
   \      0x140   0x0020             MOVS     R0,R4
   \      0x142   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1171              }
   \      0x146   0x1F2D             SUBS     R5,R5,#+4
   \      0x148   0xE7E2             B.N      ??testdrawline_8
   1172              for ( int16_t i = display.height() - 1; i >= 0; i -= 4 ) {
   \                     ??testdrawline_9: (+1)
   \      0x14A   0x0020             MOVS     R0,R4
   \      0x14C   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \      0x150   0x1E45             SUBS     R5,R0,#+1
   \                     ??testdrawline_10: (+1)
   \      0x152   0x0028             MOVS     R0,R5
   \      0x154   0xB200             SXTH     R0,R0
   \      0x156   0x2800             CMP      R0,#+0
   \      0x158   0xD418             BMI.N    ??testdrawline_11
   1173                  display.drawLine( display.width() - 1, display.height() - 1, 0, i, WHITE );
   \      0x15A   0x0020             MOVS     R0,R4
   \      0x15C   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \      0x160   0x0006             MOVS     R6,R0
   \      0x162   0x0020             MOVS     R0,R4
   \      0x164   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \      0x168   0x2101             MOVS     R1,#+1
   \      0x16A   0x9101             STR      R1,[SP, #+4]
   \      0x16C   0x0029             MOVS     R1,R5
   \      0x16E   0xB209             SXTH     R1,R1
   \      0x170   0x9100             STR      R1,[SP, #+0]
   \      0x172   0x2300             MOVS     R3,#+0
   \      0x174   0x1E72             SUBS     R2,R6,#+1
   \      0x176   0xB212             SXTH     R2,R2
   \      0x178   0x1E41             SUBS     R1,R0,#+1
   \      0x17A   0xB209             SXTH     R1,R1
   \      0x17C   0x0020             MOVS     R0,R4
   \      0x17E   0x.... 0x....      BL       _ZN12Adafruit_GFX8drawLineEsssst
   1174                  display.display();
   \      0x182   0x0020             MOVS     R0,R4
   \      0x184   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1175              }
   \      0x188   0x1F2D             SUBS     R5,R5,#+4
   \      0x18A   0xE7E2             B.N      ??testdrawline_10
   1176              HAL_Delay( 250 );
   \                     ??testdrawline_11: (+1)
   \      0x18C   0x20FA             MOVS     R0,#+250
   \      0x18E   0x.... 0x....      BL       HAL_Delay
   1177          
   1178              display.clearDisplay();
   \      0x192   0x0020             MOVS     R0,R4
   \      0x194   0x.... 0x....      BL       _ZN16Adafruit_SSD130612clearDisplayEv
   1179              for ( int16_t i = 0; i < display.height(); i += 4 ) {
   \      0x198   0x2500             MOVS     R5,#+0
   \                     ??testdrawline_12: (+1)
   \      0x19A   0x0020             MOVS     R0,R4
   \      0x19C   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \      0x1A0   0x0029             MOVS     R1,R5
   \      0x1A2   0xB209             SXTH     R1,R1
   \      0x1A4   0x4281             CMP      R1,R0
   \      0x1A6   0xDA13             BGE.N    ??testdrawline_13
   1180                  display.drawLine( display.width() - 1, 0, 0, i, WHITE );
   \      0x1A8   0x0020             MOVS     R0,R4
   \      0x1AA   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \      0x1AE   0x2101             MOVS     R1,#+1
   \      0x1B0   0x9101             STR      R1,[SP, #+4]
   \      0x1B2   0x0029             MOVS     R1,R5
   \      0x1B4   0xB209             SXTH     R1,R1
   \      0x1B6   0x9100             STR      R1,[SP, #+0]
   \      0x1B8   0x2300             MOVS     R3,#+0
   \      0x1BA   0x2200             MOVS     R2,#+0
   \      0x1BC   0x1E41             SUBS     R1,R0,#+1
   \      0x1BE   0xB209             SXTH     R1,R1
   \      0x1C0   0x0020             MOVS     R0,R4
   \      0x1C2   0x.... 0x....      BL       _ZN12Adafruit_GFX8drawLineEsssst
   1181                  display.display();
   \      0x1C6   0x0020             MOVS     R0,R4
   \      0x1C8   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1182              }
   \      0x1CC   0x1D2D             ADDS     R5,R5,#+4
   \      0x1CE   0xE7E4             B.N      ??testdrawline_12
   1183              for ( int16_t i = 0; i < display.width(); i += 4 ) {
   \                     ??testdrawline_13: (+1)
   \      0x1D0   0x2500             MOVS     R5,#+0
   \                     ??testdrawline_14: (+1)
   \      0x1D2   0x0020             MOVS     R0,R4
   \      0x1D4   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \      0x1D8   0x0029             MOVS     R1,R5
   \      0x1DA   0xB209             SXTH     R1,R1
   \      0x1DC   0x4281             CMP      R1,R0
   \      0x1DE   0xDA18             BGE.N    ??testdrawline_15
   1184                  display.drawLine( display.width() - 1, 0, i, display.height() - 1, WHITE );
   \      0x1E0   0x0020             MOVS     R0,R4
   \      0x1E2   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \      0x1E6   0x0006             MOVS     R6,R0
   \      0x1E8   0x0020             MOVS     R0,R4
   \      0x1EA   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \      0x1EE   0x2101             MOVS     R1,#+1
   \      0x1F0   0x9101             STR      R1,[SP, #+4]
   \      0x1F2   0x1E71             SUBS     R1,R6,#+1
   \      0x1F4   0xB209             SXTH     R1,R1
   \      0x1F6   0x9100             STR      R1,[SP, #+0]
   \      0x1F8   0x002B             MOVS     R3,R5
   \      0x1FA   0xB21B             SXTH     R3,R3
   \      0x1FC   0x2200             MOVS     R2,#+0
   \      0x1FE   0x1E41             SUBS     R1,R0,#+1
   \      0x200   0xB209             SXTH     R1,R1
   \      0x202   0x0020             MOVS     R0,R4
   \      0x204   0x.... 0x....      BL       _ZN12Adafruit_GFX8drawLineEsssst
   1185                  display.display();
   \      0x208   0x0020             MOVS     R0,R4
   \      0x20A   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1186              }
   \      0x20E   0x1D2D             ADDS     R5,R5,#+4
   \      0x210   0xE7DF             B.N      ??testdrawline_14
   1187              HAL_Delay( 250 );
   \                     ??testdrawline_15: (+1)
   \      0x212   0x20FA             MOVS     R0,#+250
   \      0x214   0x.... 0x....      BL       HAL_Delay
   1188          }
   \      0x218   0xBD73             POP      {R0,R1,R4-R6,PC}
   1189          
   1190          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1191          void testdrawrect( void )
   1192          //========================================================================
   1193          {
   \                     testdrawrect: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   1194              for ( int16_t i = 0; i < display.height() / 2; i += 2 ) {
   \        0x2   0x2500             MOVS     R5,#+0
   \                     ??testdrawrect_0: (+1)
   \        0x4   0x.... 0x....      LDR.W    R4,??DataTable35
   \        0x8   0x0020             MOVS     R0,R4
   \        0xA   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \        0xE   0x2102             MOVS     R1,#+2
   \       0x10   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \       0x14   0x0029             MOVS     R1,R5
   \       0x16   0xB209             SXTH     R1,R1
   \       0x18   0x4281             CMP      R1,R0
   \       0x1A   0xDA25             BGE.N    ??testdrawrect_1
   1195                  display.drawRect( i, i, display.width() - 2 * i, display.height() - 2 * i, WHITE );
   \       0x1C   0x0020             MOVS     R0,R4
   \       0x1E   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x22   0x0006             MOVS     R6,R0
   \       0x24   0x0020             MOVS     R0,R4
   \       0x26   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x2A   0x2101             MOVS     R1,#+1
   \       0x2C   0x9101             STR      R1,[SP, #+4]
   \       0x2E   0xB236             SXTH     R6,R6
   \       0x30   0x0029             MOVS     R1,R5
   \       0x32   0xB209             SXTH     R1,R1
   \       0x34   0xEBB6 0x0641      SUBS     R6,R6,R1, LSL #+1
   \       0x38   0xB236             SXTH     R6,R6
   \       0x3A   0x9600             STR      R6,[SP, #+0]
   \       0x3C   0xB200             SXTH     R0,R0
   \       0x3E   0x0029             MOVS     R1,R5
   \       0x40   0xB209             SXTH     R1,R1
   \       0x42   0xEBB0 0x0041      SUBS     R0,R0,R1, LSL #+1
   \       0x46   0x0003             MOVS     R3,R0
   \       0x48   0xB21B             SXTH     R3,R3
   \       0x4A   0x002A             MOVS     R2,R5
   \       0x4C   0xB212             SXTH     R2,R2
   \       0x4E   0x0029             MOVS     R1,R5
   \       0x50   0xB209             SXTH     R1,R1
   \       0x52   0x0020             MOVS     R0,R4
   \       0x54   0x.... 0x....      BL       _ZN12Adafruit_GFX8drawRectEsssst
   1196                  display.display();
   \       0x58   0x0020             MOVS     R0,R4
   \       0x5A   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1197                  HAL_Delay( 1 );
   \       0x5E   0x2001             MOVS     R0,#+1
   \       0x60   0x.... 0x....      BL       HAL_Delay
   1198              }
   \       0x64   0x1CAD             ADDS     R5,R5,#+2
   \       0x66   0xE7CD             B.N      ??testdrawrect_0
   1199          }
   \                     ??testdrawrect_1: (+1)
   \       0x68   0xBD73             POP      {R0,R1,R4-R6,PC}
   1200          
   1201          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1202          void testfillrect( void )
   1203          //========================================================================
   1204          {
   \                     testfillrect: (+1)
   \        0x0   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   1205              uint8_t color = 1;
   \        0x4   0x2401             MOVS     R4,#+1
   1206              for ( int16_t i = 0; i < display.height() / 2; i += 3 ) {
   \        0x6   0x2600             MOVS     R6,#+0
   \                     ??testfillrect_0: (+1)
   \        0x8   0x.... 0x....      LDR.W    R5,??DataTable35
   \        0xC   0x0028             MOVS     R0,R5
   \        0xE   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x12   0x2102             MOVS     R1,#+2
   \       0x14   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \       0x18   0x0031             MOVS     R1,R6
   \       0x1A   0xB209             SXTH     R1,R1
   \       0x1C   0x4281             CMP      R1,R0
   \       0x1E   0xDA31             BGE.N    ??testfillrect_1
   1207                  // alternate colors
   1208                  display.fillRect( i, i, display.width() - i * 2, display.height() - i * 2, color % 2 );
   \       0x20   0x0027             MOVS     R7,R4
   \       0x22   0xB2FF             UXTB     R7,R7
   \       0x24   0xF05F 0x0802      MOVS     R8,#+2
   \       0x28   0x0028             MOVS     R0,R5
   \       0x2A   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x2E   0x4681             MOV      R9,R0
   \       0x30   0x0028             MOVS     R0,R5
   \       0x32   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x36   0xFB97 0xF1F8      SDIV     R1,R7,R8
   \       0x3A   0xFB08 0x7711      MLS      R7,R8,R1,R7
   \       0x3E   0xB2BF             UXTH     R7,R7
   \       0x40   0x9701             STR      R7,[SP, #+4]
   \       0x42   0xFA0F 0xF989      SXTH     R9,R9
   \       0x46   0x0031             MOVS     R1,R6
   \       0x48   0xB209             SXTH     R1,R1
   \       0x4A   0xEBB9 0x0941      SUBS     R9,R9,R1, LSL #+1
   \       0x4E   0xFA0F 0xF989      SXTH     R9,R9
   \       0x52   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \       0x56   0xB200             SXTH     R0,R0
   \       0x58   0x0031             MOVS     R1,R6
   \       0x5A   0xB209             SXTH     R1,R1
   \       0x5C   0xEBB0 0x0041      SUBS     R0,R0,R1, LSL #+1
   \       0x60   0x0003             MOVS     R3,R0
   \       0x62   0xB21B             SXTH     R3,R3
   \       0x64   0x0032             MOVS     R2,R6
   \       0x66   0xB212             SXTH     R2,R2
   \       0x68   0x0031             MOVS     R1,R6
   \       0x6A   0xB209             SXTH     R1,R1
   \       0x6C   0x0028             MOVS     R0,R5
   \       0x6E   0x.... 0x....      BL       _ZN12Adafruit_GFX8fillRectEsssst
   1209                  display.display();
   \       0x72   0x0028             MOVS     R0,R5
   \       0x74   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1210                  HAL_Delay( 1 );
   \       0x78   0x2001             MOVS     R0,#+1
   \       0x7A   0x.... 0x....      BL       HAL_Delay
   1211                  color++;
   \       0x7E   0x1C64             ADDS     R4,R4,#+1
   1212              }
   \       0x80   0x1CF6             ADDS     R6,R6,#+3
   \       0x82   0xE7C1             B.N      ??testfillrect_0
   1213          }
   \                     ??testfillrect_1: (+1)
   \       0x84   0xE8BD 0x83F7      POP      {R0-R2,R4-R9,PC}
   1214          
   1215          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1216          void testdrawcircle( void )
   1217          //========================================================================
   1218          {
   \                     testdrawcircle: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   1219              for ( int16_t i = 0; i < display.height(); i += 2 ) {
   \        0x2   0x2400             MOVS     R4,#+0
   \                     ??testdrawcircle_0: (+1)
   \        0x4   0x.... 0x....      LDR.W    R5,??DataTable35
   \        0x8   0x0028             MOVS     R0,R5
   \        0xA   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \        0xE   0x0021             MOVS     R1,R4
   \       0x10   0xB209             SXTH     R1,R1
   \       0x12   0x4281             CMP      R1,R0
   \       0x14   0xDA1F             BGE.N    ??testdrawcircle_1
   1220                  display.drawCircle( display.width() / 2, display.height() / 2, i, WHITE );
   \       0x16   0x0028             MOVS     R0,R5
   \       0x18   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x1C   0x0006             MOVS     R6,R0
   \       0x1E   0x0028             MOVS     R0,R5
   \       0x20   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x24   0x2101             MOVS     R1,#+1
   \       0x26   0x9100             STR      R1,[SP, #+0]
   \       0x28   0x0023             MOVS     R3,R4
   \       0x2A   0xB21B             SXTH     R3,R3
   \       0x2C   0xB236             SXTH     R6,R6
   \       0x2E   0x2102             MOVS     R1,#+2
   \       0x30   0xFB96 0xF2F1      SDIV     R2,R6,R1
   \       0x34   0xB212             SXTH     R2,R2
   \       0x36   0xB200             SXTH     R0,R0
   \       0x38   0x2102             MOVS     R1,#+2
   \       0x3A   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \       0x3E   0xB209             SXTH     R1,R1
   \       0x40   0x0028             MOVS     R0,R5
   \       0x42   0x.... 0x....      BL       _ZN12Adafruit_GFX10drawCircleEssst
   1221                  display.display();
   \       0x46   0x0028             MOVS     R0,R5
   \       0x48   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1222                  HAL_Delay( 1 );
   \       0x4C   0x2001             MOVS     R0,#+1
   \       0x4E   0x.... 0x....      BL       HAL_Delay
   1223              }
   \       0x52   0x1CA4             ADDS     R4,R4,#+2
   \       0x54   0xE7D6             B.N      ??testdrawcircle_0
   1224          }
   \                     ??testdrawcircle_1: (+1)
   \       0x56   0xBD73             POP      {R0,R1,R4-R6,PC}
   1225          
   1226          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1227          void testdrawroundrect( void )
   1228          //========================================================================
   1229          {
   \                     testdrawroundrect: (+1)
   \        0x0   0xB5FE             PUSH     {R1-R7,LR}
   1230              for ( int16_t i = 0; i < display.height() / 2 - 2; i += 2 ) {
   \        0x2   0x2400             MOVS     R4,#+0
   \                     ??testdrawroundrect_0: (+1)
   \        0x4   0x.... 0x....      LDR.W    R5,??DataTable35
   \        0x8   0x0028             MOVS     R0,R5
   \        0xA   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \        0xE   0x2102             MOVS     R1,#+2
   \       0x10   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \       0x14   0x1E80             SUBS     R0,R0,#+2
   \       0x16   0x0021             MOVS     R1,R4
   \       0x18   0xB209             SXTH     R1,R1
   \       0x1A   0x4281             CMP      R1,R0
   \       0x1C   0xDA2F             BGE.N    ??testdrawroundrect_1
   1231                  display.drawRoundRect( i, i, display.width() - 2 * i, display.height() - 2 * i, display.height() / 4, WHITE );
   \       0x1E   0x0028             MOVS     R0,R5
   \       0x20   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x24   0x0006             MOVS     R6,R0
   \       0x26   0x0028             MOVS     R0,R5
   \       0x28   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x2C   0x0007             MOVS     R7,R0
   \       0x2E   0x0028             MOVS     R0,R5
   \       0x30   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x34   0x2101             MOVS     R1,#+1
   \       0x36   0x9102             STR      R1,[SP, #+8]
   \       0x38   0xB236             SXTH     R6,R6
   \       0x3A   0x2104             MOVS     R1,#+4
   \       0x3C   0xFB96 0xF1F1      SDIV     R1,R6,R1
   \       0x40   0xB209             SXTH     R1,R1
   \       0x42   0x9101             STR      R1,[SP, #+4]
   \       0x44   0xB23F             SXTH     R7,R7
   \       0x46   0x0021             MOVS     R1,R4
   \       0x48   0xB209             SXTH     R1,R1
   \       0x4A   0xEBB7 0x0741      SUBS     R7,R7,R1, LSL #+1
   \       0x4E   0xB23F             SXTH     R7,R7
   \       0x50   0x9700             STR      R7,[SP, #+0]
   \       0x52   0xB200             SXTH     R0,R0
   \       0x54   0x0021             MOVS     R1,R4
   \       0x56   0xB209             SXTH     R1,R1
   \       0x58   0xEBB0 0x0041      SUBS     R0,R0,R1, LSL #+1
   \       0x5C   0x0003             MOVS     R3,R0
   \       0x5E   0xB21B             SXTH     R3,R3
   \       0x60   0x0022             MOVS     R2,R4
   \       0x62   0xB212             SXTH     R2,R2
   \       0x64   0x0021             MOVS     R1,R4
   \       0x66   0xB209             SXTH     R1,R1
   \       0x68   0x0028             MOVS     R0,R5
   \       0x6A   0x.... 0x....      BL       _ZN12Adafruit_GFX13drawRoundRectEssssst
   1232                  display.display();
   \       0x6E   0x0028             MOVS     R0,R5
   \       0x70   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1233                  HAL_Delay( 1 );
   \       0x74   0x2001             MOVS     R0,#+1
   \       0x76   0x.... 0x....      BL       HAL_Delay
   1234              }
   \       0x7A   0x1CA4             ADDS     R4,R4,#+2
   \       0x7C   0xE7C2             B.N      ??testdrawroundrect_0
   1235          }
   \                     ??testdrawroundrect_1: (+1)
   \       0x7E   0xBDF7             POP      {R0-R2,R4-R7,PC}
   1236          
   1237          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1238          void testfillroundrect( void )
   1239          //========================================================================
   1240          {
   \                     testfillroundrect: (+1)
   \        0x0   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   1241              uint8_t color = WHITE;
   \        0x4   0x2601             MOVS     R6,#+1
   1242              for ( int16_t i = 0; i < display.height() / 2 - 2; i += 2 ) {
   \        0x6   0x2400             MOVS     R4,#+0
   \                     ??testfillroundrect_0: (+1)
   \        0x8   0x.... 0x....      LDR.W    R5,??DataTable35
   \        0xC   0x0028             MOVS     R0,R5
   \        0xE   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x12   0x2102             MOVS     R1,#+2
   \       0x14   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \       0x18   0x1E80             SUBS     R0,R0,#+2
   \       0x1A   0x0021             MOVS     R1,R4
   \       0x1C   0xB209             SXTH     R1,R1
   \       0x1E   0x4281             CMP      R1,R0
   \       0x20   0xDA3B             BGE.N    ??testfillroundrect_1
   1243                  display.fillRoundRect( i, i, display.width() - 2 * i, display.height() - 2 * i, display.height() / 4, color );
   \       0x22   0x0028             MOVS     R0,R5
   \       0x24   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x28   0x4680             MOV      R8,R0
   \       0x2A   0x0028             MOVS     R0,R5
   \       0x2C   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x30   0x0007             MOVS     R7,R0
   \       0x32   0x0028             MOVS     R0,R5
   \       0x34   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x38   0x0031             MOVS     R1,R6
   \       0x3A   0xB2C9             UXTB     R1,R1
   \       0x3C   0xB289             UXTH     R1,R1
   \       0x3E   0x9102             STR      R1,[SP, #+8]
   \       0x40   0xFA0F 0xF888      SXTH     R8,R8
   \       0x44   0x2104             MOVS     R1,#+4
   \       0x46   0xFB98 0xF1F1      SDIV     R1,R8,R1
   \       0x4A   0xB209             SXTH     R1,R1
   \       0x4C   0x9101             STR      R1,[SP, #+4]
   \       0x4E   0xB23F             SXTH     R7,R7
   \       0x50   0x0021             MOVS     R1,R4
   \       0x52   0xB209             SXTH     R1,R1
   \       0x54   0xEBB7 0x0741      SUBS     R7,R7,R1, LSL #+1
   \       0x58   0xB23F             SXTH     R7,R7
   \       0x5A   0x9700             STR      R7,[SP, #+0]
   \       0x5C   0xB200             SXTH     R0,R0
   \       0x5E   0x0021             MOVS     R1,R4
   \       0x60   0xB209             SXTH     R1,R1
   \       0x62   0xEBB0 0x0041      SUBS     R0,R0,R1, LSL #+1
   \       0x66   0x0003             MOVS     R3,R0
   \       0x68   0xB21B             SXTH     R3,R3
   \       0x6A   0x0022             MOVS     R2,R4
   \       0x6C   0xB212             SXTH     R2,R2
   \       0x6E   0x0021             MOVS     R1,R4
   \       0x70   0xB209             SXTH     R1,R1
   \       0x72   0x0028             MOVS     R0,R5
   \       0x74   0x.... 0x....      BL       _ZN12Adafruit_GFX13fillRoundRectEssssst
   1244                  if ( color == WHITE ) color = BLACK;
   \       0x78   0x0030             MOVS     R0,R6
   \       0x7A   0xB2C0             UXTB     R0,R0
   \       0x7C   0x2801             CMP      R0,#+1
   \       0x7E   0xD102             BNE.N    ??testfillroundrect_2
   \       0x80   0x2000             MOVS     R0,#+0
   \       0x82   0x0006             MOVS     R6,R0
   \       0x84   0xE001             B.N      ??testfillroundrect_3
   1245                  else color = WHITE;
   \                     ??testfillroundrect_2: (+1)
   \       0x86   0x2001             MOVS     R0,#+1
   \       0x88   0x0006             MOVS     R6,R0
   1246                  display.display();
   \                     ??testfillroundrect_3: (+1)
   \       0x8A   0x0028             MOVS     R0,R5
   \       0x8C   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1247                  HAL_Delay( 1 );
   \       0x90   0x2001             MOVS     R0,#+1
   \       0x92   0x.... 0x....      BL       HAL_Delay
   1248              }
   \       0x96   0x1CA4             ADDS     R4,R4,#+2
   \       0x98   0xE7B6             B.N      ??testfillroundrect_0
   1249          }
   \                     ??testfillroundrect_1: (+1)
   \       0x9A   0xE8BD 0x81FF      POP      {R0-R8,PC}
   1250          
   1251          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1252          void testdrawtriangle( void )
   1253          //========================================================================
   1254          {
   \                     testdrawtriangle: (+1)
   \        0x0   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   1255              for ( int16_t i = 0; i < min( display.width(), display.height() ) / 2; i += 5 ) {
   \        0x4   0x2400             MOVS     R4,#+0
   \                     ??testdrawtriangle_0: (+1)
   \        0x6   0x.... 0x....      LDR.W    R5,??DataTable35
   \        0xA   0x0028             MOVS     R0,R5
   \        0xC   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x10   0x0006             MOVS     R6,R0
   \       0x12   0x0028             MOVS     R0,R5
   \       0x14   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x18   0xB236             SXTH     R6,R6
   \       0x1A   0x4286             CMP      R6,R0
   \       0x1C   0xDA03             BGE.N    ??testdrawtriangle_1
   \       0x1E   0x0028             MOVS     R0,R5
   \       0x20   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x24   0xE002             B.N      ??testdrawtriangle_2
   \                     ??testdrawtriangle_1: (+1)
   \       0x26   0x0028             MOVS     R0,R5
   \       0x28   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \                     ??testdrawtriangle_2: (+1)
   \       0x2C   0xB200             SXTH     R0,R0
   \       0x2E   0x2102             MOVS     R1,#+2
   \       0x30   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \       0x34   0x0021             MOVS     R1,R4
   \       0x36   0xB209             SXTH     R1,R1
   \       0x38   0x4281             CMP      R1,R0
   \       0x3A   0xDA4C             BGE.N    ??testdrawtriangle_3
   1256                  display.drawTriangle( display.width() / 2, display.height() / 2 - i,
   1257                      display.width() / 2 - i, display.height() / 2 + i,
   1258                      display.width() / 2 + i, display.height() / 2 + i, WHITE );
   \       0x3C   0x0028             MOVS     R0,R5
   \       0x3E   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x42   0x4682             MOV      R10,R0
   \       0x44   0x0028             MOVS     R0,R5
   \       0x46   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x4A   0x0006             MOVS     R6,R0
   \       0x4C   0x0028             MOVS     R0,R5
   \       0x4E   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x52   0x0007             MOVS     R7,R0
   \       0x54   0x0028             MOVS     R0,R5
   \       0x56   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x5A   0x4680             MOV      R8,R0
   \       0x5C   0x0028             MOVS     R0,R5
   \       0x5E   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x62   0x4681             MOV      R9,R0
   \       0x64   0x0028             MOVS     R0,R5
   \       0x66   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x6A   0x2101             MOVS     R1,#+1
   \       0x6C   0x9103             STR      R1,[SP, #+12]
   \       0x6E   0xFA0F 0xFA8A      SXTH     R10,R10
   \       0x72   0x2102             MOVS     R1,#+2
   \       0x74   0xFB9A 0xF1F1      SDIV     R1,R10,R1
   \       0x78   0x1861             ADDS     R1,R4,R1
   \       0x7A   0xB209             SXTH     R1,R1
   \       0x7C   0x9102             STR      R1,[SP, #+8]
   \       0x7E   0xB236             SXTH     R6,R6
   \       0x80   0x2102             MOVS     R1,#+2
   \       0x82   0xFB96 0xF1F1      SDIV     R1,R6,R1
   \       0x86   0x1861             ADDS     R1,R4,R1
   \       0x88   0xB209             SXTH     R1,R1
   \       0x8A   0x9101             STR      R1,[SP, #+4]
   \       0x8C   0xB23F             SXTH     R7,R7
   \       0x8E   0x2102             MOVS     R1,#+2
   \       0x90   0xFB97 0xF1F1      SDIV     R1,R7,R1
   \       0x94   0x1861             ADDS     R1,R4,R1
   \       0x96   0xB209             SXTH     R1,R1
   \       0x98   0x9100             STR      R1,[SP, #+0]
   \       0x9A   0xFA0F 0xF888      SXTH     R8,R8
   \       0x9E   0x2102             MOVS     R1,#+2
   \       0xA0   0xFB98 0xF3F1      SDIV     R3,R8,R1
   \       0xA4   0x1B1B             SUBS     R3,R3,R4
   \       0xA6   0xB21B             SXTH     R3,R3
   \       0xA8   0xFA0F 0xF989      SXTH     R9,R9
   \       0xAC   0x2102             MOVS     R1,#+2
   \       0xAE   0xFB99 0xF2F1      SDIV     R2,R9,R1
   \       0xB2   0x1B12             SUBS     R2,R2,R4
   \       0xB4   0xB212             SXTH     R2,R2
   \       0xB6   0xB200             SXTH     R0,R0
   \       0xB8   0x2102             MOVS     R1,#+2
   \       0xBA   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \       0xBE   0xB209             SXTH     R1,R1
   \       0xC0   0x0028             MOVS     R0,R5
   \       0xC2   0x.... 0x....      BL       _ZN12Adafruit_GFX12drawTriangleEsssssst
   1259                  display.display();
   \       0xC6   0x0028             MOVS     R0,R5
   \       0xC8   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1260                  HAL_Delay( 1 );
   \       0xCC   0x2001             MOVS     R0,#+1
   \       0xCE   0x.... 0x....      BL       HAL_Delay
   1261              }
   \       0xD2   0x1D64             ADDS     R4,R4,#+5
   \       0xD4   0xE797             B.N      ??testdrawtriangle_0
   1262          }
   \                     ??testdrawtriangle_3: (+1)
   \       0xD6   0xE8BD 0x87FF      POP      {R0-R10,PC}
   1263          
   1264          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1265          void testfilltriangle( void )
   1266          //========================================================================
   1267          {
   \                     testfilltriangle: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB084             SUB      SP,SP,#+16
   1268              uint8_t color = WHITE;
   \        0x6   0x2401             MOVS     R4,#+1
   1269              for ( int16_t i = min( display.width(), display.height() ) / 2; i > 0; i -= 5 ) {
   \        0x8   0x.... 0x....      LDR.W    R5,??DataTable35
   \        0xC   0x0028             MOVS     R0,R5
   \        0xE   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x12   0x0006             MOVS     R6,R0
   \       0x14   0x0028             MOVS     R0,R5
   \       0x16   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x1A   0xB236             SXTH     R6,R6
   \       0x1C   0x4286             CMP      R6,R0
   \       0x1E   0xDA03             BGE.N    ??testfilltriangle_0
   \       0x20   0x0028             MOVS     R0,R5
   \       0x22   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x26   0xE002             B.N      ??testfilltriangle_1
   \                     ??testfilltriangle_0: (+1)
   \       0x28   0x0028             MOVS     R0,R5
   \       0x2A   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \                     ??testfilltriangle_1: (+1)
   \       0x2E   0xB200             SXTH     R0,R0
   \       0x30   0x2102             MOVS     R1,#+2
   \       0x32   0xFB90 0xF6F1      SDIV     R6,R0,R1
   \                     ??testfilltriangle_2: (+1)
   \       0x36   0x0030             MOVS     R0,R6
   \       0x38   0xB200             SXTH     R0,R0
   \       0x3A   0x2801             CMP      R0,#+1
   \       0x3C   0xDB56             BLT.N    ??testfilltriangle_3
   1270                  display.fillTriangle( display.width() / 2, display.height() / 2 - i,
   1271                      display.width() / 2 - i, display.height() / 2 + i,
   1272                      display.width() / 2 + i, display.height() / 2 + i, WHITE );
   \       0x3E   0x0028             MOVS     R0,R5
   \       0x40   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x44   0x0007             MOVS     R7,R0
   \       0x46   0x0028             MOVS     R0,R5
   \       0x48   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x4C   0x4680             MOV      R8,R0
   \       0x4E   0x0028             MOVS     R0,R5
   \       0x50   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x54   0x4681             MOV      R9,R0
   \       0x56   0x0028             MOVS     R0,R5
   \       0x58   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x5C   0x4682             MOV      R10,R0
   \       0x5E   0x0028             MOVS     R0,R5
   \       0x60   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \       0x64   0x4683             MOV      R11,R0
   \       0x66   0x0028             MOVS     R0,R5
   \       0x68   0x.... 0x....      BL       _ZNK12Adafruit_GFX5widthEv
   \       0x6C   0x2101             MOVS     R1,#+1
   \       0x6E   0x9103             STR      R1,[SP, #+12]
   \       0x70   0xB23F             SXTH     R7,R7
   \       0x72   0x2102             MOVS     R1,#+2
   \       0x74   0xFB97 0xF1F1      SDIV     R1,R7,R1
   \       0x78   0x1871             ADDS     R1,R6,R1
   \       0x7A   0xB209             SXTH     R1,R1
   \       0x7C   0x9102             STR      R1,[SP, #+8]
   \       0x7E   0xFA0F 0xF888      SXTH     R8,R8
   \       0x82   0x2102             MOVS     R1,#+2
   \       0x84   0xFB98 0xF1F1      SDIV     R1,R8,R1
   \       0x88   0x1871             ADDS     R1,R6,R1
   \       0x8A   0xB209             SXTH     R1,R1
   \       0x8C   0x9101             STR      R1,[SP, #+4]
   \       0x8E   0xFA0F 0xF989      SXTH     R9,R9
   \       0x92   0x2102             MOVS     R1,#+2
   \       0x94   0xFB99 0xF1F1      SDIV     R1,R9,R1
   \       0x98   0x1871             ADDS     R1,R6,R1
   \       0x9A   0xB209             SXTH     R1,R1
   \       0x9C   0x9100             STR      R1,[SP, #+0]
   \       0x9E   0xFA0F 0xFA8A      SXTH     R10,R10
   \       0xA2   0x2102             MOVS     R1,#+2
   \       0xA4   0xFB9A 0xF3F1      SDIV     R3,R10,R1
   \       0xA8   0x1B9B             SUBS     R3,R3,R6
   \       0xAA   0xB21B             SXTH     R3,R3
   \       0xAC   0xFA0F 0xFB8B      SXTH     R11,R11
   \       0xB0   0x2102             MOVS     R1,#+2
   \       0xB2   0xFB9B 0xF2F1      SDIV     R2,R11,R1
   \       0xB6   0x1B92             SUBS     R2,R2,R6
   \       0xB8   0xB212             SXTH     R2,R2
   \       0xBA   0xB200             SXTH     R0,R0
   \       0xBC   0x2102             MOVS     R1,#+2
   \       0xBE   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \       0xC2   0xB209             SXTH     R1,R1
   \       0xC4   0x0028             MOVS     R0,R5
   \       0xC6   0x.... 0x....      BL       _ZN12Adafruit_GFX12fillTriangleEsssssst
   1273                  if ( color == WHITE ) color = BLACK;
   \       0xCA   0x0020             MOVS     R0,R4
   \       0xCC   0xB2C0             UXTB     R0,R0
   \       0xCE   0x2801             CMP      R0,#+1
   \       0xD0   0xD102             BNE.N    ??testfilltriangle_4
   \       0xD2   0x2000             MOVS     R0,#+0
   \       0xD4   0x0004             MOVS     R4,R0
   \       0xD6   0xE001             B.N      ??testfilltriangle_5
   1274                  else color = WHITE;
   \                     ??testfilltriangle_4: (+1)
   \       0xD8   0x2001             MOVS     R0,#+1
   \       0xDA   0x0004             MOVS     R4,R0
   1275                  display.display();
   \                     ??testfilltriangle_5: (+1)
   \       0xDC   0x0028             MOVS     R0,R5
   \       0xDE   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1276                  HAL_Delay( 1 );
   \       0xE2   0x2001             MOVS     R0,#+1
   \       0xE4   0x.... 0x....      BL       HAL_Delay
   1277              }
   \       0xE8   0x1F76             SUBS     R6,R6,#+5
   \       0xEA   0xE7A4             B.N      ??testfilltriangle_2
   1278          }
   \                     ??testfilltriangle_3: (+1)
   \       0xEC   0xB005             ADD      SP,SP,#+20
   \       0xEE   0xE8BD 0x8FF0      POP      {R4-R11,PC}
   1279          
   1280          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1281          void testdrawbitmap( const uint8_t *bitmap, uint8_t w, uint8_t h )
   1282          //========================================================================
   1283          {
   \                     testdrawbitmap: (+1)
   \        0x0   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \        0x4   0xB08B             SUB      SP,SP,#+44
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
   \        0xA   0x0016             MOVS     R6,R2
   1284              uint8_t icons[NUMFLAKES][3];
   1285          
   1286              // initialize
   1287              for ( uint8_t f = 0; f < NUMFLAKES; f++ )
   \        0xC   0x2700             MOVS     R7,#+0
   \                     ??testdrawbitmap_0: (+1)
   \        0xE   0x0038             MOVS     R0,R7
   \       0x10   0xB2C0             UXTB     R0,R0
   \       0x12   0x280A             CMP      R0,#+10
   \       0x14   0xDA1D             BGE.N    ??testdrawbitmap_1
   1288              {
   1289                  icons[f][XPOS] = rand();
   \       0x16   0x.... 0x....      BL       rand
   \       0x1A   0xAA03             ADD      R2,SP,#+12
   \       0x1C   0x003B             MOVS     R3,R7
   \       0x1E   0xB2DB             UXTB     R3,R3
   \       0x20   0x2103             MOVS     R1,#+3
   \       0x22   0x434B             MULS     R3,R1,R3
   \       0x24   0x54D0             STRB     R0,[R2, R3]
   1290                  icons[f][YPOS] = 0;
   \       0x26   0x2100             MOVS     R1,#+0
   \       0x28   0xAA03             ADD      R2,SP,#+12
   \       0x2A   0x003B             MOVS     R3,R7
   \       0x2C   0xB2DB             UXTB     R3,R3
   \       0x2E   0x2003             MOVS     R0,#+3
   \       0x30   0x4343             MULS     R3,R0,R3
   \       0x32   0xEB02 0x0003      ADD      R0,R2,R3
   \       0x36   0x7041             STRB     R1,[R0, #+1]
   1291                  icons[f][DELTAY] = rand() + 1;
   \       0x38   0x.... 0x....      BL       rand
   \       0x3C   0x1C40             ADDS     R0,R0,#+1
   \       0x3E   0xAA03             ADD      R2,SP,#+12
   \       0x40   0x003B             MOVS     R3,R7
   \       0x42   0xB2DB             UXTB     R3,R3
   \       0x44   0x2103             MOVS     R1,#+3
   \       0x46   0x434B             MULS     R3,R1,R3
   \       0x48   0xEB02 0x0103      ADD      R1,R2,R3
   \       0x4C   0x7088             STRB     R0,[R1, #+2]
   1292              }
   \       0x4E   0x1C7F             ADDS     R7,R7,#+1
   \       0x50   0xE7DD             B.N      ??testdrawbitmap_0
   1293          
   1294              while ( 1 )
   1295              {
   1296                  // draw each icon
   1297                  for ( uint8_t f = 0; f < NUMFLAKES; f++ )
   \                     ??testdrawbitmap_1: (+1)
   \       0x52   0x2700             MOVS     R7,#+0
   \                     ??testdrawbitmap_2: (+1)
   \       0x54   0x0038             MOVS     R0,R7
   \       0x56   0xB2C0             UXTB     R0,R0
   \       0x58   0x280A             CMP      R0,#+10
   \       0x5A   0xDA24             BGE.N    ??testdrawbitmap_3
   1298                  {
   1299                      display.drawBitmap( icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, WHITE );
   \       0x5C   0x2001             MOVS     R0,#+1
   \       0x5E   0x9002             STR      R0,[SP, #+8]
   \       0x60   0x0030             MOVS     R0,R6
   \       0x62   0xB2C0             UXTB     R0,R0
   \       0x64   0xB200             SXTH     R0,R0
   \       0x66   0x9001             STR      R0,[SP, #+4]
   \       0x68   0x0028             MOVS     R0,R5
   \       0x6A   0xB2C0             UXTB     R0,R0
   \       0x6C   0xB200             SXTH     R0,R0
   \       0x6E   0x9000             STR      R0,[SP, #+0]
   \       0x70   0x....             LDR.N    R3,??DataTable35_9
   \       0x72   0xA903             ADD      R1,SP,#+12
   \       0x74   0x003A             MOVS     R2,R7
   \       0x76   0xB2D2             UXTB     R2,R2
   \       0x78   0x2003             MOVS     R0,#+3
   \       0x7A   0x4342             MULS     R2,R0,R2
   \       0x7C   0xEB01 0x0002      ADD      R0,R1,R2
   \       0x80   0x7840             LDRB     R0,[R0, #+1]
   \       0x82   0x0002             MOVS     R2,R0
   \       0x84   0xB212             SXTH     R2,R2
   \       0x86   0xA903             ADD      R1,SP,#+12
   \       0x88   0x46BC             MOV      R12,R7
   \       0x8A   0xFA5F 0xFC8C      UXTB     R12,R12
   \       0x8E   0x2003             MOVS     R0,#+3
   \       0x90   0xFB00 0xFC0C      MUL      R12,R0,R12
   \       0x94   0xF811 0x000C      LDRB     R0,[R1, R12]
   \       0x98   0x0001             MOVS     R1,R0
   \       0x9A   0xB209             SXTH     R1,R1
   \       0x9C   0x....             LDR.N    R0,??DataTable35
   \       0x9E   0x.... 0x....      BL       _ZN12Adafruit_GFX10drawBitmapEssPKhsst
   1300                  }
   \       0xA2   0x1C7F             ADDS     R7,R7,#+1
   \       0xA4   0xE7D6             B.N      ??testdrawbitmap_2
   1301                  display.display();
   \                     ??testdrawbitmap_3: (+1)
   \       0xA6   0x....             LDR.N    R7,??DataTable35
   \       0xA8   0x0038             MOVS     R0,R7
   \       0xAA   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1302                  HAL_Delay( 200 );
   \       0xAE   0x20C8             MOVS     R0,#+200
   \       0xB0   0x.... 0x....      BL       HAL_Delay
   1303          
   1304                  // then erase it + move it
   1305                  for ( uint8_t f = 0; f < NUMFLAKES; f++ )
   \       0xB4   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??testdrawbitmap_4: (+1)
   \       0xB8   0x4640             MOV      R0,R8
   \       0xBA   0xB2C0             UXTB     R0,R0
   \       0xBC   0x280A             CMP      R0,#+10
   \       0xBE   0xDAC8             BGE.N    ??testdrawbitmap_1
   1306                  {
   1307                      display.drawBitmap( icons[f][XPOS], icons[f][YPOS], logo16_glcd_bmp, w, h, BLACK );
   \       0xC0   0xF10D 0x090C      ADD      R9,SP,#+12
   \       0xC4   0x2000             MOVS     R0,#+0
   \       0xC6   0x9002             STR      R0,[SP, #+8]
   \       0xC8   0x0030             MOVS     R0,R6
   \       0xCA   0xB2C0             UXTB     R0,R0
   \       0xCC   0xB200             SXTH     R0,R0
   \       0xCE   0x9001             STR      R0,[SP, #+4]
   \       0xD0   0x0028             MOVS     R0,R5
   \       0xD2   0xB2C0             UXTB     R0,R0
   \       0xD4   0xB200             SXTH     R0,R0
   \       0xD6   0x9000             STR      R0,[SP, #+0]
   \       0xD8   0x....             LDR.N    R3,??DataTable35_9
   \       0xDA   0xA903             ADD      R1,SP,#+12
   \       0xDC   0x4642             MOV      R2,R8
   \       0xDE   0xB2D2             UXTB     R2,R2
   \       0xE0   0x2003             MOVS     R0,#+3
   \       0xE2   0x4342             MULS     R2,R0,R2
   \       0xE4   0xEB01 0x0002      ADD      R0,R1,R2
   \       0xE8   0x7840             LDRB     R0,[R0, #+1]
   \       0xEA   0x0002             MOVS     R2,R0
   \       0xEC   0xB212             SXTH     R2,R2
   \       0xEE   0x4641             MOV      R1,R8
   \       0xF0   0xB2C9             UXTB     R1,R1
   \       0xF2   0x2003             MOVS     R0,#+3
   \       0xF4   0x4341             MULS     R1,R0,R1
   \       0xF6   0xF819 0x0001      LDRB     R0,[R9, R1]
   \       0xFA   0x0001             MOVS     R1,R0
   \       0xFC   0xB209             SXTH     R1,R1
   \       0xFE   0x0038             MOVS     R0,R7
   \      0x100   0x.... 0x....      BL       _ZN12Adafruit_GFX10drawBitmapEssPKhsst
   1308                      // move it
   1309                      icons[f][YPOS] += icons[f][DELTAY];
   \      0x104   0xA903             ADD      R1,SP,#+12
   \      0x106   0x4642             MOV      R2,R8
   \      0x108   0xB2D2             UXTB     R2,R2
   \      0x10A   0x2003             MOVS     R0,#+3
   \      0x10C   0x4342             MULS     R2,R0,R2
   \      0x10E   0xEB01 0x0002      ADD      R0,R1,R2
   \      0x112   0x7841             LDRB     R1,[R0, #+1]
   \      0x114   0xAA03             ADD      R2,SP,#+12
   \      0x116   0x4643             MOV      R3,R8
   \      0x118   0xB2DB             UXTB     R3,R3
   \      0x11A   0x2003             MOVS     R0,#+3
   \      0x11C   0x4343             MULS     R3,R0,R3
   \      0x11E   0xEB02 0x0003      ADD      R0,R2,R3
   \      0x122   0x7880             LDRB     R0,[R0, #+2]
   \      0x124   0x1841             ADDS     R1,R0,R1
   \      0x126   0xAA03             ADD      R2,SP,#+12
   \      0x128   0x4643             MOV      R3,R8
   \      0x12A   0xB2DB             UXTB     R3,R3
   \      0x12C   0x2003             MOVS     R0,#+3
   \      0x12E   0x4343             MULS     R3,R0,R3
   \      0x130   0xEB02 0x0003      ADD      R0,R2,R3
   \      0x134   0x7041             STRB     R1,[R0, #+1]
   1310                      // if its gone, reinit
   1311                      if ( icons[f][YPOS] > display.height() )
   \      0x136   0x0038             MOVS     R0,R7
   \      0x138   0x.... 0x....      BL       _ZNK12Adafruit_GFX6heightEv
   \      0x13C   0xAA03             ADD      R2,SP,#+12
   \      0x13E   0x4643             MOV      R3,R8
   \      0x140   0xB2DB             UXTB     R3,R3
   \      0x142   0x2103             MOVS     R1,#+3
   \      0x144   0x434B             MULS     R3,R1,R3
   \      0x146   0xEB02 0x0103      ADD      R1,R2,R3
   \      0x14A   0x7849             LDRB     R1,[R1, #+1]
   \      0x14C   0xB209             SXTH     R1,R1
   \      0x14E   0x4288             CMP      R0,R1
   \      0x150   0xDA1A             BGE.N    ??testdrawbitmap_5
   1312                      {
   1313                          icons[f][XPOS] = rand();
   \      0x152   0x.... 0x....      BL       rand
   \      0x156   0x4642             MOV      R2,R8
   \      0x158   0xB2D2             UXTB     R2,R2
   \      0x15A   0x2103             MOVS     R1,#+3
   \      0x15C   0x434A             MULS     R2,R1,R2
   \      0x15E   0xF809 0x0002      STRB     R0,[R9, R2]
   1314                          icons[f][YPOS] = 0;
   \      0x162   0x2100             MOVS     R1,#+0
   \      0x164   0xAA03             ADD      R2,SP,#+12
   \      0x166   0x4643             MOV      R3,R8
   \      0x168   0xB2DB             UXTB     R3,R3
   \      0x16A   0x2003             MOVS     R0,#+3
   \      0x16C   0x4343             MULS     R3,R0,R3
   \      0x16E   0xEB02 0x0003      ADD      R0,R2,R3
   \      0x172   0x7041             STRB     R1,[R0, #+1]
   1315                          icons[f][DELTAY] = rand();
   \      0x174   0x.... 0x....      BL       rand
   \      0x178   0xAA03             ADD      R2,SP,#+12
   \      0x17A   0x4643             MOV      R3,R8
   \      0x17C   0xB2DB             UXTB     R3,R3
   \      0x17E   0x2103             MOVS     R1,#+3
   \      0x180   0x434B             MULS     R3,R1,R3
   \      0x182   0xEB02 0x0103      ADD      R1,R2,R3
   \      0x186   0x7088             STRB     R0,[R1, #+2]
   1316                      }
   1317                  }
   \                     ??testdrawbitmap_5: (+1)
   \      0x188   0xF118 0x0801      ADDS     R8,R8,#+1
   \      0x18C   0xE794             B.N      ??testdrawbitmap_4
   1318              }
   1319          }
   1320          
   1321          
   1322          //========================================================================
   1323          
   1324          
   1325          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1326          void OLED_Test( void )  // Adafruit_SSD1306 &display )
   1327          //========================================================================
   1328          {
   \                     OLED_Test: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   1329              char *str1 = "가나다라";
                                  ^
Warning[Pe2464]: conversion from a string literal to "char *" is deprecated
   \        0x4   0x....             LDR.N    R4,??DataTable35_10
   1330              char *str2 = "마바사아";
                                  ^
Warning[Pe2464]: conversion from a string literal to "char *" is deprecated
   \        0x6   0x....             LDR.N    R5,??DataTable35_11
   1331          
   1332              display.begin( SSD1306_SWITCHCAPVCC, 0x78 );
   \        0x8   0x....             LDR.N    R6,??DataTable35
   \        0xA   0x2301             MOVS     R3,#+1
   \        0xC   0x2278             MOVS     R2,#+120
   \        0xE   0x2102             MOVS     R1,#+2
   \       0x10   0x0030             MOVS     R0,R6
   \       0x12   0x.... 0x....      BL       _ZN16Adafruit_SSD13065beginEhhb
   1333          
   1334              //  display.clearDisplay();
   1335              display.display();
   \       0x16   0x0030             MOVS     R0,R6
   \       0x18   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1336              HAL_Delay( 1000 );
   \       0x1C   0xF44F 0x707A      MOV      R0,#+1000
   \       0x20   0x.... 0x....      BL       HAL_Delay
   1337          
   1338          
   1339              //  while(1);
   1340              display.clearDisplay();
   \       0x24   0x0030             MOVS     R0,R6
   \       0x26   0x.... 0x....      BL       _ZN16Adafruit_SSD130612clearDisplayEv
   1341              display.display();
   \       0x2A   0x0030             MOVS     R0,R6
   \       0x2C   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1342          
   1343          
   1344              //Display text
   1345              display.setTextSize( 2 );
   \       0x30   0x2102             MOVS     R1,#+2
   \       0x32   0x0030             MOVS     R0,R6
   \       0x34   0x.... 0x....      BL       _ZN12Adafruit_GFX11setTextSizeEh
   1346              display.setTextColor( WHITE );
   \       0x38   0x2101             MOVS     R1,#+1
   \       0x3A   0x0030             MOVS     R0,R6
   \       0x3C   0x.... 0x....      BL       _ZN12Adafruit_GFX12setTextColorEt
   1347              //    display.setCursor( 28, 8 );
   1348              display.setCursor( 0, 0 );
   \       0x40   0x2200             MOVS     R2,#+0
   \       0x42   0x2100             MOVS     R1,#+0
   \       0x44   0x0030             MOVS     R0,R6
   \       0x46   0x.... 0x....      BL       _ZN12Adafruit_GFX9setCursorEss
   1349              display.printf( "WaveShare" );
   \       0x4A   0x....             LDR.N    R1,??DataTable35_12
   \       0x4C   0x0030             MOVS     R0,R6
   \       0x4E   0x.... 0x....      BL       _ZN16Adafruit_SSD13066printfEPKc
   1350          
   1351              display.setCursor( 0, 16 );
   \       0x52   0x2210             MOVS     R2,#+16
   \       0x54   0x2100             MOVS     R1,#+0
   \       0x56   0x0030             MOVS     R0,R6
   \       0x58   0x.... 0x....      BL       _ZN12Adafruit_GFX9setCursorEss
   1352              display.printf( "[WaveShare] 12345" );
   \       0x5C   0x....             LDR.N    R1,??DataTable35_13
   \       0x5E   0x0030             MOVS     R0,R6
   \       0x60   0x.... 0x....      BL       _ZN16Adafruit_SSD13066printfEPKc
   1353          
   1354              display.display();
   \       0x64   0x0030             MOVS     R0,R6
   \       0x66   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1355              HAL_Delay( 1000 );
   \       0x6A   0xF44F 0x707A      MOV      R0,#+1000
   \       0x6E   0x.... 0x....      BL       HAL_Delay
   1356          
   1357              display.clearDisplay();
   \       0x72   0x0030             MOVS     R0,R6
   \       0x74   0x.... 0x....      BL       _ZN16Adafruit_SSD130612clearDisplayEv
   1358          
   1359              display.setCursor( 0, 0 );
   \       0x78   0x2200             MOVS     R2,#+0
   \       0x7A   0x2100             MOVS     R1,#+0
   \       0x7C   0x0030             MOVS     R0,R6
   \       0x7E   0x.... 0x....      BL       _ZN12Adafruit_GFX9setCursorEss
   1360          
   1361              char *bufKor = str1;
   \       0x82   0x9400             STR      R4,[SP, #+0]
   1362          
   1363          //DEL #if defined(_WIN32)
   1364          //DEL     //	Windows에선 Multibyte문자열은 UTF-8파일이라도,
   1365          //DEL     //		자동으로 CP949로 변환되어 저장됨.
   1366          //DEL     char *bufKor = str1;
   1367          //DEL #else
   1368          //DEL     char bufKor[32];
   1369          //DEL     memset( bufKor, 0, 32 );
   1370          //DEL     UTF8ToCP949( str1, bufKor );
   1371          //DEL #endif
   1372          
   1373          //    char *strName = GetNextStnName( 4, 0 );
   1374          
   1375              printf( "bufKor : " );
   \       0x84   0x....             LDR.N    R7,??DataTable35_14
   \       0x86   0x0038             MOVS     R0,R7
   \       0x88   0x.... 0x....      BL       printf
   1376              for ( int i = 0; i < strlen( bufKor ); i++ )
   \       0x8C   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??OLED_Test_0: (+1)
   \       0x90   0x9800             LDR      R0,[SP, #+0]
   \       0x92   0x.... 0x....      BL       strlen
   \       0x96   0x4580             CMP      R8,R0
   \       0x98   0xD208             BCS.N    ??OLED_Test_1
   1377              {
   1378                  printf( "0x%02X ", (uint8_t)bufKor[i] );
   \       0x9A   0x9800             LDR      R0,[SP, #+0]
   \       0x9C   0xF810 0x1008      LDRB     R1,[R0, R8]
   \       0xA0   0x....             LDR.N    R0,??DataTable35_15
   \       0xA2   0x.... 0x....      BL       printf
   1379              }
   \       0xA6   0xF118 0x0801      ADDS     R8,R8,#+1
   \       0xAA   0xE7F1             B.N      ??OLED_Test_0
   1380              printf( "\n" );
   \                     ??OLED_Test_1: (+1)
   \       0xAC   0x.... 0x....      ADR.W    R8,??DataTable35_6
   \       0xB0   0x4640             MOV      R0,R8
   \       0xB2   0x.... 0x....      BL       printf
   1381          
   1382              printf( "%s(%d) \n", __func__, __LINE__ );//, bufKor );
   \       0xB6   0x.... 0x....      LDR.W    R9,??DataTable35_16
   \       0xBA   0x.... 0x....      LDR.W    R10,??DataTable35_17
   \       0xBE   0xF240 0x5266      MOVW     R2,#+1382
   \       0xC2   0x4651             MOV      R1,R10
   \       0xC4   0x4648             MOV      R0,R9
   \       0xC6   0x.... 0x....      BL       printf
   1383          
   1384              display.printf( bufKor );
   \       0xCA   0x9900             LDR      R1,[SP, #+0]
   \       0xCC   0x0030             MOVS     R0,R6
   \       0xCE   0x.... 0x....      BL       _ZN16Adafruit_SSD13066printfEPKc
   1385              display.setCursor( 0, 16 );
   \       0xD2   0x2210             MOVS     R2,#+16
   \       0xD4   0x2100             MOVS     R1,#+0
   \       0xD6   0x0030             MOVS     R0,R6
   \       0xD8   0x.... 0x....      BL       _ZN12Adafruit_GFX9setCursorEss
   1386          
   1387              bufKor = str2;
   \       0xDC   0x46AB             MOV      R11,R5
   1388          
   1389          //#if defined(_WIN32)
   1390          //    //	Windows에선 Multibyte문자열은 UTF-8파일이라도,
   1391          //    //		자동으로 CP949로 변환되어 저장됨.
   1392          //    bufKor = str2;
   1393          //#else
   1394          //
   1395          //    memset( bufKor, 0, 32 );
   1396          //    UTF8ToCP949( str2, bufKor );
   1397          //    
   1398          //#endif
   1399          
   1400              printf( "bufKor : " );
   \       0xDE   0x0038             MOVS     R0,R7
   \       0xE0   0x.... 0x....      BL       printf
   1401              for ( int i = 0; i < strlen( bufKor ); i++ )
   \       0xE4   0x2700             MOVS     R7,#+0
   \                     ??OLED_Test_2: (+1)
   \       0xE6   0x4658             MOV      R0,R11
   \       0xE8   0x.... 0x....      BL       strlen
   \       0xEC   0x4287             CMP      R7,R0
   \       0xEE   0xD206             BCS.N    ??OLED_Test_3
   1402              {
   1403                  printf( "0x%02X ", (uint8_t)bufKor[i] );
   \       0xF0   0xF81B 0x1007      LDRB     R1,[R11, R7]
   \       0xF4   0x....             LDR.N    R0,??DataTable35_15
   \       0xF6   0x.... 0x....      BL       printf
   1404              }
   \       0xFA   0x1C7F             ADDS     R7,R7,#+1
   \       0xFC   0xE7F3             B.N      ??OLED_Test_2
   1405              printf( "\n" );
   \                     ??OLED_Test_3: (+1)
   \       0xFE   0x4640             MOV      R0,R8
   \      0x100   0x.... 0x....      BL       printf
   1406          
   1407          //    printf( "%s(%d) : %s\n", __func__, __LINE__, bufKor );
   1408              printf( "%s(%d) \n", __func__, __LINE__ );//, bufKor );
   \      0x104   0xF44F 0x62B0      MOV      R2,#+1408
   \      0x108   0x4651             MOV      R1,R10
   \      0x10A   0x4648             MOV      R0,R9
   \      0x10C   0x.... 0x....      BL       printf
   1409          
   1410              display.printf( bufKor );
   \      0x110   0x4659             MOV      R1,R11
   \      0x112   0x0030             MOVS     R0,R6
   \      0x114   0x.... 0x....      BL       _ZN16Adafruit_SSD13066printfEPKc
   1411          
   1412              display.display();
   \      0x118   0x0030             MOVS     R0,R6
   \      0x11A   0x.... 0x....      BL       _ZN16Adafruit_SSD13067displayEv
   1413              HAL_Delay( 1000 );
   \      0x11E   0xF44F 0x707A      MOV      R0,#+1000
   \      0x122   0x.... 0x....      BL       HAL_Delay
   1414          
   1415          #if 0
   1416          
   1417          
   1418              display.clearDisplay();
   1419              display.display();
   1420          
   1421              // draw many lines
   1422              testdrawline();
   1423              display.display();
   1424              HAL_Delay( 2000 );
   1425              display.clearDisplay();
   1426          
   1427              // draw rectangles
   1428              testdrawrect();
   1429              display.display();
   1430              HAL_Delay( 2000 );
   1431              display.clearDisplay();
   1432          
   1433              // draw multiple rectangles
   1434              testfillrect();
   1435              display.display();
   1436              HAL_Delay( 2000 );
   1437              display.clearDisplay();
   1438          
   1439              // draw mulitple circles
   1440              testdrawcircle();
   1441              display.display();
   1442              HAL_Delay( 2000 );
   1443              display.clearDisplay();
   1444          
   1445              // draw a white circle, 10 pixel radius
   1446              display.fillCircle( display.width() / 2, display.height() / 2, 10, WHITE );
   1447              display.display();
   1448              HAL_Delay( 2000 );
   1449              display.clearDisplay();
   1450          
   1451              testdrawroundrect();
   1452              HAL_Delay( 2000 );
   1453              display.clearDisplay();
   1454          
   1455              testfillroundrect();
   1456              HAL_Delay( 2000 );
   1457              display.clearDisplay();
   1458          
   1459              testdrawtriangle();
   1460              HAL_Delay( 2000 );
   1461              display.clearDisplay();
   1462          
   1463              testfilltriangle();
   1464              HAL_Delay( 2000 );
   1465              display.clearDisplay();
   1466          
   1467              // miniature bitmap display
   1468              display.clearDisplay();
   1469              display.drawBitmap( 30, 16, logo16_glcd_bmp, 16, 16, 1 );
   1470              display.display();
   1471              HAL_Delay( 500 );
   1472          #endif
   1473          
   1474          }
   \      0x126   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0x....'....        DC32     display

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x....'....        DC32     buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable13:
   \        0x0   0x....'....        DC32     _ZTV16Adafruit_SSD1306+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \        0x0   0x....'....        DC32     Buffer_CMD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16:
   \        0x0   0x....'....        DC32     Buffer_DATA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable16_1:
   \        0x0   0x....'....        DC32     buffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \        0x0   0x....'....        DC32     hi2c3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \        0x0   0x....'....        DC32     _ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable26:
   \        0x0   0x....'....        DC32     _ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable34:
   \        0x0   0x....'....        DC32     bitval_r

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35:
   \        0x0   0x....'....        DC32     display

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_1:
   \        0x0   0x....'....        DC32     g_bInitLCD

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_3:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_4:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_5:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_6:
   \        0x0   0x0A 0x00          DC8      "\n",0x0,0x0   

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_7:
   \        0x0   0x....'....        DC32     bufMenu

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_8:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_9:
   \        0x0   0x....'....        DC32     logo16_glcd_bmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_10:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_11:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_12:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_13:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_14:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_15:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_16:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable35_17:
   \        0x0   0x....'....        DC32     `OLED_Test::__func__`

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x3C 0x24          DC8 60, 36, 127, 65, 65, 65, 65, 65, 85, 73, 85, 65, 65, 65, 65, 65

   \              0x7F 0x41    

   \              0x41 0x41    

   \              0x41 0x41    

   \              0x55 0x49    

   \              0x55 0x41    

   \              0x41 0x41    

   \              0x41 0x41
   \       0x10   0x7F 0x3C          DC8 127, 60, 36, 127, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65

   \              0x24 0x7F    

   \              0x41 0x41    

   \              0x41 0x41    

   \              0x41 0x41    

   \              0x41 0x41    

   \              0x41 0x41    

   \              0x41 0x41
   \       0x20   0x41 0x7F          DC8 65, 127, 60, 36, 127, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 93

   \              0x3C 0x24    

   \              0x7F 0x41    

   \              0x41 0x41    

   \              0x41 0x41    

   \              0x41 0x41    

   \              0x41 0x41    

   \              0x41 0x5D
   \       0x30   0x5D 0x41          DC8 93, 65, 127, 60, 36, 127, 65, 65, 65, 65, 65, 65, 65, 93, 93, 65

   \              0x7F 0x3C    

   \              0x24 0x7F    

   \              0x41 0x41    

   \              0x41 0x41    

   \              0x41 0x41    

   \              0x41 0x5D    

   \              0x5D 0x41
   \       0x40   0x5D 0x5D          DC8 93, 93, 65, 127, 60, 36, 127, 65, 65, 65, 65, 93, 93, 65, 93, 93

   \              0x41 0x7F    

   \              0x3C 0x24    

   \              0x7F 0x41    

   \              0x41 0x41    

   \              0x41 0x5D    

   \              0x5D 0x41    

   \              0x5D 0x5D
   \       0x50   0x41 0x5D          DC8 65, 93, 93, 65, 127, 60, 36, 127, 65, 93, 93, 65, 93, 93, 65, 93

   \              0x5D 0x41    

   \              0x7F 0x3C    

   \              0x24 0x7F    

   \              0x41 0x5D    

   \              0x5D 0x41    

   \              0x5D 0x5D    

   \              0x41 0x5D
   \       0x60   0x5D 0x41          DC8 93, 65, 93, 93, 65, 127, 60, 36, 127, 65, 65, 65, 81, 73, 77, 127

   \              0x5D 0x5D    

   \              0x41 0x7F    

   \              0x3C 0x24    

   \              0x7F 0x41    

   \              0x41 0x41    

   \              0x51 0x49    

   \              0x4D 0x7F
   \       0x70   0x59 0x49          DC8 89, 73, 69, 65, 65, 65, 127

   \              0x45 0x41    

   \              0x41 0x41    

   \              0x7F
   \       0x77                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x03 0x05          DC8 3, 5, 127, 5, 3, 80, 32, 80, 0, 0, 0, 3, 5, 127, 5, 3, 0, 0, 0, 0

   \              0x7F 0x05    

   \              0x03 0x50    

   \              0x20 0x50    

   \              0x00 0x00    

   \              0x00 0x03    

   \              0x05 0x7F    

   \              0x05 0x03    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x14   0x00 0x00          DC8 0, 0, 3, 5, 127, 5, 115, 0, 0, 0, 0, 0, 0, 3, 5, 127, 5, 115, 0

   \              0x03 0x05    

   \              0x7F 0x05    

   \              0x73 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x03    

   \              0x05 0x7F    

   \              0x05 0x73    

   \              0x00
   \       0x27   0x78 0x00          DC8 120, 0, 0, 0, 0, 3, 5, 127, 5, 115, 0, 120, 0, 124, 0, 0, 3, 5, 127

   \              0x00 0x00    

   \              0x00 0x03    

   \              0x05 0x7F    

   \              0x05 0x73    

   \              0x00 0x78    

   \              0x00 0x7C    

   \              0x00 0x00    

   \              0x03 0x05    

   \              0x7F
   \       0x3A   0x05 0x73          DC8 5, 115, 0, 120, 0, 124, 0, 126

   \              0x00 0x78    

   \              0x00 0x7C    

   \              0x00 0x7E
   \       0x42                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x00 0x10          DC8 0, 16, 240, 240, 240, 16, 0, 2, 20, 240, 247, 240, 20, 2

   \              0xF0 0xF0    

   \              0xF0 0x10    

   \              0x00 0x02    

   \              0x14 0xF0    

   \              0xF7 0xF0    

   \              0x14 0x02
   \        0xE                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x38 0x38          DC8 56, 56, 124, 254, 0, 40, 16, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x7C 0xFE    

   \              0x00 0x28    

   \              0x10 0x28    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x14   0x00 0x00          DC8 0, 0, 56, 56, 124, 254, 0, 56, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x38 0x38    

   \              0x7C 0xFE    

   \              0x00 0x38    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x28   0x00 0x00          DC8 0, 0, 0, 0, 56, 56, 124, 254, 0, 56, 130, 124, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x38 0x38    

   \              0x7C 0xFE    

   \              0x00 0x38    

   \              0x82 0x7C    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x3B   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 56, 56, 124, 254, 0, 56, 130, 124, 1, 130, 124

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x38    

   \              0x38 0x7C    

   \              0xFE 0x00    

   \              0x38 0x82    

   \              0x7C 0x01    

   \              0x82 0x7C
   \       0x4D   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x01 0x00    

   \              0x00

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00
   \       0x16   0x40 0x60          DC8 64, 96, 112, 120, 124, 126, 124, 120, 112, 96, 64, 0, 0, 0, 0, 0, 0

   \              0x70 0x78    

   \              0x7C 0x7E    

   \              0x7C 0x78    

   \              0x70 0x60    

   \              0x40 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00
   \       0x27   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 6, 14, 30, 62

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x00 0x00    

   \              0x02 0x06    

   \              0x0E 0x1E    

   \              0x3E
   \       0x3C   0x7E 0x3E          DC8 126, 62, 30, 14, 6, 2, 64, 96, 112, 120, 124, 126, 124, 120, 112

   \              0x1E 0x0E    

   \              0x06 0x02    

   \              0x40 0x60    

   \              0x70 0x78    

   \              0x7C 0x7E    

   \              0x7C 0x78    

   \              0x70
   \       0x4B   0x60 0x40          DC8 96, 64, 2, 6, 14, 30, 62, 126, 62, 30, 14, 6, 2

   \              0x02 0x06    

   \              0x0E 0x1E    

   \              0x3E 0x7E    

   \              0x3E 0x1E    

   \              0x0E 0x06    

   \              0x02

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0xEA 0xB0          DC8 "\352\260\200\353\202\230\353\213\244\353\235\274"

   \              0x80 0xEB    

   \              0x82 0x98    

   \              0xEB 0x8B    

   \              0xA4 0xEB    

   \              0x9D 0xBC    

   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0xEB 0xA7          DC8 "\353\247\210\353\260\224\354\202\254\354\225\204"

   \              0x88 0xEB    

   \              0xB0 0x94    

   \              0xEC 0x82    

   \              0xAC 0xEC    

   \              0x95 0x84    

   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x57 0x61          DC8 "WaveShare"

   \              0x76 0x65    

   \              0x53 0x68    

   \              0x61 0x72    

   \              0x65 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x5B 0x57          DC8 "[WaveShare] 12345"

   \              0x61 0x76    

   \              0x65 0x53    

   \              0x68 0x61    

   \              0x72 0x65    

   \              0x5D 0x20    

   \              0x31 0x32    

   \              0x33 0x34    

   \              0x35 0x00
   \       0x12                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x62 0x75          DC8 "bufKor : "

   \              0x66 0x4B    

   \              0x6F 0x72    

   \              0x20 0x3A    

   \              0x20 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x30 0x78          DC8 "0x%02X "

   \              0x25 0x30    

   \              0x32 0x58    

   \              0x20 0x00

   \                                 In section .rodata, align 2
   \        0x0   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x25 0x73          DC8 "%s(%d) \012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x0A    

   \              0x00
   \        0x9                      DS8 3
   1475          
   1476          
   1477          //========================================================================
   1478          
   1479          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   Adafruit_SSD1306::Adafruit_SSD1306(int8_t)
        16   -> Adafruit_GFX::subobject Adafruit_GFX(int16_t, int16_t)
      24   Adafruit_SSD1306::begin(uint8_t, uint8_t, bool)
        24   -> Adafruit_SSD1306::ssd1306_command(uint8_t)
       8   Adafruit_SSD1306::clearDisplay()
         8   -> Adafruit_SSD1306::memset(uint8_t *, uint16_t, uint16_t)
       0   Adafruit_SSD1306::debug(int)
      16   Adafruit_SSD1306::dim(bool)
        16   -> Adafruit_SSD1306::ssd1306_command(uint8_t)
      16   Adafruit_SSD1306::display()
        16   -> Adafruit_SSD1306::ssd1306_command(uint8_t)
        16   -> Adafruit_SSD1306::ssd1306_data(uint16_t)
      48   Adafruit_SSD1306::drawFastHLine(int16_t, int16_t, int16_t, uint16_t)
      48   Adafruit_SSD1306::drawFastVLine(int16_t, int16_t, int16_t, uint16_t)
      24   Adafruit_SSD1306::drawPixel(int16_t, int16_t, uint16_t)
        24   -> Adafruit_GFX::getRotation() const
        24   -> Adafruit_GFX::height() const
        24   -> Adafruit_GFX::width() const
      16   Adafruit_SSD1306::invertDisplay(uint8_t)
        16   -> Adafruit_SSD1306::ssd1306_command(uint8_t)
      12   Adafruit_SSD1306::memset(uint8_t *, uint16_t, uint16_t)
     200   Adafruit_SSD1306::printf(char const *)
       200   -- Indirect call
       200   -> Adafruit_SSD1306::memset(uint8_t *, uint16_t, uint16_t)
       200   -> PHan_EngFontLoad
       200   -> PHan_HanFontLoad
       200   -> UTF8ToCP949
      24   Adafruit_SSD1306::ssd1306_command(uint8_t)
        24   -> HAL_I2C_Master_Transmit
      24   Adafruit_SSD1306::ssd1306_data(uint16_t)
        24   -> HAL_I2C_Master_Transmit
      16   Adafruit_SSD1306::startscrolldiagleft(uint8_t, uint8_t)
        16   -> Adafruit_SSD1306::ssd1306_command(uint8_t)
      16   Adafruit_SSD1306::startscrolldiagright(uint8_t, uint8_t)
        16   -> Adafruit_SSD1306::ssd1306_command(uint8_t)
      16   Adafruit_SSD1306::startscrollleft(uint8_t, uint8_t)
        16   -> Adafruit_SSD1306::ssd1306_command(uint8_t)
      16   Adafruit_SSD1306::startscrollright(uint8_t, uint8_t)
        16   -> Adafruit_SSD1306::ssd1306_command(uint8_t)
       8   Adafruit_SSD1306::stopscroll()
         8   -> Adafruit_SSD1306::ssd1306_command(uint8_t)
       8   Adafruit_SSD1306::subobject Adafruit_SSD1306(int8_t)
         8   -> Adafruit_SSD1306::Adafruit_SSD1306(int8_t)
       0   GetLCDFrameBuffer
     152   LCDBattery
       152   -> Adafruit_GFX::drawBitBuf(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t, uint16_t)
       152   -> Adafruit_SSD1306::display()
       152   -> __aeabi_memcpy4
       0   LCDCheck
       8   LCDClear
         8   -> Adafruit_SSD1306::clearDisplay()
         8   -> Adafruit_SSD1306::display()
      16   LCDClearMain
        16   -> Adafruit_GFX::fillRect(int16_t, int16_t, int16_t, int16_t, uint16_t)
      16   LCDClearTitle
        16   -> Adafruit_GFX::fillRect(int16_t, int16_t, int16_t, int16_t, uint16_t)
      40   LCDDrawRect
        40   -> Adafruit_GFX::fillRect(int16_t, int16_t, int16_t, int16_t, uint16_t)
        40   -> Adafruit_SSD1306::display()
       8   LCDEnableDebug
         8   -> Adafruit_SSD1306::debug(int)
       8   LCDInit
         8   -> Adafruit_SSD1306::begin(uint8_t, uint8_t, bool)
      48   LCDLight
        48   -> Adafruit_GFX::drawBitBuf(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t, uint16_t)
        48   -> Adafruit_SSD1306::display()
        48   -> __aeabi_memcpy4
      16   LCDMenu
        16   -> Adafruit_SSD1306::display()
        16   -> __aeabi_memcpy
     128   LCDMenuUpDown
       128   -> Adafruit_GFX::drawBitBuf(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t, uint16_t)
       128   -> Adafruit_SSD1306::display()
       128   -> __aeabi_memcpy4
      24   LCDPrintf
        24   -> Adafruit_GFX::fillRect(int16_t, int16_t, int16_t, int16_t, uint16_t)
        24   -> Adafruit_GFX::getCursor(int16_t *, int16_t *)
        24   -> Adafruit_SSD1306::display()
        24   -> Adafruit_SSD1306::printf(char const *)
      16   LCDPrintfXY
        16   -> LCDClearMain
        16   -> LCDPrintf
        16   -> LCDSetCursor
      96   LCDRSSI
        96   -> Adafruit_GFX::drawBitBuf(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t, uint16_t)
        96   -> Adafruit_SSD1306::display()
        96   -> __aeabi_memcpy4
      16   LCDSetCursor
        16   -> Adafruit_GFX::setCursor(int16_t, int16_t)
     128   LCDSpeaker
       128   -> Adafruit_GFX::drawBitBuf(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t, uint16_t)
       128   -> Adafruit_SSD1306::display()
       128   -> __aeabi_memcpy4
      40   OLED_Test
        40   -> Adafruit_GFX::setCursor(int16_t, int16_t)
        40   -> Adafruit_GFX::setTextColor(uint16_t)
        40   -> Adafruit_GFX::setTextSize(uint8_t)
        40   -> Adafruit_SSD1306::begin(uint8_t, uint8_t, bool)
        40   -> Adafruit_SSD1306::clearDisplay()
        40   -> Adafruit_SSD1306::display()
        40   -> Adafruit_SSD1306::printf(char const *)
        40   -> HAL_Delay
        40   -> printf
        40   -> strlen
       8   __sti__routine()
         8   -> Adafruit_SSD1306::Adafruit_SSD1306(int8_t)
      72   testdrawbitmap
        72   -> Adafruit_GFX::drawBitmap(int16_t, int16_t, uint8_t const *, int16_t, int16_t, uint16_t)
        72   -> Adafruit_GFX::height() const
        72   -> Adafruit_SSD1306::display()
        72   -> HAL_Delay
        72   -> rand
      24   testdrawcircle
        24   -> Adafruit_GFX::drawCircle(int16_t, int16_t, int16_t, uint16_t)
        24   -> Adafruit_GFX::height() const
        24   -> Adafruit_GFX::width() const
        24   -> Adafruit_SSD1306::display()
        24   -> HAL_Delay
      24   testdrawline
        24   -> Adafruit_GFX::drawLine(int16_t, int16_t, int16_t, int16_t, uint16_t)
        24   -> Adafruit_GFX::height() const
        24   -> Adafruit_GFX::width() const
        24   -> Adafruit_SSD1306::clearDisplay()
        24   -> Adafruit_SSD1306::display()
        24   -> HAL_Delay
      24   testdrawrect
        24   -> Adafruit_GFX::drawRect(int16_t, int16_t, int16_t, int16_t, uint16_t)
        24   -> Adafruit_GFX::height() const
        24   -> Adafruit_GFX::width() const
        24   -> Adafruit_SSD1306::display()
        24   -> HAL_Delay
      32   testdrawroundrect
        32   -> Adafruit_GFX::drawRoundRect(int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t)
        32   -> Adafruit_GFX::height() const
        32   -> Adafruit_GFX::width() const
        32   -> Adafruit_SSD1306::display()
        32   -> HAL_Delay
      48   testdrawtriangle
        48   -> Adafruit_GFX::drawTriangle(int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t)
        48   -> Adafruit_GFX::height() const
        48   -> Adafruit_GFX::width() const
        48   -> Adafruit_SSD1306::display()
        48   -> HAL_Delay
      40   testfillrect
        40   -> Adafruit_GFX::fillRect(int16_t, int16_t, int16_t, int16_t, uint16_t)
        40   -> Adafruit_GFX::height() const
        40   -> Adafruit_GFX::width() const
        40   -> Adafruit_SSD1306::display()
        40   -> HAL_Delay
      40   testfillroundrect
        40   -> Adafruit_GFX::fillRoundRect(int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t)
        40   -> Adafruit_GFX::height() const
        40   -> Adafruit_GFX::width() const
        40   -> Adafruit_SSD1306::display()
        40   -> HAL_Delay
      56   testfilltriangle
        56   -> Adafruit_GFX::fillTriangle(int16_t, int16_t, int16_t, int16_t, int16_t, int16_t, uint16_t)
        56   -> Adafruit_GFX::height() const
        56   -> Adafruit_GFX::width() const
        56   -> Adafruit_SSD1306::display()
        56   -> HAL_Delay


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable13
       4  ??DataTable15
       4  ??DataTable16
       4  ??DataTable16_1
       4  ??DataTable17
       4  ??DataTable25
       4  ??DataTable26
       4  ??DataTable34
       4  ??DataTable35
       4  ??DataTable35_1
       4  ??DataTable35_10
       4  ??DataTable35_11
       4  ??DataTable35_12
       4  ??DataTable35_13
       4  ??DataTable35_14
       4  ??DataTable35_15
       4  ??DataTable35_16
       4  ??DataTable35_17
       4  ??DataTable35_2
       4  ??DataTable35_3
       4  ??DataTable35_4
       4  ??DataTable35_5
       4  ??DataTable35_6
       4  ??DataTable35_7
       4  ??DataTable35_8
       4  ??DataTable35_9
       4  ??DataTable8
     120  ?_0
      68  ?_1
       8  ?_10
       2  ?_11
      12  ?_12
      16  ?_2
      88  ?_3
      88  ?_4
      16  ?_5
      16  ?_6
      12  ?_7
      20  ?_8
      12  ?_9
      44  Adafruit_SSD1306::Adafruit_SSD1306(int8_t)
     260  Adafruit_SSD1306::begin(uint8_t, uint8_t, bool)
      22  Adafruit_SSD1306::clearDisplay()
       4  Adafruit_SSD1306::debug(int)
      52  Adafruit_SSD1306::dim(bool)
      80  Adafruit_SSD1306::display()
     868  Adafruit_SSD1306::drawFastHLine(int16_t, int16_t, int16_t, uint16_t)
     868  Adafruit_SSD1306::drawFastVLine(int16_t, int16_t, int16_t, uint16_t)
     306  Adafruit_SSD1306::drawPixel(int16_t, int16_t, uint16_t)
      34  Adafruit_SSD1306::invertDisplay(uint8_t)
      32  Adafruit_SSD1306::memset(uint8_t *, uint16_t, uint16_t)
     418  Adafruit_SSD1306::printf(char const *)
      42  Adafruit_SSD1306::ssd1306_command(uint8_t)
      78  Adafruit_SSD1306::ssd1306_data(uint16_t)
      94  Adafruit_SSD1306::startscrolldiagleft(uint8_t, uint8_t)
      94  Adafruit_SSD1306::startscrolldiagright(uint8_t, uint8_t)
      78  Adafruit_SSD1306::startscrollleft(uint8_t, uint8_t)
      78  Adafruit_SSD1306::startscrollright(uint8_t, uint8_t)
      14  Adafruit_SSD1306::stopscroll()
      14  Adafruit_SSD1306::subobject Adafruit_SSD1306(int8_t)
       2  Buffer_CMD
     132  Buffer_DATA
       4  GetLCDFrameBuffer
      88  LCDBattery
       4  LCDCheck
      30  LCDClear
      36  LCDClearMain
      36  LCDClearTitle
      60  LCDDrawRect
      26  LCDEnableDebug
      28  LCDInit
      84  LCDLight
      42  LCDMenu
      96  LCDMenuUpDown
      76  LCDPrintf
      38  LCDPrintfXY
      88  LCDRSSI
      34  LCDSetCursor
      96  LCDSpeaker
     298  OLED_Test
      14  __sti__routine()
      64  bitval_r
     512  bufMenu
     512  buffer
      32  display
       4  g_bInitLCD
      32  logo16_glcd_bmp
       8  postmask
       8  premask
     398  testdrawbitmap
      88  testdrawcircle
     538  testdrawline
     106  testdrawrect
     128  testdrawroundrect
     218  testdrawtriangle
     136  testfillrect
     158  testfillroundrect
     242  testfilltriangle
      84  -- Other

 
    38 bytes in section .bss
 1'172 bytes in section .data
     4 bytes in section .init_array
   654 bytes in section .rodata
 6'782 bytes in section .text
 
 6'782 bytes of CODE  memory (+  4 bytes shared)
   586 bytes of CONST memory (+ 68 bytes shared)
 1'194 bytes of DATA  memory (+ 16 bytes shared)

Errors: none
Warnings: 3
