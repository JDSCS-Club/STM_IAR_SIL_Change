###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         21/Sep/2022  13:40:14
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\Core\Src\stm32f4xx_hal_msp.c
#    Command line      =
#        -f
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Application\User\Core\stm32f4xx_hal_msp.o.rsp
#        (C:\D\Git_Hub\STM_IAR_SIL_Change\Core\Src\stm32f4xx_hal_msp.c -D
#        USE_HAL_DRIVER -D STM32F407xx -lC
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Application\User\Core
#        -o C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Application\User\Core
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M4 -e --fpu=VFPv4_sp --dlib_config "C:\Program Files\IAR
#        Systems\Embedded Workbench 9.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/App\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/Target\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Core/Inc\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Include\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio/Si446x\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/display\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Library\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\display\fonts\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\STM32F4xx_HAL_Driver\Src\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\arm\CMSIS\Core\Include\\") --dependencies=n
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Application\User\Core\stm32f4xx_hal_msp.o.d
#    Locale            =  C
#    List file         =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Application\User\Core\stm32f4xx_hal_msp.lst
#    Object file       =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Application\User\Core\stm32f4xx_hal_msp.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\D\Git_Hub\STM_IAR_SIL_Change\Core\Src\stm32f4xx_hal_msp.c
      1          /* USER CODE BEGIN Header */
      2          /**
      3            ******************************************************************************
      4            * File Name          : stm32f4xx_hal_msp.c
      5            * Description        : This file provides code for the MSP Initialization 
      6            *                      and de-Initialization codes.
      7            ******************************************************************************
      8            * @attention
      9            *
     10            * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
     11            * All rights reserved.</center></h2>
     12            *
     13            * This software component is licensed by ST under BSD 3-Clause license,
     14            * the "License"; You may not use this file except in compliance with the
     15            * License. You may obtain a copy of the License at:
     16            *                        opensource.org/licenses/BSD-3-Clause
     17            *
     18            ******************************************************************************
     19            */
     20          /* USER CODE END Header */
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "main.h"

  # warning unrecognized compiler
    ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",744  Warning[Pa183]: 
          #warning directive: unrecognized compiler
     24          /* USER CODE BEGIN Includes */
     25          
     26          /* USER CODE END Includes */
     27          extern DMA_HandleTypeDef hdma_i2s3_ext_rx;
     28          
     29          extern DMA_HandleTypeDef hdma_spi3_tx;
     30          
     31          extern DMA_HandleTypeDef hdma_spi1_tx;
     32          
     33          extern DMA_HandleTypeDef hdma_spi1_rx;
     34          
     35          /* Private typedef -----------------------------------------------------------*/
     36          /* USER CODE BEGIN TD */
     37          
     38          /* USER CODE END TD */
     39          
     40          /* Private define ------------------------------------------------------------*/
     41          /* USER CODE BEGIN Define */
     42           
     43          /* USER CODE END Define */
     44          
     45          /* Private macro -------------------------------------------------------------*/
     46          /* USER CODE BEGIN Macro */
     47          
     48          /* USER CODE END Macro */
     49          
     50          /* Private variables ---------------------------------------------------------*/
     51          /* USER CODE BEGIN PV */
     52          
     53          /* USER CODE END PV */
     54          
     55          /* Private function prototypes -----------------------------------------------*/
     56          /* USER CODE BEGIN PFP */
     57          
     58          /* USER CODE END PFP */
     59          
     60          /* External functions --------------------------------------------------------*/
     61          /* USER CODE BEGIN ExternalFunctions */
     62          
     63          /* USER CODE END ExternalFunctions */
     64          
     65          /* USER CODE BEGIN 0 */
     66          
     67          /* USER CODE END 0 */
     68          
     69          void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
     70                              /**
     71            * Initializes the Global MSP.
     72            */

   \                                 In section .text, align 2, keep-with-next
     73          void HAL_MspInit(void)
     74          {
   \                     HAL_MspInit: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
     75            /* USER CODE BEGIN MspInit 0 */
     76          
     77            /* USER CODE END MspInit 0 */
     78          
     79            __HAL_RCC_SYSCFG_CLK_ENABLE();
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x9000             STR      R0,[SP, #+0]
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable15
   \        0xA   0x6801             LDR      R1,[R0, #+0]
   \        0xC   0xF451 0x4180      ORRS     R1,R1,#0x4000
   \       0x10   0x6001             STR      R1,[R0, #+0]
   \       0x12   0x6800             LDR      R0,[R0, #+0]
   \       0x14   0xF410 0x4080      ANDS     R0,R0,#0x4000
   \       0x18   0x9000             STR      R0,[SP, #+0]
   \       0x1A   0x9800             LDR      R0,[SP, #+0]
     80            __HAL_RCC_PWR_CLK_ENABLE();
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0x9000             STR      R0,[SP, #+0]
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \       0x24   0x6801             LDR      R1,[R0, #+0]
   \       0x26   0xF051 0x5180      ORRS     R1,R1,#0x10000000
   \       0x2A   0x6001             STR      R1,[R0, #+0]
   \       0x2C   0x6800             LDR      R0,[R0, #+0]
   \       0x2E   0xF010 0x5080      ANDS     R0,R0,#0x10000000
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x9800             LDR      R0,[SP, #+0]
     81          
     82            /* System interrupt init*/
     83          
     84            /* USER CODE BEGIN MspInit 1 */
     85          
     86            /* USER CODE END MspInit 1 */
     87          }
   \       0x36   0xB001             ADD      SP,SP,#+4
   \       0x38   0x4770             BX       LR
     88          
     89          
     90          
     91          /**
     92            * @brief TIM MSP Initialization 
     93            *        This function configures the hardware resources used in this example: 
     94            *           - Peripheral's clock enable
     95            *           - Peripheral's GPIO Configuration  
     96            * @param htim: TIM handle pointer
     97            * @retval None
     98            */

   \                                 In section .text, align 2, keep-with-next
     99          void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
    100          {
   \                     HAL_TIM_Base_MspInit: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    101          	/*##-1- Enable peripherals and GPIO Clocks #################################*/
    102          	/* TIMx Peripheral clock enable */
    103          
    104          	if (htim->Instance == TIM1)
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable15_2
   \        0xA   0x4288             CMP      R0,R1
   \        0xC   0xD11A             BNE.N    ??HAL_TIM_Base_MspInit_0
    105          	{
    106          
    107          		__HAL_RCC_TIM1_CLK_ENABLE();
   \        0xE   0x2000             MOVS     R0,#+0
   \       0x10   0x9000             STR      R0,[SP, #+0]
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable15
   \       0x16   0x6801             LDR      R1,[R0, #+0]
   \       0x18   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x1C   0x6001             STR      R1,[R0, #+0]
   \       0x1E   0x6800             LDR      R0,[R0, #+0]
   \       0x20   0xF010 0x0001      ANDS     R0,R0,#0x1
   \       0x24   0x9000             STR      R0,[SP, #+0]
   \       0x26   0x9800             LDR      R0,[SP, #+0]
    108          		HAL_NVIC_ClearPendingIRQ(TIM1_UP_TIM10_IRQn);
   \       0x28   0x2019             MOVS     R0,#+25
   \       0x2A   0x.... 0x....      BL       HAL_NVIC_ClearPendingIRQ
    109          
    110          		/*##-2- Configure the NVIC for TIMx ########################################*/
    111          		/* Set Interrupt Group Priority */ 
    112          		HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 4, 0);
   \       0x2E   0x2200             MOVS     R2,#+0
   \       0x30   0x2104             MOVS     R1,#+4
   \       0x32   0x2019             MOVS     R0,#+25
   \       0x34   0x.... 0x....      BL       HAL_NVIC_SetPriority
    113          
    114          		/* Enable the TIMx global Interrupt */
    115          		HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
   \       0x38   0x2019             MOVS     R0,#+25
   \       0x3A   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    116          
    117          		HAL_TIM_Base_Start_IT(htim);
   \       0x3E   0x0020             MOVS     R0,R4
   \       0x40   0x.... 0x....      BL       HAL_TIM_Base_Start_IT
    118          
    119          	}
    120          	
    121            
    122          }
   \                     ??HAL_TIM_Base_MspInit_0: (+1)
   \       0x44   0xBD13             POP      {R0,R1,R4,PC}
    123          
    124          
    125          

   \                                 In section .text, align 2, keep-with-next
    126          void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
    127          {
   \                     HAL_TIM_Base_MspDeInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    128          	/*##-1- Enable peripherals and GPIO Clocks #################################*/
    129          	/* TIMx Peripheral clock enable */
    130          
    131          	if (htim->Instance == TIM1)
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable15_2
   \        0xA   0x4288             CMP      R0,R1
   \        0xC   0xD10B             BNE.N    ??HAL_TIM_Base_MspDeInit_0
    132          	{
    133          
    134          		__HAL_RCC_TIM1_CLK_DISABLE();
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable15
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0x0849             LSRS     R1,R1,#+1
   \       0x16   0x0049             LSLS     R1,R1,#+1
   \       0x18   0x6001             STR      R1,[R0, #+0]
    135                  
    136                  
    137                  HAL_NVIC_DisableIRQ(TIM1_UP_TIM10_IRQn);
   \       0x1A   0x2019             MOVS     R0,#+25
   \       0x1C   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    138          
    139          		HAL_TIM_Base_Stop_IT(htim);
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0x.... 0x....      BL       HAL_TIM_Base_Stop_IT
    140          
    141          	}
    142          	
    143            
    144            
    145          }
   \                     ??HAL_TIM_Base_MspDeInit_0: (+1)
   \       0x26   0xBD10             POP      {R4,PC}
    146          
    147          
    148          
    149          /**
    150          * @brief ADC MSP Initialization
    151          * This function configures the hardware resources used in this example
    152          * @param hadc: ADC handle pointer
    153          * @retval None
    154          */

   \                                 In section .text, align 2, keep-with-next
    155          void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
    156          {
   \                     HAL_ADC_MspInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x2214             MOVS     R2,#+20
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0xA801             ADD      R0,SP,#+4
   \        0xC   0x.... 0x....      BL       memset
    157            GPIO_InitTypeDef GPIO_InitStruct = {0};
    158            if(hadc->Instance==ADC1)
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0x.... 0x....      LDR.W    R1,??DataTable15_3
   \       0x16   0x4288             CMP      R0,R1
   \       0x18   0xD124             BNE.N    ??HAL_ADC_MspInit_0
    159            {
    160            /* USER CODE BEGIN ADC1_MspInit 0 */
    161          
    162            /* USER CODE END ADC1_MspInit 0 */
    163              /* Peripheral clock enable */
    164              __HAL_RCC_ADC1_CLK_ENABLE();
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x9000             STR      R0,[SP, #+0]
   \       0x1E   0x.... 0x....      LDR.W    R0,??DataTable15
   \       0x22   0x6801             LDR      R1,[R0, #+0]
   \       0x24   0xF451 0x7180      ORRS     R1,R1,#0x100
   \       0x28   0x6001             STR      R1,[R0, #+0]
   \       0x2A   0x6800             LDR      R0,[R0, #+0]
   \       0x2C   0xF410 0x7080      ANDS     R0,R0,#0x100
   \       0x30   0x9000             STR      R0,[SP, #+0]
   \       0x32   0x9800             LDR      R0,[SP, #+0]
    165          
    166              __HAL_RCC_GPIOC_CLK_ENABLE();
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0x9000             STR      R0,[SP, #+0]
   \       0x38   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \       0x3C   0x6801             LDR      R1,[R0, #+0]
   \       0x3E   0xF051 0x0104      ORRS     R1,R1,#0x4
   \       0x42   0x6001             STR      R1,[R0, #+0]
   \       0x44   0x6800             LDR      R0,[R0, #+0]
   \       0x46   0xF010 0x0004      ANDS     R0,R0,#0x4
   \       0x4A   0x9000             STR      R0,[SP, #+0]
   \       0x4C   0x9800             LDR      R0,[SP, #+0]
    167              /**ADC1 GPIO Configuration
    168              PC1     ------> ADC1_IN11
    169              */
    170              GPIO_InitStruct.Pin = BAT_ADC_Pin;
   \       0x4E   0x2002             MOVS     R0,#+2
   \       0x50   0x9001             STR      R0,[SP, #+4]
    171              GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
   \       0x52   0x2003             MOVS     R0,#+3
   \       0x54   0x9002             STR      R0,[SP, #+8]
    172              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \       0x56   0x2000             MOVS     R0,#+0
   \       0x58   0x9003             STR      R0,[SP, #+12]
    173              HAL_GPIO_Init(BAT_ADC_GPIO_Port, &GPIO_InitStruct);
   \       0x5A   0xA901             ADD      R1,SP,#+4
   \       0x5C   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \       0x60   0x.... 0x....      BL       HAL_GPIO_Init
    174          
    175            /* USER CODE BEGIN ADC1_MspInit 1 */
    176          
    177            /* USER CODE END ADC1_MspInit 1 */
    178            }
    179          
    180          }
   \                     ??HAL_ADC_MspInit_0: (+1)
   \       0x64   0xB006             ADD      SP,SP,#+24
   \       0x66   0xBD10             POP      {R4,PC}
    181          
    182          /**
    183          * @brief ADC MSP De-Initialization
    184          * This function freeze the hardware resources used in this example
    185          * @param hadc: ADC handle pointer
    186          * @retval None
    187          */

   \                                 In section .text, align 2, keep-with-next
    188          void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
    189          {
   \                     HAL_ADC_MspDeInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    190            if(hadc->Instance==ADC1)
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable15_3
   \        0xA   0x4288             CMP      R0,R1
   \        0xC   0xD10A             BNE.N    ??HAL_ADC_MspDeInit_0
    191            {
    192            /* USER CODE BEGIN ADC1_MspDeInit 0 */
    193          
    194            /* USER CODE END ADC1_MspDeInit 0 */
    195              /* Peripheral clock disable */
    196              __HAL_RCC_ADC1_CLK_DISABLE();
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable15
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0xF431 0x7180      BICS     R1,R1,#0x100
   \       0x18   0x6001             STR      R1,[R0, #+0]
    197          
    198              /**ADC1 GPIO Configuration
    199              PC1     ------> ADC1_IN11
    200              */
    201              HAL_GPIO_DeInit(BAT_ADC_GPIO_Port, BAT_ADC_Pin);
   \       0x1A   0x2102             MOVS     R1,#+2
   \       0x1C   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \       0x20   0x.... 0x....      BL       HAL_GPIO_DeInit
    202          
    203            /* USER CODE BEGIN ADC1_MspDeInit 1 */
    204          
    205            /* USER CODE END ADC1_MspDeInit 1 */
    206            }
    207          
    208          }
   \                     ??HAL_ADC_MspDeInit_0: (+1)
   \       0x24   0xBD10             POP      {R4,PC}
    209          
    210          /**
    211          * @brief I2C MSP Initialization
    212          * This function configures the hardware resources used in this example
    213          * @param hi2c: I2C handle pointer
    214          * @retval None
    215          */
    216          

   \                                 In section .text, align 2, keep-with-next
    217          void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
    218          {
   \                     HAL_I2C_MspInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x2214             MOVS     R2,#+20
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0x4668             MOV      R0,SP
   \        0xC   0x.... 0x....      BL       memset
    219            GPIO_InitTypeDef GPIO_InitStruct = {0};
    220            
    221            
    222            if(hi2c->Instance==I2C1)
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0x.... 0x....      LDR.W    R1,??DataTable15_6
   \       0x16   0x4288             CMP      R0,R1
   \       0x18   0xD139             BNE.N    ??HAL_I2C_MspInit_0
    223            {
    224            /* USER CODE BEGIN I2C1_MspInit 0 */
    225          
    226            /* USER CODE END I2C1_MspInit 0 */
    227          
    228              __HAL_RCC_GPIOB_CLK_ENABLE();
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x9005             STR      R0,[SP, #+20]
   \       0x1E   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \       0x22   0x6801             LDR      R1,[R0, #+0]
   \       0x24   0xF051 0x0102      ORRS     R1,R1,#0x2
   \       0x28   0x6001             STR      R1,[R0, #+0]
   \       0x2A   0x6800             LDR      R0,[R0, #+0]
   \       0x2C   0xF010 0x0002      ANDS     R0,R0,#0x2
   \       0x30   0x9005             STR      R0,[SP, #+20]
   \       0x32   0x9805             LDR      R0,[SP, #+20]
    229              /**I2C1 GPIO Configuration
    230              PB6     ------> I2C1_SCL
    231              PB7     ------> I2C1_SDA
    232              */
    233              GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
   \       0x34   0x20C0             MOVS     R0,#+192
   \       0x36   0x9000             STR      R0,[SP, #+0]
    234              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \       0x38   0x2012             MOVS     R0,#+18
   \       0x3A   0x9001             STR      R0,[SP, #+4]
    235              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \       0x3C   0x2001             MOVS     R0,#+1
   \       0x3E   0x9002             STR      R0,[SP, #+8]
    236              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
   \       0x40   0x2003             MOVS     R0,#+3
   \       0x42   0x9003             STR      R0,[SP, #+12]
    237              GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
   \       0x44   0x2004             MOVS     R0,#+4
   \       0x46   0x9004             STR      R0,[SP, #+16]
    238              
    239              
    240              HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
   \       0x48   0x4669             MOV      R1,SP
   \       0x4A   0x.... 0x....      LDR.W    R0,??DataTable15_7
   \       0x4E   0x.... 0x....      BL       HAL_GPIO_Init
    241          
    242              /* Peripheral clock enable */
    243              __HAL_RCC_I2C1_CLK_ENABLE();
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0x9005             STR      R0,[SP, #+20]
   \       0x56   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \       0x5A   0x6801             LDR      R1,[R0, #+0]
   \       0x5C   0xF451 0x1100      ORRS     R1,R1,#0x200000
   \       0x60   0x6001             STR      R1,[R0, #+0]
   \       0x62   0x6800             LDR      R0,[R0, #+0]
   \       0x64   0xF410 0x1000      ANDS     R0,R0,#0x200000
   \       0x68   0x9005             STR      R0,[SP, #+20]
   \       0x6A   0x9805             LDR      R0,[SP, #+20]
    244              
    245              HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
   \       0x6C   0x2200             MOVS     R2,#+0
   \       0x6E   0x2101             MOVS     R1,#+1
   \       0x70   0x2020             MOVS     R0,#+32
   \       0x72   0x.... 0x....      BL       HAL_NVIC_SetPriority
    246              HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
   \       0x76   0x2020             MOVS     R0,#+32
   \       0x78   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    247              HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
   \       0x7C   0x2200             MOVS     R2,#+0
   \       0x7E   0x2102             MOVS     R1,#+2
   \       0x80   0x201F             MOVS     R0,#+31
   \       0x82   0x.... 0x....      BL       HAL_NVIC_SetPriority
    248              HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
   \       0x86   0x201F             MOVS     R0,#+31
   \       0x88   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \       0x8C   0xE059             B.N      ??HAL_I2C_MspInit_1
    249              
    250              
    251            /* USER CODE BEGIN I2C1_MspInit 1 */
    252          
    253            /* USER CODE END I2C1_MspInit 1 */
    254            }
    255            else if(hi2c->Instance==I2C3)
   \                     ??HAL_I2C_MspInit_0: (+1)
   \       0x8E   0x6820             LDR      R0,[R4, #+0]
   \       0x90   0x.... 0x....      LDR.W    R1,??DataTable15_8
   \       0x94   0x4288             CMP      R0,R1
   \       0x96   0xD154             BNE.N    ??HAL_I2C_MspInit_1
    256            {
    257            /* USER CODE BEGIN I2C3_MspInit 0 */
    258          
    259            /* USER CODE END I2C3_MspInit 0 */
    260          
    261              __HAL_RCC_GPIOC_CLK_ENABLE();
   \       0x98   0x2000             MOVS     R0,#+0
   \       0x9A   0x9005             STR      R0,[SP, #+20]
   \       0x9C   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \       0xA0   0x6801             LDR      R1,[R0, #+0]
   \       0xA2   0xF051 0x0104      ORRS     R1,R1,#0x4
   \       0xA6   0x6001             STR      R1,[R0, #+0]
   \       0xA8   0x6801             LDR      R1,[R0, #+0]
   \       0xAA   0xF011 0x0104      ANDS     R1,R1,#0x4
   \       0xAE   0x9105             STR      R1,[SP, #+20]
   \       0xB0   0x9905             LDR      R1,[SP, #+20]
    262              __HAL_RCC_GPIOA_CLK_ENABLE();
   \       0xB2   0x2100             MOVS     R1,#+0
   \       0xB4   0x9105             STR      R1,[SP, #+20]
   \       0xB6   0x6801             LDR      R1,[R0, #+0]
   \       0xB8   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0xBC   0x6001             STR      R1,[R0, #+0]
   \       0xBE   0x6800             LDR      R0,[R0, #+0]
   \       0xC0   0xF010 0x0001      ANDS     R0,R0,#0x1
   \       0xC4   0x9005             STR      R0,[SP, #+20]
   \       0xC6   0x9805             LDR      R0,[SP, #+20]
    263              /**I2C3 GPIO Configuration
    264              PC9     ------> I2C3_SDA
    265              PA8     ------> I2C3_SCL
    266              */
    267              GPIO_InitStruct.Pin = GPIO_PIN_9;
   \       0xC8   0xF44F 0x7000      MOV      R0,#+512
   \       0xCC   0x9000             STR      R0,[SP, #+0]
    268              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \       0xCE   0x2012             MOVS     R0,#+18
   \       0xD0   0x9001             STR      R0,[SP, #+4]
    269              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \       0xD2   0x2001             MOVS     R0,#+1
   \       0xD4   0x9002             STR      R0,[SP, #+8]
    270              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
   \       0xD6   0x2003             MOVS     R0,#+3
   \       0xD8   0x9003             STR      R0,[SP, #+12]
    271              GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
   \       0xDA   0x2004             MOVS     R0,#+4
   \       0xDC   0x9004             STR      R0,[SP, #+16]
    272              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \       0xDE   0x4669             MOV      R1,SP
   \       0xE0   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \       0xE4   0x.... 0x....      BL       HAL_GPIO_Init
    273          
    274              GPIO_InitStruct.Pin = GPIO_PIN_8;
   \       0xE8   0xF44F 0x7080      MOV      R0,#+256
   \       0xEC   0x9000             STR      R0,[SP, #+0]
    275              GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
   \       0xEE   0x2012             MOVS     R0,#+18
   \       0xF0   0x9001             STR      R0,[SP, #+4]
    276              GPIO_InitStruct.Pull = GPIO_PULLUP;
   \       0xF2   0x2001             MOVS     R0,#+1
   \       0xF4   0x9002             STR      R0,[SP, #+8]
    277              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
   \       0xF6   0x2003             MOVS     R0,#+3
   \       0xF8   0x9003             STR      R0,[SP, #+12]
    278              GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
   \       0xFA   0x2004             MOVS     R0,#+4
   \       0xFC   0x9004             STR      R0,[SP, #+16]
    279              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \       0xFE   0x4669             MOV      R1,SP
   \      0x100   0x.... 0x....      LDR.W    R0,??DataTable15_9
   \      0x104   0x.... 0x....      BL       HAL_GPIO_Init
    280          
    281              /* Peripheral clock enable */
    282              __HAL_RCC_I2C3_CLK_ENABLE();
   \      0x108   0x2000             MOVS     R0,#+0
   \      0x10A   0x9005             STR      R0,[SP, #+20]
   \      0x10C   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \      0x110   0x6801             LDR      R1,[R0, #+0]
   \      0x112   0xF451 0x0100      ORRS     R1,R1,#0x800000
   \      0x116   0x6001             STR      R1,[R0, #+0]
   \      0x118   0x6800             LDR      R0,[R0, #+0]
   \      0x11A   0xF410 0x0000      ANDS     R0,R0,#0x800000
   \      0x11E   0x9005             STR      R0,[SP, #+20]
   \      0x120   0x9805             LDR      R0,[SP, #+20]
    283            /* USER CODE BEGIN I2C3_MspInit 1 */
    284              
    285              HAL_NVIC_SetPriority(I2C3_ER_IRQn, 1, 0);
   \      0x122   0x2200             MOVS     R2,#+0
   \      0x124   0x2101             MOVS     R1,#+1
   \      0x126   0x2049             MOVS     R0,#+73
   \      0x128   0x.... 0x....      BL       HAL_NVIC_SetPriority
    286              HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
   \      0x12C   0x2049             MOVS     R0,#+73
   \      0x12E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    287              HAL_NVIC_SetPriority(I2C3_EV_IRQn, 2, 0);
   \      0x132   0x2200             MOVS     R2,#+0
   \      0x134   0x2102             MOVS     R1,#+2
   \      0x136   0x2048             MOVS     R0,#+72
   \      0x138   0x.... 0x....      BL       HAL_NVIC_SetPriority
    288              HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
   \      0x13C   0x2048             MOVS     R0,#+72
   \      0x13E   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    289              
    290          
    291            /* USER CODE END I2C3_MspInit 1 */
    292            }
    293          
    294          }
   \                     ??HAL_I2C_MspInit_1: (+1)
   \      0x142   0xB006             ADD      SP,SP,#+24
   \      0x144   0xBD10             POP      {R4,PC}
    295          
    296          /**
    297          * @brief I2C MSP De-Initialization
    298          * This function freeze the hardware resources used in this example
    299          * @param hi2c: I2C handle pointer
    300          * @retval None
    301          */

   \                                 In section .text, align 2, keep-with-next
    302          void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
    303          {
   \                     HAL_I2C_MspDeInit: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    304            if(hi2c->Instance==I2C1)
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable15_6
   \        0xA   0x4288             CMP      R0,R1
   \        0xC   0xD116             BNE.N    ??HAL_I2C_MspDeInit_0
    305            {
    306            /* USER CODE BEGIN I2C1_MspDeInit 0 */
    307          
    308            /* USER CODE END I2C1_MspDeInit 0 */
    309              /* Peripheral clock disable */
    310              __HAL_RCC_I2C1_CLK_DISABLE();
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0xF431 0x1100      BICS     R1,R1,#0x200000
   \       0x18   0x6001             STR      R1,[R0, #+0]
    311          
    312              /**I2C1 GPIO Configuration
    313              PB6     ------> I2C1_SCL
    314              PB7     ------> I2C1_SDA
    315              */
    316              HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
   \       0x1A   0x.... 0x....      LDR.W    R5,??DataTable15_7
   \       0x1E   0x2140             MOVS     R1,#+64
   \       0x20   0x0028             MOVS     R0,R5
   \       0x22   0x.... 0x....      BL       HAL_GPIO_DeInit
    317          
    318              HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
   \       0x26   0x2180             MOVS     R1,#+128
   \       0x28   0x0028             MOVS     R0,R5
   \       0x2A   0x.... 0x....      BL       HAL_GPIO_DeInit
    319          
    320            /* USER CODE BEGIN I2C1_MspDeInit 1 */
    321              
    322               HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
   \       0x2E   0x2020             MOVS     R0,#+32
   \       0x30   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    323              HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
   \       0x34   0x201F             MOVS     R0,#+31
   \       0x36   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \       0x3A   0xE01C             B.N      ??HAL_I2C_MspDeInit_1
    324          
    325            /* USER CODE END I2C1_MspDeInit 1 */
    326            }
    327            else if(hi2c->Instance==I2C3)
   \                     ??HAL_I2C_MspDeInit_0: (+1)
   \       0x3C   0x6820             LDR      R0,[R4, #+0]
   \       0x3E   0x.... 0x....      LDR.W    R1,??DataTable15_8
   \       0x42   0x4288             CMP      R0,R1
   \       0x44   0xD117             BNE.N    ??HAL_I2C_MspDeInit_1
    328            {
    329            /* USER CODE BEGIN I2C3_MspDeInit 0 */
    330          
    331            /* USER CODE END I2C3_MspDeInit 0 */
    332              /* Peripheral clock disable */
    333              __HAL_RCC_I2C3_CLK_DISABLE();
   \       0x46   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \       0x4A   0x6801             LDR      R1,[R0, #+0]
   \       0x4C   0xF431 0x0100      BICS     R1,R1,#0x800000
   \       0x50   0x6001             STR      R1,[R0, #+0]
    334          
    335              /**I2C3 GPIO Configuration
    336              PC9     ------> I2C3_SDA
    337              PA8     ------> I2C3_SCL
    338              */
    339              HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
   \       0x52   0xF44F 0x7100      MOV      R1,#+512
   \       0x56   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \       0x5A   0x.... 0x....      BL       HAL_GPIO_DeInit
    340          
    341              HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
   \       0x5E   0xF44F 0x7180      MOV      R1,#+256
   \       0x62   0x.... 0x....      LDR.W    R0,??DataTable15_9
   \       0x66   0x.... 0x....      BL       HAL_GPIO_DeInit
    342          
    343             
    344            /* USER CODE BEGIN I2C3_MspDeInit 1 */
    345               HAL_NVIC_DisableIRQ(I2C3_ER_IRQn);
   \       0x6A   0x2049             MOVS     R0,#+73
   \       0x6C   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    346              HAL_NVIC_DisableIRQ(I2C3_EV_IRQn);
   \       0x70   0x2048             MOVS     R0,#+72
   \       0x72   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    347              
    348          
    349            /* USER CODE END I2C3_MspDeInit 1 */
    350            }
    351          
    352          }
   \                     ??HAL_I2C_MspDeInit_1: (+1)
   \       0x76   0xBD31             POP      {R0,R4,R5,PC}
    353          
    354          /**
    355          * @brief I2S MSP Initialization
    356          * This function configures the hardware resources used in this example
    357          * @param hi2s: I2S handle pointer
    358          * @retval None
    359          */

   \                                 In section .text, align 2, keep-with-next
    360          void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
    361          {
   \                     HAL_I2S_MspInit: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x2214             MOVS     R2,#+20
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x4668             MOV      R0,SP
   \        0xE   0x.... 0x....      BL       memset
    362            GPIO_InitTypeDef GPIO_InitStruct = {0};
    363            if(hi2s->Instance==SPI3)
   \       0x12   0x6820             LDR      R0,[R4, #+0]
   \       0x14   0x.... 0x....      LDR.W    R1,??DataTable15_10
   \       0x18   0x4288             CMP      R0,R1
   \       0x1A   0xF040 0x80A4      BNE.W    ??HAL_I2S_MspInit_0
    364            {
    365            /* USER CODE BEGIN SPI3_MspInit 0 */
    366          
    367            /* USER CODE END SPI3_MspInit 0 */
    368              /* Peripheral clock enable */
    369              __HAL_RCC_SPI3_CLK_ENABLE();
   \       0x1E   0x2000             MOVS     R0,#+0
   \       0x20   0x9005             STR      R0,[SP, #+20]
   \       0x22   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \       0x26   0x6801             LDR      R1,[R0, #+0]
   \       0x28   0xF451 0x4100      ORRS     R1,R1,#0x8000
   \       0x2C   0x6001             STR      R1,[R0, #+0]
   \       0x2E   0x6800             LDR      R0,[R0, #+0]
   \       0x30   0xF410 0x4000      ANDS     R0,R0,#0x8000
   \       0x34   0x9005             STR      R0,[SP, #+20]
   \       0x36   0x9805             LDR      R0,[SP, #+20]
    370          
    371              __HAL_RCC_GPIOA_CLK_ENABLE();
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0x9005             STR      R0,[SP, #+20]
   \       0x3C   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \       0x40   0x6801             LDR      R1,[R0, #+0]
   \       0x42   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x46   0x6001             STR      R1,[R0, #+0]
   \       0x48   0x6801             LDR      R1,[R0, #+0]
   \       0x4A   0xF011 0x0101      ANDS     R1,R1,#0x1
   \       0x4E   0x9105             STR      R1,[SP, #+20]
   \       0x50   0x9905             LDR      R1,[SP, #+20]
    372              __HAL_RCC_GPIOC_CLK_ENABLE();
   \       0x52   0x2100             MOVS     R1,#+0
   \       0x54   0x9105             STR      R1,[SP, #+20]
   \       0x56   0x6801             LDR      R1,[R0, #+0]
   \       0x58   0xF051 0x0104      ORRS     R1,R1,#0x4
   \       0x5C   0x6001             STR      R1,[R0, #+0]
   \       0x5E   0x6800             LDR      R0,[R0, #+0]
   \       0x60   0xF010 0x0004      ANDS     R0,R0,#0x4
   \       0x64   0x9005             STR      R0,[SP, #+20]
   \       0x66   0x9805             LDR      R0,[SP, #+20]
    373              /**I2S3 GPIO Configuration
    374              PA15     ------> I2S3_WS
    375              PC10     ------> I2S3_CK
    376              PC11     ------> I2S3_ext_SD
    377              PC12     ------> I2S3_SD
    378              */
    379              GPIO_InitStruct.Pin = GPIO_PIN_15;
   \       0x68   0xF44F 0x4000      MOV      R0,#+32768
   \       0x6C   0x9000             STR      R0,[SP, #+0]
    380              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \       0x6E   0x2002             MOVS     R0,#+2
   \       0x70   0x9001             STR      R0,[SP, #+4]
    381              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \       0x72   0x2000             MOVS     R0,#+0
   \       0x74   0x9002             STR      R0,[SP, #+8]
    382              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
   \       0x76   0x2002             MOVS     R0,#+2
   \       0x78   0x9003             STR      R0,[SP, #+12]
    383              GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   \       0x7A   0x2006             MOVS     R0,#+6
   \       0x7C   0x9004             STR      R0,[SP, #+16]
    384              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \       0x7E   0x4669             MOV      R1,SP
   \       0x80   0x.... 0x....      LDR.W    R0,??DataTable15_9
   \       0x84   0x.... 0x....      BL       HAL_GPIO_Init
    385          
    386              GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
   \       0x88   0xF44F 0x50A0      MOV      R0,#+5120
   \       0x8C   0x9000             STR      R0,[SP, #+0]
    387              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \       0x8E   0x2002             MOVS     R0,#+2
   \       0x90   0x9001             STR      R0,[SP, #+4]
    388              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \       0x92   0x2000             MOVS     R0,#+0
   \       0x94   0x9002             STR      R0,[SP, #+8]
    389              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
   \       0x96   0x2002             MOVS     R0,#+2
   \       0x98   0x9003             STR      R0,[SP, #+12]
    390              GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
   \       0x9A   0x2006             MOVS     R0,#+6
   \       0x9C   0x9004             STR      R0,[SP, #+16]
    391              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \       0x9E   0x.... 0x....      LDR.W    R6,??DataTable15_5
   \       0xA2   0x4669             MOV      R1,SP
   \       0xA4   0x0030             MOVS     R0,R6
   \       0xA6   0x.... 0x....      BL       HAL_GPIO_Init
    392          
    393              GPIO_InitStruct.Pin = GPIO_PIN_11;
   \       0xAA   0xF44F 0x6500      MOV      R5,#+2048
   \       0xAE   0x9500             STR      R5,[SP, #+0]
    394              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \       0xB0   0x2002             MOVS     R0,#+2
   \       0xB2   0x9001             STR      R0,[SP, #+4]
    395              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \       0xB4   0x2000             MOVS     R0,#+0
   \       0xB6   0x9002             STR      R0,[SP, #+8]
    396              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
   \       0xB8   0x2002             MOVS     R0,#+2
   \       0xBA   0x9003             STR      R0,[SP, #+12]
    397              GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
   \       0xBC   0x2005             MOVS     R0,#+5
   \       0xBE   0x9004             STR      R0,[SP, #+16]
    398              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \       0xC0   0x4669             MOV      R1,SP
   \       0xC2   0x0030             MOVS     R0,R6
   \       0xC4   0x.... 0x....      BL       HAL_GPIO_Init
    399          
    400              /* I2S3 DMA Init */
    401              /* I2S3_EXT_RX Init */
    402              hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
   \       0xC8   0x.... 0x....      LDR.W    R6,??DataTable15_11
   \       0xCC   0x.... 0x....      LDR.W    R0,??DataTable15_12
   \       0xD0   0x6030             STR      R0,[R6, #+0]
    403              hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
   \       0xD2   0xF05F 0x60C0      MOVS     R0,#+100663296
   \       0xD6   0x6070             STR      R0,[R6, #+4]
    404              hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \       0xD8   0x2000             MOVS     R0,#+0
   \       0xDA   0x60B0             STR      R0,[R6, #+8]
    405              hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   \       0xDC   0x2000             MOVS     R0,#+0
   \       0xDE   0x60F0             STR      R0,[R6, #+12]
    406              hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
   \       0xE0   0xF44F 0x6780      MOV      R7,#+1024
   \       0xE4   0x6137             STR      R7,[R6, #+16]
    407              hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \       0xE6   0x6175             STR      R5,[R6, #+20]
    408              hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   \       0xE8   0xF44F 0x5800      MOV      R8,#+8192
   \       0xEC   0xF8C6 0x8018      STR      R8,[R6, #+24]
    409              hdma_i2s3_ext_rx.Init.Mode = DMA_NORMAL;
   \       0xF0   0x2000             MOVS     R0,#+0
   \       0xF2   0x61F0             STR      R0,[R6, #+28]
    410              hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
   \       0xF4   0xF45F 0x3940      MOVS     R9,#+196608
   \       0xF8   0xF8C6 0x9020      STR      R9,[R6, #+32]
    411              hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
   \       0xFC   0x2004             MOVS     R0,#+4
   \       0xFE   0x6270             STR      R0,[R6, #+36]
    412              hdma_i2s3_ext_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \      0x100   0x2003             MOVS     R0,#+3
   \      0x102   0x62B0             STR      R0,[R6, #+40]
    413              hdma_i2s3_ext_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   \      0x104   0x2000             MOVS     R0,#+0
   \      0x106   0x62F0             STR      R0,[R6, #+44]
    414              hdma_i2s3_ext_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   \      0x108   0x2000             MOVS     R0,#+0
   \      0x10A   0x6330             STR      R0,[R6, #+48]
    415              if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
   \      0x10C   0x0030             MOVS     R0,R6
   \      0x10E   0x.... 0x....      BL       HAL_DMA_Init
   \      0x112   0x2800             CMP      R0,#+0
   \      0x114   0xD001             BEQ.N    ??HAL_I2S_MspInit_1
    416              {
    417                Error_Handler();
   \      0x116   0x.... 0x....      BL       Error_Handler
    418              }
    419          
    420              __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
   \                     ??HAL_I2S_MspInit_1: (+1)
   \      0x11A   0x63E6             STR      R6,[R4, #+60]
   \      0x11C   0x63B4             STR      R4,[R6, #+56]
    421          
    422              /* SPI3_TX Init */
    423              hdma_spi3_tx.Instance = DMA1_Stream5;
   \      0x11E   0x.... 0x....      LDR.W    R6,??DataTable15_13
   \      0x122   0x.... 0x....      LDR.W    R0,??DataTable15_14
   \      0x126   0x6030             STR      R0,[R6, #+0]
    424              hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
   \      0x128   0x2000             MOVS     R0,#+0
   \      0x12A   0x6070             STR      R0,[R6, #+4]
    425              hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \      0x12C   0x2040             MOVS     R0,#+64
   \      0x12E   0x60B0             STR      R0,[R6, #+8]
    426              hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
   \      0x130   0x2000             MOVS     R0,#+0
   \      0x132   0x60F0             STR      R0,[R6, #+12]
    427              hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
   \      0x134   0x6137             STR      R7,[R6, #+16]
    428              hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
   \      0x136   0x6175             STR      R5,[R6, #+20]
    429              hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
   \      0x138   0xF8C6 0x8018      STR      R8,[R6, #+24]
    430              hdma_spi3_tx.Init.Mode = DMA_NORMAL;
   \      0x13C   0x2000             MOVS     R0,#+0
   \      0x13E   0x61F0             STR      R0,[R6, #+28]
    431              hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
   \      0x140   0xF8C6 0x9020      STR      R9,[R6, #+32]
    432              hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
   \      0x144   0x2004             MOVS     R0,#+4
   \      0x146   0x6270             STR      R0,[R6, #+36]
    433              hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \      0x148   0x2003             MOVS     R0,#+3
   \      0x14A   0x62B0             STR      R0,[R6, #+40]
    434              hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
   \      0x14C   0x2000             MOVS     R0,#+0
   \      0x14E   0x62F0             STR      R0,[R6, #+44]
    435              hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   \      0x150   0x2000             MOVS     R0,#+0
   \      0x152   0x6330             STR      R0,[R6, #+48]
    436              if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
   \      0x154   0x0030             MOVS     R0,R6
   \      0x156   0x.... 0x....      BL       HAL_DMA_Init
   \      0x15A   0x2800             CMP      R0,#+0
   \      0x15C   0xD001             BEQ.N    ??HAL_I2S_MspInit_2
    437              {
    438                Error_Handler();
   \      0x15E   0x.... 0x....      BL       Error_Handler
    439              }
    440          
    441              __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
   \                     ??HAL_I2S_MspInit_2: (+1)
   \      0x162   0x63A6             STR      R6,[R4, #+56]
   \      0x164   0x63B4             STR      R4,[R6, #+56]
    442          
    443            /* USER CODE BEGIN SPI3_MspInit 1 */
    444          
    445            /* USER CODE END SPI3_MspInit 1 */
    446            }
    447          
    448          }
   \                     ??HAL_I2S_MspInit_0: (+1)
   \      0x166   0xB007             ADD      SP,SP,#+28
   \      0x168   0xE8BD 0x83F0      POP      {R4-R9,PC}
    449          
    450          /**
    451          * @brief I2S MSP De-Initialization
    452          * This function freeze the hardware resources used in this example
    453          * @param hi2s: I2S handle pointer
    454          * @retval None
    455          */

   \                                 In section .text, align 2, keep-with-next
    456          void HAL_I2S_MspDeInit(I2S_HandleTypeDef* hi2s)
    457          {
   \                     HAL_I2S_MspDeInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    458            if(hi2s->Instance==SPI3)
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable15_10
   \        0xA   0x4288             CMP      R0,R1
   \        0xC   0xD117             BNE.N    ??HAL_I2S_MspDeInit_0
    459            {
    460            /* USER CODE BEGIN SPI3_MspDeInit 0 */
    461          
    462            /* USER CODE END SPI3_MspDeInit 0 */
    463              /* Peripheral clock disable */
    464              __HAL_RCC_SPI3_CLK_DISABLE();
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable15_1
   \       0x12   0x6801             LDR      R1,[R0, #+0]
   \       0x14   0xF431 0x4100      BICS     R1,R1,#0x8000
   \       0x18   0x6001             STR      R1,[R0, #+0]
    465          
    466              /**I2S3 GPIO Configuration
    467              PA15     ------> I2S3_WS
    468              PC10     ------> I2S3_CK
    469              PC11     ------> I2S3_ext_SD
    470              PC12     ------> I2S3_SD
    471              */
    472              HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
   \       0x1A   0xF44F 0x4100      MOV      R1,#+32768
   \       0x1E   0x.... 0x....      LDR.W    R0,??DataTable15_9
   \       0x22   0x.... 0x....      BL       HAL_GPIO_DeInit
    473          
    474              HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12);
   \       0x26   0xF44F 0x51E0      MOV      R1,#+7168
   \       0x2A   0x.... 0x....      LDR.W    R0,??DataTable15_5
   \       0x2E   0x.... 0x....      BL       HAL_GPIO_DeInit
    475          
    476              /* I2S3 DMA DeInit */
    477              HAL_DMA_DeInit(hi2s->hdmarx);
   \       0x32   0x6BE0             LDR      R0,[R4, #+60]
   \       0x34   0x.... 0x....      BL       HAL_DMA_DeInit
    478              HAL_DMA_DeInit(hi2s->hdmatx);
   \       0x38   0x6BA0             LDR      R0,[R4, #+56]
   \       0x3A   0x.... 0x....      BL       HAL_DMA_DeInit
    479            /* USER CODE BEGIN SPI3_MspDeInit 1 */
    480          
    481            /* USER CODE END SPI3_MspDeInit 1 */
    482            }
    483          
    484          }
   \                     ??HAL_I2S_MspDeInit_0: (+1)
   \       0x3E   0xBD10             POP      {R4,PC}
    485          
    486          /**
    487          * @brief SPI MSP Initialization
    488          * This function configures the hardware resources used in this example
    489          * @param hspi: SPI handle pointer
    490          * @retval None
    491          */

   \                                 In section .text, align 2, keep-with-next
    492          void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
    493          {
   \                     HAL_SPI_MspInit: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x2214             MOVS     R2,#+20
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x4668             MOV      R0,SP
   \        0xE   0x.... 0x....      BL       memset
    494            GPIO_InitTypeDef GPIO_InitStruct = {0};
    495            if(hspi->Instance==SPI1)
   \       0x12   0x6820             LDR      R0,[R4, #+0]
   \       0x14   0x.... 0x....      LDR.W    R1,??DataTable15_15
   \       0x18   0x4288             CMP      R0,R1
   \       0x1A   0xD174             BNE.N    ??HAL_SPI_MspInit_0
    496            {
    497            /* USER CODE BEGIN SPI1_MspInit 0 */
    498          
    499            /* USER CODE END SPI1_MspInit 0 */
    500              /* Peripheral clock enable */
    501              __HAL_RCC_SPI1_CLK_ENABLE();
   \       0x1C   0x2000             MOVS     R0,#+0
   \       0x1E   0x9005             STR      R0,[SP, #+20]
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable15
   \       0x24   0x6801             LDR      R1,[R0, #+0]
   \       0x26   0xF451 0x5180      ORRS     R1,R1,#0x1000
   \       0x2A   0x6001             STR      R1,[R0, #+0]
   \       0x2C   0x6800             LDR      R0,[R0, #+0]
   \       0x2E   0xF410 0x5080      ANDS     R0,R0,#0x1000
   \       0x32   0x9005             STR      R0,[SP, #+20]
   \       0x34   0x9805             LDR      R0,[SP, #+20]
    502          
    503              __HAL_RCC_GPIOA_CLK_ENABLE();
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0x9005             STR      R0,[SP, #+20]
   \       0x3A   0x.... 0x....      LDR.W    R0,??DataTable15_4
   \       0x3E   0x6801             LDR      R1,[R0, #+0]
   \       0x40   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x44   0x6001             STR      R1,[R0, #+0]
   \       0x46   0x6800             LDR      R0,[R0, #+0]
   \       0x48   0xF010 0x0001      ANDS     R0,R0,#0x1
   \       0x4C   0x9005             STR      R0,[SP, #+20]
   \       0x4E   0x9805             LDR      R0,[SP, #+20]
    504              /**SPI1 GPIO Configuration
    505              PA5     ------> SPI1_SCK
    506              PA6     ------> SPI1_MISO
    507              PA7     ------> SPI1_MOSI
    508              */
    509              GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
   \       0x50   0x20E0             MOVS     R0,#+224
   \       0x52   0x9000             STR      R0,[SP, #+0]
    510              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \       0x54   0x2002             MOVS     R0,#+2
   \       0x56   0x9001             STR      R0,[SP, #+4]
    511              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0x9002             STR      R0,[SP, #+8]
    512              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
   \       0x5C   0x2003             MOVS     R0,#+3
   \       0x5E   0x9003             STR      R0,[SP, #+12]
    513              GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
   \       0x60   0x2005             MOVS     R0,#+5
   \       0x62   0x9004             STR      R0,[SP, #+16]
    514              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \       0x64   0x4669             MOV      R1,SP
   \       0x66   0x....             LDR.N    R0,??DataTable15_9
   \       0x68   0x.... 0x....      BL       HAL_GPIO_Init
    515          
    516              /* SPI1 DMA Init */
    517              /* SPI1_TX Init */
    518              hdma_spi1_tx.Instance = DMA2_Stream3;
   \       0x6C   0x.... 0x....      LDR.W    R5,??DataTable15_16
   \       0x70   0x.... 0x....      LDR.W    R0,??DataTable15_17
   \       0x74   0x6028             STR      R0,[R5, #+0]
    519              hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
   \       0x76   0xF05F 0x66C0      MOVS     R6,#+100663296
   \       0x7A   0x606E             STR      R6,[R5, #+4]
    520              hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
   \       0x7C   0x2040             MOVS     R0,#+64
   \       0x7E   0x60A8             STR      R0,[R5, #+8]
    521              hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
   \       0x80   0x2000             MOVS     R0,#+0
   \       0x82   0x60E8             STR      R0,[R5, #+12]
    522              hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
   \       0x84   0xF44F 0x6780      MOV      R7,#+1024
   \       0x88   0x612F             STR      R7,[R5, #+16]
    523              hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
   \       0x8A   0x2000             MOVS     R0,#+0
   \       0x8C   0x6168             STR      R0,[R5, #+20]
    524              hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
   \       0x8E   0x2000             MOVS     R0,#+0
   \       0x90   0x61A8             STR      R0,[R5, #+24]
    525              hdma_spi1_tx.Init.Mode = DMA_NORMAL;
   \       0x92   0x2000             MOVS     R0,#+0
   \       0x94   0x61E8             STR      R0,[R5, #+28]
    526              hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
   \       0x96   0xF45F 0x3840      MOVS     R8,#+196608
   \       0x9A   0xF8C5 0x8020      STR      R8,[R5, #+32]
    527              hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
   \       0x9E   0x2004             MOVS     R0,#+4
   \       0xA0   0x6268             STR      R0,[R5, #+36]
    528              hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \       0xA2   0x2003             MOVS     R0,#+3
   \       0xA4   0x62A8             STR      R0,[R5, #+40]
    529              hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
   \       0xA6   0x2000             MOVS     R0,#+0
   \       0xA8   0x62E8             STR      R0,[R5, #+44]
    530              hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   \       0xAA   0x2000             MOVS     R0,#+0
   \       0xAC   0x6328             STR      R0,[R5, #+48]
    531              if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
   \       0xAE   0x0028             MOVS     R0,R5
   \       0xB0   0x.... 0x....      BL       HAL_DMA_Init
   \       0xB4   0x2800             CMP      R0,#+0
   \       0xB6   0xD001             BEQ.N    ??HAL_SPI_MspInit_1
    532              {
    533                Error_Handler();
   \       0xB8   0x.... 0x....      BL       Error_Handler
    534              }
    535          
    536              __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
   \                     ??HAL_SPI_MspInit_1: (+1)
   \       0xBC   0x64A5             STR      R5,[R4, #+72]
   \       0xBE   0x63AC             STR      R4,[R5, #+56]
    537          
    538              /* SPI1_RX Init */
    539              hdma_spi1_rx.Instance = DMA2_Stream0;
   \       0xC0   0x....             LDR.N    R5,??DataTable15_18
   \       0xC2   0x....             LDR.N    R0,??DataTable15_19
   \       0xC4   0x6028             STR      R0,[R5, #+0]
    540              hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
   \       0xC6   0x606E             STR      R6,[R5, #+4]
    541              hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
   \       0xC8   0x2000             MOVS     R0,#+0
   \       0xCA   0x60A8             STR      R0,[R5, #+8]
    542              hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
   \       0xCC   0x2000             MOVS     R0,#+0
   \       0xCE   0x60E8             STR      R0,[R5, #+12]
    543              hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
   \       0xD0   0x612F             STR      R7,[R5, #+16]
    544              hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
   \       0xD2   0x2000             MOVS     R0,#+0
   \       0xD4   0x6168             STR      R0,[R5, #+20]
    545              hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
   \       0xD6   0x2000             MOVS     R0,#+0
   \       0xD8   0x61A8             STR      R0,[R5, #+24]
    546              hdma_spi1_rx.Init.Mode = DMA_NORMAL;
   \       0xDA   0x2000             MOVS     R0,#+0
   \       0xDC   0x61E8             STR      R0,[R5, #+28]
    547              hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
   \       0xDE   0xF8C5 0x8020      STR      R8,[R5, #+32]
    548              hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
   \       0xE2   0x2004             MOVS     R0,#+4
   \       0xE4   0x6268             STR      R0,[R5, #+36]
    549              hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
   \       0xE6   0x2003             MOVS     R0,#+3
   \       0xE8   0x62A8             STR      R0,[R5, #+40]
    550              hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
   \       0xEA   0x2000             MOVS     R0,#+0
   \       0xEC   0x62E8             STR      R0,[R5, #+44]
    551              hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
   \       0xEE   0x2000             MOVS     R0,#+0
   \       0xF0   0x6328             STR      R0,[R5, #+48]
    552              if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
   \       0xF2   0x0028             MOVS     R0,R5
   \       0xF4   0x.... 0x....      BL       HAL_DMA_Init
   \       0xF8   0x2800             CMP      R0,#+0
   \       0xFA   0xD001             BEQ.N    ??HAL_SPI_MspInit_2
    553              {
    554                Error_Handler();
   \       0xFC   0x.... 0x....      BL       Error_Handler
    555              }
    556          
    557              __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
   \                     ??HAL_SPI_MspInit_2: (+1)
   \      0x100   0x64E5             STR      R5,[R4, #+76]
   \      0x102   0x63AC             STR      R4,[R5, #+56]
   \      0x104   0xE043             B.N      ??HAL_SPI_MspInit_3
    558          
    559            /* USER CODE BEGIN SPI1_MspInit 1 */
    560          
    561            /* USER CODE END SPI1_MspInit 1 */
    562            }
    563            else if(hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspInit_0: (+1)
   \      0x106   0x6820             LDR      R0,[R4, #+0]
   \      0x108   0x....             LDR.N    R1,??DataTable15_20
   \      0x10A   0x4288             CMP      R0,R1
   \      0x10C   0xD13F             BNE.N    ??HAL_SPI_MspInit_3
    564            {
    565            /* USER CODE BEGIN SPI2_MspInit 0 */
    566          
    567            /* USER CODE END SPI2_MspInit 0 */
    568              /* Peripheral clock enable */
    569              __HAL_RCC_SPI2_CLK_ENABLE();
   \      0x10E   0x2000             MOVS     R0,#+0
   \      0x110   0x9005             STR      R0,[SP, #+20]
   \      0x112   0x....             LDR.N    R0,??DataTable15_1
   \      0x114   0x6801             LDR      R1,[R0, #+0]
   \      0x116   0xF451 0x4180      ORRS     R1,R1,#0x4000
   \      0x11A   0x6001             STR      R1,[R0, #+0]
   \      0x11C   0x6800             LDR      R0,[R0, #+0]
   \      0x11E   0xF410 0x4080      ANDS     R0,R0,#0x4000
   \      0x122   0x9005             STR      R0,[SP, #+20]
   \      0x124   0x9805             LDR      R0,[SP, #+20]
    570          
    571              __HAL_RCC_GPIOC_CLK_ENABLE();
   \      0x126   0x2000             MOVS     R0,#+0
   \      0x128   0x9005             STR      R0,[SP, #+20]
   \      0x12A   0x....             LDR.N    R0,??DataTable15_4
   \      0x12C   0x6801             LDR      R1,[R0, #+0]
   \      0x12E   0xF051 0x0104      ORRS     R1,R1,#0x4
   \      0x132   0x6001             STR      R1,[R0, #+0]
   \      0x134   0x6801             LDR      R1,[R0, #+0]
   \      0x136   0xF011 0x0104      ANDS     R1,R1,#0x4
   \      0x13A   0x9105             STR      R1,[SP, #+20]
   \      0x13C   0x9905             LDR      R1,[SP, #+20]
    572              __HAL_RCC_GPIOB_CLK_ENABLE();
   \      0x13E   0x2100             MOVS     R1,#+0
   \      0x140   0x9105             STR      R1,[SP, #+20]
   \      0x142   0x6801             LDR      R1,[R0, #+0]
   \      0x144   0xF051 0x0102      ORRS     R1,R1,#0x2
   \      0x148   0x6001             STR      R1,[R0, #+0]
   \      0x14A   0x6800             LDR      R0,[R0, #+0]
   \      0x14C   0xF010 0x0002      ANDS     R0,R0,#0x2
   \      0x150   0x9005             STR      R0,[SP, #+20]
   \      0x152   0x9805             LDR      R0,[SP, #+20]
    573              /**SPI2 GPIO Configuration
    574              PC3     ------> SPI2_MOSI
    575              PB10     ------> SPI2_SCK
    576              */
    577              GPIO_InitStruct.Pin = MOSI_Pin;
   \      0x154   0x2008             MOVS     R0,#+8
   \      0x156   0x9000             STR      R0,[SP, #+0]
    578              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \      0x158   0x2002             MOVS     R0,#+2
   \      0x15A   0x9001             STR      R0,[SP, #+4]
    579              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \      0x15C   0x2000             MOVS     R0,#+0
   \      0x15E   0x9002             STR      R0,[SP, #+8]
    580              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
   \      0x160   0x2003             MOVS     R0,#+3
   \      0x162   0x9003             STR      R0,[SP, #+12]
    581              GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   \      0x164   0x2005             MOVS     R0,#+5
   \      0x166   0x9004             STR      R0,[SP, #+16]
    582              HAL_GPIO_Init(MOSI_GPIO_Port, &GPIO_InitStruct);
   \      0x168   0x4669             MOV      R1,SP
   \      0x16A   0x....             LDR.N    R0,??DataTable15_5
   \      0x16C   0x.... 0x....      BL       HAL_GPIO_Init
    583          
    584              GPIO_InitStruct.Pin = SCK_Pin;
   \      0x170   0xF44F 0x6080      MOV      R0,#+1024
   \      0x174   0x9000             STR      R0,[SP, #+0]
    585              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \      0x176   0x2002             MOVS     R0,#+2
   \      0x178   0x9001             STR      R0,[SP, #+4]
    586              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \      0x17A   0x2000             MOVS     R0,#+0
   \      0x17C   0x9002             STR      R0,[SP, #+8]
    587              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
   \      0x17E   0x2003             MOVS     R0,#+3
   \      0x180   0x9003             STR      R0,[SP, #+12]
    588              GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
   \      0x182   0x2005             MOVS     R0,#+5
   \      0x184   0x9004             STR      R0,[SP, #+16]
    589              HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
   \      0x186   0x4669             MOV      R1,SP
   \      0x188   0x....             LDR.N    R0,??DataTable15_7
   \      0x18A   0x.... 0x....      BL       HAL_GPIO_Init
    590          
    591            /* USER CODE BEGIN SPI2_MspInit 1 */
    592          
    593            /* USER CODE END SPI2_MspInit 1 */
    594            }
    595          
    596          }
   \                     ??HAL_SPI_MspInit_3: (+1)
   \      0x18E   0xB006             ADD      SP,SP,#+24
   \      0x190   0xE8BD 0x81F0      POP      {R4-R8,PC}
    597          
    598          /**
    599          * @brief SPI MSP De-Initialization
    600          * This function freeze the hardware resources used in this example
    601          * @param hspi: SPI handle pointer
    602          * @retval None
    603          */

   \                                 In section .text, align 2, keep-with-next
    604          void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
    605          {
   \                     HAL_SPI_MspDeInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    606            if(hspi->Instance==SPI1)
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x....             LDR.N    R1,??DataTable15_15
   \        0x8   0x4288             CMP      R0,R1
   \        0xA   0xD10F             BNE.N    ??HAL_SPI_MspDeInit_0
    607            {
    608            /* USER CODE BEGIN SPI1_MspDeInit 0 */
    609          
    610            /* USER CODE END SPI1_MspDeInit 0 */
    611              /* Peripheral clock disable */
    612              __HAL_RCC_SPI1_CLK_DISABLE();
   \        0xC   0x....             LDR.N    R0,??DataTable15
   \        0xE   0x6801             LDR      R1,[R0, #+0]
   \       0x10   0xF431 0x5180      BICS     R1,R1,#0x1000
   \       0x14   0x6001             STR      R1,[R0, #+0]
    613          
    614              /**SPI1 GPIO Configuration
    615              PA5     ------> SPI1_SCK
    616              PA6     ------> SPI1_MISO
    617              PA7     ------> SPI1_MOSI
    618              */
    619              HAL_GPIO_DeInit(GPIOA, SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin);
   \       0x16   0x21E0             MOVS     R1,#+224
   \       0x18   0x....             LDR.N    R0,??DataTable15_9
   \       0x1A   0x.... 0x....      BL       HAL_GPIO_DeInit
    620          
    621              /* SPI1 DMA DeInit */
    622              HAL_DMA_DeInit(hspi->hdmatx);
   \       0x1E   0x6CA0             LDR      R0,[R4, #+72]
   \       0x20   0x.... 0x....      BL       HAL_DMA_DeInit
    623              HAL_DMA_DeInit(hspi->hdmarx);
   \       0x24   0x6CE0             LDR      R0,[R4, #+76]
   \       0x26   0x.... 0x....      BL       HAL_DMA_DeInit
   \       0x2A   0xE011             B.N      ??HAL_SPI_MspDeInit_1
    624            /* USER CODE BEGIN SPI1_MspDeInit 1 */
    625          
    626            /* USER CODE END SPI1_MspDeInit 1 */
    627            }
    628            else if(hspi->Instance==SPI2)
   \                     ??HAL_SPI_MspDeInit_0: (+1)
   \       0x2C   0x6820             LDR      R0,[R4, #+0]
   \       0x2E   0x....             LDR.N    R1,??DataTable15_20
   \       0x30   0x4288             CMP      R0,R1
   \       0x32   0xD10D             BNE.N    ??HAL_SPI_MspDeInit_1
    629            {
    630            /* USER CODE BEGIN SPI2_MspDeInit 0 */
    631          
    632            /* USER CODE END SPI2_MspDeInit 0 */
    633              /* Peripheral clock disable */
    634              __HAL_RCC_SPI2_CLK_DISABLE();
   \       0x34   0x....             LDR.N    R0,??DataTable15_1
   \       0x36   0x6801             LDR      R1,[R0, #+0]
   \       0x38   0xF431 0x4180      BICS     R1,R1,#0x4000
   \       0x3C   0x6001             STR      R1,[R0, #+0]
    635          
    636              /**SPI2 GPIO Configuration
    637              PC3     ------> SPI2_MOSI
    638              PB10     ------> SPI2_SCK
    639              */
    640              HAL_GPIO_DeInit(MOSI_GPIO_Port, MOSI_Pin);
   \       0x3E   0x2108             MOVS     R1,#+8
   \       0x40   0x....             LDR.N    R0,??DataTable15_5
   \       0x42   0x.... 0x....      BL       HAL_GPIO_DeInit
    641          
    642              HAL_GPIO_DeInit(SCK_GPIO_Port, SCK_Pin);
   \       0x46   0xF44F 0x6180      MOV      R1,#+1024
   \       0x4A   0x....             LDR.N    R0,??DataTable15_7
   \       0x4C   0x.... 0x....      BL       HAL_GPIO_DeInit
    643          
    644            /* USER CODE BEGIN SPI2_MspDeInit 1 */
    645          
    646            /* USER CODE END SPI2_MspDeInit 1 */
    647            }
    648          
    649          }
   \                     ??HAL_SPI_MspDeInit_1: (+1)
   \       0x50   0xBD10             POP      {R4,PC}
    650          
    651          /**
    652          * @brief TIM_PWM MSP Initialization
    653          * This function configures the hardware resources used in this example
    654          * @param htim_pwm: TIM_PWM handle pointer
    655          * @retval None
    656          */

   \                                 In section .text, align 2, keep-with-next
    657          void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
    658          {
   \                     HAL_TIM_PWM_MspInit: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
    659            if(htim_pwm->Instance==TIM3)
   \        0x2   0x6801             LDR      R1,[R0, #+0]
   \        0x4   0x....             LDR.N    R2,??DataTable15_21
   \        0x6   0x4291             CMP      R1,R2
   \        0x8   0xD10B             BNE.N    ??HAL_TIM_PWM_MspInit_0
    660            {
    661            /* USER CODE BEGIN TIM3_MspInit 0 */
    662          
    663            /* USER CODE END TIM3_MspInit 0 */
    664              /* Peripheral clock enable */
    665              __HAL_RCC_TIM3_CLK_ENABLE();
   \        0xA   0x2100             MOVS     R1,#+0
   \        0xC   0x9100             STR      R1,[SP, #+0]
   \        0xE   0x....             LDR.N    R1,??DataTable15_1
   \       0x10   0x680A             LDR      R2,[R1, #+0]
   \       0x12   0xF052 0x0202      ORRS     R2,R2,#0x2
   \       0x16   0x600A             STR      R2,[R1, #+0]
   \       0x18   0x6809             LDR      R1,[R1, #+0]
   \       0x1A   0xF011 0x0102      ANDS     R1,R1,#0x2
   \       0x1E   0x9100             STR      R1,[SP, #+0]
   \       0x20   0x9900             LDR      R1,[SP, #+0]
    666            /* USER CODE BEGIN TIM3_MspInit 1 */
    667          
    668            /* USER CODE END TIM3_MspInit 1 */
    669            }
    670          
    671          }
   \                     ??HAL_TIM_PWM_MspInit_0: (+1)
   \       0x22   0xB001             ADD      SP,SP,#+4
   \       0x24   0x4770             BX       LR
    672          

   \                                 In section .text, align 2, keep-with-next
    673          void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
    674          {
   \                     HAL_TIM_MspPostInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x2214             MOVS     R2,#+20
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0xA801             ADD      R0,SP,#+4
   \        0xC   0x.... 0x....      BL       memset
    675            GPIO_InitTypeDef GPIO_InitStruct = {0};
    676            if(htim->Instance==TIM3)
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0x....             LDR.N    R1,??DataTable15_21
   \       0x14   0x4288             CMP      R0,R1
   \       0x16   0xD119             BNE.N    ??HAL_TIM_MspPostInit_0
    677            {
    678            /* USER CODE BEGIN TIM3_MspPostInit 0 */
    679          
    680            /* USER CODE END TIM3_MspPostInit 0 */
    681          
    682              __HAL_RCC_GPIOC_CLK_ENABLE();
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0x....             LDR.N    R0,??DataTable15_4
   \       0x1E   0x6801             LDR      R1,[R0, #+0]
   \       0x20   0xF051 0x0104      ORRS     R1,R1,#0x4
   \       0x24   0x6001             STR      R1,[R0, #+0]
   \       0x26   0x6800             LDR      R0,[R0, #+0]
   \       0x28   0xF010 0x0004      ANDS     R0,R0,#0x4
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0x9800             LDR      R0,[SP, #+0]
    683              /**TIM3 GPIO Configuration
    684              PC7     ------> TIM3_CH2
    685              */
    686              GPIO_InitStruct.Pin = GPIO_PIN_7;
   \       0x30   0x2080             MOVS     R0,#+128
   \       0x32   0x9001             STR      R0,[SP, #+4]
    687              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \       0x34   0x2002             MOVS     R0,#+2
   \       0x36   0x9002             STR      R0,[SP, #+8]
    688              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \       0x38   0x2000             MOVS     R0,#+0
   \       0x3A   0x9003             STR      R0,[SP, #+12]
    689              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
   \       0x3C   0x2000             MOVS     R0,#+0
   \       0x3E   0x9004             STR      R0,[SP, #+16]
    690              GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
   \       0x40   0x2002             MOVS     R0,#+2
   \       0x42   0x9005             STR      R0,[SP, #+20]
    691              HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
   \       0x44   0xA901             ADD      R1,SP,#+4
   \       0x46   0x....             LDR.N    R0,??DataTable15_5
   \       0x48   0x.... 0x....      BL       HAL_GPIO_Init
    692          
    693            /* USER CODE BEGIN TIM3_MspPostInit 1 */
    694          
    695            /* USER CODE END TIM3_MspPostInit 1 */
    696            }
    697          
    698          }
   \                     ??HAL_TIM_MspPostInit_0: (+1)
   \       0x4C   0xB006             ADD      SP,SP,#+24
   \       0x4E   0xBD10             POP      {R4,PC}
    699          /**
    700          * @brief TIM_PWM MSP De-Initialization
    701          * This function freeze the hardware resources used in this example
    702          * @param htim_pwm: TIM_PWM handle pointer
    703          * @retval None
    704          */

   \                                 In section .text, align 2, keep-with-next
    705          void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef* htim_pwm)
    706          {
    707            if(htim_pwm->Instance==TIM3)
   \                     HAL_TIM_PWM_MspDeInit: (+1)
   \        0x0   0x6801             LDR      R1,[R0, #+0]
   \        0x2   0x....             LDR.N    R2,??DataTable15_21
   \        0x4   0x4291             CMP      R1,R2
   \        0x6   0xD104             BNE.N    ??HAL_TIM_PWM_MspDeInit_0
    708            {
    709            /* USER CODE BEGIN TIM3_MspDeInit 0 */
    710          
    711            /* USER CODE END TIM3_MspDeInit 0 */
    712              /* Peripheral clock disable */
    713              __HAL_RCC_TIM3_CLK_DISABLE();
   \        0x8   0x....             LDR.N    R1,??DataTable15_1
   \        0xA   0x680A             LDR      R2,[R1, #+0]
   \        0xC   0xF032 0x0202      BICS     R2,R2,#0x2
   \       0x10   0x600A             STR      R2,[R1, #+0]
    714            /* USER CODE BEGIN TIM3_MspDeInit 1 */
    715          
    716            /* USER CODE END TIM3_MspDeInit 1 */
    717            }
    718          
    719          }
   \                     ??HAL_TIM_PWM_MspDeInit_0: (+1)
   \       0x12   0x4770             BX       LR
    720          
    721          /**
    722          * @brief UART MSP Initialization
    723          * This function configures the hardware resources used in this example
    724          * @param huart: UART handle pointer
    725          * @retval None
    726          */

   \                                 In section .text, align 2, keep-with-next
    727          void HAL_UART_MspInit(UART_HandleTypeDef* huart)
    728          {
   \                     HAL_UART_MspInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x2214             MOVS     R2,#+20
   \        0x8   0x2100             MOVS     R1,#+0
   \        0xA   0xA801             ADD      R0,SP,#+4
   \        0xC   0x.... 0x....      BL       memset
    729            GPIO_InitTypeDef GPIO_InitStruct = {0};
    730            if(huart->Instance==USART1)
   \       0x10   0x6820             LDR      R0,[R4, #+0]
   \       0x12   0x....             LDR.N    R1,??DataTable15_22
   \       0x14   0x4288             CMP      R0,R1
   \       0x16   0xD12F             BNE.N    ??HAL_UART_MspInit_0
    731            {
    732            /* USER CODE BEGIN USART1_MspInit 0 */
    733          
    734            /* USER CODE END USART1_MspInit 0 */
    735              /* Peripheral clock enable */
    736              __HAL_RCC_USART1_CLK_ENABLE();
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0x9000             STR      R0,[SP, #+0]
   \       0x1C   0x....             LDR.N    R0,??DataTable15
   \       0x1E   0x6801             LDR      R1,[R0, #+0]
   \       0x20   0xF051 0x0110      ORRS     R1,R1,#0x10
   \       0x24   0x6001             STR      R1,[R0, #+0]
   \       0x26   0x6800             LDR      R0,[R0, #+0]
   \       0x28   0xF010 0x0010      ANDS     R0,R0,#0x10
   \       0x2C   0x9000             STR      R0,[SP, #+0]
   \       0x2E   0x9800             LDR      R0,[SP, #+0]
    737          
    738              __HAL_RCC_GPIOA_CLK_ENABLE();
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x....             LDR.N    R0,??DataTable15_4
   \       0x36   0x6801             LDR      R1,[R0, #+0]
   \       0x38   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0x3C   0x6001             STR      R1,[R0, #+0]
   \       0x3E   0x6800             LDR      R0,[R0, #+0]
   \       0x40   0xF010 0x0001      ANDS     R0,R0,#0x1
   \       0x44   0x9000             STR      R0,[SP, #+0]
   \       0x46   0x9800             LDR      R0,[SP, #+0]
    739              /**USART1 GPIO Configuration
    740              PA9     ------> USART1_TX
    741              PA10     ------> USART1_RX
    742              */
    743              GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
   \       0x48   0xF44F 0x60C0      MOV      R0,#+1536
   \       0x4C   0x9001             STR      R0,[SP, #+4]
    744              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \       0x4E   0x2002             MOVS     R0,#+2
   \       0x50   0x9002             STR      R0,[SP, #+8]
    745              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \       0x52   0x2000             MOVS     R0,#+0
   \       0x54   0x9003             STR      R0,[SP, #+12]
    746              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
   \       0x56   0x2003             MOVS     R0,#+3
   \       0x58   0x9004             STR      R0,[SP, #+16]
    747              GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
   \       0x5A   0x2007             MOVS     R0,#+7
   \       0x5C   0x9005             STR      R0,[SP, #+20]
    748              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \       0x5E   0xA901             ADD      R1,SP,#+4
   \       0x60   0x....             LDR.N    R0,??DataTable15_9
   \       0x62   0x.... 0x....      BL       HAL_GPIO_Init
    749          
    750              /* USART1 interrupt Init */
    751              HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
   \       0x66   0x2200             MOVS     R2,#+0
   \       0x68   0x2100             MOVS     R1,#+0
   \       0x6A   0x2025             MOVS     R0,#+37
   \       0x6C   0x.... 0x....      BL       HAL_NVIC_SetPriority
    752              HAL_NVIC_EnableIRQ(USART1_IRQn);
   \       0x70   0x2025             MOVS     R0,#+37
   \       0x72   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
   \       0x76   0xE031             B.N      ??HAL_UART_MspInit_1
    753            /* USER CODE BEGIN USART1_MspInit 1 */
    754          
    755            /* USER CODE END USART1_MspInit 1 */
    756            }
    757            else if(huart->Instance==USART2)
   \                     ??HAL_UART_MspInit_0: (+1)
   \       0x78   0x6820             LDR      R0,[R4, #+0]
   \       0x7A   0x....             LDR.N    R1,??DataTable15_23
   \       0x7C   0x4288             CMP      R0,R1
   \       0x7E   0xD12D             BNE.N    ??HAL_UART_MspInit_1
    758            {
    759            /* USER CODE BEGIN USART2_MspInit 0 */
    760          
    761            /* USER CODE END USART2_MspInit 0 */
    762              /* Peripheral clock enable */
    763              __HAL_RCC_USART2_CLK_ENABLE();
   \       0x80   0x2000             MOVS     R0,#+0
   \       0x82   0x9000             STR      R0,[SP, #+0]
   \       0x84   0x....             LDR.N    R0,??DataTable15_1
   \       0x86   0x6801             LDR      R1,[R0, #+0]
   \       0x88   0xF451 0x3100      ORRS     R1,R1,#0x20000
   \       0x8C   0x6001             STR      R1,[R0, #+0]
   \       0x8E   0x6800             LDR      R0,[R0, #+0]
   \       0x90   0xF410 0x3000      ANDS     R0,R0,#0x20000
   \       0x94   0x9000             STR      R0,[SP, #+0]
   \       0x96   0x9800             LDR      R0,[SP, #+0]
    764          
    765              __HAL_RCC_GPIOA_CLK_ENABLE();
   \       0x98   0x2000             MOVS     R0,#+0
   \       0x9A   0x9000             STR      R0,[SP, #+0]
   \       0x9C   0x....             LDR.N    R0,??DataTable15_4
   \       0x9E   0x6801             LDR      R1,[R0, #+0]
   \       0xA0   0xF051 0x0101      ORRS     R1,R1,#0x1
   \       0xA4   0x6001             STR      R1,[R0, #+0]
   \       0xA6   0x6800             LDR      R0,[R0, #+0]
   \       0xA8   0xF010 0x0001      ANDS     R0,R0,#0x1
   \       0xAC   0x9000             STR      R0,[SP, #+0]
   \       0xAE   0x9800             LDR      R0,[SP, #+0]
    766              /**USART2 GPIO Configuration
    767              PA2     ------> USART2_TX
    768              PA3     ------> USART2_RX
    769              */
    770              GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
   \       0xB0   0x200C             MOVS     R0,#+12
   \       0xB2   0x9001             STR      R0,[SP, #+4]
    771              GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
   \       0xB4   0x2002             MOVS     R0,#+2
   \       0xB6   0x9002             STR      R0,[SP, #+8]
    772              GPIO_InitStruct.Pull = GPIO_NOPULL;
   \       0xB8   0x2000             MOVS     R0,#+0
   \       0xBA   0x9003             STR      R0,[SP, #+12]
    773              GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
   \       0xBC   0x2003             MOVS     R0,#+3
   \       0xBE   0x9004             STR      R0,[SP, #+16]
    774              GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
   \       0xC0   0x2007             MOVS     R0,#+7
   \       0xC2   0x9005             STR      R0,[SP, #+20]
    775              HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
   \       0xC4   0xA901             ADD      R1,SP,#+4
   \       0xC6   0x....             LDR.N    R0,??DataTable15_9
   \       0xC8   0x.... 0x....      BL       HAL_GPIO_Init
    776          
    777              /* USART2 interrupt Init */
    778              HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
   \       0xCC   0x2200             MOVS     R2,#+0
   \       0xCE   0x2100             MOVS     R1,#+0
   \       0xD0   0x2026             MOVS     R0,#+38
   \       0xD2   0x.... 0x....      BL       HAL_NVIC_SetPriority
    779              HAL_NVIC_EnableIRQ(USART2_IRQn);
   \       0xD6   0x2026             MOVS     R0,#+38
   \       0xD8   0x.... 0x....      BL       HAL_NVIC_EnableIRQ
    780            /* USER CODE BEGIN USART2_MspInit 1 */
    781          
    782            /* USER CODE END USART2_MspInit 1 */
    783            }
    784          
    785          }
   \                     ??HAL_UART_MspInit_1: (+1)
   \       0xDC   0xB006             ADD      SP,SP,#+24
   \       0xDE   0xBD10             POP      {R4,PC}
    786          
    787          /**
    788          * @brief UART MSP De-Initialization
    789          * This function freeze the hardware resources used in this example
    790          * @param huart: UART handle pointer
    791          * @retval None
    792          */

   \                                 In section .text, align 2, keep-with-next
    793          void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
    794          {
   \                     HAL_UART_MspDeInit: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    795            if(huart->Instance==USART1)
   \        0x4   0x6820             LDR      R0,[R4, #+0]
   \        0x6   0x....             LDR.N    R1,??DataTable15_22
   \        0x8   0x4288             CMP      R0,R1
   \        0xA   0xD10D             BNE.N    ??HAL_UART_MspDeInit_0
    796            {
    797            /* USER CODE BEGIN USART1_MspDeInit 0 */
    798          
    799            /* USER CODE END USART1_MspDeInit 0 */
    800              /* Peripheral clock disable */
    801              __HAL_RCC_USART1_CLK_DISABLE();
   \        0xC   0x....             LDR.N    R0,??DataTable15
   \        0xE   0x6801             LDR      R1,[R0, #+0]
   \       0x10   0xF031 0x0110      BICS     R1,R1,#0x10
   \       0x14   0x6001             STR      R1,[R0, #+0]
    802          
    803              /**USART1 GPIO Configuration
    804              PA9     ------> USART1_TX
    805              PA10     ------> USART1_RX
    806              */
    807              HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
   \       0x16   0xF44F 0x61C0      MOV      R1,#+1536
   \       0x1A   0x....             LDR.N    R0,??DataTable15_9
   \       0x1C   0x.... 0x....      BL       HAL_GPIO_DeInit
    808          
    809              /* USART1 interrupt DeInit */
    810              HAL_NVIC_DisableIRQ(USART1_IRQn);
   \       0x20   0x2025             MOVS     R0,#+37
   \       0x22   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
   \       0x26   0xE00F             B.N      ??HAL_UART_MspDeInit_1
    811            /* USER CODE BEGIN USART1_MspDeInit 1 */
    812          
    813            /* USER CODE END USART1_MspDeInit 1 */
    814            }
    815            else if(huart->Instance==USART2)
   \                     ??HAL_UART_MspDeInit_0: (+1)
   \       0x28   0x6820             LDR      R0,[R4, #+0]
   \       0x2A   0x....             LDR.N    R1,??DataTable15_23
   \       0x2C   0x4288             CMP      R0,R1
   \       0x2E   0xD10B             BNE.N    ??HAL_UART_MspDeInit_1
    816            {
    817            /* USER CODE BEGIN USART2_MspDeInit 0 */
    818          
    819            /* USER CODE END USART2_MspDeInit 0 */
    820              /* Peripheral clock disable */
    821              __HAL_RCC_USART2_CLK_DISABLE();
   \       0x30   0x....             LDR.N    R0,??DataTable15_1
   \       0x32   0x6801             LDR      R1,[R0, #+0]
   \       0x34   0xF431 0x3100      BICS     R1,R1,#0x20000
   \       0x38   0x6001             STR      R1,[R0, #+0]
    822          
    823              /**USART2 GPIO Configuration
    824              PA2     ------> USART2_TX
    825              PA3     ------> USART2_RX
    826              */
    827              HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
   \       0x3A   0x210C             MOVS     R1,#+12
   \       0x3C   0x....             LDR.N    R0,??DataTable15_9
   \       0x3E   0x.... 0x....      BL       HAL_GPIO_DeInit
    828          
    829              /* USART2 interrupt DeInit */
    830              HAL_NVIC_DisableIRQ(USART2_IRQn);
   \       0x42   0x2026             MOVS     R0,#+38
   \       0x44   0x.... 0x....      BL       HAL_NVIC_DisableIRQ
    831            /* USER CODE BEGIN USART2_MspDeInit 1 */
    832          
    833            /* USER CODE END USART2_MspDeInit 1 */
    834            }
    835          
    836          }
   \                     ??HAL_UART_MspDeInit_1: (+1)
   \       0x48   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \        0x0   0x4002'3844        DC32     0x40023844

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \        0x0   0x4002'3840        DC32     0x40023840

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_2:
   \        0x0   0x4001'0000        DC32     0x40010000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_3:
   \        0x0   0x4001'2000        DC32     0x40012000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_4:
   \        0x0   0x4002'3830        DC32     0x40023830

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_5:
   \        0x0   0x4002'0800        DC32     0x40020800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_6:
   \        0x0   0x4000'5400        DC32     0x40005400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_7:
   \        0x0   0x4002'0400        DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_8:
   \        0x0   0x4000'5C00        DC32     0x40005c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_9:
   \        0x0   0x4002'0000        DC32     0x40020000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_10:
   \        0x0   0x4000'3C00        DC32     0x40003c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_11:
   \        0x0   0x....'....        DC32     hdma_i2s3_ext_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_12:
   \        0x0   0x4002'6010        DC32     0x40026010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_13:
   \        0x0   0x....'....        DC32     hdma_spi3_tx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_14:
   \        0x0   0x4002'6088        DC32     0x40026088

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_15:
   \        0x0   0x4001'3000        DC32     0x40013000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_16:
   \        0x0   0x....'....        DC32     hdma_spi1_tx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_17:
   \        0x0   0x4002'6458        DC32     0x40026458

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_18:
   \        0x0   0x....'....        DC32     hdma_spi1_rx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_19:
   \        0x0   0x4002'6410        DC32     0x40026410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_20:
   \        0x0   0x4000'3800        DC32     0x40003800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_21:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_22:
   \        0x0   0x4001'1000        DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_23:
   \        0x0   0x4000'4400        DC32     0x40004400
    837          
    838          /* USER CODE BEGIN 1 */
    839          
    840          /* USER CODE END 1 */
    841          
    842          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   HAL_ADC_MspDeInit
         8   -> HAL_GPIO_DeInit
      32   HAL_ADC_MspInit
        32   -> HAL_GPIO_Init
        32   -> memset
      16   HAL_I2C_MspDeInit
        16   -> HAL_GPIO_DeInit
        16   -> HAL_NVIC_DisableIRQ
      32   HAL_I2C_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> memset
       8   HAL_I2S_MspDeInit
         8   -> HAL_DMA_DeInit
         8   -> HAL_GPIO_DeInit
      56   HAL_I2S_MspInit
        56   -> Error_Handler
        56   -> HAL_DMA_Init
        56   -> HAL_GPIO_Init
        56   -> memset
       4   HAL_MspInit
       8   HAL_SPI_MspDeInit
         8   -> HAL_DMA_DeInit
         8   -> HAL_GPIO_DeInit
      48   HAL_SPI_MspInit
        48   -> Error_Handler
        48   -> HAL_DMA_Init
        48   -> HAL_GPIO_Init
        48   -> memset
       8   HAL_TIM_Base_MspDeInit
         8   -> HAL_NVIC_DisableIRQ
         8   -> HAL_TIM_Base_Stop_IT
      16   HAL_TIM_Base_MspInit
        16   -> HAL_NVIC_ClearPendingIRQ
        16   -> HAL_NVIC_EnableIRQ
        16   -> HAL_NVIC_SetPriority
        16   -> HAL_TIM_Base_Start_IT
      32   HAL_TIM_MspPostInit
        32   -> HAL_GPIO_Init
        32   -> memset
       0   HAL_TIM_PWM_MspDeInit
       4   HAL_TIM_PWM_MspInit
       8   HAL_UART_MspDeInit
         8   -> HAL_GPIO_DeInit
         8   -> HAL_NVIC_DisableIRQ
      32   HAL_UART_MspInit
        32   -> HAL_GPIO_Init
        32   -> HAL_NVIC_EnableIRQ
        32   -> HAL_NVIC_SetPriority
        32   -> memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable15_10
       4  ??DataTable15_11
       4  ??DataTable15_12
       4  ??DataTable15_13
       4  ??DataTable15_14
       4  ??DataTable15_15
       4  ??DataTable15_16
       4  ??DataTable15_17
       4  ??DataTable15_18
       4  ??DataTable15_19
       4  ??DataTable15_2
       4  ??DataTable15_20
       4  ??DataTable15_21
       4  ??DataTable15_22
       4  ??DataTable15_23
       4  ??DataTable15_3
       4  ??DataTable15_4
       4  ??DataTable15_5
       4  ??DataTable15_6
       4  ??DataTable15_7
       4  ??DataTable15_8
       4  ??DataTable15_9
      38  HAL_ADC_MspDeInit
     104  HAL_ADC_MspInit
     120  HAL_I2C_MspDeInit
     326  HAL_I2C_MspInit
      64  HAL_I2S_MspDeInit
     364  HAL_I2S_MspInit
      58  HAL_MspInit
      82  HAL_SPI_MspDeInit
     404  HAL_SPI_MspInit
      40  HAL_TIM_Base_MspDeInit
      70  HAL_TIM_Base_MspInit
      80  HAL_TIM_MspPostInit
      20  HAL_TIM_PWM_MspDeInit
      38  HAL_TIM_PWM_MspInit
      74  HAL_UART_MspDeInit
     224  HAL_UART_MspInit

 
 2'202 bytes in section .text
 
 2'202 bytes of CODE memory

Errors: none
Warnings: 1
