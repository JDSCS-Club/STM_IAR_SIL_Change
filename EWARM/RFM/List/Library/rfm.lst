###############################################################################
#
#                                                         29/Sep/2022  16:58:17
# IAR ANSI C/C++ Compiler V9.20.3.326/W64 for ARM Functional Safety
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                 =  thumb
#    Endian                   =  little
#    Source file              =  C:\D\Git_Hub\STM_IAR_SIL_Change\Library\rfm.c
#    Command line             =
#        -f C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\rfm.o.rsp
#        (C:\D\Git_Hub\STM_IAR_SIL_Change\Library\rfm.c -D USE_HAL_DRIVER -D
#        STM32F407xx -lC C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Library
#        -o C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.0 EWARM FS 9.20.3\arm\inc\c\DLib_Config_Full.h" -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/App\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/Target\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Core/Inc\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Include\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio/Si446x\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/display\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Library\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\display\fonts\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\STM32F4xx_HAL_Driver\Src\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.0 EWARM FS 9.20.3\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\rfm.o.d
#    Locale                   =  C
#    List file                =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Library\rfm.lst
#    Object file              =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\rfm.o
#    Runtime model:              
#      __CPP_Runtime          =  1
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  1
#      __dlib_version         =  6
#      __iar_require _Printf  =  flags,widths
#      __iar_require _Scanf      
#
###############################################################################

C:\D\Git_Hub\STM_IAR_SIL_Change\Library\rfm.c
      1          /*------------------------------------------------------------------------------------------
      2          	Project			: RFM
      3          	Description		: 
      4          
      5          	Writer			: $Author: zlkit $
      6          	Revision		: $Rev: 1891 $
      7          	Date			: 2019. 10.
      8          	Copyright		: Piranti Corp.	( sw@piranti.co.kr )
      9          	 
     10          	Revision History 
     11          	1. 2019. 10.	: Created
     12          -------------------------------------------------------------------------------------------*/
     13          
     14          //========================================================================
     15          // Header
     16          
     17          #include <stdio.h>			//	printf()
     18          
     19          #include <stdint.h>			//	uint32_t
     20          
     21          #include <string.h>			//	memset()
     22          
     23          #include "rfm.h"

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",293  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",311  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",419  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",457  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",462  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",484  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",510  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",518  Warning[Pe040]: 
          expected an identifier
     24          
     25          #include "RFMProtocol.h"            //  DevNone
     26          
     27          #include "Adafruit_SSD1306.h"       //  I2C LCD
     28          
     29          #include "version.h"			    //	Version Info
     30          
     31          #include "main.h"

  # warning unrecognized compiler
    ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",744  Warning[Pa183]: 
          #warning directive: unrecognized compiler

  typedef unsigned char U8;
                        ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",788  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned int U16;
                       ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",789  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned long U32;
                        ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",790  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed char S8;
                      ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",792  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed int S16;
                     ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",793  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed long S32;
                      ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",794  Warning[Pe301]: 
          typedef name has already been declared (with same type)
     32          
     33          #include "audio.h"                  //  WriteI2CCodec()
     34          
     35          #include "serial.h"					//  SerialInit()
     36          
     37          #include "keypad.h"					//	GetKey()
     38          
     39          #if defined(_WIN32)
     40          #else
     41          #include "radio.h"					//  bRadio_Check_Tx_RX()
     42          #include "si446x_api_lib.h"			//	Si446xCmd
     43          #endif
     44          
     45          #include "ProcPkt.h"				//	nTxPkt
     46          
     47          #include "diag.h"
     48          
     49          #include "flash_if.h"
     50          
     51          
     52          //========================================================================
     53          // Define
     54          
     55          //========================================================================
     56          

   \                                 In section .bss, align 1
     57          uint8_t		g_nDevID		=	DevNone;			//  Device ID ( 1 : RF900M / 2 : RF900T )
   \                     g_nDevID:
   \        0x0                      DS8 1
     58          

   \                                 In section .bss, align 1
     59          uint8_t		g_nDevFlag		=	DevFlagNone;		//  Device Flag ( Light )
   \                     g_nDevFlag:
   \        0x0                      DS8 1
     60          

   \                                 In section .bss, align 1
     61          uint8_t		g_idxTrainSet	=	0;	  				//  Train Set Index
   \                     g_idxTrainSet:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
     62          uint8_t		g_nCarNo		=	0;	  				//  Car Number
   \                     g_nCarNo:
   \        0x0                      DS8 1
     63          

   \                                 In section .data, align 1
     64          uint8_t		g_nChRx			=	ChTS1_1;			//  RF Rx Channel
   \                     g_nChRx:
   \        0x0   0x15               DC8 21
     65          

   \                                 In section .data, align 1
     66          uint8_t	 	g_nSpkLevel		=	DefaultSpkVol;		//  Default (1) - 0(Mute) / 1 / 2(Normal) / 3
   \                     g_nSpkLevel:
   \        0x0   0x01               DC8 1
     67          

   \                                 In section .bss, align 1
     68          uint8_t	 	g_nRFMMode 		=	RFMModeNormal;		//  eRFMMode
   \                     g_nRFMMode:
   \        0x0                      DS8 1
     69          

   \                                 In section .bss, align 1
     70          uint8_t		g_offsetCA		=	0;					//	충돌회피 Offset ( msec ) ( 0 ~ 1000 )
   \                     g_offsetCA:
   \        0x0                      DS8 1
     71          

   \                                 In section .bss, align 1
     72          uint8_t		g_nStampRxPkt	=	0;					//	방송/통화 Stamp
   \                     g_nStampRxPkt:
   \        0x0                      DS8 1
     73          

   \                                 In section .bss, align 1
     74          uint8_t		g_nRSSI			=	0;					//	RSSI Value
   \                     g_nRSSI:
   \        0x0                      DS8 1
     75          
     76          #if defined(USE_HOP_MANUAL)

   \                                 In section .bss, align 1
     77          uint8_t		g_nManHopping	=	0;					//	On(1) / Off(2) / Unused(0 : Other)
   \                     g_nManHopping:
   \        0x0                      DS8 1
     78          #endif	//	defined(USE_HOP_MANUAL)
     79          
     80          //	Device Stat

   \                                 In section .bss, align 4
     81          RFMDevStat		g_devStat[ MaxCarNo ] = { 0, };
   \                     g_devStat:
   \        0x0                      DS8 352
     82          
     83          //========================================================================
     84          
     85          //========================================================================
     86          // Function
     87          
     88          //========================================================================

   \                                 In section .text, align 2, keep-with-next
     89          uint8_t GetDevID    ( void )
     90          //========================================================================
     91          {
     92          	return (uint8_t)g_nDevID;
   \                     GetDevID: (+1)
   \        0x0   0x.... 0x....      LDR.W    R0,??DataTable39
   \        0x4   0x7800             LDRB     R0,[R0, #+0]
   \        0x6   0x4770             BX       LR
     93          }
     94          
     95          //========================================================================

   \                                 In section .text, align 2, keep-with-next
     96          void SetDevID    ( uint8_t nDevID )
     97          //========================================================================
     98          {
   \                     SetDevID: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
     99          	printf( "%s : %s(%d)\n", __func__,
    100          							( nDevID == DevRF900M )? "RFM":"RFT",
    101          							nDevID );
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0xB2C0             UXTB     R0,R0
   \        0x8   0x2801             CMP      R0,#+1
   \        0xA   0xD101             BNE.N    ??SetDevID_0
   \        0xC   0x....             ADR.N    R2,??DataTable15
   \        0xE   0xE000             B.N      ??SetDevID_1
   \                     ??SetDevID_0: (+1)
   \       0x10   0x....             ADR.N    R2,??DataTable15_1
   \                     ??SetDevID_1: (+1)
   \       0x12   0x0023             MOVS     R3,R4
   \       0x14   0xB2DB             UXTB     R3,R3
   \       0x16   0x.... 0x....      LDR.W    R1,??DataTable37_1
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable37_2
   \       0x1E   0x.... 0x....      BL       printf
    102          	g_nDevID = nDevID;
   \       0x22   0x.... 0x....      LDR.W    R0,??DataTable39
   \       0x26   0x7004             STRB     R4,[R0, #+0]
    103          }
   \       0x28   0xBD10             POP      {R4,PC}
    104          
    105          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    106          uint8_t		GetRFMMode	( void )
    107          //========================================================================
    108          {
    109          	return g_nRFMMode;
   \                     GetRFMMode: (+1)
   \        0x0   0x.... 0x....      LDR.W    R0,??DataTable37_3
   \        0x4   0x7800             LDRB     R0,[R0, #+0]
   \        0x6   0x4770             BX       LR
    110          }
    111          
    112          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    113          void	SetRFMMode	( uint8_t nRFMMode )
    114          //========================================================================
    115          {
   \                     SetRFMMode: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    116          	if ( g_nRFMMode != nRFMMode && nRFMMode == RFMModeNormal )
   \        0x4   0x.... 0x....      LDR.W    R5,??DataTable37_3
   \        0x8   0x7828             LDRB     R0,[R5, #+0]
   \        0xA   0x0021             MOVS     R1,R4
   \        0xC   0xB2C9             UXTB     R1,R1
   \        0xE   0x4288             CMP      R0,R1
   \       0x10   0xD005             BEQ.N    ??SetRFMMode_0
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0xB2C0             UXTB     R0,R0
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD101             BNE.N    ??SetRFMMode_0
    117          	{
    118          		//	타 모드에서 Normal 모드로 변경시 상태정보 ID Flag값 유지.
    119          		ReloadStampStat();
   \       0x1A   0x.... 0x....      BL       ReloadStampStat
    120          	}
    121          
    122          	if ( g_nRFMMode != nRFMMode )
   \                     ??SetRFMMode_0: (+1)
   \       0x1E   0x7828             LDRB     R0,[R5, #+0]
   \       0x20   0x0021             MOVS     R1,R4
   \       0x22   0xB2C9             UXTB     R1,R1
   \       0x24   0x4288             CMP      R0,R1
   \       0x26   0xD007             BEQ.N    ??SetRFMMode_1
    123          	{
    124          		//	타 모드에서 Normal 모드로 변경시 상태정보 ID Flag값 유지.
    125          		printf( "%s", StrRFMMode((int8_t) nRFMMode ) );
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0xB240             SXTB     R0,R0
   \       0x2C   0x.... 0x....      BL       StrRFMMode
   \       0x30   0x0001             MOVS     R1,R0
   \       0x32   0x....             ADR.N    R0,??DataTable17
   \       0x34   0x.... 0x....      BL       printf
    126          	}
    127          
    128          	g_nRFMMode = nRFMMode;
   \                     ??SetRFMMode_1: (+1)
   \       0x38   0x702C             STRB     R4,[R5, #+0]
    129          }
   \       0x3A   0xBD31             POP      {R0,R4,R5,PC}
    130          
    131          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    132          U8	*StrRFMMode		( int8_t nRFMMode )
    133          //========================================================================
    134          {
   \                     StrRFMMode: (+1)
   \        0x0   0x0001             MOVS     R1,R0
    135          	switch( nRFMMode )
   \        0x2   0x0008             MOVS     R0,R1
   \        0x4   0xB240             SXTB     R0,R0
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD006             BEQ.N    ??StrRFMMode_0
   \        0xA   0x2802             CMP      R0,#+2
   \        0xC   0xD00A             BEQ.N    ??StrRFMMode_1
   \        0xE   0xD306             BCC.N    ??StrRFMMode_2
   \       0x10   0x2804             CMP      R0,#+4
   \       0x12   0xD00D             BEQ.N    ??StrRFMMode_3
   \       0x14   0xD309             BCC.N    ??StrRFMMode_4
   \       0x16   0xE00E             B.N      ??StrRFMMode_5
    136          	{
    137          	case RFMModeNormal:		return (U8 *)"[Normal]";
   \                     ??StrRFMMode_0: (+1)
   \       0x18   0x.... 0x....      LDR.W    R0,??DataTable38
   \       0x1C   0xE00D             B.N      ??StrRFMMode_6
    138          	case RFMModeTx:			return (U8 *)"[Tx]";
   \                     ??StrRFMMode_2: (+1)
   \       0x1E   0x.... 0x....      LDR.W    R0,??DataTable38_1
   \       0x22   0xE00A             B.N      ??StrRFMMode_6
    139          	case RFMModeRx:			return (U8 *)"[Rx]";
   \                     ??StrRFMMode_1: (+1)
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable38_2
   \       0x28   0xE007             B.N      ??StrRFMMode_6
    140          	case RFMModeOcc:		return (U8 *)"[Occ]";
   \                     ??StrRFMMode_4: (+1)
   \       0x2A   0x.... 0x....      LDR.W    R0,??DataTable38_3
   \       0x2E   0xE004             B.N      ??StrRFMMode_6
    141          	case RFMModeUpgr:		return (U8 *)"[Upgr]";
   \                     ??StrRFMMode_3: (+1)
   \       0x30   0x.... 0x....      LDR.W    R0,??DataTable38_4
   \       0x34   0xE001             B.N      ??StrRFMMode_6
    142          	default:
    143          
    144          		break;
    145          
    146          
    147          	}
    148          
    149          	return (U8 *)"[N/A]";
   \                     ??StrRFMMode_5: (+1)
   \       0x36   0x.... 0x....      LDR.W    R0,??DataTable40
   \                     ??StrRFMMode_6: (+1)
   \       0x3A   0x4770             BX       LR
    150          
    151          }
    152          
    153          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    154          uint8_t	GetRFTID( void )	//	송신기 ID
    155          //========================================================================
    156          {
    157          	//	송신기 ID 얻기.
    158          	//========================================================================
    159          	//	송신기 #1 / #2
    160          	//	ChTx_1			=	8,			//	* CH8 : 송신기#1 - (Car No : 11)
    161          	//	ChTx_2			=	9,			//	* CH9 : 송신기#2 - (Car No : 12)
    162          	if ( g_nCarNo == (uint8_t)RFTCarNo1 )
   \                     GetRFTID: (+1)
   \        0x0   0x.... 0x....      LDR.W    R0,??DataTable40_1
   \        0x4   0x7801             LDRB     R1,[R0, #+0]
   \        0x6   0x290B             CMP      R1,#+11
   \        0x8   0xD101             BNE.N    ??GetRFTID_0
    163          	{
    164          		return (uint8_t)1;			//	11
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0xE005             B.N      ??GetRFTID_1
    165          	}
    166          	else if ( g_nCarNo == (uint8_t)RFTCarNo2 )
   \                     ??GetRFTID_0: (+1)
   \        0xE   0x7800             LDRB     R0,[R0, #+0]
   \       0x10   0x280C             CMP      R0,#+12
   \       0x12   0xD101             BNE.N    ??GetRFTID_2
    167          	{
    168          		return (uint8_t)2;		//	12
   \       0x14   0x2002             MOVS     R0,#+2
   \       0x16   0xE000             B.N      ??GetRFTID_1
    169          	}
    170          	else
    171          	{
    172          		return (uint8_t)0;
   \                     ??GetRFTID_2: (+1)
   \       0x18   0x2000             MOVS     R0,#+0
   \                     ??GetRFTID_1: (+1)
   \       0x1A   0x4770             BX       LR
    173          	}
    174          
    175          	//========================================================================
    176          }
    177          
    178          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    179          uint8_t GetChRx( void )
    180          //========================================================================
    181          {
   \                     GetChRx: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    182          	//	Get Self Rx Channel
    183          
    184          	//========================================================================
    185          #if defined(USE_CH_ISO_DEV)
    186          
    187          	if ( GetDevID() == DevRF900T )
   \        0x2   0x.... 0x....      BL       GetDevID
   \        0x6   0x2802             CMP      R0,#+2
   \        0x8   0xD10B             BNE.N    ??GetChRx_0
    188          	{
    189          		//========================================================================
    190          		//	송신기 #1 / #2
    191          		//	ChTx_1			=	8,			//	* CH8 : 송신기#1 - (Car No : 11)
    192          		//	ChTx_2			=	9,			//	* CH9 : 송신기#2 - (Car No : 12)
    193          		return (uint8_t)(ChTx_1 + ( ( g_nCarNo + 1) % 2 ));	// 현재 호차 채널
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable40_1
   \        0xE   0x7800             LDRB     R0,[R0, #+0]
   \       0x10   0x1C40             ADDS     R0,R0,#+1
   \       0x12   0x2102             MOVS     R1,#+2
   \       0x14   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \       0x18   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \       0x1C   0x3008             ADDS     R0,R0,#+8
   \       0x1E   0xB2C0             UXTB     R0,R0
   \       0x20   0xE00B             B.N      ??GetChRx_1
    194          		//========================================================================
    195          	}
    196          	else if ( GetDevID() == DevRF900M )
   \                     ??GetChRx_0: (+1)
   \       0x22   0x.... 0x....      BL       GetDevID
   \       0x26   0x2801             CMP      R0,#+1
   \       0x28   0xD106             BNE.N    ??GetChRx_2
    197          	{
    198          		//========================================================================
    199          		//	수신기.
    200          		//	ChTS1_1			=	11,			//	* CH11 : 1편성 ( 1호차 )
    201          		//	ChTS1_2			=	12,			//	* CH12 : 1편성 ( 2호차 )
    202          		//
    203          		//		...
    204          		//
    205          		//	ChTS1_10		=	20,			//	* CH20 : 1편성 ( 10호차 )
    206          		return (uint8_t)( ChTS1_1 + (( g_nCarNo - 1 )*ChGap));	// 현재 호차 채널
   \       0x2A   0x.... 0x....      LDR.W    R0,??DataTable40_1
   \       0x2E   0x7800             LDRB     R0,[R0, #+0]
   \       0x30   0x0080             LSLS     R0,R0,#+2
   \       0x32   0x3011             ADDS     R0,R0,#+17
   \       0x34   0xB2C0             UXTB     R0,R0
   \       0x36   0xE000             B.N      ??GetChRx_1
    207          		//========================================================================
    208          	}
    209          
    210          #else
    211          	//========================================================================
    212          	//	CH1 : 1, 3, 5
    213          	//	CH2 :  2, 4, 6
    214          	return (uint8_t)(ChTS1_1 + (g_idxTrainSet * 2) + ( ( g_nCarNo + 1 ) % 2 ));	// 현재 호차 채널
    215          #endif
    216          	//========================================================================
    217          
    218          	return (uint8_t)0;
   \                     ??GetChRx_2: (+1)
   \       0x38   0x2000             MOVS     R0,#+0
   \                     ??GetChRx_1: (+1)
   \       0x3A   0xBD02             POP      {R1,PC}
    219          }
    220          
    221          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    222          uint8_t		GetChOtherRFT	( void )			//	타 송신기 채널.
    223          //========================================================================
    224          {
    225          	//========================================================================
    226          	//	송신기 #1 / #2
    227          	//	ChTx_1			=	8,				//	* CH8 : 송신기#1 - (Car No : 11)
    228          	//	ChTx_2			=	9,				//	* CH9 : 송신기#2 - (Car No : 12)
    229          //	return ChTx_1 + ( g_nCarNo % 2 );		// Self 송신기 채널
    230          	return ChTx_1 + ( ( g_nCarNo ) % 2 );	// Other 송신기 채널
   \                     GetChOtherRFT: (+1)
   \        0x0   0x.... 0x....      LDR.W    R0,??DataTable40_1
   \        0x4   0x7800             LDRB     R0,[R0, #+0]
   \        0x6   0x2102             MOVS     R1,#+2
   \        0x8   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \        0xC   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \       0x10   0x3008             ADDS     R0,R0,#+8
   \       0x12   0xB2C0             UXTB     R0,R0
   \       0x14   0x4770             BX       LR
    231          	//========================================================================
    232          }
    233          
    234          
    235          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    236          uint8_t		IsNearRFT	( void )			//	가까운 송신기 존재 유무 확인.
    237          //========================================================================
    238          {
   \                     IsNearRFT: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
    239          	uint8_t nCh = ChTS1_1;		//	Default
   \        0x2   0x2015             MOVS     R0,#+21
    240          
    241          	//	가장가까운 호차 검색.
    242          	uint8_t nMaxRSSI = 0;
   \        0x4   0x2100             MOVS     R1,#+0
    243          	for ( uint8_t idx = 1; idx <= 10; idx++ )
   \        0x6   0x2201             MOVS     R2,#+1
   \                     ??IsNearRFT_0: (+1)
   \        0x8   0x0013             MOVS     R3,R2
   \        0xA   0xB2DB             UXTB     R3,R3
   \        0xC   0x2B0B             CMP      R3,#+11
   \        0xE   0xDA1A             BGE.N    ??IsNearRFT_1
    244          	{
    245          		//	Car #1 ~ #10
    246          		if ( (g_devStat[idx].nRSSI) > nMaxRSSI )
   \       0x10   0x231B             MOVS     R3,#+27
   \       0x12   0x.... 0x....      LDR.W    R4,??DataTable40_2
   \       0x16   0x000D             MOVS     R5,R1
   \       0x18   0x0016             MOVS     R6,R2
   \       0x1A   0xB2F6             UXTB     R6,R6
   \       0x1C   0x435E             MULS     R6,R3,R6
   \       0x1E   0x4426             ADD      R6,R4,R6
   \       0x20   0x7EB6             LDRB     R6,[R6, #+26]
   \       0x22   0xB2ED             UXTB     R5,R5
   \       0x24   0x42B5             CMP      R5,R6
   \       0x26   0xD20C             BCS.N    ??IsNearRFT_2
    247          		{
    248          			nCh = g_devStat[idx].stat.nChRx;		//	채널 설정.
   \       0x28   0x0015             MOVS     R5,R2
   \       0x2A   0xB2ED             UXTB     R5,R5
   \       0x2C   0x435D             MULS     R5,R3,R5
   \       0x2E   0x4425             ADD      R5,R4,R5
   \       0x30   0x7AAD             LDRB     R5,[R5, #+10]
   \       0x32   0x0028             MOVS     R0,R5
    249          			nMaxRSSI = g_devStat[idx].nRSSI;
   \       0x34   0x0015             MOVS     R5,R2
   \       0x36   0xB2ED             UXTB     R5,R5
   \       0x38   0xFB03 0xF305      MUL      R3,R3,R5
   \       0x3C   0x4423             ADD      R3,R4,R3
   \       0x3E   0x7E9B             LDRB     R3,[R3, #+26]
   \       0x40   0x0019             MOVS     R1,R3
    250          		}
    251          	}
   \                     ??IsNearRFT_2: (+1)
   \       0x42   0x1C52             ADDS     R2,R2,#+1
   \       0x44   0xE7E0             B.N      ??IsNearRFT_0
    252          
    253          	return nCh;
   \                     ??IsNearRFT_1: (+1)
   \       0x46   0xB2C0             UXTB     R0,R0
   \       0x48   0xBC70             POP      {R4-R6}
   \       0x4A   0x4770             BX       LR
    254          }
    255          
    256          
    257          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    258          uint8_t		GetChNearRFT	( void )			//	가장 가까운 송신기 채널.
    259          //========================================================================
    260          {
   \                     GetChNearRFT: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
    261          	uint8_t nCh = 0;		//	Default
   \        0x2   0x2000             MOVS     R0,#+0
    262          
    263          	//	가장가까운 송신기 검색.
    264          	uint8_t nMaxRSSI = 0;
   \        0x4   0x2100             MOVS     R1,#+0
    265          	for ( uint8_t idx = 11; idx <= 12; idx++ )			//	송신기 채널 검색.
   \        0x6   0x220B             MOVS     R2,#+11
   \                     ??GetChNearRFT_0: (+1)
   \        0x8   0x0013             MOVS     R3,R2
   \        0xA   0xB2DB             UXTB     R3,R3
   \        0xC   0x2B0D             CMP      R3,#+13
   \        0xE   0xDA1A             BGE.N    ??GetChNearRFT_1
    266          	{
    267          		//	Car #1 ~ #10
    268          		if ( g_devStat[idx].nRSSI > nMaxRSSI )
   \       0x10   0x231B             MOVS     R3,#+27
   \       0x12   0x.... 0x....      LDR.W    R4,??DataTable40_2
   \       0x16   0x000D             MOVS     R5,R1
   \       0x18   0x0016             MOVS     R6,R2
   \       0x1A   0xB2F6             UXTB     R6,R6
   \       0x1C   0x435E             MULS     R6,R3,R6
   \       0x1E   0x4426             ADD      R6,R4,R6
   \       0x20   0x7EB6             LDRB     R6,[R6, #+26]
   \       0x22   0xB2ED             UXTB     R5,R5
   \       0x24   0x42B5             CMP      R5,R6
   \       0x26   0xD20C             BCS.N    ??GetChNearRFT_2
    269          		{
    270          			nCh = g_devStat[idx].stat.nChRx;		//	채널 설정.
   \       0x28   0x0015             MOVS     R5,R2
   \       0x2A   0xB2ED             UXTB     R5,R5
   \       0x2C   0x435D             MULS     R5,R3,R5
   \       0x2E   0x4425             ADD      R5,R4,R5
   \       0x30   0x7AAD             LDRB     R5,[R5, #+10]
   \       0x32   0x0028             MOVS     R0,R5
    271          			nMaxRSSI = g_devStat[idx].nRSSI;
   \       0x34   0x0015             MOVS     R5,R2
   \       0x36   0xB2ED             UXTB     R5,R5
   \       0x38   0xFB03 0xF305      MUL      R3,R3,R5
   \       0x3C   0x4423             ADD      R3,R4,R3
   \       0x3E   0x7E9B             LDRB     R3,[R3, #+26]
   \       0x40   0x0019             MOVS     R1,R3
    272          		}
    273          	}
   \                     ??GetChNearRFT_2: (+1)
   \       0x42   0x1C52             ADDS     R2,R2,#+1
   \       0x44   0xE7E0             B.N      ??GetChNearRFT_0
    274          
    275          	return nCh;
   \                     ??GetChNearRFT_1: (+1)
   \       0x46   0xB2C0             UXTB     R0,R0
   \       0x48   0xBC70             POP      {R4-R6}
   \       0x4A   0x4770             BX       LR
    276          }
    277          
    278          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    279          uint8_t		GetChNearRFM	( void )			//	가장 가까운 수신기 채널.
    280          //========================================================================
    281          {
   \                     GetChNearRFM: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
    282          	uint8_t nCh = ChTS1_1;		//	Default
   \        0x2   0x2015             MOVS     R0,#+21
    283          
    284          	//	가장가까운 호차 검색.
    285          	uint8_t nMaxRSSI = 0;
   \        0x4   0x2100             MOVS     R1,#+0
    286          	for ( uint8_t idx = 1; idx <= 10; idx++ )
   \        0x6   0x2201             MOVS     R2,#+1
   \                     ??GetChNearRFM_0: (+1)
   \        0x8   0x0013             MOVS     R3,R2
   \        0xA   0xB2DB             UXTB     R3,R3
   \        0xC   0x2B0B             CMP      R3,#+11
   \        0xE   0xDA1A             BGE.N    ??GetChNearRFM_1
    287          	{
    288          		//	Car #1 ~ #10
    289          		if ( g_devStat[idx].nRSSI > nMaxRSSI )
   \       0x10   0x231B             MOVS     R3,#+27
   \       0x12   0x.... 0x....      LDR.W    R4,??DataTable40_2
   \       0x16   0x000D             MOVS     R5,R1
   \       0x18   0x0016             MOVS     R6,R2
   \       0x1A   0xB2F6             UXTB     R6,R6
   \       0x1C   0x435E             MULS     R6,R3,R6
   \       0x1E   0x4426             ADD      R6,R4,R6
   \       0x20   0x7EB6             LDRB     R6,[R6, #+26]
   \       0x22   0xB2ED             UXTB     R5,R5
   \       0x24   0x42B5             CMP      R5,R6
   \       0x26   0xD20C             BCS.N    ??GetChNearRFM_2
    290          		{
    291          			nCh = g_devStat[idx].stat.nChRx;		//	채널 설정.
   \       0x28   0x0015             MOVS     R5,R2
   \       0x2A   0xB2ED             UXTB     R5,R5
   \       0x2C   0x435D             MULS     R5,R3,R5
   \       0x2E   0x4425             ADD      R5,R4,R5
   \       0x30   0x7AAD             LDRB     R5,[R5, #+10]
   \       0x32   0x0028             MOVS     R0,R5
    292          			nMaxRSSI = g_devStat[idx].nRSSI;
   \       0x34   0x0015             MOVS     R5,R2
   \       0x36   0xB2ED             UXTB     R5,R5
   \       0x38   0xFB03 0xF305      MUL      R3,R3,R5
   \       0x3C   0x4423             ADD      R3,R4,R3
   \       0x3E   0x7E9B             LDRB     R3,[R3, #+26]
   \       0x40   0x0019             MOVS     R1,R3
    293          		}
    294          	}
   \                     ??GetChNearRFM_2: (+1)
   \       0x42   0x1C52             ADDS     R2,R2,#+1
   \       0x44   0xE7E0             B.N      ??GetChNearRFM_0
    295          
    296          	return nCh;
   \                     ??GetChNearRFM_1: (+1)
   \       0x46   0xB2C0             UXTB     R0,R0
   \       0x48   0xBC70             POP      {R4-R6}
   \       0x4A   0x4770             BX       LR
    297          }
    298          
    299          //========================================================================
    300          //	방송채널 : 송신기에서 수신기로 송신할 방송채널 설정.

   \                                 In section .data, align 1
    301          uint8_t		g_nChPA	=	ChTS1_1;		//	Default
   \                     g_nChPA:
   \        0x0   0x15               DC8 21
    302          
    303          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    304          void	SetChPA( uint8_t nCh )
    305          //========================================================================
    306          {
    307          	//	방송채널 설정.
    308          	g_nChPA	= nCh;
   \                     SetChPA: (+1)
   \        0x0   0x.... 0x....      LDR.W    R1,??DataTable40_3
   \        0x4   0x7008             STRB     R0,[R1, #+0]
    309          }
   \        0x6   0x4770             BX       LR
    310          
    311          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    312          uint8_t		GetChPA( void )
    313          //========================================================================
    314          {
    315          	//	방송채널 설정.
    316          	return g_nChPA;
   \                     GetChPA: (+1)
   \        0x0   0x.... 0x....      LDR.W    R0,??DataTable40_3
   \        0x4   0x7800             LDRB     R0,[R0, #+0]
   \        0x6   0x4770             BX       LR
    317          }
    318          

   \                                 In section .bss, align 1
    319          uint8_t		g_nChRFT	=	0;		//	Default
   \                     g_nChRFT:
   \        0x0                      DS8 1
    320          
    321          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    322          void	SetChPARFT( uint8_t nCh )	//	가까운 송신기 채널(방송/통화용) 설정.
    323          //========================================================================
    324          {
    325          	//	방송채널 설정.
    326          	g_nChRFT	= nCh;
   \                     SetChPARFT: (+1)
   \        0x0   0x.... 0x....      LDR.W    R1,??DataTable40_4
   \        0x4   0x7008             STRB     R0,[R1, #+0]
    327          }
   \        0x6   0x4770             BX       LR
    328          
    329          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    330          uint8_t		GetChPARFT( void )		//	가까운 송신기 채널(방송/통화용) 설정.
    331          //========================================================================
    332          {
    333          	//	방송채널 설정.
    334          	return g_nChRFT;
   \                     GetChPARFT: (+1)
   \        0x0   0x.... 0x....      LDR.W    R0,??DataTable40_4
   \        0x4   0x7800             LDRB     R0,[R0, #+0]
   \        0x6   0x4770             BX       LR
    335          }
    336          
    337          //========================================================================
    338          
    339          #include "eeprom.h"    //  EEPROM
    340          
    341          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    342          int8_t		LoadTrainSetIdx	( void )
    343          //========================================================================
    344          {
   \                     LoadTrainSetIdx: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
    345              uint8_t     idxTrainSet = 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0xF88D 0x0004      STRB     R0,[SP, #+4]
    346          
    347              if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), (uint32_t)2, (uint32_t)2 ) )
   \        0x8   0x.... 0x....      LDR.W    R4,??DataTable39_2
   \        0xC   0x2302             MOVS     R3,#+2
   \        0xE   0x2202             MOVS     R2,#+2
   \       0x10   0x21A0             MOVS     R1,#+160
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD00A             BEQ.N    ??LoadTrainSetIdx_0
    348              {
    349                  printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
   \       0x1C   0xF240 0x125D      MOVW     R2,#+349
   \       0x20   0x.... 0x....      LDR.W    R1,??DataTable39_3
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable39_4
   \       0x28   0x.... 0x....      BL       printf
    350          
    351                  return (int8_t)-1;
   \       0x2C   0xF05F 0x30FF      MOVS     R0,#+4294967295
   \       0x30   0xE018             B.N      ??LoadTrainSetIdx_1
    352              }
    353          
    354          //    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x10, (uint8_t *)&idxTrainSet, 1 );
    355              M24_HAL_ReadBytes( &hi2c1, (uint16_t)0xA0,(uint16_t) AddrEEPTrainSet, (uint8_t *)&idxTrainSet,(uint16_t) 1 );
   \                     ??LoadTrainSetIdx_0: (+1)
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0x9000             STR      R0,[SP, #+0]
   \       0x36   0xAB01             ADD      R3,SP,#+4
   \       0x38   0x2210             MOVS     R2,#+16
   \       0x3A   0x21A0             MOVS     R1,#+160
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       M24_HAL_ReadBytes
    356          
    357              if ( GetDbg() > 0 )
   \       0x42   0x.... 0x....      BL       GetDbg
   \       0x46   0x2801             CMP      R0,#+1
   \       0x48   0xDB09             BLT.N    ??LoadTrainSetIdx_2
    358              {
    359              	printf( "%s(%d) - %d\n", __func__, __LINE__, idxTrainSet );
   \       0x4A   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \       0x4E   0xF240 0x1267      MOVW     R2,#+359
   \       0x52   0x.... 0x....      LDR.W    R1,??DataTable39_3
   \       0x56   0x.... 0x....      LDR.W    R0,??DataTable40_6
   \       0x5A   0x.... 0x....      BL       printf
    360              }
    361          
    362              return (int8_t)idxTrainSet;
   \                     ??LoadTrainSetIdx_2: (+1)
   \       0x5E   0xF99D 0x0004      LDRSB    R0,[SP, #+4]
   \       0x62   0xB240             SXTB     R0,R0
   \                     ??LoadTrainSetIdx_1: (+1)
   \       0x64   0xBD16             POP      {R1,R2,R4,PC}
    363          }
    364          
    365          
    366          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    367          uint8_t		GetTrainSetIdx		( void )
    368          //========================================================================
    369          {
   \                     GetTrainSetIdx: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    370          	static uint8_t s_bOnce 			=	0;
    371          
    372          	if ( s_bOnce == 0 )
   \        0x2   0x.... 0x....      LDR.W    R4,??DataTable39_5
   \        0x6   0x7820             LDRB     R0,[R4, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD106             BNE.N    ??GetTrainSetIdx_0
    373          	{
    374          		//	초기로딩시 I2C에서 Load
    375          		g_idxTrainSet =(uint8_t) LoadTrainSetIdx();
   \        0xC   0x.... 0x....      BL       LoadTrainSetIdx
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable40_7
   \       0x14   0x7008             STRB     R0,[R1, #+0]
    376          		s_bOnce = 1;
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0x7020             STRB     R0,[R4, #+0]
    377          	}
    378          
    379          	return g_idxTrainSet;
   \                     ??GetTrainSetIdx_0: (+1)
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable40_7
   \       0x1E   0x7800             LDRB     R0,[R0, #+0]
   \       0x20   0xBD10             POP      {R4,PC}
    380          }

   \                                 In section .bss, align 1
   \                     `GetTrainSetIdx::s_bOnce`:
   \        0x0                      DS8 1
    381          
    382          
    383          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    384          void	SetTrainSetIdx	( uint8_t idxTrainSet )
    385          //========================================================================
    386          {
   \                     SetTrainSetIdx: (+1)
   \        0x0   0xB511             PUSH     {R0,R4,LR}
   \        0x2   0xB081             SUB      SP,SP,#+4
    387          	g_idxTrainSet = idxTrainSet;
   \        0x4   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \        0x8   0x.... 0x....      LDR.W    R1,??DataTable40_7
   \        0xC   0x7008             STRB     R0,[R1, #+0]
    388          
    389              if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ),(uint32_t) 2,(uint32_t) 2 ) )
   \        0xE   0x.... 0x....      LDR.W    R4,??DataTable39_2
   \       0x12   0x2302             MOVS     R3,#+2
   \       0x14   0x2202             MOVS     R2,#+2
   \       0x16   0x21A0             MOVS     R1,#+160
   \       0x18   0x0020             MOVS     R0,R4
   \       0x1A   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD008             BEQ.N    ??SetTrainSetIdx_0
    390              {
    391                  printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
   \       0x22   0xF240 0x1287      MOVW     R2,#+391
   \       0x26   0x.... 0x....      LDR.W    R1,??DataTable40_8
   \       0x2A   0x.... 0x....      LDR.W    R0,??DataTable39_4
   \       0x2E   0x.... 0x....      BL       printf
    392          
    393                  return ;
   \       0x32   0xE015             B.N      ??SetTrainSetIdx_1
    394              }
    395          
    396              if ( GetDbg() > 0 )
   \                     ??SetTrainSetIdx_0: (+1)
   \       0x34   0x.... 0x....      BL       GetDbg
   \       0x38   0x2801             CMP      R0,#+1
   \       0x3A   0xDB09             BLT.N    ??SetTrainSetIdx_2
    397              {
    398              	printf( "%s(%d) - %d\n", __func__, __LINE__, idxTrainSet );
   \       0x3C   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \       0x40   0xF44F 0x72C7      MOV      R2,#+398
   \       0x44   0x.... 0x....      LDR.W    R1,??DataTable40_8
   \       0x48   0x.... 0x....      LDR.W    R0,??DataTable40_6
   \       0x4C   0x.... 0x....      BL       printf
    399              }
    400          //    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x10, (uint8_t *)&idxTrainSet, 1 );
    401              M24_HAL_WriteBytes( &hi2c1,(uint16_t) 0xA0, (uint16_t)AddrEEPTrainSet, (uint8_t *)&idxTrainSet, (uint16_t)1 );
   \                     ??SetTrainSetIdx_2: (+1)
   \       0x50   0x2001             MOVS     R0,#+1
   \       0x52   0x9000             STR      R0,[SP, #+0]
   \       0x54   0xAB01             ADD      R3,SP,#+4
   \       0x56   0x2210             MOVS     R2,#+16
   \       0x58   0x21A0             MOVS     R1,#+160
   \       0x5A   0x0020             MOVS     R0,R4
   \       0x5C   0x.... 0x....      BL       M24_HAL_WriteBytes
    402          }
   \                     ??SetTrainSetIdx_1: (+1)
   \       0x60   0xBD13             POP      {R0,R1,R4,PC}
    403          
    404          #if defined(USE_HOP_MANUAL)
    405          
    406          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    407          int8_t		GetManHop	( void )
    408          //========================================================================
    409          {
   \                     GetManHop: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
    410              int8_t     nManHop = 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0xF88D 0x0004      STRB     R0,[SP, #+4]
    411          
    412              if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), (uint32_t)2, (uint32_t)2 ) )
   \        0x8   0x.... 0x....      LDR.W    R4,??DataTable39_2
   \        0xC   0x2302             MOVS     R3,#+2
   \        0xE   0x2202             MOVS     R2,#+2
   \       0x10   0x21A0             MOVS     R1,#+160
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD00A             BEQ.N    ??GetManHop_0
    413              {
    414                  printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
   \       0x1C   0xF44F 0x72CF      MOV      R2,#+414
   \       0x20   0x.... 0x....      LDR.W    R1,??DataTable40_9
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable39_4
   \       0x28   0x.... 0x....      BL       printf
    415          
    416                  return (int8_t)-1;
   \       0x2C   0xF05F 0x30FF      MOVS     R0,#+4294967295
   \       0x30   0xE022             B.N      ??GetManHop_1
    417              }
    418          
    419          //    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x0D, (uint8_t *)&nManHop, 1 );
    420              M24_HAL_ReadBytes( &hi2c1,(uint16_t) 0xA0, (uint16_t)AddrEEPManHop, (uint8_t *)&nManHop,(uint16_t) 1 );
   \                     ??GetManHop_0: (+1)
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0x9000             STR      R0,[SP, #+0]
   \       0x36   0xAB01             ADD      R3,SP,#+4
   \       0x38   0x220D             MOVS     R2,#+13
   \       0x3A   0x21A0             MOVS     R1,#+160
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       M24_HAL_ReadBytes
    421          
    422          //    if ( nManHop > 2 || nManHop < 0 ) nManHop = 0;
    423              if ( (nManHop > 2) || (nManHop < 0))
   \       0x42   0xF99D 0x0004      LDRSB    R0,[SP, #+4]
   \       0x46   0x2803             CMP      R0,#+3
   \       0x48   0xDA03             BGE.N    ??GetManHop_2
   \       0x4A   0xF99D 0x0004      LDRSB    R0,[SP, #+4]
   \       0x4E   0x2800             CMP      R0,#+0
   \       0x50   0xD502             BPL.N    ??GetManHop_3
    424              {
    425              	nManHop = (int8_t)DEFAULT_HOP_MAN_VAL;	//	Default Hop Man
   \                     ??GetManHop_2: (+1)
   \       0x52   0x2002             MOVS     R0,#+2
   \       0x54   0xF88D 0x0004      STRB     R0,[SP, #+4]
    426              }
    427          
    428              if ( GetDbg() > 0 )
   \                     ??GetManHop_3: (+1)
   \       0x58   0x.... 0x....      BL       GetDbg
   \       0x5C   0x2801             CMP      R0,#+1
   \       0x5E   0xDB09             BLT.N    ??GetManHop_4
    429              {
    430              	printf( "%s(%d) - %d\n", __func__, __LINE__, nManHop );
   \       0x60   0xF99D 0x3004      LDRSB    R3,[SP, #+4]
   \       0x64   0xF44F 0x72D7      MOV      R2,#+430
   \       0x68   0x.... 0x....      LDR.W    R1,??DataTable40_9
   \       0x6C   0x.... 0x....      LDR.W    R0,??DataTable40_6
   \       0x70   0x.... 0x....      BL       printf
    431              }
    432          
    433              return (int8_t)nManHop;
   \                     ??GetManHop_4: (+1)
   \       0x74   0xF99D 0x0004      LDRSB    R0,[SP, #+4]
   \                     ??GetManHop_1: (+1)
   \       0x78   0xBD16             POP      {R1,R2,R4,PC}
    434          }
    435          
    436          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    437          void	SetManHop	( uint8_t nManHop )
    438          //========================================================================
    439          {
   \                     SetManHop: (+1)
   \        0x0   0xB511             PUSH     {R0,R4,LR}
   \        0x2   0xB081             SUB      SP,SP,#+4
    440              if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), (uint32_t)2,(uint32_t) 2 ) )
   \        0x4   0x.... 0x....      LDR.W    R4,??DataTable39_2
   \        0x8   0x2302             MOVS     R3,#+2
   \        0xA   0x2202             MOVS     R2,#+2
   \        0xC   0x21A0             MOVS     R1,#+160
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD008             BEQ.N    ??SetManHop_0
    441              {
    442                  printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
   \       0x18   0xF44F 0x72DD      MOV      R2,#+442
   \       0x1C   0x.... 0x....      LDR.W    R1,??DataTable40_10
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable39_4
   \       0x24   0x.... 0x....      BL       printf
    443          
    444                  return ;
   \       0x28   0xE015             B.N      ??SetManHop_1
    445              }
    446          
    447              if ( GetDbg() > 0 )
   \                     ??SetManHop_0: (+1)
   \       0x2A   0x.... 0x....      BL       GetDbg
   \       0x2E   0x2801             CMP      R0,#+1
   \       0x30   0xDB09             BLT.N    ??SetManHop_2
    448              {
    449              	printf( "%s(%d) - %d\n", __func__, __LINE__, nManHop );
   \       0x32   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \       0x36   0xF240 0x12C1      MOVW     R2,#+449
   \       0x3A   0x.... 0x....      LDR.W    R1,??DataTable40_10
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable40_6
   \       0x42   0x.... 0x....      BL       printf
    450              }
    451          
    452          //    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x0D, (uint8_t *)&nManHop, 1 );
    453              M24_HAL_WriteBytes( &hi2c1,(uint16_t) 0xA0, (uint16_t)AddrEEPManHop, (uint8_t *)&nManHop, (uint16_t)1 );
   \                     ??SetManHop_2: (+1)
   \       0x46   0x2001             MOVS     R0,#+1
   \       0x48   0x9000             STR      R0,[SP, #+0]
   \       0x4A   0xAB01             ADD      R3,SP,#+4
   \       0x4C   0x220D             MOVS     R2,#+13
   \       0x4E   0x21A0             MOVS     R1,#+160
   \       0x50   0x0020             MOVS     R0,R4
   \       0x52   0x.... 0x....      BL       M24_HAL_WriteBytes
    454          }
   \                     ??SetManHop_1: (+1)
   \       0x56   0xBD13             POP      {R0,R1,R4,PC}
    455          
    456          #endif	//	defined(USE_HOP_MANUAL)
    457          
    458          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    459          int8_t		LoadCarNo		( void )
    460          //========================================================================
    461          {
   \                     LoadCarNo: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
    462              uint8_t     nCarNo = 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0xF88D 0x0004      STRB     R0,[SP, #+4]
    463          
    464              if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ),(uint32_t) 2, (uint32_t)2 ) )
   \        0x8   0x.... 0x....      LDR.W    R4,??DataTable39_2
   \        0xC   0x2302             MOVS     R3,#+2
   \        0xE   0x2202             MOVS     R2,#+2
   \       0x10   0x21A0             MOVS     R1,#+160
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD00A             BEQ.N    ??LoadCarNo_0
    465              {
    466                  printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
   \       0x1C   0xF44F 0x72E9      MOV      R2,#+466
   \       0x20   0x.... 0x....      LDR.W    R1,??DataTable40_11
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable39_4
   \       0x28   0x.... 0x....      BL       printf
    467          
    468                  return (int8_t)-1;
   \       0x2C   0xF05F 0x30FF      MOVS     R0,#+4294967295
   \       0x30   0xE01D             B.N      ??LoadCarNo_1
    469              }
    470          
    471          //    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x0E, (uint8_t *)&nCarNo, 1 );
    472              M24_HAL_ReadBytes( &hi2c1, (uint16_t)0xA0, (uint16_t)AddrEEPCarNo, (uint8_t *)&nCarNo,(uint16_t) 1 );
   \                     ??LoadCarNo_0: (+1)
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0x9000             STR      R0,[SP, #+0]
   \       0x36   0xAB01             ADD      R3,SP,#+4
   \       0x38   0x220E             MOVS     R2,#+14
   \       0x3A   0x21A0             MOVS     R1,#+160
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       M24_HAL_ReadBytes
    473          
    474              if ( GetDbg() > 0 )
   \       0x42   0x.... 0x....      BL       GetDbg
   \       0x46   0x2801             CMP      R0,#+1
   \       0x48   0xDB09             BLT.N    ??LoadCarNo_2
    475              {
    476              	printf( "%s(%d) - %d\n", __func__, __LINE__, nCarNo );
   \       0x4A   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \       0x4E   0xF44F 0x72EE      MOV      R2,#+476
   \       0x52   0x.... 0x....      LDR.W    R1,??DataTable40_11
   \       0x56   0x.... 0x....      LDR.W    R0,??DataTable40_6
   \       0x5A   0x.... 0x....      BL       printf
    477              }
    478          
    479              g_nCarNo = nCarNo;
   \                     ??LoadCarNo_2: (+1)
   \       0x5E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \       0x62   0x.... 0x....      LDR.W    R1,??DataTable40_1
   \       0x66   0x7008             STRB     R0,[R1, #+0]
    480          
    481              return (int8_t)nCarNo;
   \       0x68   0xF99D 0x0004      LDRSB    R0,[SP, #+4]
   \       0x6C   0xB240             SXTB     R0,R0
   \                     ??LoadCarNo_1: (+1)
   \       0x6E   0xBD16             POP      {R1,R2,R4,PC}
    482          }
    483          
    484          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    485          uint8_t		GetCarNo		( void )
    486          //========================================================================
    487          {
   \                     GetCarNo: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    488          	static uint8_t s_bOnce = 0;
    489          
    490          	if ( s_bOnce == 0 )
   \        0x2   0x.... 0x....      LDR.W    R4,??DataTable40_12
   \        0x6   0x7820             LDRB     R0,[R4, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD106             BNE.N    ??GetCarNo_0
    491          	{
    492          		//	초기로딩시 I2C에서 Load
    493          		g_nCarNo = (uint8_t)LoadCarNo();
   \        0xC   0x.... 0x....      BL       LoadCarNo
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable40_1
   \       0x14   0x7008             STRB     R0,[R1, #+0]
    494          		s_bOnce = 1;
   \       0x16   0x2001             MOVS     R0,#+1
   \       0x18   0x7020             STRB     R0,[R4, #+0]
    495          	}
    496          
    497          	return(uint8_t) g_nCarNo;
   \                     ??GetCarNo_0: (+1)
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable40_1
   \       0x1E   0x7800             LDRB     R0,[R0, #+0]
   \       0x20   0xBD10             POP      {R4,PC}
    498          }

   \                                 In section .bss, align 1
   \                     `GetCarNo::s_bOnce`:
   \        0x0                      DS8 1
    499          
    500          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    501          void	SetCarNo		( uint8_t nCarNo )
    502          //========================================================================
    503          {
   \                     SetCarNo: (+1)
   \        0x0   0xB511             PUSH     {R0,R4,LR}
   \        0x2   0xB081             SUB      SP,SP,#+4
    504              if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), (uint32_t)2, (uint32_t)2 ) )
   \        0x4   0x.... 0x....      LDR.W    R4,??DataTable39_2
   \        0x8   0x2302             MOVS     R3,#+2
   \        0xA   0x2202             MOVS     R2,#+2
   \        0xC   0x21A0             MOVS     R1,#+160
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD008             BEQ.N    ??SetCarNo_0
    505              {
    506                  printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
   \       0x18   0xF44F 0x72FD      MOV      R2,#+506
   \       0x1C   0x.... 0x....      LDR.W    R1,??DataTable40_13
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable39_4
   \       0x24   0x.... 0x....      BL       printf
    507          
    508                  return ;
   \       0x28   0xE01A             B.N      ??SetCarNo_1
    509              }
    510          
    511          	if ( GetDbg() > 0 )
   \                     ??SetCarNo_0: (+1)
   \       0x2A   0x.... 0x....      BL       GetDbg
   \       0x2E   0x2801             CMP      R0,#+1
   \       0x30   0xDB09             BLT.N    ??SetCarNo_2
    512          	{
    513              	printf( "%s(%d) - %d\n", __func__, __LINE__, nCarNo );
   \       0x32   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \       0x36   0xF240 0x2201      MOVW     R2,#+513
   \       0x3A   0x.... 0x....      LDR.W    R1,??DataTable40_13
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable40_6
   \       0x42   0x.... 0x....      BL       printf
    514          	}
    515          
    516          	g_nCarNo = nCarNo;
   \                     ??SetCarNo_2: (+1)
   \       0x46   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \       0x4A   0x.... 0x....      LDR.W    R1,??DataTable40_1
   \       0x4E   0x7008             STRB     R0,[R1, #+0]
    517          
    518          //    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x0E, (uint8_t *)&nCarNo, 1 );
    519              M24_HAL_WriteBytes( &hi2c1,(uint16_t) 0xA0, (uint16_t)AddrEEPCarNo, (uint8_t *)&nCarNo,(uint16_t) (uint16_t)1 );
   \       0x50   0x2001             MOVS     R0,#+1
   \       0x52   0x9000             STR      R0,[SP, #+0]
   \       0x54   0xAB01             ADD      R3,SP,#+4
   \       0x56   0x220E             MOVS     R2,#+14
   \       0x58   0x21A0             MOVS     R1,#+160
   \       0x5A   0x0020             MOVS     R0,R4
   \       0x5C   0x.... 0x....      BL       M24_HAL_WriteBytes
    520          }
   \                     ??SetCarNo_1: (+1)
   \       0x60   0xBD13             POP      {R0,R1,R4,PC}
    521          
    522          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    523          int8_t		GetSpkVol	    ( void )
    524          //========================================================================
    525          {
   \                     GetSpkVol: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
    526              uint8_t     nSpkVol = 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0xF88D 0x0004      STRB     R0,[SP, #+4]
    527          
    528              if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ),(uint32_t) 2,(uint32_t) 2 ) )
   \        0x8   0x.... 0x....      LDR.W    R4,??DataTable39_2
   \        0xC   0x2302             MOVS     R3,#+2
   \        0xE   0x2202             MOVS     R2,#+2
   \       0x10   0x21A0             MOVS     R1,#+160
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD00A             BEQ.N    ??GetSpkVol_0
    529              {
    530                  printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
   \       0x1C   0xF240 0x2212      MOVW     R2,#+530
   \       0x20   0x.... 0x....      LDR.W    R1,??DataTable40_14
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable39_4
   \       0x28   0x.... 0x....      BL       printf
    531          
    532                  return (int8_t)-1;
   \       0x2C   0xF05F 0x30FF      MOVS     R0,#+4294967295
   \       0x30   0xE014             B.N      ??GetSpkVol_1
    533              }
    534          
    535          //    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x0F, (uint8_t *)&nSpkVol, 1 );
    536              M24_HAL_ReadBytes( &hi2c1,(uint16_t) 0xA0, (uint16_t)AddrEEPSpkVol, (uint8_t *)&nSpkVol, (uint16_t)1 );
   \                     ??GetSpkVol_0: (+1)
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0x9000             STR      R0,[SP, #+0]
   \       0x36   0xAB01             ADD      R3,SP,#+4
   \       0x38   0x220F             MOVS     R2,#+15
   \       0x3A   0x21A0             MOVS     R1,#+160
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       M24_HAL_ReadBytes
    537          
    538              printf( "%s(%d) - %d\n", __func__, __LINE__, nSpkVol );
   \       0x42   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \       0x46   0xF240 0x221A      MOVW     R2,#+538
   \       0x4A   0x.... 0x....      LDR.W    R1,??DataTable40_14
   \       0x4E   0x.... 0x....      LDR.W    R0,??DataTable40_6
   \       0x52   0x.... 0x....      BL       printf
    539          
    540              return (int8_t)nSpkVol;
   \       0x56   0xF99D 0x0004      LDRSB    R0,[SP, #+4]
   \       0x5A   0xB240             SXTB     R0,R0
   \                     ??GetSpkVol_1: (+1)
   \       0x5C   0xBD16             POP      {R1,R2,R4,PC}
    541          }
    542          
    543          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    544          void	SetSpkVol	    ( uint8_t nSpkVol )
    545          //========================================================================
    546          {
   \                     SetSpkVol: (+1)
   \        0x0   0xB511             PUSH     {R0,R4,LR}
   \        0x2   0xB081             SUB      SP,SP,#+4
    547              if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ), (uint32_t)2,(uint32_t) 2 ) )
   \        0x4   0x.... 0x....      LDR.W    R4,??DataTable39_2
   \        0x8   0x2302             MOVS     R3,#+2
   \        0xA   0x2202             MOVS     R2,#+2
   \        0xC   0x21A0             MOVS     R1,#+160
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD008             BEQ.N    ??SetSpkVol_0
    548              {
    549                  printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
   \       0x18   0xF240 0x2225      MOVW     R2,#+549
   \       0x1C   0x.... 0x....      LDR.W    R1,??DataTable41
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable39_4
   \       0x24   0x.... 0x....      BL       printf
    550          
    551                  return ;
   \       0x28   0xE01D             B.N      ??SetSpkVol_1
    552              }
    553          
    554              printf( "%s(%d) - %d\n", __func__, __LINE__, nSpkVol );
   \                     ??SetSpkVol_0: (+1)
   \       0x2A   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \       0x2E   0xF240 0x222A      MOVW     R2,#+554
   \       0x32   0x.... 0x....      LDR.W    R1,??DataTable41
   \       0x36   0x.... 0x....      LDR.W    R0,??DataTable40_6
   \       0x3A   0x.... 0x....      BL       printf
    555          
    556          //    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x0F, (uint8_t *)&nSpkVol, 1 );
    557              M24_HAL_WriteBytes( &hi2c1, (uint16_t)0xA0,(uint16_t) AddrEEPSpkVol, (uint8_t *)&nSpkVol, (uint16_t)1 );
   \       0x3E   0x2001             MOVS     R0,#+1
   \       0x40   0x9000             STR      R0,[SP, #+0]
   \       0x42   0xAB01             ADD      R3,SP,#+4
   \       0x44   0x220F             MOVS     R2,#+15
   \       0x46   0x21A0             MOVS     R1,#+160
   \       0x48   0x0020             MOVS     R0,R4
   \       0x4A   0x.... 0x....      BL       M24_HAL_WriteBytes
    558          
    559              //========================================================================
    560              //	Codec MAX9860ETG+
    561              if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ),(uint32_t) 2, (uint32_t)2 ) )
   \       0x4E   0x2302             MOVS     R3,#+2
   \       0x50   0x2202             MOVS     R2,#+2
   \       0x52   0x2120             MOVS     R1,#+32
   \       0x54   0x0020             MOVS     R0,R4
   \       0x56   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD103             BNE.N    ??SetSpkVol_2
    562              {
    563              	AudioSpkVol( nSpkVol );
   \       0x5E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \       0x62   0x.... 0x....      BL       AudioSpkVol
    564              }
    565          }
   \                     ??SetSpkVol_2: (+1)
   \                     ??SetSpkVol_1: (+1)
   \       0x66   0xBD13             POP      {R0,R1,R4,PC}
    566          
    567          
    568          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    569          int8_t		GetMicVol	    ( void )
    570          //========================================================================
    571          {
   \                     GetMicVol: (+1)
   \        0x0   0xB51C             PUSH     {R2-R4,LR}
    572              uint8_t     nMicVol = 0;
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0xF88D 0x0004      STRB     R0,[SP, #+4]
    573          
    574              if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ),(uint32_t) 2,(uint32_t) 2 ) )
   \        0x8   0x.... 0x....      LDR.W    R4,??DataTable39_2
   \        0xC   0x2302             MOVS     R3,#+2
   \        0xE   0x2202             MOVS     R2,#+2
   \       0x10   0x21A0             MOVS     R1,#+160
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD00A             BEQ.N    ??GetMicVol_0
    575              {
    576                  printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
   \       0x1C   0xF44F 0x7210      MOV      R2,#+576
   \       0x20   0x.... 0x....      LDR.W    R1,??DataTable42_1
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable39_4
   \       0x28   0x.... 0x....      BL       printf
    577          
    578                  return (int8_t)-1;
   \       0x2C   0xF05F 0x30FF      MOVS     R0,#+4294967295
   \       0x30   0xE014             B.N      ??GetMicVol_1
    579              }
    580          
    581          //    M24_HAL_ReadBytes( &hi2c1, 0xA0, 0x0F, (uint8_t *)&nSpkVol, 1 );
    582              M24_HAL_ReadBytes( &hi2c1, (uint16_t)0xA0, (uint16_t)AddrEEPMicVol, (uint8_t *)&nMicVol,(uint16_t) 1 );
   \                     ??GetMicVol_0: (+1)
   \       0x32   0x2001             MOVS     R0,#+1
   \       0x34   0x9000             STR      R0,[SP, #+0]
   \       0x36   0xAB01             ADD      R3,SP,#+4
   \       0x38   0x220C             MOVS     R2,#+12
   \       0x3A   0x21A0             MOVS     R1,#+160
   \       0x3C   0x0020             MOVS     R0,R4
   \       0x3E   0x.... 0x....      BL       M24_HAL_ReadBytes
    583          
    584              printf( "%s(%d) - %d\n", __func__, __LINE__, nMicVol );
   \       0x42   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \       0x46   0xF44F 0x7212      MOV      R2,#+584
   \       0x4A   0x.... 0x....      LDR.W    R1,??DataTable42_1
   \       0x4E   0x.... 0x....      LDR.W    R0,??DataTable40_6
   \       0x52   0x.... 0x....      BL       printf
    585          
    586              return (int8_t)nMicVol;
   \       0x56   0xF99D 0x0004      LDRSB    R0,[SP, #+4]
   \       0x5A   0xB240             SXTB     R0,R0
   \                     ??GetMicVol_1: (+1)
   \       0x5C   0xBD16             POP      {R1,R2,R4,PC}
    587          }
    588          
    589          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    590          void	SetMicVol	    ( uint8_t nMicVol )
    591          //========================================================================
    592          {
   \                     SetMicVol: (+1)
   \        0x0   0xB511             PUSH     {R0,R4,LR}
   \        0x2   0xB081             SUB      SP,SP,#+4
    593              if ( HAL_OK != HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ),(uint32_t) 2,(uint32_t) 2 ) )
   \        0x4   0x.... 0x....      LDR.W    R4,??DataTable39_2
   \        0x8   0x2302             MOVS     R3,#+2
   \        0xA   0x2202             MOVS     R2,#+2
   \        0xC   0x21A0             MOVS     R1,#+160
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x14   0x2800             CMP      R0,#+0
   \       0x16   0xD008             BEQ.N    ??SetMicVol_0
    594              {
    595                  printf( "%s(%d) - EEPROM Error\n", __func__, __LINE__ );
   \       0x18   0xF240 0x2253      MOVW     R2,#+595
   \       0x1C   0x.... 0x....      LDR.W    R1,??DataTable42_2
   \       0x20   0x.... 0x....      LDR.W    R0,??DataTable39_4
   \       0x24   0x.... 0x....      BL       printf
    596          
    597                  return ;
   \       0x28   0xE01D             B.N      ??SetMicVol_1
    598              }
    599          
    600              printf( "%s(%d) - %d\n", __func__, __LINE__, nMicVol );
   \                     ??SetMicVol_0: (+1)
   \       0x2A   0xF89D 0x3004      LDRB     R3,[SP, #+4]
   \       0x2E   0xF44F 0x7216      MOV      R2,#+600
   \       0x32   0x.... 0x....      LDR.W    R1,??DataTable42_2
   \       0x36   0x.... 0x....      LDR.W    R0,??DataTable40_6
   \       0x3A   0x.... 0x....      BL       printf
    601          
    602          //    M24_HAL_WriteBytes( &hi2c1, 0xA0, 0x0F, (uint8_t *)&nSpkVol, 1 );
    603              M24_HAL_WriteBytes( &hi2c1, (uint16_t)0xA0, (uint16_t)AddrEEPMicVol, (uint8_t *)&nMicVol, (uint16_t)1 );
   \       0x3E   0x2001             MOVS     R0,#+1
   \       0x40   0x9000             STR      R0,[SP, #+0]
   \       0x42   0xAB01             ADD      R3,SP,#+4
   \       0x44   0x220C             MOVS     R2,#+12
   \       0x46   0x21A0             MOVS     R1,#+160
   \       0x48   0x0020             MOVS     R0,R4
   \       0x4A   0x.... 0x....      BL       M24_HAL_WriteBytes
    604          
    605              //========================================================================
    606              //	Codec MAX9860ETG+
    607              if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ),(uint32_t) 2,(uint32_t) 2 ) )
   \       0x4E   0x2302             MOVS     R3,#+2
   \       0x50   0x2202             MOVS     R2,#+2
   \       0x52   0x2120             MOVS     R1,#+32
   \       0x54   0x0020             MOVS     R0,R4
   \       0x56   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x5A   0x2800             CMP      R0,#+0
   \       0x5C   0xD103             BNE.N    ??SetMicVol_2
    608              {
    609              	AudioMicVol( nMicVol );
   \       0x5E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \       0x62   0x.... 0x....      BL       AudioMicVol
    610              }
    611          }
   \                     ??SetMicVol_2: (+1)
   \                     ??SetMicVol_1: (+1)
   \       0x66   0xBD13             POP      {R0,R1,R4,PC}
    612          //========================================================================
    613          
    614          
    615          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    616          void RF_RSSI( void )
    617          //========================================================================
    618          {
   \                     RF_RSSI: (+1)
   \        0x0   0xB51F             PUSH     {R0-R4,LR}
    619              //  Send RF Ping Packet.
    620          //    return;
    621          //
    622              //  Get Modem Status.
    623              si446x_get_modem_status_fast_clear_read();
   \        0x2   0x.... 0x....      BL       si446x_get_modem_status_fast_clear_read
    624          //	si446x_get_modem_status(0xff);
    625          
    626              if ( GetDbg() > 0 )
   \        0x6   0x.... 0x....      BL       GetDbg
   \        0xA   0x2801             CMP      R0,#+1
   \        0xC   0xDB10             BLT.N    ??RF_RSSI_0
    627              {
    628                  printf( "%s(%d) - ant1:%d / ant2:%d / curr:%d / latch:%d\n", __func__, __LINE__,
    629                          Si446xCmd.GET_MODEM_STATUS.ANT1_RSSI,
    630                          Si446xCmd.GET_MODEM_STATUS.ANT2_RSSI,
    631                          Si446xCmd.GET_MODEM_STATUS.CURR_RSSI,
    632                          Si446xCmd.GET_MODEM_STATUS.LATCH_RSSI
    633                  );
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable42_3
   \       0x12   0x78C1             LDRB     R1,[R0, #+3]
   \       0x14   0x9102             STR      R1,[SP, #+8]
   \       0x16   0x7881             LDRB     R1,[R0, #+2]
   \       0x18   0x9101             STR      R1,[SP, #+4]
   \       0x1A   0x7941             LDRB     R1,[R0, #+5]
   \       0x1C   0x9100             STR      R1,[SP, #+0]
   \       0x1E   0x7903             LDRB     R3,[R0, #+4]
   \       0x20   0xF44F 0x721D      MOV      R2,#+628
   \       0x24   0x.... 0x....      LDR.W    R1,??DataTable42_4
   \       0x28   0x.... 0x....      LDR.W    R0,??DataTable42_5
   \       0x2C   0x.... 0x....      BL       printf
    634              }
    635          
    636              uint16_t rssi;
    637          
    638              rssi = Si446xCmd.GET_MODEM_STATUS.LATCH_RSSI;
   \                     ??RF_RSSI_0: (+1)
   \       0x30   0x.... 0x....      LDR.W    R0,??DataTable42_3
   \       0x34   0x78C4             LDRB     R4,[R0, #+3]
    639          
    640              if ( rssi > 200 )
   \       0x36   0x0020             MOVS     R0,R4
   \       0x38   0xB280             UXTH     R0,R0
   \       0x3A   0x28C9             CMP      R0,#+201
   \       0x3C   0xDB03             BLT.N    ??RF_RSSI_1
    641              {
    642              	LCDRSSI( 5 );  //  RSSI 5
   \       0x3E   0x2005             MOVS     R0,#+5
   \       0x40   0x.... 0x....      BL       LCDRSSI
   \       0x44   0xE032             B.N      ??RF_RSSI_2
    643              }
    644              else if ( 160 < rssi && rssi <= 200 )
   \                     ??RF_RSSI_1: (+1)
   \       0x46   0x0020             MOVS     R0,R4
   \       0x48   0xB280             UXTH     R0,R0
   \       0x4A   0x28A1             CMP      R0,#+161
   \       0x4C   0xDB07             BLT.N    ??RF_RSSI_3
   \       0x4E   0x0020             MOVS     R0,R4
   \       0x50   0xB280             UXTH     R0,R0
   \       0x52   0x28C9             CMP      R0,#+201
   \       0x54   0xDA03             BGE.N    ??RF_RSSI_3
    645              {
    646              	LCDRSSI( 4 );  //  RSSI 4
   \       0x56   0x2004             MOVS     R0,#+4
   \       0x58   0x.... 0x....      BL       LCDRSSI
   \       0x5C   0xE026             B.N      ??RF_RSSI_2
    647              }
    648              else if ( 130 < rssi && rssi <= 160 )
   \                     ??RF_RSSI_3: (+1)
   \       0x5E   0x0020             MOVS     R0,R4
   \       0x60   0xB280             UXTH     R0,R0
   \       0x62   0x2883             CMP      R0,#+131
   \       0x64   0xDB07             BLT.N    ??RF_RSSI_4
   \       0x66   0x0020             MOVS     R0,R4
   \       0x68   0xB280             UXTH     R0,R0
   \       0x6A   0x28A1             CMP      R0,#+161
   \       0x6C   0xDA03             BGE.N    ??RF_RSSI_4
    649              {
    650              	LCDRSSI( 3 );  //  RSSI 3
   \       0x6E   0x2003             MOVS     R0,#+3
   \       0x70   0x.... 0x....      BL       LCDRSSI
   \       0x74   0xE01A             B.N      ??RF_RSSI_2
    651              }
    652              else if ( 100 < rssi && rssi <= 130 )
   \                     ??RF_RSSI_4: (+1)
   \       0x76   0x0020             MOVS     R0,R4
   \       0x78   0xB280             UXTH     R0,R0
   \       0x7A   0x2865             CMP      R0,#+101
   \       0x7C   0xDB07             BLT.N    ??RF_RSSI_5
   \       0x7E   0x0020             MOVS     R0,R4
   \       0x80   0xB280             UXTH     R0,R0
   \       0x82   0x2883             CMP      R0,#+131
   \       0x84   0xDA03             BGE.N    ??RF_RSSI_5
    653              {
    654              	LCDRSSI( 2 );  //  RSSI 2
   \       0x86   0x2002             MOVS     R0,#+2
   \       0x88   0x.... 0x....      BL       LCDRSSI
   \       0x8C   0xE00E             B.N      ??RF_RSSI_2
    655              }
    656              else if ( 85 < rssi && rssi <= 100 )
   \                     ??RF_RSSI_5: (+1)
   \       0x8E   0x0020             MOVS     R0,R4
   \       0x90   0xB280             UXTH     R0,R0
   \       0x92   0x2856             CMP      R0,#+86
   \       0x94   0xDB07             BLT.N    ??RF_RSSI_6
   \       0x96   0x0020             MOVS     R0,R4
   \       0x98   0xB280             UXTH     R0,R0
   \       0x9A   0x2865             CMP      R0,#+101
   \       0x9C   0xDA03             BGE.N    ??RF_RSSI_6
    657              {
    658              	LCDRSSI( 1 );  //  RSSI 1
   \       0x9E   0x2001             MOVS     R0,#+1
   \       0xA0   0x.... 0x....      BL       LCDRSSI
   \       0xA4   0xE002             B.N      ??RF_RSSI_2
    659              }
    660              else 
    661              {
    662              	LCDRSSI( 0 );  //  RSSI 0
   \                     ??RF_RSSI_6: (+1)
   \       0xA6   0x2000             MOVS     R0,#+0
   \       0xA8   0x.... 0x....      BL       LCDRSSI
    663              }
    664          }
   \                     ??RF_RSSI_2: (+1)
   \       0xAC   0xBD1F             POP      {R0-R4,PC}
    665          
    666          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    667          void	RFM_Spk			( uint8_t bOnOff )		//	1(On) / 0(Off)
    668          //========================================================================
    669          {
   \                     RFM_Spk: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    670          	if( GetDbg() > 1 )
   \        0x4   0x.... 0x....      BL       GetDbg
   \        0x8   0x2802             CMP      R0,#+2
   \        0xA   0xDB09             BLT.N    ??RFM_Spk_0
    671          	{
    672          		printf("%s(%d) - %d\n", __func__, __LINE__, bOnOff);
   \        0xC   0x0023             MOVS     R3,R4
   \        0xE   0xB2DB             UXTB     R3,R3
   \       0x10   0xF44F 0x7228      MOV      R2,#+672
   \       0x14   0x.... 0x....      LDR.W    R1,??DataTable42_6
   \       0x18   0x.... 0x....      LDR.W    R0,??DataTable40_6
   \       0x1C   0x.... 0x....      BL       printf
    673          	}
    674          
    675              if ( bOnOff )
   \                     ??RFM_Spk_0: (+1)
   \       0x20   0x0020             MOVS     R0,R4
   \       0x22   0xB2C0             UXTB     R0,R0
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD006             BEQ.N    ??RFM_Spk_1
    676              {
    677                  //  Spk Relay On
    678                  HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
   \       0x28   0x2201             MOVS     R2,#+1
   \       0x2A   0x2120             MOVS     R1,#+32
   \       0x2C   0x.... 0x....      LDR.W    R0,??DataTable45
   \       0x30   0x.... 0x....      BL       HAL_GPIO_WritePin
   \       0x34   0xE005             B.N      ??RFM_Spk_2
    679              }
    680              else
    681              {
    682                  //  Spk Relay Off
    683                  HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
   \                     ??RFM_Spk_1: (+1)
   \       0x36   0x2200             MOVS     R2,#+0
   \       0x38   0x2120             MOVS     R1,#+32
   \       0x3A   0x.... 0x....      LDR.W    R0,??DataTable45
   \       0x3E   0x.... 0x....      BL       HAL_GPIO_WritePin
    684              }
    685          }
   \                     ??RFM_Spk_2: (+1)
   \       0x42   0xBD10             POP      {R4,PC}
    686          
    687          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    688          void PrintVerInfo( void )
    689          //========================================================================
    690          {
   \                     PrintVerInfo: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0xB090             SUB      SP,SP,#+64
    691              //  Print Version Info
    692          
    693              const char* logo_string = "RFM";
   \        0x4   0x....             ADR.N    R5,??DataTable36
    694          
    695              printf( "\n\n" );
   \        0x6   0x....             ADR.N    R0,??DataTable36_1
   \        0x8   0x.... 0x....      BL       printf
    696              printf( "%s\n", logo_string );
   \        0xC   0x0029             MOVS     R1,R5
   \        0xE   0x....             ADR.N    R0,??DataTable36_2
   \       0x10   0x.... 0x....      BL       printf
    697              printf( "Version = %s(%s - %s)\n", APP_VER, __DATE__, __TIME__ );
   \       0x14   0x.... 0x....      LDR.W    R4,??DataTable42_7
   \       0x18   0x.... 0x....      LDR.W    R3,??DataTable42_8
   \       0x1C   0x.... 0x....      LDR.W    R2,??DataTable42_9
   \       0x20   0x0021             MOVS     R1,R4
   \       0x22   0x.... 0x....      LDR.W    R0,??DataTable42_10
   \       0x26   0x.... 0x....      BL       printf
    698          
    699              //  LCD Display
    700              if( GetDevID() == DevRF900T )
   \       0x2A   0x.... 0x....      BL       GetDevID
   \       0x2E   0x2802             CMP      R0,#+2
   \       0x30   0xD10E             BNE.N    ??PrintVerInfo_0
    701              {
    702                  char sBuf[2][32];
    703          
    704                  sprintf( sBuf[0], "RFM v%s", APP_VER );
   \       0x32   0x0022             MOVS     R2,R4
   \       0x34   0x.... 0x....      LDR.W    R1,??DataTable45_1
   \       0x38   0x4668             MOV      R0,SP
   \       0x3A   0x.... 0x....      BL       sprintf
    705                  //        sprintf( sBuf[1], "%s", __DATE__, __TIME__ );
    706          
    707                  LCDClear();
   \       0x3E   0x.... 0x....      BL       LCDClear
    708                  LCDSetCursor( 10, 10 );
   \       0x42   0x210A             MOVS     R1,#+10
   \       0x44   0x200A             MOVS     R0,#+10
   \       0x46   0x.... 0x....      BL       LCDSetCursor
    709                  LCDPrintf( sBuf[0] );
   \       0x4A   0x4668             MOV      R0,SP
   \       0x4C   0x.... 0x....      BL       LCDPrintf
    710                  //        LCDSetCursor( 0, 20 );
    711                  //        LCDPrintf( sBuf[1] );
    712              }
    713          }
   \                     ??PrintVerInfo_0: (+1)
   \       0x50   0xB011             ADD      SP,SP,#+68
   \       0x52   0xBD30             POP      {R4,R5,PC}
    714          
    715          //========================================================================
    716          //
    717          //	Command
    718          //
    719          //========================================================================
    720          
    721          #include "menu.h"      //  g_cntTrainSet
    722          
    723          
    724          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    725          uint8_t cmd_ts      ( uint8_t argc, char * argv[] )
    726          //========================================================================
    727          {
   \                     cmd_ts: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    728              //	ts [train set] ( 0 ~ 9 )
    729          	uint8_t 		nTrainSet = 0;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xF88D 0x0000      STRB     R0,[SP, #+0]
    730          
    731              switch ( argc )
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0xB2C0             UXTB     R0,R0
   \       0x10   0x2802             CMP      R0,#+2
   \       0x12   0xD104             BNE.N    ??cmd_ts_0
    732              {
    733              case 2:		sscanf( argv[1], "%d", &nTrainSet );	        //	cmd [channel]
                            		                       ^
Warning[Pe181]: argument is incompatible with corresponding format string
          conversion
   \       0x14   0x466A             MOV      R2,SP
   \       0x16   0x....             ADR.N    R1,??DataTable37
   \       0x18   0x6868             LDR      R0,[R5, #+4]
   \       0x1A   0x.... 0x....      BL       sscanf
    734                  break;
    735              }
    736          
    737              if ( (nTrainSet < 0) || (MaxTrainSet <= nTrainSet ))
                                     ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
   \                     ??cmd_ts_0: (+1)
   \       0x1E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x22   0x280A             CMP      R0,#+10
   \       0x24   0xDB02             BLT.N    ??cmd_ts_1
    738              {
    739              	nTrainSet = 0;
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xF88D 0x0000      STRB     R0,[SP, #+0]
    740              }
    741          
    742             	printf( "%s(%d) - Train Set : %d\n", __func__, __LINE__, nTrainSet + 100 );
   \                     ??cmd_ts_1: (+1)
   \       0x2C   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \       0x30   0x3364             ADDS     R3,R3,#+100
   \       0x32   0xF240 0x22E6      MOVW     R2,#+742
   \       0x36   0x.... 0x....      LDR.W    R1,??DataTable42_11
   \       0x3A   0x.... 0x....      LDR.W    R0,??DataTable46
   \       0x3E   0x.... 0x....      BL       printf
    743          
    744              SetTrainSetIdx( nTrainSet );
   \       0x42   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x46   0x.... 0x....      BL       SetTrainSetIdx
    745          
    746              return (uint8_t) 0;
   \       0x4A   0x2000             MOVS     R0,#+0
   \       0x4C   0xBD32             POP      {R1,R4,R5,PC}
    747          }
    748          
    749          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    750          uint8_t cmd_ch      ( uint8_t argc, char * argv[] )
    751          //========================================================================
    752          {
   \                     cmd_ch: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    753              //	ch [channel] ( 0 ~ 9 )
    754          	uint8_t 		nCh = 0;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xF88D 0x0000      STRB     R0,[SP, #+0]
    755          
    756              switch ( argc )
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0xB2C0             UXTB     R0,R0
   \       0x10   0x2802             CMP      R0,#+2
   \       0x12   0xD104             BNE.N    ??cmd_ch_0
    757              {
    758              case 2:		sscanf( argv[1], "%d", &nCh );	        //	cmd [channel]
                            		                       ^
Warning[Pe181]: argument is incompatible with corresponding format string
          conversion
   \       0x14   0x466A             MOV      R2,SP
   \       0x16   0x....             ADR.N    R1,??DataTable37
   \       0x18   0x6868             LDR      R0,[R5, #+4]
   \       0x1A   0x.... 0x....      BL       sscanf
    759          //	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text] 
    760                  break;
    761              }
    762          
    763              if ( nCh < 0 || MaxTrainSet <= nCh )
                              ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
   \                     ??cmd_ch_0: (+1)
   \       0x1E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x22   0x280A             CMP      R0,#+10
   \       0x24   0xDB02             BLT.N    ??cmd_ch_1
    764              {
    765              	nCh = 0;
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xF88D 0x0000      STRB     R0,[SP, #+0]
    766              }
    767          
    768              if ( GetDbg() > 0 )
   \                     ??cmd_ch_1: (+1)
   \       0x2C   0x.... 0x....      BL       GetDbg
   \       0x30   0x2801             CMP      R0,#+1
   \       0x32   0xDB09             BLT.N    ??cmd_ch_2
    769              {
    770              	printf( "%s(%d) - Channel : %d\n", __func__, __LINE__, nCh );
   \       0x34   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \       0x38   0xF240 0x3202      MOVW     R2,#+770
   \       0x3C   0x.... 0x....      LDR.W    R1,??DataTable42_12
   \       0x40   0x.... 0x....      LDR.W    R0,??DataTable46_1
   \       0x44   0x.... 0x....      BL       printf
    771              }
    772          
    773              SetTrainSetIdx( nCh );
   \                     ??cmd_ch_2: (+1)
   \       0x48   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x4C   0x.... 0x....      BL       SetTrainSetIdx
    774          
    775              return (uint8_t) 0;
   \       0x50   0x2000             MOVS     R0,#+0
   \       0x52   0xBD32             POP      {R1,R4,R5,PC}
    776          }
    777          
    778          
    779          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    780          uint8_t cmd_car     ( uint8_t argc, char * argv[] )
    781          //========================================================================
    782          {
   \                     cmd_car: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    783              //	car [Car No] ( 0 ~ 9 )
    784          	uint8_t 		nCar = 0;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xF88D 0x0000      STRB     R0,[SP, #+0]
    785          
    786              switch ( argc )
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0xB2C0             UXTB     R0,R0
   \       0x10   0x2802             CMP      R0,#+2
   \       0x12   0xD104             BNE.N    ??cmd_car_0
    787              {
    788              case 2:		sscanf( argv[1], "%d", &nCar );	        //	cmd [Car No]
                            		                       ^
Warning[Pe181]: argument is incompatible with corresponding format string
          conversion
   \       0x14   0x466A             MOV      R2,SP
   \       0x16   0x....             ADR.N    R1,??DataTable37
   \       0x18   0x6868             LDR      R0,[R5, #+4]
   \       0x1A   0x.... 0x....      BL       sscanf
    789          //	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text] 
    790                  break;
    791              }
    792          
    793              if ( nCar < 0 || MaxCarNo < nCar )
                               ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
   \                     ??cmd_car_0: (+1)
   \       0x1E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x22   0x280E             CMP      R0,#+14
   \       0x24   0xDB02             BLT.N    ??cmd_car_1
    794              {
    795              	nCar = 0;
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xF88D 0x0000      STRB     R0,[SP, #+0]
    796              }
    797          
    798              printf( "%s(%d) - Car No : %d\n", __func__, __LINE__, nCar );
   \                     ??cmd_car_1: (+1)
   \       0x2C   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \       0x30   0xF240 0x321E      MOVW     R2,#+798
   \       0x34   0x.... 0x....      LDR.W    R1,??DataTable42_13
   \       0x38   0x.... 0x....      LDR.W    R0,??DataTable46_2
   \       0x3C   0x.... 0x....      BL       printf
    799          
    800              SetCarNo( nCar );
   \       0x40   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x44   0x.... 0x....      BL       SetCarNo
    801          
    802              return (uint8_t) 0;
   \       0x48   0x2000             MOVS     R0,#+0
   \       0x4A   0xBD32             POP      {R1,R4,R5,PC}
    803          }
    804          
    805          
    806          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    807          uint8_t cmd_hop     ( uint8_t argc, char * argv[] )
    808          //========================================================================
    809          {
   \                     cmd_hop: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    810              //	car [Car No] ( 0 ~ 9 )
    811          	uint8_t 		nManHop = 0;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xF88D 0x0000      STRB     R0,[SP, #+0]
    812          
    813              switch ( argc )
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0xB2C0             UXTB     R0,R0
   \       0x10   0x2802             CMP      R0,#+2
   \       0x12   0xD104             BNE.N    ??cmd_hop_0
    814              {
    815              case 2:		sscanf( argv[1], "%d", &nManHop );	        //	cmd [Car No]
                            		                       ^
Warning[Pe181]: argument is incompatible with corresponding format string
          conversion
   \       0x14   0x466A             MOV      R2,SP
   \       0x16   0x....             ADR.N    R1,??DataTable37
   \       0x18   0x6868             LDR      R0,[R5, #+4]
   \       0x1A   0x.... 0x....      BL       sscanf
    816          //	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
    817                  break;
    818              }
    819          
    820          //  g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
    821              if ( nManHop < 0 || 2 < nManHop )
                                  ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
   \                     ??cmd_hop_0: (+1)
   \       0x1E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x22   0x2803             CMP      R0,#+3
   \       0x24   0xDB02             BLT.N    ??cmd_hop_1
    822              {
    823              	nManHop = 0;
   \       0x26   0x2000             MOVS     R0,#+0
   \       0x28   0xF88D 0x0000      STRB     R0,[SP, #+0]
    824              }
    825          
    826              printf( "%s(%d) - Manual Hop : %d\n", __func__, __LINE__, nManHop );
   \                     ??cmd_hop_1: (+1)
   \       0x2C   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \       0x30   0xF240 0x323A      MOVW     R2,#+826
   \       0x34   0x.... 0x....      LDR.W    R1,??DataTable43
   \       0x38   0x.... 0x....      LDR.W    R0,??DataTable47
   \       0x3C   0x.... 0x....      BL       printf
    827          
    828              SetManHop( nManHop );
   \       0x40   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x44   0x.... 0x....      BL       SetManHop
    829          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function "cmd_hop"
   \       0x48   0xBD32             POP      {R1,R4,R5,PC}
    830          
    831          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    832          uint8_t cmd_swinfo    ( uint8_t argc, char * argv[] )
    833          //========================================================================
    834          {
   \                     cmd_swinfo: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    835              printf( "[S/W Info]\n" );
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable43_1
   \        0xA   0x.... 0x....      BL       printf
    836              printf( " - Boot : %d Byte\n", FLASH_If_GetBootSize() );
   \        0xE   0x.... 0x....      BL       FLASH_If_GetBootSize
   \       0x12   0x0001             MOVS     R1,R0
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable43_2
   \       0x18   0x.... 0x....      BL       printf
    837              printf( " - App : %d Byte\n", FLASH_If_GetAppSize() );
   \       0x1C   0x.... 0x....      BL       FLASH_If_GetAppSize
   \       0x20   0x0001             MOVS     R1,R0
   \       0x22   0x.... 0x....      LDR.W    R0,??DataTable47_1
   \       0x26   0x.... 0x....      BL       printf
    838          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "cmd_swinfo"
   \       0x2A   0xBD32             POP      {R1,R4,R5,PC}
    839          
    840          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    841          uint8_t cmd_info    ( uint8_t argc, char * argv[] )
    842          //========================================================================
    843          {
   \                     cmd_info: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    844              //	info - Train Setting Config
    845              uint8_t		nBuf[10];
    846              uint8_t 		nCh = 0;
   \        0x6   0x2600             MOVS     R6,#+0
    847              uint16_t	nData;
    848          
    849              printf( "[Setting]\n" );
   \        0x8   0x.... 0x....      LDR.W    R0,??DataTable43_3
   \        0xC   0x.... 0x....      BL       printf
    850              printf( " - Train Set : %d\n", 100 + GetTrainSetIdx() );
   \       0x10   0x.... 0x....      BL       GetTrainSetIdx
   \       0x14   0xB2C0             UXTB     R0,R0
   \       0x16   0x3064             ADDS     R0,R0,#+100
   \       0x18   0x0001             MOVS     R1,R0
   \       0x1A   0x.... 0x....      LDR.W    R0,??DataTable44
   \       0x1E   0x.... 0x....      BL       printf
    851              printf( " - Car No : %d\n", GetCarNo() );
   \       0x22   0x.... 0x....      BL       GetCarNo
   \       0x26   0xB2C0             UXTB     R0,R0
   \       0x28   0x0001             MOVS     R1,R0
   \       0x2A   0x.... 0x....      LDR.W    R0,??DataTable44_1
   \       0x2E   0x.... 0x....      BL       printf
    852              printf( " - RF Channel: %d\n", GetChRx() );
   \       0x32   0x.... 0x....      BL       GetChRx
   \       0x36   0xB2C0             UXTB     R0,R0
   \       0x38   0x0001             MOVS     R1,R0
   \       0x3A   0x.... 0x....      LDR.W    R0,??DataTable45_2
   \       0x3E   0x.... 0x....      BL       printf
    853              printf( " - Mode : %s(%d)\n", StrRFMMode( GetRFMMode() ), GetRFMMode()  );	//	Normal / Tx / Rx / Upgrade
   \       0x42   0x.... 0x....      BL       GetRFMMode
   \       0x46   0x0007             MOVS     R7,R0
   \       0x48   0x.... 0x....      BL       GetRFMMode
   \       0x4C   0xB240             SXTB     R0,R0
   \       0x4E   0x.... 0x....      BL       StrRFMMode
   \       0x52   0xB2FF             UXTB     R7,R7
   \       0x54   0x003A             MOVS     R2,R7
   \       0x56   0x0001             MOVS     R1,R0
   \       0x58   0x.... 0x....      LDR.W    R0,??DataTable45_3
   \       0x5C   0x.... 0x....      BL       printf
    854              printf( " - GetChNearRFM() : %d\n", GetChNearRFM() );
   \       0x60   0x.... 0x....      BL       GetChNearRFM
   \       0x64   0xB2C0             UXTB     R0,R0
   \       0x66   0x0001             MOVS     R1,R0
   \       0x68   0x.... 0x....      LDR.W    R0,??DataTable45_4
   \       0x6C   0x.... 0x....      BL       printf
    855              printf( " - GetChNearRFT() : %d\n", GetChNearRFT() );
   \       0x70   0x.... 0x....      BL       GetChNearRFT
   \       0x74   0xB2C0             UXTB     R0,R0
   \       0x76   0x0001             MOVS     R1,R0
   \       0x78   0x.... 0x....      LDR.W    R0,??DataTable45_5
   \       0x7C   0x.... 0x....      BL       printf
    856              printf( " - GetChPARFT() : %d\n", GetChPARFT() );
   \       0x80   0x.... 0x....      BL       GetChPARFT
   \       0x84   0xB2C0             UXTB     R0,R0
   \       0x86   0x0001             MOVS     R1,R0
   \       0x88   0x.... 0x....      LDR.W    R0,??DataTable45_6
   \       0x8C   0x.... 0x....      BL       printf
    857              printf( " - GetChPA() : %d\n", GetChPA() );
   \       0x90   0x.... 0x....      BL       GetChPA
   \       0x94   0xB2C0             UXTB     R0,R0
   \       0x96   0x0001             MOVS     R1,R0
   \       0x98   0x.... 0x....      LDR.W    R0,??DataTable47_2
   \       0x9C   0x.... 0x....      BL       printf
    858          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function "cmd_info"

      uint8_t		nBuf[10];
             		^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\rfm.c",845  Warning[Pe177]: variable
          "nBuf" was declared but never referenced

      uint8_t 		nCh = 0;
              		^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\rfm.c",846  Warning[Pe177]: variable
          "nCh" was declared but never referenced

      uint16_t	nData;
              	^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\rfm.c",847  Warning[Pe177]: variable
          "nData" was declared but never referenced
   \       0xA0   0xBDF2             POP      {R1,R4-R7,PC}
    859          
    860          
    861          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    862          uint8_t cmd_rfstat    ( uint8_t argc, char * argv[] )
    863          //========================================================================
    864          {
   \                     cmd_rfstat: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    865              //	rfstat - RF Tx / Rx Status
    866              printf( "[RF Info] Tx : %d / Rx : %d\n", nTxPkt, nRxPkt );
   \        0x6   0x.... 0x....      LDR.W    R0,??DataTable46_3
   \        0xA   0x7802             LDRB     R2,[R0, #+0]
   \        0xC   0x.... 0x....      LDR.W    R0,??DataTable46_4
   \       0x10   0x7801             LDRB     R1,[R0, #+0]
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable47_3
   \       0x16   0x.... 0x....      BL       printf
    867          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "cmd_rfstat"
   \       0x1A   0xBD32             POP      {R1,R4,R5,PC}
    868          
    869          #if defined(USE_TEST_RF_TX_LOOP)
    870          //========================================================================
    871          uint8_t cmd_rftx    ( uint8_t argc, char * argv[] )
    872          //========================================================================
    873          {
    874              //	RF Tx
    875          	uint8_t 	nCh		=	0;
    876          
    877              switch ( argc )
    878              {
    879              case 2:		sscanf( argv[1], "%d", &nCh );	        //	ID
    880          //	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
    881                  break;
    882              }
    883          
    884              printf( "%s(%d) - CH(%d)\n", __func__, __LINE__, nCh );
    885          
    886              uint8_t sBuf[100];
    887              uint8_t nCnt = 0;
    888          
    889              while ( 1 )
    890              {
    891              	if ( ( nCnt % 300 ) == 0 )
    892              	{
    893              		printf(".");
    894          
    895          			//	RFM(Board) Status LED
    896          			HAL_GPIO_TogglePin ( LED_ST_GPIO_Port, LED_ST_Pin );
    897              	}
    898          
    899              	//*
    900              	SendPktCh(nCh, sBuf, 64);
    901              	HAL_Delay(3);
    902          
    903              	//	Watchdog Reload
    904              	__HAL_IWDG_RELOAD_COUNTER(&hiwdg);
    905          
    906              	/*/
    907          
    908              	SendPktCh(7, sBuf, 64);	//	Reserved
    909          
    910              	SendPktCh(ChRFT, sBuf, 64);
    911          
    912              	SendPktCh(ChTS2_1, sBuf, 64);	//	21
    913          
    914              	SendPktCh(nCh, sBuf, 64);
    915          
    916              	//*/
                     	 ^
Warning[Pe009]: nested comment is not allowed
    917          
    918              	nCnt++;
    919              }
    920          }
    921          #endif
    922          
    923          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    924          uint8_t cmd_txpwr    ( uint8_t argc, char * argv[] )
    925          //========================================================================
    926          {
   \                     cmd_txpwr: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    927              //	RF Tx
    928              uint8_t		nPwr	=	0x7F;
   \        0x6   0x207F             MOVS     R0,#+127
   \        0x8   0xF88D 0x0000      STRB     R0,[SP, #+0]
    929          
    930              switch ( argc )
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0xB2C0             UXTB     R0,R0
   \       0x10   0x2802             CMP      R0,#+2
   \       0x12   0xD104             BNE.N    ??cmd_txpwr_0
    931              {
    932              case 2:		sscanf( argv[1], "%d", &nPwr );	        //	ID
                            		                       ^
Warning[Pe181]: argument is incompatible with corresponding format string
          conversion
   \       0x14   0x466A             MOV      R2,SP
   \       0x16   0x....             ADR.N    R1,??DataTable37
   \       0x18   0x6868             LDR      R0,[R5, #+4]
   \       0x1A   0x.... 0x....      BL       sscanf
    933          //	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
    934                  break;
    935              }
    936          
    937              printf( "%s(%d) - Tx Pwr(%d)\n", __func__, __LINE__, nPwr );
   \                     ??cmd_txpwr_0: (+1)
   \       0x1E   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \       0x22   0xF240 0x32A9      MOVW     R2,#+937
   \       0x26   0x.... 0x....      LDR.W    R1,??DataTable47_4
   \       0x2A   0x.... 0x....      LDR.W    R0,??DataTable47_5
   \       0x2E   0x.... 0x....      BL       printf
    938          
    939              vRadio_Set_TxPower( nPwr );
   \       0x32   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x36   0x.... 0x....      BL       vRadio_Set_TxPower
    940          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "cmd_txpwr"
   \       0x3A   0xBD32             POP      {R1,R4,R5,PC}
    941          
    942          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    943          uint8_t cmd_rspid     ( uint8_t argc, char * argv[] )
    944          //========================================================================
    945          {
   \                     cmd_rspid: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    946              //	rspid [Car No] [0/1]
    947          	uint8_t 		nID 	= 0;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0xF88D 0x0000      STRB     R0,[SP, #+0]
    948          	uint8_t 		nSet 	= 0;
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0xF88D 0x0001      STRB     R0,[SP, #+1]
    949          
    950              switch ( argc )
   \       0x12   0x0020             MOVS     R0,R4
   \       0x14   0xB2C0             UXTB     R0,R0
   \       0x16   0x2802             CMP      R0,#+2
   \       0x18   0xD007             BEQ.N    ??cmd_rspid_0
   \       0x1A   0x2803             CMP      R0,#+3
   \       0x1C   0xD10A             BNE.N    ??cmd_rspid_1
    951              {
    952              case 3:		sscanf( argv[2], "%d", &nSet );	        //	Set
                            		                       ^
Warning[Pe181]: argument is incompatible with corresponding format string
          conversion
   \                     ??cmd_rspid_2: (+1)
   \       0x1E   0xF10D 0x0201      ADD      R2,SP,#+1
   \       0x22   0x....             ADR.N    R1,??DataTable39_1
   \       0x24   0x68A8             LDR      R0,[R5, #+8]
   \       0x26   0x.... 0x....      BL       sscanf
    953              case 2:		sscanf( argv[1], "%d", &nID );	        //	ID
                            		                       ^
Warning[Pe181]: argument is incompatible with corresponding format string
          conversion
   \                     ??cmd_rspid_0: (+1)
   \       0x2A   0x466A             MOV      R2,SP
   \       0x2C   0x....             ADR.N    R1,??DataTable39_1
   \       0x2E   0x6868             LDR      R0,[R5, #+4]
   \       0x30   0x.... 0x....      BL       sscanf
    954          //	case 2:		sText = argv[1];						//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
    955                  break;
    956              }
    957          
    958              if ( nID < 0 || MaxCarNo < nID )
                              ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
   \                     ??cmd_rspid_1: (+1)
   \       0x34   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x38   0x280E             CMP      R0,#+14
   \       0x3A   0xDB09             BLT.N    ??cmd_rspid_3
    959              {
    960              	printf("%s(%d) - return\n", __func__, __LINE__);
   \       0x3C   0xF44F 0x7270      MOV      R2,#+960
   \       0x40   0x.... 0x....      LDR.W    R1,??DataTable47_6
   \       0x44   0x.... 0x....      LDR.W    R0,??DataTable47_7
   \       0x48   0x.... 0x....      BL       printf
    961              	return 0;
   \       0x4C   0x2000             MOVS     R0,#+0
   \       0x4E   0xE038             B.N      ??cmd_rspid_4
    962              }
    963          
    964              //	ID Flag Manual 설정.
    965              g_bSetRspIDManual = 1;
   \                     ??cmd_rspid_3: (+1)
   \       0x50   0x2001             MOVS     R0,#+1
   \       0x52   0x.... 0x....      LDR.W    R1,??DataTable47_8
   \       0x56   0x7008             STRB     R0,[R1, #+0]
    966          
    967              if ( nSet )
   \       0x58   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD012             BEQ.N    ??cmd_rspid_5
    968              {
    969              	//	Set ID Flag
    970              	g_flagRspID |= ( 0x1 << nID );
   \       0x60   0x.... 0x....      LDR.W    R1,??DataTable47_9
   \       0x64   0x880A             LDRH     R2,[R1, #+0]
   \       0x66   0x2301             MOVS     R3,#+1
   \       0x68   0xF99D 0x0000      LDRSB    R0,[SP, #+0]
   \       0x6C   0x4083             LSLS     R3,R3,R0
   \       0x6E   0x431A             ORRS     R2,R3,R2
   \       0x70   0x800A             STRH     R2,[R1, #+0]
    971          		g_devStat[nID].nRSSI = 200;
   \       0x72   0x21C8             MOVS     R1,#+200
   \       0x74   0x....             LDR.N    R2,??DataTable40_2
   \       0x76   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \       0x7A   0x201B             MOVS     R0,#+27
   \       0x7C   0x4343             MULS     R3,R0,R3
   \       0x7E   0xEB02 0x0003      ADD      R0,R2,R3
   \       0x82   0x7681             STRB     R1,[R0, #+26]
   \       0x84   0xE011             B.N      ??cmd_rspid_6
    972              }
    973              else
    974              {
    975              	//	Clear ID Flag
    976              	g_flagRspID &= ~( 0x1 << nID );
   \                     ??cmd_rspid_5: (+1)
   \       0x86   0x.... 0x....      LDR.W    R1,??DataTable47_9
   \       0x8A   0x880A             LDRH     R2,[R1, #+0]
   \       0x8C   0x2301             MOVS     R3,#+1
   \       0x8E   0xF99D 0x0000      LDRSB    R0,[SP, #+0]
   \       0x92   0x4083             LSLS     R3,R3,R0
   \       0x94   0x439A             BICS     R2,R2,R3
   \       0x96   0x800A             STRH     R2,[R1, #+0]
    977          		g_devStat[nID].nRSSI = 0;
   \       0x98   0x2100             MOVS     R1,#+0
   \       0x9A   0x....             LDR.N    R2,??DataTable40_2
   \       0x9C   0xF89D 0x3000      LDRB     R3,[SP, #+0]
   \       0xA0   0x201B             MOVS     R0,#+27
   \       0xA2   0x4343             MULS     R3,R0,R3
   \       0xA4   0xEB02 0x0003      ADD      R0,R2,R3
   \       0xA8   0x7681             STRB     R1,[R0, #+26]
    978              }
    979          
    980              printf( "%s(%d) - ID Flag : 0x%04X\n", __func__, __LINE__, g_flagRspID );
   \                     ??cmd_rspid_6: (+1)
   \       0xAA   0x.... 0x....      LDR.W    R0,??DataTable47_9
   \       0xAE   0x8803             LDRH     R3,[R0, #+0]
   \       0xB0   0xF44F 0x7275      MOV      R2,#+980
   \       0xB4   0x.... 0x....      LDR.W    R1,??DataTable47_6
   \       0xB8   0x.... 0x....      LDR.W    R0,??DataTable47_10
   \       0xBC   0x.... 0x....      BL       printf
    981          
    982          	return 1;
   \       0xC0   0x2001             MOVS     R0,#+1
   \                     ??cmd_rspid_4: (+1)
   \       0xC2   0xBD32             POP      {R1,R4,R5,PC}
    983          }
    984          
    985          
    986          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    987          uint8_t cmd_OccPa     ( uint8_t argc, char * argv[] )
    988          //========================================================================
    989          {
   \                     cmd_OccPa: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    990          	//========================================================================
    991              //	occ [1(start)/0(stop)]	-	대승객방송
    992          
    993          	printf("%s(%d)\n", __func__, __LINE__ );
   \        0x6   0x.... 0x....      LDR.W    R6,??DataTable47_11
   \        0xA   0xF240 0x32E1      MOVW     R2,#+993
   \        0xE   0x0031             MOVS     R1,R6
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable47_12
   \       0x14   0x.... 0x....      BL       printf
    994          
    995          	//	대승객방송 시작/종료
    996          	uint8_t 		nOnOff 	= 0;
   \       0x18   0x2000             MOVS     R0,#+0
   \       0x1A   0xF88D 0x0000      STRB     R0,[SP, #+0]
    997          
    998              switch ( argc )
   \       0x1E   0x0020             MOVS     R0,R4
   \       0x20   0xB2C0             UXTB     R0,R0
   \       0x22   0x2802             CMP      R0,#+2
   \       0x24   0xD104             BNE.N    ??cmd_OccPa_0
    999              {
   1000              case 2:		sscanf( argv[1], "%d", &nOnOff );	    //	On/Off
                            		                       ^
Warning[Pe181]: argument is incompatible with corresponding format string
          conversion
   \       0x26   0x466A             MOV      R2,SP
   \       0x28   0x....             ADR.N    R1,??DataTable39_1
   \       0x2A   0x6868             LDR      R0,[R5, #+4]
   \       0x2C   0x.... 0x....      BL       sscanf
   1001                  break;
   1002              }
   1003          
   1004              if ( nOnOff == 1 )
   \                     ??cmd_OccPa_0: (+1)
   \       0x30   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \       0x34   0x2801             CMP      R0,#+1
   \       0x36   0xD11D             BNE.N    ??cmd_OccPa_1
   1005              {
   1006              	printf("%s(%d) - Start\n", __func__, __LINE__ );
   \       0x38   0xF240 0x32EE      MOVW     R2,#+1006
   \       0x3C   0x0031             MOVS     R1,R6
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable47_13
   \       0x42   0x.... 0x....      BL       printf
   1007          
   1008              	//	OCC Mode
   1009              	SetRFMMode( (uint8_t)RFMModeOcc );
   \       0x46   0x2003             MOVS     R0,#+3
   \       0x48   0x.... 0x....      BL       SetRFMMode
   1010          
   1011          #if USE_RFM_OCC_PA
   1012          
   1013          #else
   1014              	//	Audio Loopback On
   1015          		AudioDMALoopback();
   1016          #endif
   1017          
   1018          		// 조명 On
   1019          		HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
   \       0x4C   0x.... 0x....      LDR.W    R6,??DataTable47_14
   \       0x50   0x2201             MOVS     R2,#+1
   \       0x52   0xF44F 0x7100      MOV      R1,#+512
   \       0x56   0x0030             MOVS     R0,R6
   \       0x58   0x.... 0x....      BL       HAL_GPIO_WritePin
   1020          
   1021          		//	Spk On
   1022          		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
   \       0x5C   0x2201             MOVS     R2,#+1
   \       0x5E   0x2120             MOVS     R1,#+32
   \       0x60   0x0030             MOVS     R0,R6
   \       0x62   0x.... 0x....      BL       HAL_GPIO_WritePin
   1023          
   1024          		//  수신기 Spk Relay On
   1025          		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_SET );
   \       0x66   0x2201             MOVS     R2,#+1
   \       0x68   0xF44F 0x7180      MOV      R1,#+256
   \       0x6C   0x0030             MOVS     R0,R6
   \       0x6E   0x.... 0x....      BL       HAL_GPIO_WritePin
   \       0x72   0xE016             B.N      ??cmd_OccPa_2
   1026              }
   1027              else
   1028              {
   1029              	printf("%s(%d) - Stop\n", __func__, __LINE__ );
   \                     ??cmd_OccPa_1: (+1)
   \       0x74   0xF240 0x4205      MOVW     R2,#+1029
   \       0x78   0x0031             MOVS     R1,R6
   \       0x7A   0x.... 0x....      LDR.W    R0,??DataTable47_15
   \       0x7E   0x.... 0x....      BL       printf
   1030          
   1031              	//	Normal Mode
   1032              	SetRFMMode( (uint8_t)RFMModeNormal );
   \       0x82   0x2000             MOVS     R0,#+0
   \       0x84   0x.... 0x....      BL       SetRFMMode
   1033          
   1034          #if USE_RFM_OCC_PA
   1035          
   1036          #else
   1037              	//	Audio Loopback Off
   1038              	AudioDMARFM();
   1039          #endif
   1040          
   1041              	//	Spk Off.
   1042          		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
   \       0x88   0x.... 0x....      LDR.W    R6,??DataTable47_14
   \       0x8C   0x2200             MOVS     R2,#+0
   \       0x8E   0x2120             MOVS     R1,#+32
   \       0x90   0x0030             MOVS     R0,R6
   \       0x92   0x.... 0x....      BL       HAL_GPIO_WritePin
   1043          
   1044          		//  수신기 Spk Relay Off
   1045          		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_RESET );
   \       0x96   0x2200             MOVS     R2,#+0
   \       0x98   0xF44F 0x7180      MOV      R1,#+256
   \       0x9C   0x0030             MOVS     R0,R6
   \       0x9E   0x.... 0x....      BL       HAL_GPIO_WritePin
   1046              }
   1047          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "cmd_OccPa"
   \                     ??cmd_OccPa_2: (+1)
   \       0xA2   0xBD76             POP      {R1,R2,R4-R6,PC}
   1048          
   1049          
   1050          //========================================================================
   1051          //		RFM I2S Callback
   1052          //========================================================================
   1053          
   1054          
   1055          //========================================================================
   1056          //	interpolation compress ( 보간압축 )
   1057          #if defined( USE_AUDIO_INTERPOL_COMPRESS )	//	보간압축사용.
   1058          
   1059          //#define	AUDIO_COMPR_RATE	8	//	Audio 압축율.
   1060          //#define	AUDIO_COMPR_RATE	6	//	Audio 압축율.
   1061          #define	AUDIO_COMPR_RATE	4	//	Audio 압축율.
   1062          //#define	AUDIO_COMPR_RATE	2	//	Audio 압축율.
   1063          //#define	AUDIO_COMPR_RATE	1	//	Audio 압축율.
   1064          
   1065          #define	FRAME_ENC_SIZE		(I2S_DMA_LOOP_SIZE * AUDIO_COMPR_RATE)
   1066          

   \                                 In section .bss, align 4
   1067          static int16_t	bufAudioEnc[FRAME_ENC_SIZE * 2];	//	Rx
   \                     bufAudioEnc:
   \        0x0                      DS8 480

   \                                 In section .bss, align 4
   1068          static int16_t	bufAudioDec[FRAME_ENC_SIZE * 2];	//	Tx
   \                     bufAudioDec:
   \        0x0                      DS8 480
   1069          
   1070          #endif	//	defined( USE_AUDIO_INTERPOL_COMPRESS )	//	보간압축사용.
   1071          //========================================================================
   1072          

   \                                 In section .data, align 1
   1073          static uint8_t bRxBuffering = 1;	//  Rx Buffering. ( Packet 4 ~ Packet 0)
   \                     bRxBuffering:
   \        0x0   0x01               DC8 1
   1074          
   1075          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1076          void RFM_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
   1077          //========================================================================
   1078          {
   \                     RFM_I2SEx_TxRxCpltCallback: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0x0004             MOVS     R4,R0
   1079          	static uint8_t 	idx = 0;
   1080          	int16_t		*pAudioTx;
   1081          	int16_t		*pAudioRx;
   1082          
   1083          	{
   1084          #if defined( USE_AUDIO_INTERPOL_COMPRESS )	//	보간압축사용.
   1085          
   1086          		pAudioTx = &bufAudioDec[FRAME_ENC_SIZE * idx];
   \        0x6   0x26F0             MOVS     R6,#+240
   \        0x8   0x.... 0x....      LDR.W    R9,??DataTable47_16
   \        0xC   0x.... 0x....      LDR.W    R10,??DataTable47_17
   \       0x10   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \       0x14   0x4370             MULS     R0,R6,R0
   \       0x16   0xEB0A 0x0700      ADD      R7,R10,R0
   1087          		pAudioRx = &bufAudioEnc[FRAME_ENC_SIZE * (( idx + 1 ) % 2)];
   \       0x1A   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \       0x1E   0x1C40             ADDS     R0,R0,#+1
   \       0x20   0x2102             MOVS     R1,#+2
   \       0x22   0x.... 0x....      LDR.W    R5,??DataTable47_18
   \       0x26   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \       0x2A   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \       0x2E   0x4370             MULS     R0,R6,R0
   \       0x30   0xEB05 0x0800      ADD      R8,R5,R0
   1088          
   1089          		HAL_I2SEx_TransmitReceive_DMA( &hi2s3,
   1090          										pAudioTx,	//	Tx
                 										^
Warning[Pe167]: argument of type "int16_t *" is incompatible with parameter of
          type "uint16_t *"
   1091          										pAudioRx,	//	Rx
                 										^
Warning[Pe167]: argument of type "int16_t *" is incompatible with parameter of
          type "uint16_t *"
   1092          										FRAME_ENC_SIZE ); // 32byte
   \       0x34   0x2378             MOVS     R3,#+120
   \       0x36   0x4642             MOV      R2,R8
   \       0x38   0x0039             MOVS     R1,R7
   \       0x3A   0x.... 0x....      LDR.W    R0,??DataTable47_19
   \       0x3E   0x.... 0x....      BL       HAL_I2SEx_TransmitReceive_DMA
   1093          
   1094          		pAudioRx = &bufAudioEnc[FRAME_ENC_SIZE * idx];
   \       0x42   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \       0x46   0x4370             MULS     R0,R6,R0
   \       0x48   0x4405             ADD      R5,R5,R0
   1095          		idx = ( idx + 1 ) % 2;
   \       0x4A   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \       0x4E   0x1C40             ADDS     R0,R0,#+1
   \       0x50   0x2102             MOVS     R1,#+2
   \       0x52   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \       0x56   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \       0x5A   0xF889 0x0000      STRB     R0,[R9, #+0]
   1096          		pAudioTx = &bufAudioDec[FRAME_ENC_SIZE * idx];
   \       0x5E   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \       0x62   0xFB06 0xF600      MUL      R6,R6,R0
   \       0x66   0x4456             ADD      R6,R10,R6
   1097          
   1098          #else	//	defined( USE_AUDIO_INTERPOL_COMPRESS )	//	보간압축사용.
   1099          
   1100          		pAudioTx = &t_audio_buff[I2S_DMA_LOOP_SIZE * idx];
   1101          		pAudioRx = &r_audio_buff[I2S_DMA_LOOP_SIZE * (( idx + 1 ) % 2)];
   1102          
   1103          		HAL_I2SEx_TransmitReceive_DMA( 	&hi2s3,
   1104          										pAudioTx,
   1105          										pAudioRx,
   1106          										I2S_DMA_LOOP_SIZE ); // 32byte
   1107          
   1108          		pAudioRx = &r_audio_buff[I2S_DMA_LOOP_SIZE * idx];
   1109          		idx = ( idx + 1 ) % 2;
   1110          		pAudioTx = &t_audio_buff[I2S_DMA_LOOP_SIZE * idx];
   1111          
   1112          #endif
   1113          	}
   1114          
   1115          	{
   1116          		//========================================================================
   1117          		//  송신기.
   1118          
   1119          		//  r_audio_buff -> RF-Tx
   1120          
   1121          		if ( qBufCnt( &g_qBufAudioTx ) < ( ( I2S_DMA_LOOP_SIZE * 2 ) * ( I2S_DMA_LOOP_QCNT - 1 ) ) )
                 		                               ^
Warning[Pa084]: pointless integer comparison, the result is always true
   \       0x68   0x.... 0x....      LDR.W    R10,??DataTable47_20
   \       0x6C   0x4650             MOV      R0,R10
   \       0x6E   0x.... 0x....      BL       qBufCnt
   1122          		{
   1123          			//  printf ( "P" );
   1124          			//  memset( r_audio_buff, idx, 64 );		//  Data Setting
   1125          
   1126          			//========================================================================
   1127          #if defined( USE_AUDIO_INTERPOL_COMPRESS )	//	보간압축사용.
   1128          
   1129          			//	Encoding : 8 KHz -> 2 KHz
   1130          			uint8_t i;
   1131          			for( i = 0; i < I2S_DMA_LOOP_SIZE; i++ )
   \       0x72   0xF05F 0x0900      MOVS     R9,#+0
   \                     ??RFM_I2SEx_TxRxCpltCallback_0: (+1)
   \       0x76   0x4648             MOV      R0,R9
   \       0x78   0xB2C0             UXTB     R0,R0
   \       0x7A   0x281E             CMP      R0,#+30
   \       0x7C   0xDA0C             BGE.N    ??RFM_I2SEx_TxRxCpltCallback_1
   1132          			{
   1133          				r_audio_buff[ i ] = pAudioRx[ i * AUDIO_COMPR_RATE ];
   \       0x7E   0x4648             MOV      R0,R9
   \       0x80   0xB2C0             UXTB     R0,R0
   \       0x82   0xF835 0x0030      LDRH     R0,[R5, R0, LSL #+3]
   \       0x86   0x.... 0x....      LDR.W    R1,??DataTable47_21
   \       0x8A   0x464A             MOV      R2,R9
   \       0x8C   0xB2D2             UXTB     R2,R2
   \       0x8E   0xF821 0x0012      STRH     R0,[R1, R2, LSL #+1]
   1134          			}
   \       0x92   0xF119 0x0901      ADDS     R9,R9,#+1
   \       0x96   0xE7EE             B.N      ??RFM_I2SEx_TxRxCpltCallback_0
   1135          
   1136          			qBufPut( &g_qBufAudioTx, (uint8_t *)r_audio_buff, ( I2S_DMA_LOOP_SIZE * 2 ) );
   \                     ??RFM_I2SEx_TxRxCpltCallback_1: (+1)
   \       0x98   0x223C             MOVS     R2,#+60
   \       0x9A   0x.... 0x....      LDR.W    R1,??DataTable47_21
   \       0x9E   0x4650             MOV      R0,R10
   \       0xA0   0x.... 0x....      BL       qBufPut
   1137          
   1138          #else	//	defined( USE_AUDIO_INTERPOL_COMPRESS )	//	보간압축사용.
   1139          			//========================================================================
   1140          			//	Queue Put
   1141          			qBufPut( &g_qBufAudioTx, (uint8_t *)pAudioRx, ( I2S_DMA_LOOP_SIZE * 2 ) );
   1142          #endif
   1143          		}
   1144          
   1145          		/*
   1146          
   1147          		//========================================================================
   1148          		//  Audio In -> Audio Out Loop
   1149          		memcpy( t_audio_buff, r_audio_buff, 64 );
   1150          
   1151          		/*/
                 		^
Warning[Pe009]: nested comment is not allowed
   1152          
   1153          #if defined( USE_AUDIO_INTERPOL_COMPRESS )	//	보간압축사용.
   1154          		memset( pAudioTx, 0, FRAME_ENC_SIZE * 2 );	//	Tx
   \       0xA4   0xF05F 0x08F0      MOVS     R8,#+240
   \       0xA8   0xF05F 0x0A00      MOVS     R10,#+0
   \       0xAC   0x0037             MOVS     R7,R6
   \       0xAE   0x4652             MOV      R2,R10
   \       0xB0   0x4641             MOV      R1,R8
   \       0xB2   0x0038             MOVS     R0,R7
   \       0xB4   0x.... 0x....      BL       __aeabi_memset
   1155          #else
   1156          		memset( pAudioTx, 0, I2S_DMA_LOOP_SIZE * 2 );
   1157          #endif
   1158          
   1159          		//========================================================================
   1160          		//  Rx Buffering ( Packet Count : 0 ~ 4 )
   1161          		//  RF-Rx -> t_audio_buff
   1162          		if ( bRxBuffering )
   \       0xB8   0x.... 0x....      LDR.W    R7,??DataTable47_22
   \       0xBC   0x7838             LDRB     R0,[R7, #+0]
   \       0xBE   0x2800             CMP      R0,#+0
   \       0xC0   0xD00A             BEQ.N    ??RFM_I2SEx_TxRxCpltCallback_2
   1163          		{
   1164          			//  Buffering
   1165          			if ( qBufCnt( &g_qBufAudioRx ) > ( ( I2S_DMA_LOOP_SIZE * 2 ) * 3 ) )
   \       0xC2   0x.... 0x....      LDR.W    R0,??DataTable47_23
   \       0xC6   0x.... 0x....      BL       qBufCnt
   \       0xCA   0x28B5             CMP      R0,#+181
   \       0xCC   0xDB04             BLT.N    ??RFM_I2SEx_TxRxCpltCallback_2
   1166          			{
   1167          				//  패킷이 4개 이상인경우 버퍼링 종료.
   1168          				bRxBuffering = 0;
   \       0xCE   0x2000             MOVS     R0,#+0
   \       0xD0   0x7038             STRB     R0,[R7, #+0]
   1169          
   1170          				printf ( "F" );	 //  버퍼링종료 ( Buffering End - Buffer Full )
   \       0xD2   0x....             ADR.N    R0,??DataTable40_5
   \       0xD4   0x.... 0x....      BL       printf
   1171          			}
   1172          		}
   1173          
   1174          		if ( bRxBuffering == 0 )
   \                     ??RFM_I2SEx_TxRxCpltCallback_2: (+1)
   \       0xD8   0x7838             LDRB     R0,[R7, #+0]
   \       0xDA   0x2800             CMP      R0,#+0
   \       0xDC   0xD167             BNE.N    ??RFM_I2SEx_TxRxCpltCallback_3
   1175          		{
   1176          			//  Rx Audio Out
   1177          			if ( qBufCnt( &g_qBufAudioRx ) >= ( I2S_DMA_LOOP_SIZE * 2 ) )
   \       0xDE   0x.... 0x....      LDR.W    R8,??DataTable47_23
   \       0xE2   0x4640             MOV      R0,R8
   \       0xE4   0x.... 0x....      BL       qBufCnt
   \       0xE8   0x283C             CMP      R0,#+60
   \       0xEA   0xDB5B             BLT.N    ??RFM_I2SEx_TxRxCpltCallback_4
   1178          			{
   1179          				//	printf ( "G" );
   1180          				//  Queue Audio Data
   1181          
   1182          #if defined( USE_AUDIO_INTERPOL_COMPRESS )	//	보간압축사용.
   1183          
   1184          				qBufGet( &g_qBufAudioRx, (uint8_t*)t_audio_buff, (uint16_t)( I2S_DMA_LOOP_SIZE * 2 ) );
   \       0xEC   0x.... 0x....      LDR.W    R7,??DataTable47_24
   \       0xF0   0x223C             MOVS     R2,#+60
   \       0xF2   0x0039             MOVS     R1,R7
   \       0xF4   0x4640             MOV      R0,R8
   \       0xF6   0x.... 0x....      BL       qBufGet
   1185          
   1186          				uint8_t dtVal;	//	sample 보간.
   1187          				static int16_t nlastSample = 0;
   1188          
   1189          				//	Decoding : 2 KHz -> 8 KHz
   1190          				uint8_t i;
   1191          				for( i = 0; i < FRAME_ENC_SIZE; i++ )
   \       0xFA   0x2200             MOVS     R2,#+0
   \                     ??RFM_I2SEx_TxRxCpltCallback_5: (+1)
   \       0xFC   0x0010             MOVS     R0,R2
   \       0xFE   0xB2C0             UXTB     R0,R0
   \      0x100   0x2878             CMP      R0,#+120
   \      0x102   0xDA54             BGE.N    ??RFM_I2SEx_TxRxCpltCallback_3
   1192          				{
   1193          					if ( i % AUDIO_COMPR_RATE == 0 )
   \      0x104   0x0010             MOVS     R0,R2
   \      0x106   0xB2C0             UXTB     R0,R0
   \      0x108   0x2304             MOVS     R3,#+4
   \      0x10A   0xFB90 0xFCF3      SDIV     R12,R0,R3
   \      0x10E   0xFB03 0x001C      MLS      R0,R3,R12,R0
   \      0x112   0x2800             CMP      R0,#+0
   \      0x114   0xD138             BNE.N    ??RFM_I2SEx_TxRxCpltCallback_6
   1194          					{
   1195          						if ( i == 0 )
   \      0x116   0x0010             MOVS     R0,R2
   \      0x118   0xB2C0             UXTB     R0,R0
   \      0x11A   0x2800             CMP      R0,#+0
   \      0x11C   0xD107             BNE.N    ??RFM_I2SEx_TxRxCpltCallback_7
   1196          						{
   1197          							pAudioTx[ i ] = nlastSample;	//	t_audio_buff[i / AUDIO_COMPR_RATE];
   \      0x11E   0x.... 0x....      LDR.W    R0,??DataTable47_25
   \      0x122   0x8800             LDRH     R0,[R0, #+0]
   \      0x124   0x0013             MOVS     R3,R2
   \      0x126   0xB2DB             UXTB     R3,R3
   \      0x128   0xF826 0x0013      STRH     R0,[R6, R3, LSL #+1]
   \      0x12C   0xE00C             B.N      ??RFM_I2SEx_TxRxCpltCallback_8
   1198          						}
   1199          						else
   1200          						{
   1201          							pAudioTx[ i ] = t_audio_buff[i / AUDIO_COMPR_RATE - 1];
   \                     ??RFM_I2SEx_TxRxCpltCallback_7: (+1)
   \      0x12E   0x0010             MOVS     R0,R2
   \      0x130   0xB2C0             UXTB     R0,R0
   \      0x132   0x2304             MOVS     R3,#+4
   \      0x134   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \      0x138   0xEB07 0x0040      ADD      R0,R7,R0, LSL #+1
   \      0x13C   0xF830 0x0C02      LDRH     R0,[R0, #+4294967294]
   \      0x140   0x0013             MOVS     R3,R2
   \      0x142   0xB2DB             UXTB     R3,R3
   \      0x144   0xF826 0x0013      STRH     R0,[R6, R3, LSL #+1]
   1202          						}
   1203          						dtVal = (t_audio_buff[(i / AUDIO_COMPR_RATE)] - pAudioTx[ i ]) / AUDIO_COMPR_RATE;
   \                     ??RFM_I2SEx_TxRxCpltCallback_8: (+1)
   \      0x148   0x0010             MOVS     R0,R2
   \      0x14A   0xB2C0             UXTB     R0,R0
   \      0x14C   0x2304             MOVS     R3,#+4
   \      0x14E   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \      0x152   0xF937 0x3010      LDRSH    R3,[R7, R0, LSL #+1]
   \      0x156   0x0010             MOVS     R0,R2
   \      0x158   0xB2C0             UXTB     R0,R0
   \      0x15A   0xF936 0x0010      LDRSH    R0,[R6, R0, LSL #+1]
   \      0x15E   0x1A1B             SUBS     R3,R3,R0
   \      0x160   0x2004             MOVS     R0,#+4
   \      0x162   0xFB93 0xF0F0      SDIV     R0,R3,R0
   \      0x166   0x0001             MOVS     R1,R0
   1204          
   1205          						if( (i + AUDIO_COMPR_RATE) == FRAME_ENC_SIZE ) nlastSample = t_audio_buff[(i / AUDIO_COMPR_RATE)];		//	Last Sample
   \      0x168   0x0010             MOVS     R0,R2
   \      0x16A   0xB2C0             UXTB     R0,R0
   \      0x16C   0x1D00             ADDS     R0,R0,#+4
   \      0x16E   0x2878             CMP      R0,#+120
   \      0x170   0xD116             BNE.N    ??RFM_I2SEx_TxRxCpltCallback_9
   \      0x172   0x0010             MOVS     R0,R2
   \      0x174   0xB2C0             UXTB     R0,R0
   \      0x176   0x2304             MOVS     R3,#+4
   \      0x178   0xFB90 0xF0F3      SDIV     R0,R0,R3
   \      0x17C   0xF837 0x0010      LDRH     R0,[R7, R0, LSL #+1]
   \      0x180   0x.... 0x....      LDR.W    R3,??DataTable47_25
   \      0x184   0x8018             STRH     R0,[R3, #+0]
   \      0x186   0xE00B             B.N      ??RFM_I2SEx_TxRxCpltCallback_9
   1206          					}
   1207          					else
   1208          					{
   1209          						//	sample간 보간.
   1210          						pAudioTx[ i ] = pAudioTx[ i - 1 ] + dtVal;
   \                     ??RFM_I2SEx_TxRxCpltCallback_6: (+1)
   \      0x188   0x0010             MOVS     R0,R2
   \      0x18A   0xB2C0             UXTB     R0,R0
   \      0x18C   0xEB06 0x0040      ADD      R0,R6,R0, LSL #+1
   \      0x190   0xF830 0x0C02      LDRH     R0,[R0, #+4294967294]
   \      0x194   0xFA50 0xF081      UXTAB    R0,R0,R1
   \      0x198   0x0013             MOVS     R3,R2
   \      0x19A   0xB2DB             UXTB     R3,R3
   \      0x19C   0xF826 0x0013      STRH     R0,[R6, R3, LSL #+1]
   1211          					}
   1212          			//		outBuf[ i ] = bufAudioDec[i / AUDIO_COMPR_RATE];
   1213          				}
   \                     ??RFM_I2SEx_TxRxCpltCallback_9: (+1)
   \      0x1A0   0x1C52             ADDS     R2,R2,#+1
   \      0x1A2   0xE7AB             B.N      ??RFM_I2SEx_TxRxCpltCallback_5
   1214          
   1215          #else	//	defined( USE_AUDIO_INTERPOL_COMPRESS )	//	보간압축사용.
   1216          
   1217          				qBufGet( &g_qBufAudioRx, (uint8_t*)pAudioTx, ( I2S_DMA_LOOP_SIZE * 2 ) );
   1218          
   1219          #endif
   1220          			}
   1221          			else
   1222          			{
   1223          				printf ( "B" );	 //  버퍼링시작 ( Buffering )
   \                     ??RFM_I2SEx_TxRxCpltCallback_4: (+1)
   \      0x1A4   0x....             ADR.N    R0,??DataTable42
   \      0x1A6   0x.... 0x....      BL       printf
   1224          				//  Data
   1225          				bRxBuffering = 1;
   \      0x1AA   0x2001             MOVS     R0,#+1
   \      0x1AC   0x7038             STRB     R0,[R7, #+0]
   1226          			}
   1227          		}
   1228          		//  */
   1229          	}
   1230          
   1231          }
   \                     ??RFM_I2SEx_TxRxCpltCallback_3: (+1)
   \      0x1AE   0xE8BD 0x87F0      POP      {R4-R10,PC}

   \                                 In section .bss, align 1
   \                     `RFM_I2SEx_TxRxCpltCallback::idx`:
   \        0x0                      DS8 1

   \                                 In section .bss, align 2
   \                     `RFM_I2SEx_TxRxCpltCallback{2}{8}{9}{10}{11}::nlastSample`:
   \        0x0                      DS8 2
   1232          
   1233          
   1234          //========================================================================
   1235          //		RFM Procedure
   1236          //========================================================================
   1237          
   1238          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1239          uint8_t InitRFM( void )
   1240          //========================================================================
   1241          {
   \                     InitRFM: (+1)
   \        0x0   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   1242          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x6   0x.... 0x....      LDR.W    R4,??DataTable47_26
   \        0xA   0xF240 0x42DA      MOVW     R2,#+1242
   \        0xE   0x0021             MOVS     R1,R4
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable47_12
   \       0x14   0x.... 0x....      BL       printf
   1243          
   1244          	//========================================================================
   1245          	I2C_BusScan( &hi2c1 );
   \       0x18   0x.... 0x....      LDR.W    R6,??DataTable47_27
   \       0x1C   0x0030             MOVS     R0,R6
   \       0x1E   0x.... 0x....      BL       I2C_BusScan
   1246          	I2C_BusScan( &hi2c3 );
   \       0x22   0x.... 0x....      LDR.W    R5,??DataTable47_28
   \       0x26   0x0028             MOVS     R0,R5
   \       0x28   0x.... 0x....      BL       I2C_BusScan
   1247          
   1248          	//========================================================================
   1249          	//	Car Number 설정.
   1250          	g_flagRspID |= (0x1 << GetCarNo());		//	자신의 ID Flag 설정.
   \       0x2C   0x.... 0x....      BL       GetCarNo
   \       0x30   0x.... 0x....      LDR.W    R1,??DataTable47_9
   \       0x34   0x880A             LDRH     R2,[R1, #+0]
   \       0x36   0x2301             MOVS     R3,#+1
   \       0x38   0xFA13 0xF000      LSLS     R0,R3,R0
   \       0x3C   0x4310             ORRS     R0,R0,R2
   \       0x3E   0x8008             STRH     R0,[R1, #+0]
   1251          
   1252          	//========================================================================
   1253          	//	Codec MAX9860ETG+
   1254          	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), (uint32_t)2,(uint32_t) 2 ) )
   \       0x40   0x2302             MOVS     R3,#+2
   \       0x42   0x2202             MOVS     R2,#+2
   \       0x44   0x2120             MOVS     R1,#+32
   \       0x46   0x0030             MOVS     R0,R6
   \       0x48   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD131             BNE.N    ??InitRFM_0
   1255          	{
   1256          		//  Read Rev.
   1257          		char buf[10];
   1258          		uint8_t cntRetry;
   1259          
   1260          		cntRetry = 0;
   \       0x50   0x2700             MOVS     R7,#+0
   1261          
   1262          		memset( buf, 0, sizeof( buf ) );
   \       0x52   0xF05F 0x080A      MOVS     R8,#+10
   \       0x56   0xF05F 0x0900      MOVS     R9,#+0
   \       0x5A   0xF10D 0x0A0C      ADD      R10,SP,#+12
   \       0x5E   0x464A             MOV      R2,R9
   \       0x60   0x4641             MOV      R1,R8
   \       0x62   0x4650             MOV      R0,R10
   \       0x64   0x.... 0x....      BL       __aeabi_memset
   1263          		while ( HAL_I2C_Mem_Read( &hi2c1, (uint16_t)( 0x10 << 1 ), (uint16_t)0xFF, I2C_MEMADD_SIZE_8BIT, buf, (uint16_t)1, 1000 ) != HAL_OK && cntRetry < 10 ) cntRetry++;
                 		                                                                                                 ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8_t *"
   \                     ??InitRFM_1: (+1)
   \       0x68   0xF44F 0x707A      MOV      R0,#+1000
   \       0x6C   0x9002             STR      R0,[SP, #+8]
   \       0x6E   0x2001             MOVS     R0,#+1
   \       0x70   0x9001             STR      R0,[SP, #+4]
   \       0x72   0xA803             ADD      R0,SP,#+12
   \       0x74   0x9000             STR      R0,[SP, #+0]
   \       0x76   0x2301             MOVS     R3,#+1
   \       0x78   0x22FF             MOVS     R2,#+255
   \       0x7A   0x2120             MOVS     R1,#+32
   \       0x7C   0x0030             MOVS     R0,R6
   \       0x7E   0x.... 0x....      BL       HAL_I2C_Mem_Read
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD005             BEQ.N    ??InitRFM_2
   \       0x86   0x0038             MOVS     R0,R7
   \       0x88   0xB2C0             UXTB     R0,R0
   \       0x8A   0x280A             CMP      R0,#+10
   \       0x8C   0xDA01             BGE.N    ??InitRFM_2
   \       0x8E   0x1C7F             ADDS     R7,R7,#+1
   \       0x90   0xE7EA             B.N      ??InitRFM_1
   1264          
   1265          		printf( "%s(%d) - Codec ( MAX9860ETG+ ) / Rev. 0x%02X\n", __func__, __LINE__, buf[0] );
   \                     ??InitRFM_2: (+1)
   \       0x92   0xF89D 0x300C      LDRB     R3,[SP, #+12]
   \       0x96   0xF240 0x42F1      MOVW     R2,#+1265
   \       0x9A   0x0021             MOVS     R1,R4
   \       0x9C   0x.... 0x....      LDR.W    R0,??DataTable47_29
   \       0xA0   0x.... 0x....      BL       printf
   1266          
   1267          		//========================================================================
   1268          		//  Codec 초기화.
   1269          		InitCodecMAX9860();
   \       0xA4   0x.... 0x....      BL       InitCodecMAX9860
   1270          
   1271          		//========================================================================
   1272          		//	Init Audio ( I2S PCM )
   1273          		AudioInit();
   \       0xA8   0x.... 0x....      BL       AudioInit
   1274          
   1275          		//========================================================================
   1276          		//	I2S Callback 등록.
   1277          		SetCallbackI2STxRxCplt( RFM_I2SEx_TxRxCpltCallback );
   \       0xAC   0x.... 0x....      LDR.W    R0,??DataTable47_30
   \       0xB0   0x.... 0x....      BL       SetCallbackI2STxRxCplt
   1278          //		HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)sine_table, (uint16_t*)bufAudio, 256 );
   1279          
   1280          		//========================================================================
   1281          	}
   1282          
   1283          	//========================================================================
   1284          	//	편성번호 Load
   1285          	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x50 << 1 ),(uint32_t) 2, (uint32_t)2 ) )
   \                     ??InitRFM_0: (+1)
   \       0xB4   0x2302             MOVS     R3,#+2
   \       0xB6   0x2202             MOVS     R2,#+2
   \       0xB8   0x21A0             MOVS     R1,#+160
   \       0xBA   0x0030             MOVS     R0,R6
   \       0xBC   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0xC0   0x2800             CMP      R0,#+0
   \       0xC2   0xD119             BNE.N    ??InitRFM_3
   1286          	{
   1287          		printf( "%s(%d) - EEPROM OK\n", __func__, __LINE__ );
   \       0xC4   0xF240 0x5207      MOVW     R2,#+1287
   \       0xC8   0x0021             MOVS     R1,R4
   \       0xCA   0x.... 0x....      LDR.W    R0,??DataTable47_31
   \       0xCE   0x.... 0x....      BL       printf
   1288          		TestEEPROM( &hi2c1 ); //  Test EEPROM
   \       0xD2   0x0030             MOVS     R0,R6
   \       0xD4   0x.... 0x....      BL       TestEEPROM
   1289          
   1290          		//========================================================================
   1291          		//  Read TrainSet
   1292          		uint8_t	 idxTrainSet;
   1293          		idxTrainSet = GetTrainSetIdx();
   \       0xD8   0x.... 0x....      BL       GetTrainSetIdx
   \       0xDC   0x0006             MOVS     R6,R0
   1294          
   1295          		if ( idxTrainSet < 0 || idxTrainSet >= MaxTrainSet )
                 		                 ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
   \       0xDE   0x0030             MOVS     R0,R6
   \       0xE0   0xB2C0             UXTB     R0,R0
   \       0xE2   0x280A             CMP      R0,#+10
   \       0xE4   0xDB05             BLT.N    ??InitRFM_4
   1296          		{
   1297          			idxTrainSet = 0;
   \       0xE6   0x2000             MOVS     R0,#+0
   \       0xE8   0x0006             MOVS     R6,R0
   1298          
   1299          			SetTrainSetIdx( idxTrainSet );
   \       0xEA   0x0030             MOVS     R0,R6
   \       0xEC   0xB2C0             UXTB     R0,R0
   \       0xEE   0x.... 0x....      BL       SetTrainSetIdx
   1300          		}
   1301          
   1302          		g_idxTrainSet = idxTrainSet;
   \                     ??InitRFM_4: (+1)
   \       0xF2   0x.... 0x....      LDR.W    R0,??DataTable47_32
   \       0xF6   0x7006             STRB     R6,[R0, #+0]
   1303          	}
   1304          
   1305          	//========================================================================
   1306          	//	OLED
   1307          	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c3, (uint16_t)( SSD1306_I2C_ADDRESS ), 2, 2 ) )
   \                     ??InitRFM_3: (+1)
   \       0xF8   0x2302             MOVS     R3,#+2
   \       0xFA   0x2202             MOVS     R2,#+2
   \       0xFC   0x2178             MOVS     R1,#+120
   \       0xFE   0x0028             MOVS     R0,R5
   \      0x100   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \      0x104   0x2800             CMP      R0,#+0
   \      0x106   0xD142             BNE.N    ??InitRFM_5
   1308          	{
   1309          		//========================================================================
   1310          		//	OLED가 연결되어있음.
   1311          		SetDevID( DevRF900T );	 //  송신기.
   \      0x108   0x2002             MOVS     R0,#+2
   \      0x10A   0x.... 0x....      BL       SetDevID
   1312          
   1313          		//	LCD Init
   1314          		LCDInit();
   \      0x10E   0x.... 0x....      BL       LCDInit
   1315          
   1316          		LCDClear();
   \      0x112   0x.... 0x....      BL       LCDClear
   1317          		LCDDrawRect( 0, 0, 128, 32, 1 );
   \      0x116   0x2001             MOVS     R0,#+1
   \      0x118   0x9000             STR      R0,[SP, #+0]
   \      0x11A   0x2320             MOVS     R3,#+32
   \      0x11C   0x2280             MOVS     R2,#+128
   \      0x11E   0x2100             MOVS     R1,#+0
   \      0x120   0x2000             MOVS     R0,#+0
   \      0x122   0x.... 0x....      BL       LCDDrawRect
   1318          
   1319          		HAL_Delay((uint32_t) 500 );
   \      0x126   0xF44F 0x70FA      MOV      R0,#+500
   \      0x12A   0x.... 0x....      BL       HAL_Delay
   1320          
   1321          		//  LCD : 메뉴 화면.
   1322          		LCDMenu();
   \      0x12E   0x.... 0x....      BL       LCDMenu
   1323          
   1324          		//  LCD :   편성 : 100
   1325          		//========================================================================
   1326          		//  편성 : XXX
   1327          		UpdateLCDMain();
   \      0x132   0x.... 0x....      BL       UpdateLCDMain
   1328          
   1329          		//  LCD : Light Icon
   1330          		LCDLight( 0 );
   \      0x136   0x2000             MOVS     R0,#+0
   \      0x138   0x.... 0x....      BL       LCDLight
   1331          
   1332          		//========================================================================
   1333          		//  Spk Vol Set
   1334          		//  Default (1) - 0(Mute) / 1 / 2(Normal) / 3
   1335          
   1336          		uint8_t	 nSpkVol;
   1337          		nSpkVol = GetSpkVol();
   \      0x13C   0x.... 0x....      BL       GetSpkVol
   \      0x140   0x0005             MOVS     R5,R0
   1338          
   1339          		if ( nSpkVol < 0 || nSpkVol > MaxSpkVol )
                 		             ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
   \      0x142   0x0028             MOVS     R0,R5
   \      0x144   0xB2C0             UXTB     R0,R0
   \      0x146   0x2804             CMP      R0,#+4
   \      0x148   0xDB05             BLT.N    ??InitRFM_6
   1340          		{
   1341          			nSpkVol = DefaultSpkVol;
   \      0x14A   0x2001             MOVS     R0,#+1
   \      0x14C   0x0005             MOVS     R5,R0
   1342          			SetSpkVol( nSpkVol );
   \      0x14E   0x0028             MOVS     R0,R5
   \      0x150   0xB2C0             UXTB     R0,R0
   \      0x152   0x.... 0x....      BL       SetSpkVol
   1343          		}
   1344          
   1345          		g_nSpkLevel = nSpkVol;
   \                     ??InitRFM_6: (+1)
   \      0x156   0x.... 0x....      LDR.W    R0,??DataTable47_33
   \      0x15A   0x7005             STRB     R5,[R0, #+0]
   1346          
   1347          		//  LCD : Spk Icon
   1348          		LCDSpeaker( g_nSpkLevel );		//  Spk Icon : Spk On
   \      0x15C   0x7800             LDRB     R0,[R0, #+0]
   \      0x15E   0x.... 0x....      BL       LCDSpeaker
   1349          
   1350          		//========================================================================
   1351          		//  Mic Vol Set
   1352          		//  Default (5) - 0 ~ 9
   1353          
   1354          		uint8_t	 nMicVol;
   1355          		nMicVol = GetMicVol();
   \      0x162   0x.... 0x....      BL       GetMicVol
   \      0x166   0x0006             MOVS     R6,R0
   1356          
   1357          		if ( nMicVol < 0 || nMicVol > MaxMicVol )
                 		             ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
   \      0x168   0x0030             MOVS     R0,R6
   \      0x16A   0xB2C0             UXTB     R0,R0
   \      0x16C   0x280A             CMP      R0,#+10
   \      0x16E   0xDB05             BLT.N    ??InitRFM_7
   1358          		{
   1359          			nMicVol = DefaultMicVol;
   \      0x170   0x2005             MOVS     R0,#+5
   \      0x172   0x0006             MOVS     R6,R0
   1360          			SetMicVol( nMicVol );
   \      0x174   0x0030             MOVS     R0,R6
   \      0x176   0xB2C0             UXTB     R0,R0
   \      0x178   0x.... 0x....      BL       SetMicVol
   1361          		}
   1362          
   1363          		//========================================================================
   1364          #if defined(USE_AUDIO_INTERPOL_COMPRESS)
   1365          		//	보간압축 사용시 음량 Level 조절.
   1366          		WriteI2CCodec( 0x0B, 0x60 );	//  10 ( +18 dB )
   \                     ??InitRFM_7: (+1)
   \      0x17C   0x2160             MOVS     R1,#+96
   \      0x17E   0x200B             MOVS     R0,#+11
   \      0x180   0x.... 0x....      BL       WriteI2CCodec
   1367          #endif
   1368          
   1369          #if defined(USE_HOP_MANUAL)
   1370          		//	g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
   1371          		g_nManHopping	=	2;	//	Hopping Diable
   \      0x184   0x2002             MOVS     R0,#+2
   \      0x186   0x.... 0x....      LDR.W    R1,??DataTable47_34
   \      0x18A   0x7008             STRB     R0,[R1, #+0]
   \      0x18C   0xE013             B.N      ??InitRFM_8
   1372          #endif	//	defined(USE_HOP_MANUAL)
   1373          
   1374          	}
   1375          	else
   1376          	{
   1377          		//========================================================================
   1378          		//	OLED가 없으면 -> 수신기
   1379          		SetDevID( DevRF900M );	 //  수신기.
   \                     ??InitRFM_5: (+1)
   \      0x18E   0x2001             MOVS     R0,#+1
   \      0x190   0x.... 0x....      BL       SetDevID
   1380          
   1381          		//  수신기 스피커 레벨 변경.
   1382          //#if defined(USE_AUDIO_INTERPOL_COMPRESS)
   1383          //		//	보간압축 사용시 음량 Level 조절.
   1384          ////		WriteI2CCodec( 0x09, 0x06 );	//  0x12 ( 0 )
   1385          //		WriteI2CCodec( 0x09, 0x00 );	//  0x00 ( +3 )
   1386          //		WriteI2CCodec( 0x0B, 0x60 );	//  10 ( +18 dB )
   1387          //
   1388          //#else
   1389          //		WriteI2CCodec( 0x09, 0x12 );	//  0x12 ( -6 )
   1390          
   1391          		//	20.09.01 - 2호선 24칸차량설정.
   1392          		WriteI2CCodec( 0x09, 0x06 );	//  0x06 ( 0 )
   \      0x194   0x2106             MOVS     R1,#+6
   \      0x196   0x2009             MOVS     R0,#+9
   \      0x198   0x.... 0x....      BL       WriteI2CCodec
   1393          
   1394          		//		WriteI2CCodec( 0x09, 0x1A );	//  0x1A ( -10 )
   1395          //#endif
   1396          
   1397          #if defined(USE_HOP_MANUAL)
   1398          		//	g_nManHopping;		//	On(1) / Off(2) / Unused(0 : Other)
   1399          		g_nManHopping	=	GetManHop();	//	Hopping Diable
   \      0x19C   0x.... 0x....      LDR.W    R5,??DataTable47_34
   \      0x1A0   0x.... 0x....      BL       GetManHop
   \      0x1A4   0x7028             STRB     R0,[R5, #+0]
   1400          
   1401          		printf("%s(%d) - Man Hopping ( %d )\n", __func__, __LINE__, g_nManHopping );
   \      0x1A6   0x782B             LDRB     R3,[R5, #+0]
   \      0x1A8   0xF240 0x5279      MOVW     R2,#+1401
   \      0x1AC   0x0021             MOVS     R1,R4
   \      0x1AE   0x.... 0x....      LDR.W    R0,??DataTable47_35
   \      0x1B2   0x.... 0x....      BL       printf
   1402          #endif	//	defined(USE_HOP_MANUAL)
   1403          
   1404          	}
   1405          	//========================================================================
   1406          
   1407          #if defined(USE_RFT_ONLY_RX_SPK_ON)
   1408          
   1409          	if ( GetDevID() == DevRF900T )
   \                     ??InitRFM_8: (+1)
   \      0x1B6   0x.... 0x....      BL       GetDevID
   \      0x1BA   0x2802             CMP      R0,#+2
   \      0x1BC   0xD102             BNE.N    ??InitRFM_9
   1410          	{
   1411          		//  송신기 : 수신중이 아닌경우 SPK OFF
   1412          //		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
   1413          		RFM_Spk((uint8_t)0);
   \      0x1BE   0x2000             MOVS     R0,#+0
   \      0x1C0   0x.... 0x....      BL       RFM_Spk
   1414          	}
   1415          
   1416          #endif
   1417          
   1418          
   1419          #if defined(USE_RADIO_SI4463)
   1420          
   1421          	//========================================================================
   1422          	//	Drivers/si4463
   1423          	RF_Init();
   1424          	RF_Info();
   1425          
   1426          #else
   1427          
   1428          	//========================================================================
   1429          	//	Drivers/radio
   1430          	vRadio_Init ();
   \                     ??InitRFM_9: (+1)
   \      0x1C4   0x.... 0x....      BL       vRadio_Init
   1431          
   1432          	//========================================================================
   1433          	vRadio_Init ();		//	FIXME : 일부 송신기가 2회 초기화를 해야 초기화되는 경우가 있음.
   \      0x1C8   0x.... 0x....      BL       vRadio_Init
   1434          	//========================================================================
   1435          
   1436          	si446x_part_info ();
   \      0x1CC   0x.... 0x....      BL       si446x_part_info
   1437          
   1438          	printf ( "=========================\n" );
   \      0x1D0   0x.... 0x....      LDR.W    R0,??DataTable47_36
   \      0x1D4   0x.... 0x....      BL       printf
   1439          	printf ( "%08x\n", Si446xCmd.PART_INFO.CHIPREV );
   \      0x1D8   0x.... 0x....      LDR.W    R5,??DataTable47_37
   \      0x1DC   0x....             LDR.N    R6,??DataTable42_3
   \      0x1DE   0x7831             LDRB     R1,[R6, #+0]
   \      0x1E0   0x0028             MOVS     R0,R5
   \      0x1E2   0x.... 0x....      BL       printf
   1440          	printf ( "%08x\n", Si446xCmd.PART_INFO.PART );
   \      0x1E6   0x6871             LDR      R1,[R6, #+4]
   \      0x1E8   0x0028             MOVS     R0,R5
   \      0x1EA   0x.... 0x....      BL       printf
   1441          	printf ( "%08x\n", Si446xCmd.PART_INFO.PBUILD );
   \      0x1EE   0x7A31             LDRB     R1,[R6, #+8]
   \      0x1F0   0x0028             MOVS     R0,R5
   \      0x1F2   0x.... 0x....      BL       printf
   1442          	printf ( "%08x\n", Si446xCmd.PART_INFO.ID );
   \      0x1F6   0x68F1             LDR      R1,[R6, #+12]
   \      0x1F8   0x0028             MOVS     R0,R5
   \      0x1FA   0x.... 0x....      BL       printf
   1443          	printf ( "%08x\n", Si446xCmd.PART_INFO.CUSTOMER );
   \      0x1FE   0x7C31             LDRB     R1,[R6, #+16]
   \      0x200   0x0028             MOVS     R0,R5
   \      0x202   0x.... 0x....      BL       printf
   1444          	printf ( "%08x\n", Si446xCmd.PART_INFO.ROMID );
   \      0x206   0x7C71             LDRB     R1,[R6, #+17]
   \      0x208   0x0028             MOVS     R0,R5
   \      0x20A   0x.... 0x....      BL       printf
   1445          	printf ( "-------------------------\n" );
   \      0x20E   0x.... 0x....      LDR.W    R0,??DataTable47_38
   \      0x212   0x.... 0x....      BL       printf
   1446          
   1447          #endif
   1448          
   1449          	//========================================================================
   1450          	//	Radio 초기화 이후 채널 설정해줌.
   1451          	{
   1452          		//========================================================================
   1453          		//  Radio Channel 설정.
   1454          		pRadioConfiguration->Radio_ChannelNumber = g_idxTrainSet;
   \      0x216   0x.... 0x....      LDR.W    R0,??DataTable47_39
   \      0x21A   0x.... 0x....      LDR.W    R1,??DataTable47_32
   \      0x21E   0x780A             LDRB     R2,[R1, #+0]
   \      0x220   0x6803             LDR      R3,[R0, #+0]
   \      0x222   0x711A             STRB     R2,[R3, #+4]
   1455          		printf("%s(%d) - Radio Ch(%d) / g_idxTrainSet(%d)\n", __func__, __LINE__,
   1456          				pRadioConfiguration->Radio_ChannelNumber, g_idxTrainSet );
   \      0x224   0x7809             LDRB     R1,[R1, #+0]
   \      0x226   0x9100             STR      R1,[SP, #+0]
   \      0x228   0x6800             LDR      R0,[R0, #+0]
   \      0x22A   0x7903             LDRB     R3,[R0, #+4]
   \      0x22C   0xF240 0x52AF      MOVW     R2,#+1455
   \      0x230   0x0021             MOVS     R1,R4
   \      0x232   0x.... 0x....      LDR.W    R0,??DataTable47_40
   \      0x236   0x.... 0x....      BL       printf
   1457          	}
   1458          
   1459          	//========================================================================
   1460          	//	Random seed 설정.
   1461          	//	편성 & 호차 & TickCount로 설정.
   1462          
   1463          	srand( HAL_GetTick() * 100 + GetTrainSetIdx() * 10 + GetCarNo() );
                 	^
Warning[Pe223]: function "srand" declared implicitly
   \      0x23A   0x.... 0x....      BL       HAL_GetTick
   \      0x23E   0x0005             MOVS     R5,R0
   \      0x240   0x.... 0x....      BL       GetTrainSetIdx
   \      0x244   0x0006             MOVS     R6,R0
   \      0x246   0x.... 0x....      BL       GetCarNo
   \      0x24A   0x2264             MOVS     R2,#+100
   \      0x24C   0xB2F6             UXTB     R6,R6
   \      0x24E   0x210A             MOVS     R1,#+10
   \      0x250   0x434E             MULS     R6,R1,R6
   \      0x252   0xFB02 0x6505      MLA      R5,R2,R5,R6
   \      0x256   0xFA55 0xF080      UXTAB    R0,R5,R0
   \      0x25A   0x.... 0x....      BL       srand
   1464          
   1465          	//	Set Offset
   1466          	g_offsetCA = rand() % 1000;
                 	             ^
Warning[Pe223]: function "rand" declared implicitly
   \      0x25E   0x.... 0x....      BL       rand
   \      0x262   0xF44F 0x717A      MOV      R1,#+1000
   \      0x266   0x.... 0x....      LDR.W    R5,??DataTable47_41
   \      0x26A   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \      0x26E   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \      0x272   0x7028             STRB     R0,[R5, #+0]
   1467          	printf( "%s(%d) - offsetCA( %d )\n", __func__, __LINE__, g_offsetCA );
   \      0x274   0x782B             LDRB     R3,[R5, #+0]
   \      0x276   0xF240 0x52BB      MOVW     R2,#+1467
   \      0x27A   0x0021             MOVS     R1,R4
   \      0x27C   0x.... 0x....      LDR.W    R0,??DataTable47_42
   \      0x280   0x.... 0x....      BL       printf
   1468          
   1469          	//	초기 시작 Delay
   1470          	HAL_Delay((uint32_t)g_offsetCA);
   \      0x284   0x7828             LDRB     R0,[R5, #+0]
   \      0x286   0x.... 0x....      BL       HAL_Delay
   1471          
   1472          	//========================================================================
   1473          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function "InitRFM"
   \      0x28A   0xB006             ADD      SP,SP,#+24
   \      0x28C   0xE8BD 0x87F0      POP      {R4-R10,PC}
   1474          
   1475          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1476          uint8_t RFM_main( void )
   1477          //========================================================================
   1478          {
   \                     RFM_main: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   1479          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x2   0xF240 0x52C7      MOVW     R2,#+1479
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable47_43
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable47_12
   \        0xE   0x.... 0x....      BL       printf
   1480          
   1481          	InitRFM();
   \       0x12   0x.... 0x....      BL       InitRFM
   1482          
   1483          	//========================================================================
   1484          	//	Radio Spi
   1485          #if 0
   1486          
   1487          	TestProcPkt();		//	RFM Main
   1488          
   1489          #endif
   1490          
   1491          #if defined(USE_TEST_RF_TX_LOOP)
   1492          	//========================================================================
   1493          	//cmd_rftx( uint8_t argc, char * argv[] )
   1494          //	ProcessCommand( "tx 0" );
   1495          
   1496          	char *argv[] = {"tx", "0"};
   1497          	cmd_rftx( 2, argv );
   1498          
   1499          #endif
   1500          
   1501          	InitProcPkt();
   \       0x16   0x.... 0x....      BL       InitProcPkt
   1502          
   1503          	uint8_t nTick;
   1504              uint16_t nTickRe = 0;
   \       0x1A   0x2500             MOVS     R5,#+0
   1505          	uint16_t nTickCnt = 10;
   \       0x1C   0x260A             MOVS     R6,#+10
   1506              
   1507              static int nCallTimeCnt = 1;
   1508          
   1509          /* Infinite main loop */
   1510          	while ( nCallTimeCnt )
   \                     ??RFM_main_0: (+1)
   \       0x1E   0x.... 0x....      LDR.W    R1,??DataTable47_44
   \       0x22   0x6808             LDR      R0,[R1, #+0]
   \       0x24   0x2800             CMP      R0,#+0
   \       0x26   0xD02A             BEQ.N    ??RFM_main_1
   1511          	{
   1512          
   1513          		if((nTick + 10) < nTickRe){nCallTimeCnt = 0;  }
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0xB2C0             UXTB     R0,R0
   \       0x2C   0x300A             ADDS     R0,R0,#+10
   \       0x2E   0x002A             MOVS     R2,R5
   \       0x30   0xB292             UXTH     R2,R2
   \       0x32   0x4290             CMP      R0,R2
   \       0x34   0xDA01             BGE.N    ??RFM_main_2
   \       0x36   0x2000             MOVS     R0,#+0
   \       0x38   0x6008             STR      R0,[R1, #+0]
   1514          
   1515          
   1516          		nTick = HAL_GetTick();
   \                     ??RFM_main_2: (+1)
   \       0x3A   0x.... 0x....      BL       HAL_GetTick
   \       0x3E   0x0004             MOVS     R4,R0
   1517          
   1518          		
   1519          		if ( GetDevID() == DevRF900T )
   \       0x40   0x.... 0x....      BL       GetDevID
   \       0x44   0x2802             CMP      R0,#+2
   \       0x46   0xD107             BNE.N    ??RFM_main_3
   1520          		{
   1521          			//	송신기 - KeyPad 동작.
   1522          			LoopProcKey( nTick );
   \       0x48   0x0020             MOVS     R0,R4
   \       0x4A   0xB2C0             UXTB     R0,R0
   \       0x4C   0x.... 0x....      BL       LoopProcKey
   1523          
   1524          			//	ADC Power : Battery
   1525          			LoopProcAdc( nTick );
                 			^
Warning[Pe223]: function "LoopProcAdc" declared implicitly
   \       0x50   0x0020             MOVS     R0,R4
   \       0x52   0xB2C0             UXTB     R0,R0
   \       0x54   0x.... 0x....      BL       LoopProcAdc
   1526          		}
   1527          
   1528          		//	Loop RFM
   1529          		LoopProcRFM( nTick );
   \                     ??RFM_main_3: (+1)
   \       0x58   0x0020             MOVS     R0,R4
   \       0x5A   0xB2C0             UXTB     R0,R0
   \       0x5C   0x.... 0x....      BL       LoopProcRFM
   1530          
   1531          		//	Loop Process ( CLI )
   1532          		LoopProcCLI();
                 		^
Warning[Pe223]: function "LoopProcCLI" declared implicitly
   \       0x60   0x.... 0x....      BL       LoopProcCLI
   1533          
   1534          		//	Loop Proc Packet : RF Packet
   1535          		LoopProcPkt( nTick );
   \       0x64   0x0020             MOVS     R0,R4
   \       0x66   0xB2C0             UXTB     R0,R0
   \       0x68   0xB280             UXTH     R0,R0
   \       0x6A   0x.... 0x....      BL       LoopProcPkt
   1536          
   1537          		//	Loop Proc Main Watchdog Count Reload
   1538          		LoopProcMain( nTick );
   \       0x6E   0x0020             MOVS     R0,R4
   \       0x70   0xB2C0             UXTB     R0,R0
   \       0x72   0x.... 0x....      BL       LoopProcMain
   1539          
   1540          		nTickRe = HAL_GetTick();
   \       0x76   0x.... 0x....      BL       HAL_GetTick
   \       0x7A   0x0005             MOVS     R5,R0
   \       0x7C   0xE7CF             B.N      ??RFM_main_0
   1541          
   1542          
   1543          	}
   1544          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function "RFM_main"

  	uint16_t nTickCnt = 10;
  	         ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\rfm.c",1505  Warning[Pe177]: variable
          "nTickCnt" was declared but never referenced
   \                     ??RFM_main_1: (+1)
   \       0x7E   0xBD70             POP      {R4-R6,PC}

   \                                 In section .data, align 4
   \                     `RFM_main::nCallTimeCnt`:
   \        0x0   0x0000'0001        DC32 1
   1545          
   1546          
   1547          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1548          void LoopProcRFM ( uint8_t nTick )
   1549          //========================================================================
   1550          {
   \                     LoopProcRFM: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x0004             MOVS     R4,R0
   1551          	RFMPkt	bufRFTx;
   1552          
   1553          	//========================================================================
   1554          	//  Transmit - 송신기
   1555          	if ( GetDevID() == DevRF900T )
   \        0x6   0x.... 0x....      BL       GetDevID
   \        0xA   0x2802             CMP      R0,#+2
   \        0xC   0xF040 0x808D      BNE.W    ??LoopProcRFM_0
   1556          	{
   1557          		if( GetRFMMode() != RFMModeRx )
   \       0x10   0x.... 0x....      BL       GetRFMMode
   \       0x14   0x2802             CMP      R0,#+2
   \       0x16   0xD055             BEQ.N    ??LoopProcRFM_1
   1558          		{
   1559          			if( GetKey(eKeyPtt) || GetKey(eKeySos) )
   \       0x18   0x2006             MOVS     R0,#+6
   \       0x1A   0x.... 0x....      BL       GetKey
   \       0x1E   0x2800             CMP      R0,#+0
   \       0x20   0xD104             BNE.N    ??LoopProcRFM_2
   \       0x22   0x2007             MOVS     R0,#+7
   \       0x24   0x.... 0x....      BL       GetKey
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD04B             BEQ.N    ??LoopProcRFM_1
   1560          			{
   1561          				// PTT Key가 눌려있을시 전송.
   1562          				if( qBufCnt( &g_qBufAudioTx ) >= ( I2S_DMA_LOOP_SIZE * 2 ) )
   \                     ??LoopProcRFM_2: (+1)
   \       0x2C   0x.... 0x....      LDR.W    R5,??DataTable47_20
   \       0x30   0x0028             MOVS     R0,R5
   \       0x32   0x.... 0x....      BL       qBufCnt
   \       0x36   0x283C             CMP      R0,#+60
   \       0x38   0xDB44             BLT.N    ??LoopProcRFM_1
   1563          				{
   1564          					//		printf ( "G" );
   1565          					qBufGet( &g_qBufAudioTx, (uint8_t*)bufRFTx.dat.data, (uint16_t)( I2S_DMA_LOOP_SIZE * 2 ) );
   \       0x3A   0x223C             MOVS     R2,#+60
   \       0x3C   0xF10D 0x010A      ADD      R1,SP,#+10
   \       0x40   0x0028             MOVS     R0,R5
   \       0x42   0x.... 0x....      BL       qBufGet
   1566          
   1567          #if defined(USE_HOPPING)
   1568          					//========================================================================
   1569          					//	Packet Header
   1570          #if defined( USE_CH_ISO_DEV )
   1571          					//	Header #2
   1572          					if( GetKey(eKeyPtt) )
   \       0x46   0x2006             MOVS     R0,#+6
   \       0x48   0x.... 0x....      BL       GetKey
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD004             BEQ.N    ??LoopProcRFM_3
   1573          					{
   1574          						_MakePktHdr2( &bufRFTx, (uint8_t)PktPA );
   \       0x50   0x2102             MOVS     R1,#+2
   \       0x52   0x4668             MOV      R0,SP
   \       0x54   0x.... 0x....      BL       _MakePktHdr2
   \       0x58   0xE003             B.N      ??LoopProcRFM_4
   1575          					}
   1576          					else
   1577          					{
   1578          						_MakePktHdr2( &bufRFTx, (uint8_t) PktCall );
   \                     ??LoopProcRFM_3: (+1)
   \       0x5A   0x2103             MOVS     R1,#+3
   \       0x5C   0x4668             MOV      R0,SP
   \       0x5E   0x.... 0x....      BL       _MakePktHdr2
   1579          					}
   1580          
   1581          #else
   1582          					if( GetKey(eKeyPtt) )
   1583          					{
   1584          						_MakePktHdr( &bufRFTx, GetDevID(), 0xFF, sizeof( RFMPktCtrlPACall ), PktPA );
   1585          					}
   1586          					else
   1587          					{
   1588          						_MakePktHdr( &bufRFTx, GetDevID(), 0xFF, sizeof( RFMPktCtrlPACall ), PktCall );
   1589          					}
   1590          #endif
   1591          
   1592          #else
   1593          					//  송신기 -> 수신기
   1594          					bufRFTx.hdr.addrSrc = GetDevID();		//  Src : 송신기 DevRF900T
   1595          
   1596          					if( GetKey(eKeyPtt) )	// bPTTOnOff )
   1597          					{
   1598          						//  송신기 -> 수신기
   1599          						bufRFTx.hdr.addrDest	=	DevRF900M;		 //  Dest : 수신기
   1600          					}
   1601          					else
   1602          					{
   1603          						//  송신기 -> 송신기
   1604          						bufRFTx.hdr.addrDest	=	DevRF900T;		 //  Dest : 수신기
   1605          					}
   1606          
   1607          					if( GetKey(eKeyPtt) )	bufRFTx.hdr.nPktCmd = PktPA;	//  송신기 -> 수신기
   1608          					else					bufRFTx.hdr.nPktCmd = PktCall;	//  송신기 -> 송신기
   1609          #endif
   1610          
   1611          #if defined( USE_CH_ISO_DEV )
   1612          					if( GetKey(eKeyPtt) )
   \                     ??LoopProcRFM_4: (+1)
   \       0x62   0x2006             MOVS     R0,#+6
   \       0x64   0x.... 0x....      BL       GetKey
   \       0x68   0x2800             CMP      R0,#+0
   \       0x6A   0xD015             BEQ.N    ??LoopProcRFM_5
   1613          					{
   1614          						//========================================================================
   1615          						//	PA
   1616          
   1617          						if ( GetChPARFT() != 0 )
   \       0x6C   0x.... 0x....      BL       GetChPARFT
   \       0x70   0x2800             CMP      R0,#+0
   \       0x72   0xD006             BEQ.N    ??LoopProcRFM_6
   1618          						{
   1619          							//	송신기에 전송.
   1620          							SendPktCh( GetChPARFT(), (U8 *)&bufRFTx,
   1621          									(uint8_t)(sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall )) );
   \       0x74   0x.... 0x....      BL       GetChPARFT
   \       0x78   0x2208             MOVS     R2,#+8
   \       0x7A   0x4669             MOV      R1,SP
   \       0x7C   0xB2C0             UXTB     R0,R0
   \       0x7E   0x.... 0x....      BL       SendPktCh
   1622          						}
   1623          
   1624          						SendPktCh( GetChPA(), (U8 *)&bufRFTx,
   1625          								(uint8_t)(pRadioConfiguration->Radio_PacketLength) );
   \                     ??LoopProcRFM_6: (+1)
   \       0x82   0x.... 0x....      BL       GetChPA
   \       0x86   0x.... 0x....      LDR.W    R1,??DataTable47_39
   \       0x8A   0x6809             LDR      R1,[R1, #+0]
   \       0x8C   0x794A             LDRB     R2,[R1, #+5]
   \       0x8E   0x4669             MOV      R1,SP
   \       0x90   0xB2C0             UXTB     R0,R0
   \       0x92   0x.... 0x....      BL       SendPktCh
   \       0x96   0xE015             B.N      ??LoopProcRFM_1
   1626          					}
   1627          					else
   1628          					{
   1629          						//========================================================================
   1630          						//	Call
   1631          						if ( GetChPARFT() != 0 )
   \                     ??LoopProcRFM_5: (+1)
   \       0x98   0x.... 0x....      BL       GetChPARFT
   \       0x9C   0x2800             CMP      R0,#+0
   \       0x9E   0xD007             BEQ.N    ??LoopProcRFM_7
   1632          						{
   1633          							//	송신기에 직접 전송.
   1634          							SendPktCh( GetChPARFT(), (U8 *)&bufRFTx,
   1635          									(uint8_t)(sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall )) );
   \       0xA0   0x.... 0x....      BL       GetChPARFT
   \       0xA4   0x2208             MOVS     R2,#+8
   \       0xA6   0x4669             MOV      R1,SP
   \       0xA8   0xB2C0             UXTB     R0,R0
   \       0xAA   0x.... 0x....      BL       SendPktCh
   \       0xAE   0xE009             B.N      ??LoopProcRFM_1
   1636          						}
   1637          						else
   1638          						{
   1639          							//	수신기를 통해 전송.
   1640          							SendPktCh( GetChPA(), (U8 *)&bufRFTx,
   1641          									(uint8_t)(pRadioConfiguration->Radio_PacketLength) );
   \                     ??LoopProcRFM_7: (+1)
   \       0xB0   0x.... 0x....      BL       GetChPA
   \       0xB4   0x.... 0x....      LDR.W    R1,??DataTable47_39
   \       0xB8   0x6809             LDR      R1,[R1, #+0]
   \       0xBA   0x794A             LDRB     R2,[R1, #+5]
   \       0xBC   0x4669             MOV      R1,SP
   \       0xBE   0xB2C0             UXTB     R0,R0
   \       0xC0   0x.... 0x....      BL       SendPktCh
   1642          						}
   1643          					}
   1644          
   1645          #else
   1646          					SendPacket( (uint8_t *)&bufRFTx,
   1647          						pRadioConfiguration->Radio_PacketLength );
   1648          #endif
   1649          				}
   1650          			}
   1651          		}
   1652          
   1653          		//========================================================================
   1654          		static uint8_t nOldRFMMode = 0;
   1655          
   1656          		uint8_t nRFMMode = GetRFMMode();
   \                     ??LoopProcRFM_1: (+1)
   \       0xC4   0x.... 0x....      BL       GetRFMMode
   \       0xC8   0x0005             MOVS     R5,R0
   1657          		if( nRFMMode != nOldRFMMode )
   \       0xCA   0x.... 0x....      LDR.W    R6,??DataTable47_45
   \       0xCE   0x0028             MOVS     R0,R5
   \       0xD0   0x7831             LDRB     R1,[R6, #+0]
   \       0xD2   0xB2C0             UXTB     R0,R0
   \       0xD4   0x4288             CMP      R0,R1
   \       0xD6   0xD01F             BEQ.N    ??LoopProcRFM_8
   1658          		{
   1659          			switch ( nRFMMode )
   \       0xD8   0x0028             MOVS     R0,R5
   \       0xDA   0xB2C0             UXTB     R0,R0
   \       0xDC   0x2800             CMP      R0,#+0
   \       0xDE   0xD00A             BEQ.N    ??LoopProcRFM_9
   \       0xE0   0x2802             CMP      R0,#+2
   \       0xE2   0xD118             BNE.N    ??LoopProcRFM_10
   1660          			{
   1661          			case RFMModeRx:
   1662          				LCDSetCursor( 20, 13 );
   \                     ??LoopProcRFM_11: (+1)
   \       0xE4   0x210D             MOVS     R1,#+13
   \       0xE6   0x2014             MOVS     R0,#+20
   \       0xE8   0x.... 0x....      BL       LCDSetCursor
   1663          				LCDPrintf( "수신중..." );
   \       0xEC   0x.... 0x....      LDR.W    R0,??DataTable47_46
   \       0xF0   0x.... 0x....      BL       LCDPrintf
   1664          				break;
   \       0xF4   0xE00F             B.N      ??LoopProcRFM_10
   1665          
   1666          			case RFMModeNormal:
   1667          				//========================================================================
   1668          				//  편성 : XXX
   1669          				UpdateLCDMain();
   \                     ??LoopProcRFM_9: (+1)
   \       0xF6   0x.... 0x....      BL       UpdateLCDMain
   1670          				//	송신기 Speaker Mute
   1671          #if defined(USE_RFT_ONLY_RX_SPK_ON)
   1672          				if ( GetDevID() == DevRF900T )
   \       0xFA   0x.... 0x....      BL       GetDevID
   \       0xFE   0x2802             CMP      R0,#+2
   \      0x100   0xD109             BNE.N    ??LoopProcRFM_12
   1673          				{
   1674          					//  송신기 : 수신중이 아닌경우 SPK OFF
   1675          					RFM_Spk((uint8_t)0);
   \      0x102   0x2000             MOVS     R0,#+0
   \      0x104   0x.... 0x....      BL       RFM_Spk
   1676          
   1677          					//  Red LED Off
   1678          					HAL_GPIO_WritePin ( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_RESET ); //  RED LED
   \      0x108   0x2200             MOVS     R2,#+0
   \      0x10A   0xF44F 0x4180      MOV      R1,#+16384
   \      0x10E   0x.... 0x....      LDR.W    R0,??DataTable47_47
   \      0x112   0x.... 0x....      BL       HAL_GPIO_WritePin
   1679          				}
   1680          #endif
   1681          				break;
   1682          			}
   1683          
   1684          			nOldRFMMode = nRFMMode;
   \                     ??LoopProcRFM_12: (+1)
   \                     ??LoopProcRFM_10: (+1)
   \      0x116   0x7035             STRB     R5,[R6, #+0]
   1685          		}
   1686          
   1687          		//========================================================================
   1688          		//	상태정보 모니터링중 - 상태정보값 갱신.
   1689          		if( GetRFMMode() == RFMModeNormal )
   \                     ??LoopProcRFM_8: (+1)
   \      0x118   0x.... 0x....      BL       GetRFMMode
   \      0x11C   0x2800             CMP      R0,#+0
   \      0x11E   0xD145             BNE.N    ??LoopProcRFM_13
   1690          		{
   1691          			UpdateLCDMonitor( nTick );		//	LCD : 모니터링 상태 Update
   \      0x120   0x0020             MOVS     R0,R4
   \      0x122   0xB2C0             UXTB     R0,R0
   \      0x124   0x.... 0x....      BL       UpdateLCDMonitor
   \      0x128   0xE040             B.N      ??LoopProcRFM_13
   1692          		}
   1693          	}
   1694          	//========================================================================
   1695          	//  RFM - 수신기 - 대승객방송
   1696          	else if ( GetDevID() == DevRF900M )
   \                     ??LoopProcRFM_0: (+1)
   \      0x12A   0x.... 0x....      BL       GetDevID
   \      0x12E   0x2801             CMP      R0,#+1
   \      0x130   0xD13C             BNE.N    ??LoopProcRFM_13
   1697          	{
   1698          		if( GetRFMMode() == RFMModeOcc )
   \      0x132   0x.... 0x....      BL       GetRFMMode
   \      0x136   0x2803             CMP      R0,#+3
   \      0x138   0xD138             BNE.N    ??LoopProcRFM_13
   1699          		{
   1700          			//	대승객 방송 모드인 경우 대승객 방송 음성 송출.
   1701          			if( qBufCnt( &g_qBufAudioTx ) >= ( I2S_DMA_LOOP_SIZE * 2 ) )
   \      0x13A   0x.... 0x....      LDR.W    R5,??DataTable47_20
   \      0x13E   0x0028             MOVS     R0,R5
   \      0x140   0x.... 0x....      BL       qBufCnt
   \      0x144   0x283C             CMP      R0,#+60
   \      0x146   0xDB31             BLT.N    ??LoopProcRFM_13
   1702          			{
   1703          				//		printf ( "G" );
   1704          				//========================================================================
   1705          				//	Audio ( 대승객방송 음성 )
   1706          				qBufGet( &g_qBufAudioTx, (uint8_t*)bufRFTx.dat.data, (uint16_t)( I2S_DMA_LOOP_SIZE * 2 ) );
   \      0x148   0x223C             MOVS     R2,#+60
   \      0x14A   0xF10D 0x010A      ADD      R1,SP,#+10
   \      0x14E   0x0028             MOVS     R0,R5
   \      0x150   0x.... 0x....      BL       qBufGet
   1707          				//	Audio Loopback ( 대승객방송 음성 )
   1708          				qBufPut( &g_qBufAudioRx, (uint8_t*)bufRFTx.dat.data, (uint16_t)( I2S_DMA_LOOP_SIZE * 2 ) );
   \      0x154   0x223C             MOVS     R2,#+60
   \      0x156   0xF10D 0x010A      ADD      R1,SP,#+10
   \      0x15A   0x.... 0x....      LDR.W    R0,??DataTable47_23
   \      0x15E   0x.... 0x....      BL       qBufPut
   1709          
   1710          				//========================================================================
   1711          				//	Packet Header	-	OCC PA 전송
   1712          
   1713          				//	Header #2
   1714          				_MakePktHdr2( &bufRFTx, (uint8_t)PktPA );
   \      0x162   0x2102             MOVS     R1,#+2
   \      0x164   0x4668             MOV      R0,SP
   \      0x166   0x.... 0x....      BL       _MakePktHdr2
   1715          
   1716          				if( GetChRx() == ChTS1_1 )	//	1호차 수신기
   \      0x16A   0x.... 0x....      BL       GetChRx
   \      0x16E   0x2815             CMP      R0,#+21
   \      0x170   0xD10B             BNE.N    ??LoopProcRFM_14
   1717          				{
   1718          					//	1 -> 2 ... -> 10
   1719          					SendPktCh( GetChPA() + 1, (U8 *)&bufRFTx,
   1720          							(uint8_t)(pRadioConfiguration->Radio_PacketLength) );
   \      0x172   0x.... 0x....      BL       GetChPA
   \      0x176   0x.... 0x....      LDR.W    R1,??DataTable47_39
   \      0x17A   0x6809             LDR      R1,[R1, #+0]
   \      0x17C   0x794A             LDRB     R2,[R1, #+5]
   \      0x17E   0x4669             MOV      R1,SP
   \      0x180   0x1C40             ADDS     R0,R0,#+1
   \      0x182   0xB2C0             UXTB     R0,R0
   \      0x184   0x.... 0x....      BL       SendPktCh
   \      0x188   0xE00A             B.N      ??LoopProcRFM_15
   1721          				}
   1722          				else
   1723          				{
   1724          					// 10 -> 9 ... -> 1
   1725          					SendPktCh( GetChPA() - 1, (U8 *)&bufRFTx,
   1726          							(uint8_t)(pRadioConfiguration->Radio_PacketLength ));
   \                     ??LoopProcRFM_14: (+1)
   \      0x18A   0x.... 0x....      BL       GetChPA
   \      0x18E   0x.... 0x....      LDR.W    R1,??DataTable47_39
   \      0x192   0x6809             LDR      R1,[R1, #+0]
   \      0x194   0x794A             LDRB     R2,[R1, #+5]
   \      0x196   0x4669             MOV      R1,SP
   \      0x198   0x1E40             SUBS     R0,R0,#+1
   \      0x19A   0xB2C0             UXTB     R0,R0
   \      0x19C   0x.... 0x....      BL       SendPktCh
   1727          				}
   1728          
   1729          				// 조명 On
   1730          				HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
   \                     ??LoopProcRFM_15: (+1)
   \      0x1A0   0x2201             MOVS     R2,#+1
   \      0x1A2   0xF44F 0x7100      MOV      R1,#+512
   \      0x1A6   0x....             LDR.N    R0,??DataTable45
   \      0x1A8   0x.... 0x....      BL       HAL_GPIO_WritePin
   1731          				//========================================================================
   1732          			}
   1733          		}
   1734          	}
   1735          
   1736          	//========================================================================
   1737          	//	수신중 해제
   1738          	if ( (nTick - g_nStampRxPkt) > TIMEOUT_RXSTAT && GetRFMMode() == RFMModeRx
   1739          			&& ( GetRFMMode() != RFMModeOcc )		//	OCC Mode - Skip
   1740          			&& ( GetRFMMode() != RFMModeUpgr )		//	Upgrade Mode - Skip
   1741          		)
   \                     ??LoopProcRFM_13: (+1)
   \      0x1AC   0x.... 0x....      LDR.W    R5,??DataTable47_48
   \      0x1B0   0x0021             MOVS     R1,R4
   \      0x1B2   0xB2C9             UXTB     R1,R1
   \      0x1B4   0x7828             LDRB     R0,[R5, #+0]
   \      0x1B6   0x1A09             SUBS     R1,R1,R0
   \      0x1B8   0xF240 0x30E9      MOVW     R0,#+1001
   \      0x1BC   0x4281             CMP      R1,R0
   \      0x1BE   0xDB21             BLT.N    ??LoopProcRFM_16
   \      0x1C0   0x.... 0x....      BL       GetRFMMode
   \      0x1C4   0x2802             CMP      R0,#+2
   \      0x1C6   0xD11D             BNE.N    ??LoopProcRFM_16
   \      0x1C8   0x.... 0x....      BL       GetRFMMode
   \      0x1CC   0x2803             CMP      R0,#+3
   \      0x1CE   0xD019             BEQ.N    ??LoopProcRFM_16
   \      0x1D0   0x.... 0x....      BL       GetRFMMode
   \      0x1D4   0x2804             CMP      R0,#+4
   \      0x1D6   0xD015             BEQ.N    ??LoopProcRFM_16
   1742          	{
   1743          		// Rx 패킷이 500 ms 없을 경우 수신모드 해제
   1744          		SetRFMMode((uint8_t) RFMModeNormal );
   \      0x1D8   0x2000             MOVS     R0,#+0
   \      0x1DA   0x.... 0x....      BL       SetRFMMode
   1745          
   1746          		//  수신기 Spk Relay Off
   1747          		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_RESET );
   \      0x1DE   0x2200             MOVS     R2,#+0
   \      0x1E0   0xF44F 0x7180      MOV      R1,#+256
   \      0x1E4   0x....             LDR.N    R0,??DataTable45
   \      0x1E6   0x.... 0x....      BL       HAL_GPIO_WritePin
   1748          
   1749          #if defined(USE_RFT_ONLY_RX_SPK_ON)
   1750          		if ( GetDevID() == DevRF900T )
   \      0x1EA   0x.... 0x....      BL       GetDevID
   \      0x1EE   0x2802             CMP      R0,#+2
   \      0x1F0   0xD102             BNE.N    ??LoopProcRFM_17
   1751          		{
   1752          			//  송신기 : 수신중이 아닌경우 SPK OFF
   1753          //			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
   1754          			RFM_Spk((uint8_t)0);
   \      0x1F2   0x2000             MOVS     R0,#+0
   \      0x1F4   0x.... 0x....      BL       RFM_Spk
   1755          		}
   1756          #endif
   1757          
   1758          		//  Red LED Off
   1759          		HAL_GPIO_WritePin ( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_RESET ); //  RED LED
   \                     ??LoopProcRFM_17: (+1)
   \      0x1F8   0x2200             MOVS     R2,#+0
   \      0x1FA   0xF44F 0x4180      MOV      R1,#+16384
   \      0x1FE   0x....             LDR.N    R0,??DataTable47_47
   \      0x200   0x.... 0x....      BL       HAL_GPIO_WritePin
   1760          	}
   1761          
   1762          	//========================================================================
   1763          	//  수신기 Standby GPIO 제어 : 모듈동작시 1초간격 Blink
   1764          	static uint8_t s_nTickStandby;
   1765          
   1766          	if ( nTick - s_nTickStandby >= 1000 )
   \                     ??LoopProcRFM_16: (+1)
   \      0x204   0x....             LDR.N    R6,??DataTable47_49
   \      0x206   0x0021             MOVS     R1,R4
   \      0x208   0xB2C9             UXTB     R1,R1
   \      0x20A   0x7830             LDRB     R0,[R6, #+0]
   \      0x20C   0x1A09             SUBS     R1,R1,R0
   \      0x20E   0xF5B1 0x7F7A      CMP      R1,#+1000
   \      0x212   0xDB1B             BLT.N    ??LoopProcRFM_18
   1767          	{
   1768          		//	Standby GPIO Toggle
   1769          		if ( GetRFMMode() == RFMModeRx )
   \      0x214   0x.... 0x....      BL       GetRFMMode
   \      0x218   0x2802             CMP      R0,#+2
   \      0x21A   0xD105             BNE.N    ??LoopProcRFM_19
   1770          		{
   1771          			//  수신기:수신중 LED On ( Standby LED On )
   1772          			HAL_GPIO_WritePin( STANDBY_GPIO_Port, STANDBY_Pin, GPIO_PIN_SET );
   \      0x21C   0x2201             MOVS     R2,#+1
   \      0x21E   0x2180             MOVS     R1,#+128
   \      0x220   0x....             LDR.N    R0,??DataTable45
   \      0x222   0x.... 0x....      BL       HAL_GPIO_WritePin
   \      0x226   0xE008             B.N      ??LoopProcRFM_20
   1773          		}
   1774          		else
   1775          		{
   1776          			//  Standby LED Toggle
   1777          			HAL_GPIO_TogglePin( STANDBY_GPIO_Port, STANDBY_Pin );
   \                     ??LoopProcRFM_19: (+1)
   \      0x228   0x2180             MOVS     R1,#+128
   \      0x22A   0x....             LDR.N    R0,??DataTable45
   \      0x22C   0x.... 0x....      BL       HAL_GPIO_TogglePin
   1778          
   1779          			//	RFM(Board) Status LED
   1780          			HAL_GPIO_TogglePin ( LED_ST_GPIO_Port, LED_ST_Pin );
   \      0x230   0xF44F 0x4100      MOV      R1,#+32768
   \      0x234   0x....             LDR.N    R0,??DataTable47_50
   \      0x236   0x.... 0x....      BL       HAL_GPIO_TogglePin
   1781          		}
   1782          
   1783          		if ( GetRFMMode() == RFMModeNormal )
   \                     ??LoopProcRFM_20: (+1)
   \      0x23A   0x.... 0x....      BL       GetRFMMode
   \      0x23E   0x2800             CMP      R0,#+0
   \      0x240   0xD103             BNE.N    ??LoopProcRFM_21
   1784          		{
   1785          			//	Normal 모드인 경우 상태정보 갱신.
   1786          		    //	Reflash Status
   1787          		    ReflashStat( nTick );	//	상태정보 갱신.
   \      0x242   0x0020             MOVS     R0,R4
   \      0x244   0xB2C0             UXTB     R0,R0
   \      0x246   0x.... 0x....      BL       ReflashStat
   1788          		}
   1789          
   1790          #if defined(USE_SEND_STATUS)	//	상태 정보 전송.
   1791          		//========================================================================
   1792          		if ( GetRFMMode() == RFMModeNormal )
   1793          		{
   1794          		    SendStat(0);		//	상태정보전송.
   1795          
   1796          		    //	Reflash Status
   1797          		    ReflashStat( nTick );	//	상태정보 갱신.
   1798          		}
   1799          		//========================================================================
   1800          #endif
   1801          		s_nTickStandby = nTick;
   \                     ??LoopProcRFM_21: (+1)
   \      0x24A   0x7034             STRB     R4,[R6, #+0]
   1802          	}
   1803          
   1804          #if defined(TIMEOUT_UPGRADE)
   1805          
   1806          	//========================================================================
   1807          	//	Upgrade Mode 진입후 5분간 Rx가 없는경우 Normal모드로 변경.
   1808          	if ( ( GetDevID() == DevRF900M )						//	수신기.
   1809          		&& ( ( nTick - g_nStampRxPkt ) > (TIMEOUT_UPGRADE * 1000) )	//	Timeout
   1810          		&& ( GetRFMMode() == RFMModeUpgr )
   1811          		)
   \                     ??LoopProcRFM_18: (+1)
   \      0x24C   0x.... 0x....      BL       GetDevID
   \      0x250   0x2801             CMP      R0,#+1
   \      0x252   0xD117             BNE.N    ??LoopProcRFM_22
   \      0x254   0x0021             MOVS     R1,R4
   \      0x256   0xB2C9             UXTB     R1,R1
   \      0x258   0x7828             LDRB     R0,[R5, #+0]
   \      0x25A   0x1A09             SUBS     R1,R1,R0
   \      0x25C   0x....             LDR.N    R0,??DataTable47_51
   \      0x25E   0x4281             CMP      R1,R0
   \      0x260   0xDB10             BLT.N    ??LoopProcRFM_22
   \      0x262   0x.... 0x....      BL       GetRFMMode
   \      0x266   0x2804             CMP      R0,#+4
   \      0x268   0xD10C             BNE.N    ??LoopProcRFM_22
   1812          	{
   1813          		//========================================================================
   1814          		//	Normal 모드로 변경.
   1815          		SetRFMMode( (uint8_t)RFMModeNormal );	//	Normal Mode 로 변경
   \      0x26A   0x2000             MOVS     R0,#+0
   \      0x26C   0x.... 0x....      BL       SetRFMMode
   1816          		//========================================================================
   1817          
   1818          		//  RF 수신 Start
   1819          		g_nChRx = GetChRx();	//	ChTS1_1 + g_idxTrainSet * 2 + ((g_nCarNo+1) % 2);	// 현재 호차 채널
   \      0x270   0x....             LDR.N    R5,??DataTable47_52
   \      0x272   0x.... 0x....      BL       GetChRx
   \      0x276   0x7028             STRB     R0,[R5, #+0]
   1820          
   1821          		vRadio_StartRX(
   1822          			g_nChRx,	//g_idxTrainSet,	//		pRadioConfiguration->Radio_ChannelNumber,
   1823          			pRadioConfiguration->Radio_PacketLength );
   \      0x278   0x....             LDR.N    R0,??DataTable47_39
   \      0x27A   0x6800             LDR      R0,[R0, #+0]
   \      0x27C   0x7941             LDRB     R1,[R0, #+5]
   \      0x27E   0x7828             LDRB     R0,[R5, #+0]
   \      0x280   0x.... 0x....      BL       vRadio_StartRX
   1824          	}
   1825          
   1826          #endif
   1827          
   1828          #if defined(USE_STAT_REQ)	//	송신기 : 상태 정보 요청 100 msec간격.
   1829          	//========================================================================
   1830          	//	송신기 장치 상태정보 요청.
   1831          	static uint8_t oldTickStatReq = 0;
   1832          	static uint8_t s_idxCh = 0;
   1833          
   1834          	if	( ( (nTick - oldTickStatReq) > TIME_STAT_REQ )	//	주기 : 200 msec
   1835          			&&	GetDevID() == DevRF900T					//	송신기
   1836          			&&	GetRFMMode() == RFMModeNormal			//	Normal모드 : 상태정보 요청.
   1837          		)
   \                     ??LoopProcRFM_22: (+1)
   \      0x284   0x....             LDR.N    R5,??DataTable47_53
   \      0x286   0x0021             MOVS     R1,R4
   \      0x288   0xB2C9             UXTB     R1,R1
   \      0x28A   0x7828             LDRB     R0,[R5, #+0]
   \      0x28C   0x1A09             SUBS     R1,R1,R0
   \      0x28E   0xF240 0x102D      MOVW     R0,#+301
   \      0x292   0x4281             CMP      R1,R0
   \      0x294   0xDB30             BLT.N    ??LoopProcRFM_23
   \      0x296   0x.... 0x....      BL       GetDevID
   \      0x29A   0x2802             CMP      R0,#+2
   \      0x29C   0xD12C             BNE.N    ??LoopProcRFM_23
   \      0x29E   0x.... 0x....      BL       GetRFMMode
   \      0x2A2   0x2800             CMP      R0,#+0
   \      0x2A4   0xD128             BNE.N    ??LoopProcRFM_23
   1838          	{
   1839          		//	상태정보 요청.
   1840          		if ( s_idxCh < MaxTrainSet )
   \      0x2A6   0x....             LDR.N    R6,??DataTable47_54
   \      0x2A8   0x7830             LDRB     R0,[R6, #+0]
   \      0x2AA   0x280A             CMP      R0,#+10
   \      0x2AC   0xDA06             BGE.N    ??LoopProcRFM_24
   1841          		{
   1842          			//========================================================================
   1843          			//	수신기 상태정보
   1844          			SendStatReq( ChTS1_1 + (s_idxCh*ChGap) );
   \      0x2AE   0x7830             LDRB     R0,[R6, #+0]
   \      0x2B0   0x0080             LSLS     R0,R0,#+2
   \      0x2B2   0x3015             ADDS     R0,R0,#+21
   \      0x2B4   0xB2C0             UXTB     R0,R0
   \      0x2B6   0x.... 0x....      BL       SendStatReq
   \      0x2BA   0xE014             B.N      ??LoopProcRFM_25
   1845          		}
   1846          		else
   1847          		{
   1848          			//========================================================================
   1849          			//	송신기 상태정보
   1850          			if( ChTx_1 + ( s_idxCh % 2 ) != GetChRx() )
   \                     ??LoopProcRFM_24: (+1)
   \      0x2BC   0x7837             LDRB     R7,[R6, #+0]
   \      0x2BE   0x2002             MOVS     R0,#+2
   \      0x2C0   0xFB97 0xF1F0      SDIV     R1,R7,R0
   \      0x2C4   0xFB00 0x7711      MLS      R7,R0,R1,R7
   \      0x2C8   0x3708             ADDS     R7,R7,#+8
   \      0x2CA   0x.... 0x....      BL       GetChRx
   \      0x2CE   0x4287             CMP      R7,R0
   \      0x2D0   0xD009             BEQ.N    ??LoopProcRFM_25
   1851          			{
   1852          				//	타 송신기에 상태정보 요청.
   1853          				SendStatReq( ChTx_1 + ( s_idxCh % 2 ) );
   \      0x2D2   0x7830             LDRB     R0,[R6, #+0]
   \      0x2D4   0x2102             MOVS     R1,#+2
   \      0x2D6   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \      0x2DA   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \      0x2DE   0x3008             ADDS     R0,R0,#+8
   \      0x2E0   0xB2C0             UXTB     R0,R0
   \      0x2E2   0x.... 0x....      BL       SendStatReq
   1854          			}
   1855          		}
   1856          
   1857          //		if ( s_idxCh == 0 )
   1858          //		{
   1859          //		    //	Reflash Status
   1860          //		    ReflashStat( nTick );	//	상태정보 갱신.
   1861          //		}
   1862          
   1863          		s_idxCh = ( s_idxCh + 1 ) % ( MaxTrainSet + 2 );	//	MaxTrainSet : 10 + 2(송신기 2채널)
   \                     ??LoopProcRFM_25: (+1)
   \      0x2E6   0x7830             LDRB     R0,[R6, #+0]
   \      0x2E8   0x1C40             ADDS     R0,R0,#+1
   \      0x2EA   0x210C             MOVS     R1,#+12
   \      0x2EC   0xFB90 0xF2F1      SDIV     R2,R0,R1
   \      0x2F0   0xFB01 0x0012      MLS      R0,R1,R2,R0
   \      0x2F4   0x7030             STRB     R0,[R6, #+0]
   1864          
   1865          		oldTickStatReq = nTick;
   \      0x2F6   0x702C             STRB     R4,[R5, #+0]
   1866          	}
   1867          #endif
   1868          }
   \                     ??LoopProcRFM_23: (+1)
   \      0x2F8   0xB013             ADD      SP,SP,#+76
   \      0x2FA   0xBDF0             POP      {R4-R7,PC}

   \                                 In section .bss, align 1
   \                     `LoopProcRFM{2}{3}::nOldRFMMode`:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
   \                     `LoopProcRFM::s_nTickStandby`:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
   \                     `LoopProcRFM::oldTickStatReq`:
   \        0x0                      DS8 1

   \                                 In section .bss, align 1
   \                     `LoopProcRFM::s_idxCh`:
   \        0x0                      DS8 1
   1869          
   1870          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1871          void UpdateStat( RFMPktStat *pStat )
   1872          //========================================================================
   1873          {
   \                     UpdateStat: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x0004             MOVS     R4,R0
   1874          	//	버전정보 갱신.
   1875          	if ( pStat == NULL ) return ;
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD032             BEQ.N    ??UpdateStat_0
   1876          
   1877          	if ( 0 < pStat->nCarNo && pStat->nCarNo <= MaxCarNo )
   \                     ??UpdateStat_1: (+1)
   \        0xA   0x7B60             LDRB     R0,[R4, #+13]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD02F             BEQ.N    ??UpdateStat_2
   \       0x10   0x7B60             LDRB     R0,[R4, #+13]
   \       0x12   0x280E             CMP      R0,#+14
   \       0x14   0xDA2C             BGE.N    ??UpdateStat_2
   1878          	{
   1879          		uint8_t idx = pStat->nCarNo;
   \       0x16   0x7B67             LDRB     R7,[R4, #+13]
   1880          
   1881          		//========================================================================
   1882          		//	상태정보 갱신.
   1883          		memcpy( &g_devStat[idx].stat, pStat, sizeof(RFMPktStat) );
   \       0x18   0x2519             MOVS     R5,#+25
   \       0x1A   0x0026             MOVS     R6,R4
   \       0x1C   0xF05F 0x081B      MOVS     R8,#+27
   \       0x20   0x.... 0x....      LDR.W    R9,??DataTable47_55
   \       0x24   0x0038             MOVS     R0,R7
   \       0x26   0xB2C0             UXTB     R0,R0
   \       0x28   0xFB08 0xF000      MUL      R0,R8,R0
   \       0x2C   0xEB09 0x0A00      ADD      R10,R9,R0
   \       0x30   0x002A             MOVS     R2,R5
   \       0x32   0x0031             MOVS     R1,R6
   \       0x34   0x4650             MOV      R0,R10
   \       0x36   0x.... 0x....      BL       __aeabi_memcpy
   1884          
   1885          		//========================================================================
   1886          		//	RSSI 갱신
   1887          		g_devStat[idx].nRSSI = g_nRSSI;
   \       0x3A   0x0038             MOVS     R0,R7
   \       0x3C   0xB2C0             UXTB     R0,R0
   \       0x3E   0xFB08 0xF800      MUL      R8,R8,R0
   \       0x42   0xEB09 0x0008      ADD      R0,R9,R8
   \       0x46   0x....             LDR.N    R1,??DataTable47_56
   \       0x48   0x7809             LDRB     R1,[R1, #+0]
   \       0x4A   0x7681             STRB     R1,[R0, #+26]
   1888          
   1889          		//========================================================================
   1890          		//	버전정보 갱신.
   1891          
   1892          #if defined(USE_HOP_MANUAL)
   1893          		sprintf(_sVerList[idx], "%02d:v%d/hop(%d)", idx,
   1894          				pStat->ver_build,
   1895          				pStat->nManHop
   1896          				);
   \       0x4C   0x7DA0             LDRB     R0,[R4, #+22]
   \       0x4E   0x9000             STR      R0,[SP, #+0]
   \       0x50   0x8A63             LDRH     R3,[R4, #+18]
   \       0x52   0x003A             MOVS     R2,R7
   \       0x54   0xB2D2             UXTB     R2,R2
   \       0x56   0x....             LDR.N    R1,??DataTable47_57
   \       0x58   0x.... 0x....      LDR.W    R12,??DataTable47_58
   \       0x5C   0x46BE             MOV      LR,R7
   \       0x5E   0xFA5F 0xFE8E      UXTB     LR,LR
   \       0x62   0x2014             MOVS     R0,#+20
   \       0x64   0xFB00 0xFE0E      MUL      LR,R0,LR
   \       0x68   0xEB0C 0x000E      ADD      R0,R12,LR
   \       0x6C   0x.... 0x....      BL       sprintf
   1897          #else
   1898          		sprintf(_sVerList[idx], "%02d:v%d.%d.%d.%d", idx,
   1899          				pStat->ver_main,
   1900          				pStat->ver_sub,
   1901          				pStat->ver_det,
   1902          				pStat->ver_build
   1903          				);
   1904          #endif
   1905          	}
   1906          }
   \                     ??UpdateStat_2: (+1)
   \                     ??UpdateStat_0: (+1)
   \       0x70   0xE8BD 0x87F3      POP      {R0,R1,R4-R10,PC}
   1907          
   1908          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1909          void SetStat( uint8_t nRspID )
   1910          //========================================================================
   1911          {
   \                     SetStat: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   1912          	//	상태정보 저장.
   1913          	//	상태정보 수신 시간 저장.
   1914          
   1915          	//	장치 응답 Flag 설정.
   1916          	g_flagRspID	|= ( 0x1 << nRspID );
   \        0x4   0x....             LDR.N    R0,??DataTable47_9
   \        0x6   0x8801             LDRH     R1,[R0, #+0]
   \        0x8   0x2201             MOVS     R2,#+1
   \        0xA   0x40A2             LSLS     R2,R2,R4
   \        0xC   0x4311             ORRS     R1,R2,R1
   \        0xE   0x8001             STRH     R1,[R0, #+0]
   1917          
   1918          	//	TimeStamp 저장.
   1919          //DEL	stampStat[nRspID] = HAL_GetTick();
   1920          	g_devStat[nRspID].stampRx = HAL_GetTick();
   \       0x10   0x.... 0x....      BL       HAL_GetTick
   \       0x14   0x....             LDR.N    R2,??DataTable47_55
   \       0x16   0x0023             MOVS     R3,R4
   \       0x18   0xB2DB             UXTB     R3,R3
   \       0x1A   0x211B             MOVS     R1,#+27
   \       0x1C   0x434B             MULS     R3,R1,R3
   \       0x1E   0xEB02 0x0103      ADD      R1,R2,R3
   \       0x22   0x7648             STRB     R0,[R1, #+25]
   1921          }
   \       0x24   0xBD10             POP      {R4,PC}
   1922          
   1923          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1924          void ReflashStat( uint8_t nTick )
   1925          //========================================================================
   1926          {
   \                     ReflashStat: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   1927          	//	상태정보 갱신.
   1928          	//	Timeout 초과 상태정보 Disable
   1929          	if( g_bSetRspIDManual )
   \        0x4   0x....             LDR.N    R0,??DataTable47_8
   \        0x6   0x7800             LDRB     R0,[R0, #+0]
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD128             BNE.N    ??ReflashStat_0
   1930          	{
   1931          		//	ID 수동설정모드인 경우 return
   1932          		return ;
   1933          	}
   1934          
   1935          	uint8_t idx;
   1936          
   1937          	for( idx = 0; idx < MaxCarNo; idx++ )
   \                     ??ReflashStat_1: (+1)
   \        0xC   0x2500             MOVS     R5,#+0
   \                     ??ReflashStat_2: (+1)
   \        0xE   0x0028             MOVS     R0,R5
   \       0x10   0xB2C0             UXTB     R0,R0
   \       0x12   0x280D             CMP      R0,#+13
   \       0x14   0xDA23             BGE.N    ??ReflashStat_3
   1938          	{
   1939          		if ( GetCarNo() == idx )
   \       0x16   0x.... 0x....      BL       GetCarNo
   \       0x1A   0x0029             MOVS     R1,R5
   \       0x1C   0xB2C9             UXTB     R1,R1
   \       0x1E   0x4288             CMP      R0,R1
   \       0x20   0xD01B             BEQ.N    ??ReflashStat_4
   1940          		{
   1941          			//	자신의 ID Skip
   1942          			continue;
   1943          		}
   1944          
   1945          		if ( ( nTick - g_devStat[idx].stampRx ) > TIMEOUT_RECV_STATUS * 1000 )
   \                     ??ReflashStat_5: (+1)
   \       0x22   0x211B             MOVS     R1,#+27
   \       0x24   0x....             LDR.N    R2,??DataTable47_55
   \       0x26   0x0023             MOVS     R3,R4
   \       0x28   0xB2DB             UXTB     R3,R3
   \       0x2A   0x0028             MOVS     R0,R5
   \       0x2C   0xB2C0             UXTB     R0,R0
   \       0x2E   0x4348             MULS     R0,R1,R0
   \       0x30   0x4410             ADD      R0,R2,R0
   \       0x32   0x7E40             LDRB     R0,[R0, #+25]
   \       0x34   0x1A1B             SUBS     R3,R3,R0
   \       0x36   0xF640 0x70A1      MOVW     R0,#+4001
   \       0x3A   0x4283             CMP      R3,R0
   \       0x3C   0xDB0D             BLT.N    ??ReflashStat_4
   1946          		{
   1947          			g_flagRspID &= ~( 0x1 << idx );
   \       0x3E   0x....             LDR.N    R0,??DataTable47_9
   \       0x40   0x8803             LDRH     R3,[R0, #+0]
   \       0x42   0x2601             MOVS     R6,#+1
   \       0x44   0x40AE             LSLS     R6,R6,R5
   \       0x46   0x43B3             BICS     R3,R3,R6
   \       0x48   0x8003             STRH     R3,[R0, #+0]
   1948          
   1949          			//========================================================================
   1950          			//	Timeout 발생시 RSSI값 초기화.
   1951          			g_devStat[idx].nRSSI = 0;
   \       0x4A   0x0028             MOVS     R0,R5
   \       0x4C   0xB2C0             UXTB     R0,R0
   \       0x4E   0xFB01 0xF100      MUL      R1,R1,R0
   \       0x52   0xEB02 0x0001      ADD      R0,R2,R1
   \       0x56   0x2100             MOVS     R1,#+0
   \       0x58   0x7681             STRB     R1,[R0, #+26]
   1952          			//========================================================================
   1953          		}
   1954          	}
   \                     ??ReflashStat_4: (+1)
   \       0x5A   0x1C6D             ADDS     R5,R5,#+1
   \       0x5C   0xE7D7             B.N      ??ReflashStat_2
   1955          }
   \                     ??ReflashStat_3: (+1)
   \                     ??ReflashStat_0: (+1)
   \       0x5E   0xBD70             POP      {R4-R6,PC}
   1956          
   1957          
   1958          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1959          void ReloadStampStat( void )
   1960          //========================================================================
   1961          {
   \                     ReloadStampStat: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   1962          	//	상태정보 시간 갱신.
   1963          	//	-> 상태정보 시간 최신값으로 유지.
   1964          	//	-> 방송/통화 중 상태정보 전송을 하지 않기 때문에 방송통화 이후에 상태정보가 Reset되는 현상 방지.
   1965          
   1966          	uint8_t nStamp = HAL_GetTick();
   \        0x2   0x.... 0x....      BL       HAL_GetTick
   1967          
   1968          	uint8_t idx;
   1969          
   1970          	for( idx = 0; idx < 16; idx++ )
   \        0x6   0x2200             MOVS     R2,#+0
   \                     ??ReloadStampStat_0: (+1)
   \        0x8   0x0011             MOVS     R1,R2
   \        0xA   0xB2C9             UXTB     R1,R1
   \        0xC   0x2910             CMP      R1,#+16
   \        0xE   0xDA0F             BGE.N    ??ReloadStampStat_1
   1971          	{
   1972          		if( g_flagRspID & ( 0x1 << idx ) )
   \       0x10   0x....             LDR.N    R1,??DataTable47_9
   \       0x12   0x8809             LDRH     R1,[R1, #+0]
   \       0x14   0x2301             MOVS     R3,#+1
   \       0x16   0x4093             LSLS     R3,R3,R2
   \       0x18   0x4219             TST      R1,R3
   \       0x1A   0xD007             BEQ.N    ??ReloadStampStat_2
   1973          		{
   1974          			g_devStat[idx].stampRx = nStamp;
   \       0x1C   0x....             LDR.N    R3,??DataTable47_55
   \       0x1E   0x0014             MOVS     R4,R2
   \       0x20   0xB2E4             UXTB     R4,R4
   \       0x22   0x211B             MOVS     R1,#+27
   \       0x24   0x434C             MULS     R4,R1,R4
   \       0x26   0xEB03 0x0104      ADD      R1,R3,R4
   \       0x2A   0x7648             STRB     R0,[R1, #+25]
   1975          		}
   1976          	}
   \                     ??ReloadStampStat_2: (+1)
   \       0x2C   0x1C52             ADDS     R2,R2,#+1
   \       0x2E   0xE7EB             B.N      ??ReloadStampStat_0
   1977          }
   \                     ??ReloadStampStat_1: (+1)
   \       0x30   0xBD10             POP      {R4,PC}

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15:
   \        0x0   0x52 0x46          DC8      "RFM"          

   \              0x4D 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable15_1:
   \        0x0   0x52 0x46          DC8      "RFT"          

   \              0x54 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \        0x0   0x25 0x73          DC8      0x25, 0x73, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36:
   \        0x0   0x52 0x46          DC8      "RFM"          

   \              0x4D 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_1:
   \        0x0   0x0A 0x0A          DC8      0x0A, 0x0A, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable36_2:
   \        0x0   0x25 0x73          DC8      "%s\n"         

   \              0x0A 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37:
   \        0x0   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_1:
   \        0x0   0x....'....        DC32     `SetDevID::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_2:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable37_3:
   \        0x0   0x....'....        DC32     g_nRFMMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_1:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_2:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_3:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable38_4:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39:
   \        0x0   0x....'....        DC32     g_nDevID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39_1:
   \        0x0   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39_2:
   \        0x0   0x....'....        DC32     hi2c1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39_3:
   \        0x0   0x....'....        DC32     `LoadTrainSetIdx::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39_4:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable39_5:
   \        0x0   0x....'....        DC32     `GetTrainSetIdx::s_bOnce`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_1:
   \        0x0   0x....'....        DC32     g_nCarNo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_2:
   \        0x0   0x....'....        DC32     g_devStat

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_3:
   \        0x0   0x....'....        DC32     g_nChPA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_4:
   \        0x0   0x....'....        DC32     g_nChRFT

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_5:
   \        0x0   0x46 0x00          DC8      "F",0x0,0x0    

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_6:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_7:
   \        0x0   0x....'....        DC32     g_idxTrainSet

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_8:
   \        0x0   0x....'....        DC32     `SetTrainSetIdx::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_9:
   \        0x0   0x....'....        DC32     `GetManHop::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_10:
   \        0x0   0x....'....        DC32     `SetManHop::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_11:
   \        0x0   0x....'....        DC32     `LoadCarNo::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_12:
   \        0x0   0x....'....        DC32     `GetCarNo::s_bOnce`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_13:
   \        0x0   0x....'....        DC32     `SetCarNo::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable40_14:
   \        0x0   0x....'....        DC32     `GetSpkVol::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable41:
   \        0x0   0x....'....        DC32     `SetSpkVol::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42:
   \        0x0   0x42 0x00          DC8      "B",0x0,0x0    

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_1:
   \        0x0   0x....'....        DC32     `GetMicVol::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_2:
   \        0x0   0x....'....        DC32     `SetMicVol::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_3:
   \        0x0   0x....'....        DC32     Si446xCmd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_4:
   \        0x0   0x....'....        DC32     `RF_RSSI::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_5:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_6:
   \        0x0   0x....'....        DC32     `RFM_Spk::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_7:
   \        0x0   0x....'....        DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_8:
   \        0x0   0x....'....        DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_9:
   \        0x0   0x....'....        DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_10:
   \        0x0   0x....'....        DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_11:
   \        0x0   0x....'....        DC32     `cmd_ts::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_12:
   \        0x0   0x....'....        DC32     `cmd_ch::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable42_13:
   \        0x0   0x....'....        DC32     `cmd_car::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43:
   \        0x0   0x....'....        DC32     `cmd_hop::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_1:
   \        0x0   0x....'....        DC32     ?_25

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_2:
   \        0x0   0x....'....        DC32     ?_26

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable43_3:
   \        0x0   0x....'....        DC32     ?_28

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44:
   \        0x0   0x....'....        DC32     ?_29

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable44_1:
   \        0x0   0x....'....        DC32     ?_30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45:
   \        0x0   0x4002'1000        DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_1:
   \        0x0   0x....'....        DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_2:
   \        0x0   0x....'....        DC32     ?_31

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_3:
   \        0x0   0x....'....        DC32     ?_32

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_4:
   \        0x0   0x....'....        DC32     ?_33

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_5:
   \        0x0   0x....'....        DC32     ?_34

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable45_6:
   \        0x0   0x....'....        DC32     ?_35

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46:
   \        0x0   0x....'....        DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_1:
   \        0x0   0x....'....        DC32     ?_22

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_2:
   \        0x0   0x....'....        DC32     ?_23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_3:
   \        0x0   0x....'....        DC32     nRxPkt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable46_4:
   \        0x0   0x....'....        DC32     nTxPkt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47:
   \        0x0   0x....'....        DC32     ?_24

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_1:
   \        0x0   0x....'....        DC32     ?_27

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_2:
   \        0x0   0x....'....        DC32     ?_36

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_3:
   \        0x0   0x....'....        DC32     ?_37

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_4:
   \        0x0   0x....'....        DC32     `cmd_txpwr::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_5:
   \        0x0   0x....'....        DC32     ?_38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_6:
   \        0x0   0x....'....        DC32     `cmd_rspid::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_7:
   \        0x0   0x....'....        DC32     ?_39

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_8:
   \        0x0   0x....'....        DC32     g_bSetRspIDManual

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_9:
   \        0x0   0x....'....        DC32     g_flagRspID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_10:
   \        0x0   0x....'....        DC32     ?_40

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_11:
   \        0x0   0x....'....        DC32     `cmd_OccPa::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_12:
   \        0x0   0x....'....        DC32     ?_41

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_13:
   \        0x0   0x....'....        DC32     ?_42

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_14:
   \        0x0   0x4002'1000        DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_15:
   \        0x0   0x....'....        DC32     ?_43

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_16:
   \        0x0   0x....'....        DC32     `RFM_I2SEx_TxRxCpltCallback::idx`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_17:
   \        0x0   0x....'....        DC32     bufAudioDec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_18:
   \        0x0   0x....'....        DC32     bufAudioEnc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_19:
   \        0x0   0x....'....        DC32     hi2s3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_20:
   \        0x0   0x....'....        DC32     g_qBufAudioTx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_21:
   \        0x0   0x....'....        DC32     r_audio_buff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_22:
   \        0x0   0x....'....        DC32     bRxBuffering

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_23:
   \        0x0   0x....'....        DC32     g_qBufAudioRx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_24:
   \        0x0   0x....'....        DC32     t_audio_buff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_25:
   \        0x0   0x....'....        DC32     `RFM_I2SEx_TxRxCpltCallback{2}{8}{9}{10}{11}::nlastSample`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_26:
   \        0x0   0x....'....        DC32     `InitRFM::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_27:
   \        0x0   0x....'....        DC32     hi2c1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_28:
   \        0x0   0x....'....        DC32     hi2c3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_29:
   \        0x0   0x....'....        DC32     ?_46

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_30:
   \        0x0   0x....'....        DC32     RFM_I2SEx_TxRxCpltCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_31:
   \        0x0   0x....'....        DC32     ?_47

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_32:
   \        0x0   0x....'....        DC32     g_idxTrainSet

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_33:
   \        0x0   0x....'....        DC32     g_nSpkLevel

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_34:
   \        0x0   0x....'....        DC32     g_nManHopping

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_35:
   \        0x0   0x....'....        DC32     ?_48

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_36:
   \        0x0   0x....'....        DC32     ?_49

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_37:
   \        0x0   0x....'....        DC32     ?_50

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_38:
   \        0x0   0x....'....        DC32     ?_51

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_39:
   \        0x0   0x....'....        DC32     pRadioConfiguration

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_40:
   \        0x0   0x....'....        DC32     ?_52

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_41:
   \        0x0   0x....'....        DC32     g_offsetCA

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_42:
   \        0x0   0x....'....        DC32     ?_53

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_43:
   \        0x0   0x....'....        DC32     `RFM_main::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_44:
   \        0x0   0x....'....        DC32     `RFM_main::nCallTimeCnt`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_45:
   \        0x0   0x....'....        DC32     `LoopProcRFM{2}{3}::nOldRFMMode`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_46:
   \        0x0   0x....'....        DC32     ?_54

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_47:
   \        0x0   0x4002'0400        DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_48:
   \        0x0   0x....'....        DC32     g_nStampRxPkt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_49:
   \        0x0   0x....'....        DC32     `LoopProcRFM::s_nTickStandby`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_50:
   \        0x0   0x4002'0C00        DC32     0x40020c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_51:
   \        0x0   0x0004'93E1        DC32     0x493e1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_52:
   \        0x0   0x....'....        DC32     g_nChRx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_53:
   \        0x0   0x....'....        DC32     `LoopProcRFM::oldTickStatReq`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_54:
   \        0x0   0x....'....        DC32     `LoopProcRFM::s_idxCh`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_55:
   \        0x0   0x....'....        DC32     g_devStat

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_56:
   \        0x0   0x....'....        DC32     g_nRSSI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_57:
   \        0x0   0x....'....        DC32     ?_55

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable47_58:
   \        0x0   0x....'....        DC32     _sVerList

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x25 0x73          DC8 "%s : %s(%d)\012"

   \              0x20 0x3A    

   \              0x20 0x25    

   \              0x73 0x28    

   \              0x25 0x64    

   \              0x29 0x0A    

   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \        0x0   0x52 0x46          DC8 "RFM"

   \              0x4D 0x00

   \                                 In section .rodata, align 4
   \        0x0   0x52 0x46          DC8 "RFT"

   \              0x54 0x00

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x73          DC8 "%s"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x5B 0x4E          DC8 "[Normal]"

   \              0x6F 0x72    

   \              0x6D 0x61    

   \              0x6C 0x5D    

   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x5B 0x54          DC8 "[Tx]"

   \              0x78 0x5D    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x5B 0x52          DC8 "[Rx]"

   \              0x78 0x5D    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x5B 0x4F          DC8 "[Occ]"

   \              0x63 0x63    

   \              0x5D 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x5B 0x55          DC8 "[Upgr]"

   \              0x70 0x67    

   \              0x72 0x5D    

   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x5B 0x4E          DC8 "[N/A]"

   \              0x2F 0x41    

   \              0x5D 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x25 0x73          DC8 "%s(%d) - EEPROM Error\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x45    

   \              0x45 0x50    

   \              0x52 0x4F    

   \              0x4D 0x20    

   \              0x45 0x72    

   \              0x72 0x6F    

   \              0x72 0x0A    

   \              0x00
   \       0x17                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x25 0x73          DC8 "%s(%d) - %d\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x25    

   \              0x64 0x0A    

   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x25 0x73          DC8 "%s(%d) - ant1:%d / ant2:%d / curr:%d / latch:%d\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x61    

   \              0x6E 0x74    

   \              0x31 0x3A    

   \              0x25 0x64    

   \              0x20 0x2F    

   \              0x20 0x61    

   \              0x6E 0x74    

   \              0x32 0x3A    

   \              0x25 0x64    

   \              0x20 0x2F    

   \              0x20 0x63    

   \              0x75 0x72    

   \              0x72 0x3A    

   \              0x25 0x64    

   \              0x20 0x2F    

   \              0x20 0x6C    

   \              0x61 0x74    

   \              0x63 0x68    

   \              0x3A 0x25    

   \              0x64 0x0A    

   \              0x00
   \       0x31                      DS8 3

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0A          DC8 "\012\012"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x73          DC8 "%s\012"

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x56 0x65          DC8 "Version = %s(%s - %s)\012"

   \              0x72 0x73    

   \              0x69 0x6F    

   \              0x6E 0x20    

   \              0x3D 0x20    

   \              0x25 0x73    

   \              0x28 0x25    

   \              0x73 0x20    

   \              0x2D 0x20    

   \              0x25 0x73    

   \              0x29 0x0A    

   \              0x00
   \       0x17                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x31 0x2E          DC8 "1.1.0.274"

   \              0x31 0x2E    

   \              0x30 0x2E    

   \              0x32 0x37    

   \              0x34 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x53 0x65          DC8 "Sep 29 2022"

   \              0x70 0x20    

   \              0x32 0x39    

   \              0x20 0x32    

   \              0x30 0x32    

   \              0x32 0x00

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x31 0x36          DC8 "16:58:16"

   \              0x3A 0x35    

   \              0x38 0x3A    

   \              0x31 0x36    

   \              0x00
   \        0x9                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x52 0x46          DC8 "RFM v%s"

   \              0x4D 0x20    

   \              0x76 0x25    

   \              0x73 0x00

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x64          DC8 "%d"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Train Set : %d\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x54    

   \              0x72 0x61    

   \              0x69 0x6E    

   \              0x20 0x53    

   \              0x65 0x74    

   \              0x20 0x3A    

   \              0x20 0x25    

   \              0x64 0x0A    

   \              0x00
   \       0x19                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Channel : %d\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x43    

   \              0x68 0x61    

   \              0x6E 0x6E    

   \              0x65 0x6C    

   \              0x20 0x3A    

   \              0x20 0x25    

   \              0x64 0x0A    

   \              0x00
   \       0x17                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Car No : %d\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x43    

   \              0x61 0x72    

   \              0x20 0x4E    

   \              0x6F 0x20    

   \              0x3A 0x20    

   \              0x25 0x64    

   \              0x0A 0x00
   \       0x16                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Manual Hop : %d\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x4D    

   \              0x61 0x6E    

   \              0x75 0x61    

   \              0x6C 0x20    

   \              0x48 0x6F    

   \              0x70 0x20    

   \              0x3A 0x20    

   \              0x25 0x64    

   \              0x0A 0x00
   \       0x1A                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_25:
   \        0x0   0x5B 0x53          DC8 "[S/W Info]\012"

   \              0x2F 0x57    

   \              0x20 0x49    

   \              0x6E 0x66    

   \              0x6F 0x5D    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_26:
   \        0x0   0x20 0x2D          DC8 " - Boot : %d Byte\012"

   \              0x20 0x42    

   \              0x6F 0x6F    

   \              0x74 0x20    

   \              0x3A 0x20    

   \              0x25 0x64    

   \              0x20 0x42    

   \              0x79 0x74    

   \              0x65 0x0A    

   \              0x00
   \       0x13                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_27:
   \        0x0   0x20 0x2D          DC8 " - App : %d Byte\012"

   \              0x20 0x41    

   \              0x70 0x70    

   \              0x20 0x3A    

   \              0x20 0x25    

   \              0x64 0x20    

   \              0x42 0x79    

   \              0x74 0x65    

   \              0x0A 0x00
   \       0x12                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_28:
   \        0x0   0x5B 0x53          DC8 "[Setting]\012"

   \              0x65 0x74    

   \              0x74 0x69    

   \              0x6E 0x67    

   \              0x5D 0x0A    

   \              0x00
   \        0xB                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_29:
   \        0x0   0x20 0x2D          DC8 " - Train Set : %d\012"

   \              0x20 0x54    

   \              0x72 0x61    

   \              0x69 0x6E    

   \              0x20 0x53    

   \              0x65 0x74    

   \              0x20 0x3A    

   \              0x20 0x25    

   \              0x64 0x0A    

   \              0x00
   \       0x13                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_30:
   \        0x0   0x20 0x2D          DC8 " - Car No : %d\012"

   \              0x20 0x43    

   \              0x61 0x72    

   \              0x20 0x4E    

   \              0x6F 0x20    

   \              0x3A 0x20    

   \              0x25 0x64    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_31:
   \        0x0   0x20 0x2D          DC8 " - RF Channel: %d\012"

   \              0x20 0x52    

   \              0x46 0x20    

   \              0x43 0x68    

   \              0x61 0x6E    

   \              0x6E 0x65    

   \              0x6C 0x3A    

   \              0x20 0x25    

   \              0x64 0x0A    

   \              0x00
   \       0x13                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_32:
   \        0x0   0x20 0x2D          DC8 " - Mode : %s(%d)\012"

   \              0x20 0x4D    

   \              0x6F 0x64    

   \              0x65 0x20    

   \              0x3A 0x20    

   \              0x25 0x73    

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x0A 0x00
   \       0x12                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_33:
   \        0x0   0x20 0x2D          DC8 " - GetChNearRFM() : %d\012"

   \              0x20 0x47    

   \              0x65 0x74    

   \              0x43 0x68    

   \              0x4E 0x65    

   \              0x61 0x72    

   \              0x52 0x46    

   \              0x4D 0x28    

   \              0x29 0x20    

   \              0x3A 0x20    

   \              0x25 0x64    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_34:
   \        0x0   0x20 0x2D          DC8 " - GetChNearRFT() : %d\012"

   \              0x20 0x47    

   \              0x65 0x74    

   \              0x43 0x68    

   \              0x4E 0x65    

   \              0x61 0x72    

   \              0x52 0x46    

   \              0x54 0x28    

   \              0x29 0x20    

   \              0x3A 0x20    

   \              0x25 0x64    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_35:
   \        0x0   0x20 0x2D          DC8 " - GetChPARFT() : %d\012"

   \              0x20 0x47    

   \              0x65 0x74    

   \              0x43 0x68    

   \              0x50 0x41    

   \              0x52 0x46    

   \              0x54 0x28    

   \              0x29 0x20    

   \              0x3A 0x20    

   \              0x25 0x64    

   \              0x0A 0x00
   \       0x16                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_36:
   \        0x0   0x20 0x2D          DC8 " - GetChPA() : %d\012"

   \              0x20 0x47    

   \              0x65 0x74    

   \              0x43 0x68    

   \              0x50 0x41    

   \              0x28 0x29    

   \              0x20 0x3A    

   \              0x20 0x25    

   \              0x64 0x0A    

   \              0x00
   \       0x13                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_37:
   \        0x0   0x5B 0x52          DC8 "[RF Info] Tx : %d / Rx : %d\012"

   \              0x46 0x20    

   \              0x49 0x6E    

   \              0x66 0x6F    

   \              0x5D 0x20    

   \              0x54 0x78    

   \              0x20 0x3A    

   \              0x20 0x25    

   \              0x64 0x20    

   \              0x2F 0x20    

   \              0x52 0x78    

   \              0x20 0x3A    

   \              0x20 0x25    

   \              0x64 0x0A    

   \              0x00
   \       0x1D                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_38:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Tx Pwr(%d)\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x54    

   \              0x78 0x20    

   \              0x50 0x77    

   \              0x72 0x28    

   \              0x25 0x64    

   \              0x29 0x0A    

   \              0x00
   \       0x15                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_39:
   \        0x0   0x25 0x73          DC8 "%s(%d) - return\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x72    

   \              0x65 0x74    

   \              0x75 0x72    

   \              0x6E 0x0A    

   \              0x00
   \       0x11                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_40:
   \        0x0   0x25 0x73          DC8 "%s(%d) - ID Flag : 0x%04X\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x49    

   \              0x44 0x20    

   \              0x46 0x6C    

   \              0x61 0x67    

   \              0x20 0x3A    

   \              0x20 0x30    

   \              0x78 0x25    

   \              0x30 0x34    

   \              0x58 0x0A    

   \              0x00
   \       0x1B                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_41:
   \        0x0   0x25 0x73          DC8 "%s(%d)\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_42:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Start\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x53    

   \              0x74 0x61    

   \              0x72 0x74    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_43:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Stop\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x53    

   \              0x74 0x6F    

   \              0x70 0x0A    

   \              0x00
   \        0xF                      DS8 1

   \                                 In section .rodata, align 2
   \        0x0   0x46 0x00          DC8 "F"

   \                                 In section .rodata, align 2
   \        0x0   0x42 0x00          DC8 "B"

   \                                 In section .rodata, align 4
   \                     ?_46:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Codec ( MAX9860ETG+ ) / Rev. 0x%02X\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x43    

   \              0x6F 0x64    

   \              0x65 0x63    

   \              0x20 0x28    

   \              0x20 0x4D    

   \              0x41 0x58    

   \              0x39 0x38    

   \              0x36 0x30    

   \              0x45 0x54    

   \              0x47 0x2B    

   \              0x20 0x29    

   \              0x20 0x2F    

   \              0x20 0x52    

   \              0x65 0x76    

   \              0x2E 0x20    

   \              0x30 0x78    

   \              0x25 0x30    

   \              0x32 0x58    

   \              0x0A 0x00
   \       0x2E                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_47:
   \        0x0   0x25 0x73          DC8 "%s(%d) - EEPROM OK\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x45    

   \              0x45 0x50    

   \              0x52 0x4F    

   \              0x4D 0x20    

   \              0x4F 0x4B    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_48:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Man Hopping ( %d )\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x4D    

   \              0x61 0x6E    

   \              0x20 0x48    

   \              0x6F 0x70    

   \              0x70 0x69    

   \              0x6E 0x67    

   \              0x20 0x28    

   \              0x20 0x25    

   \              0x64 0x20    

   \              0x29 0x0A    

   \              0x00
   \       0x1D                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_49:
   \        0x0   0x3D 0x3D          DC8 "=========================\012"

   \              0x3D 0x3D    

   \              0x3D 0x3D    

   \              0x3D 0x3D    

   \              0x3D 0x3D    

   \              0x3D 0x3D    

   \              0x3D 0x3D    

   \              0x3D 0x3D    

   \              0x3D 0x3D    

   \              0x3D 0x3D    

   \              0x3D 0x3D    

   \              0x3D 0x3D    

   \              0x3D 0x0A    

   \              0x00
   \       0x1B                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_50:
   \        0x0   0x25 0x30          DC8 "%08x\012"

   \              0x38 0x78    

   \              0x0A 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_51:
   \        0x0   0x2D 0x2D          DC8 "-------------------------\012"

   \              0x2D 0x2D    

   \              0x2D 0x2D    

   \              0x2D 0x2D    

   \              0x2D 0x2D    

   \              0x2D 0x2D    

   \              0x2D 0x2D    

   \              0x2D 0x2D    

   \              0x2D 0x2D    

   \              0x2D 0x2D    

   \              0x2D 0x2D    

   \              0x2D 0x2D    

   \              0x2D 0x0A    

   \              0x00
   \       0x1B                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_52:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Radio Ch(%d) / g_idxTrainSet(%d)\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x52    

   \              0x61 0x64    

   \              0x69 0x6F    

   \              0x20 0x43    

   \              0x68 0x28    

   \              0x25 0x64    

   \              0x29 0x20    

   \              0x2F 0x20    

   \              0x67 0x5F    

   \              0x69 0x64    

   \              0x78 0x54    

   \              0x72 0x61    

   \              0x69 0x6E    

   \              0x53 0x65    

   \              0x74 0x28    

   \              0x25 0x64    

   \              0x29 0x0A    

   \              0x00
   \       0x2B                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_53:
   \        0x0   0x25 0x73          DC8 "%s(%d) - offsetCA( %d )\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x6F    

   \              0x66 0x66    

   \              0x73 0x65    

   \              0x74 0x43    

   \              0x41 0x28    

   \              0x20 0x25    

   \              0x64 0x20    

   \              0x29 0x0A    

   \              0x00
   \       0x19                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_54:
   \        0x0   0xEC 0x88          DC8 "\354\210\230\354\213\240\354\244\221..."

   \              0x98 0xEC    

   \              0x8B 0xA0    

   \              0xEC 0xA4    

   \              0x91 0x2E    

   \              0x2E 0x2E    

   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_55:
   \        0x0   0x25 0x30          DC8 "%02d:v%d/hop(%d)"

   \              0x32 0x64    

   \              0x3A 0x76    

   \              0x25 0x64    

   \              0x2F 0x68    

   \              0x6F 0x70    

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x00
   \       0x11                      DS8 3
   1978          
   1979          
   1980          #if defined(USE_ENV_TEST)
   1981          
   1982          static uint8_t	s_bEnLoopRFTx = 0;
   1983          
   1984          //========================================================================
   1985          void	SetLoopRFTx		( uint8_t bEnable )	//	RF Data 전송 유지..
   1986          //========================================================================
   1987          {
   1988          	printf( "%s(%d) - Loop RF Tx : %d\n", __func__, __LINE__, bEnable );
   1989          
   1990          	if ( bEnable )
   1991          	{
   1992          		RF_Tx_Mode();
   1993          	}
   1994          	else
   1995          	{
   1996          		RF_Rx_Mode();
   1997          	}
   1998          
   1999          	s_bEnLoopRFTx = bEnable;
   2000          }
   2001          
   2002          
   2003          //========================================================================
   2004          uint8_t cmd_rftx      ( uint8_t argc, char * argv[] )
   2005          //========================================================================
   2006          {
   2007          	//	bEnable ( 1 / 0 )
   2008          	uint8_t bEnable = 0;
   2009          	uint8_t nCh = 0;	//	Channel
   2010          	uint8_t nPA = 0x7F;	//	Power Amplifier
   2011          	char *sRFType;
   2012          
   2013          	switch ( argc )
   2014          	{
   2015          	case 5:		sscanf( argv[4], "%d", &nPA );		//	Power Amplifier
   2016          	case 4:		sscanf( argv[3], "%d", &nCh );		//	Channel
   2017          	case 3:		sRFType = argv[2];					//	RF Type [ u (unmodulated) / m(modulated) ]
   2018          	case 2:		sscanf( argv[1], "%d", &bEnable );	//	cmd [Enable]
   2019          //	case 2:		sText = argv[1];					//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
   2020          		break;
   2021          	}
   2022          
   2023          	printf( "%s(%d) - En(%d) / Type(%s) / Ch(%d) / PA(%d)\n", __func__, __LINE__,
   2024          			bEnable, sRFType, nCh, nPA );
   2025          
   2026          	//========================================================================
   2027          	//	채널 설정.
   2028          	pRadioConfiguration->Radio_ChannelNumber = nCh;
   2029          
   2030          	//========================================================================
   2031          	//	RF Type
   2032          	if ( strcmp( sRFType, "u" ) == 0 )
   2033          	{
   2034          		SetLoopRFTx( 0 );	//	RF Loop 종료.
   2035          		//	Continuous Wave ( 무변조방식 )
   2036          		vRadio_Init_cw();	//	무변조방식 설정.
   2037          
   2038          		vRadio_RF_Pwr( nPA );
   2039          
   2040          //		vRadio_StartTx( nCh, NULL );
   2041          		vRadio_StartTx( pRadioConfiguration->Radio_ChannelNumber, NULL );
   2042          
   2043          		return 0;
   2044          	}
   2045          	else if ( strcmp( sRFType, "m" ) == 0 )
   2046          	{
   2047          		vRadio_Init();	//	변조방식 설정.
   2048          		//========================================================================
   2049          		//	RF출력 설정.
   2050          		vRadio_RF_Pwr( nPA );
   2051          	}
   2052          
   2053          	if ( argc >= 2 )
   2054          	{
   2055          		if ( strcmp( argv[1], "1" ) == 0 )			bEnable = 1;
   2056          		else if ( strcmp( argv[1], "0" ) == 0 )		bEnable = 0;
   2057          	}
   2058          
   2059          	printf( "%s(%d) - Loop RF Tx : %d\n", __func__, __LINE__, bEnable );
   2060          
   2061          	SetLoopRFTx( bEnable );
   2062          }
   2063          
   2064          #endif	//	defined(USE_ENV_TEST)
   2065          
   2066          
   2067          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   GetCarNo
         8   -> LoadCarNo
      12   GetChNearRFM
      12   GetChNearRFT
       0   GetChOtherRFT
       0   GetChPA
       0   GetChPARFT
       8   GetChRx
         8   -> GetDevID
       0   GetDevID
      16   GetManHop
        16   -> GetDbg
        16   -> HAL_I2C_IsDeviceReady
        16   -> M24_HAL_ReadBytes
        16   -> printf
      16   GetMicVol
        16   -> HAL_I2C_IsDeviceReady
        16   -> M24_HAL_ReadBytes
        16   -> printf
       0   GetRFMMode
       0   GetRFTID
      16   GetSpkVol
        16   -> HAL_I2C_IsDeviceReady
        16   -> M24_HAL_ReadBytes
        16   -> printf
       8   GetTrainSetIdx
         8   -> LoadTrainSetIdx
      56   InitRFM
        56   -> AudioInit
        56   -> GetCarNo
        56   -> GetDevID
        56   -> GetManHop
        56   -> GetMicVol
        56   -> GetSpkVol
        56   -> GetTrainSetIdx
        56   -> HAL_Delay
        56   -> HAL_GetTick
        56   -> HAL_I2C_IsDeviceReady
        56   -> HAL_I2C_Mem_Read
        56   -> I2C_BusScan
        56   -> InitCodecMAX9860
        56   -> LCDClear
        56   -> LCDDrawRect
        56   -> LCDInit
        56   -> LCDLight
        56   -> LCDMenu
        56   -> LCDSpeaker
        56   -> RFM_Spk
        56   -> SetCallbackI2STxRxCplt
        56   -> SetDevID
        56   -> SetMicVol
        56   -> SetSpkVol
        56   -> SetTrainSetIdx
        56   -> TestEEPROM
        56   -> UpdateLCDMain
        56   -> WriteI2CCodec
        56   -> __aeabi_memset
        56   -> printf
        56   -> rand
        56   -> si446x_part_info
        56   -> srand
        56   -> vRadio_Init
      12   IsNearRFT
      16   LoadCarNo
        16   -> GetDbg
        16   -> HAL_I2C_IsDeviceReady
        16   -> M24_HAL_ReadBytes
        16   -> printf
      16   LoadTrainSetIdx
        16   -> GetDbg
        16   -> HAL_I2C_IsDeviceReady
        16   -> M24_HAL_ReadBytes
        16   -> printf
      96   LoopProcRFM
        96   -> GetChPA
        96   -> GetChPARFT
        96   -> GetChRx
        96   -> GetDevID
        96   -> GetKey
        96   -> GetRFMMode
        96   -> HAL_GPIO_TogglePin
        96   -> HAL_GPIO_WritePin
        96   -> LCDPrintf
        96   -> LCDSetCursor
        96   -> RFM_Spk
        96   -> ReflashStat
        96   -> SendPktCh
        96   -> SendStatReq
        96   -> SetRFMMode
        96   -> UpdateLCDMain
        96   -> UpdateLCDMonitor
        96   -> _MakePktHdr2
        96   -> qBufCnt
        96   -> qBufGet
        96   -> qBufPut
        96   -> vRadio_StartRX
      80   PrintVerInfo
        80   -> GetDevID
        80   -> LCDClear
        80   -> LCDPrintf
        80   -> LCDSetCursor
        80   -> printf
        80   -> sprintf
      32   RFM_I2SEx_TxRxCpltCallback
        32   -> HAL_I2SEx_TransmitReceive_DMA
        32   -> __aeabi_memset
        32   -> printf
        32   -> qBufCnt
        32   -> qBufGet
        32   -> qBufPut
       8   RFM_Spk
         8   -> GetDbg
         8   -> HAL_GPIO_WritePin
         8   -> printf
      16   RFM_main
        16   -> GetDevID
        16   -> HAL_GetTick
        16   -> InitProcPkt
        16   -> InitRFM
        16   -> LoopProcAdc
        16   -> LoopProcCLI
        16   -> LoopProcKey
        16   -> LoopProcMain
        16   -> LoopProcPkt
        16   -> LoopProcRFM
        16   -> printf
      24   RF_RSSI
        24   -> GetDbg
        24   -> LCDRSSI
        24   -> printf
        24   -> si446x_get_modem_status_fast_clear_read
      16   ReflashStat
        16   -> GetCarNo
       8   ReloadStampStat
         8   -> HAL_GetTick
      16   SetCarNo
        16   -> GetDbg
        16   -> HAL_I2C_IsDeviceReady
        16   -> M24_HAL_WriteBytes
        16   -> printf
       0   SetChPA
       0   SetChPARFT
       8   SetDevID
         8   -> printf
      16   SetManHop
        16   -> GetDbg
        16   -> HAL_I2C_IsDeviceReady
        16   -> M24_HAL_WriteBytes
        16   -> printf
      16   SetMicVol
        16   -> AudioMicVol
        16   -> HAL_I2C_IsDeviceReady
        16   -> M24_HAL_WriteBytes
        16   -> printf
      16   SetRFMMode
        16   -> ReloadStampStat
        16   -> StrRFMMode
        16   -> printf
      16   SetSpkVol
        16   -> AudioSpkVol
        16   -> HAL_I2C_IsDeviceReady
        16   -> M24_HAL_WriteBytes
        16   -> printf
       8   SetStat
         8   -> HAL_GetTick
      16   SetTrainSetIdx
        16   -> GetDbg
        16   -> HAL_I2C_IsDeviceReady
        16   -> M24_HAL_WriteBytes
        16   -> printf
       0   StrRFMMode
      40   UpdateStat
        40   -> __aeabi_memcpy
        40   -> sprintf
      24   cmd_OccPa
        24   -> HAL_GPIO_WritePin
        24   -> SetRFMMode
        24   -> printf
        24   -> sscanf
      16   cmd_car
        16   -> SetCarNo
        16   -> printf
        16   -> sscanf
      16   cmd_ch
        16   -> GetDbg
        16   -> SetTrainSetIdx
        16   -> printf
        16   -> sscanf
      16   cmd_hop
        16   -> SetManHop
        16   -> printf
        16   -> sscanf
      24   cmd_info
        24   -> GetCarNo
        24   -> GetChNearRFM
        24   -> GetChNearRFT
        24   -> GetChPA
        24   -> GetChPARFT
        24   -> GetChRx
        24   -> GetRFMMode
        24   -> GetTrainSetIdx
        24   -> StrRFMMode
        24   -> printf
      16   cmd_rfstat
        16   -> printf
      16   cmd_rspid
        16   -> printf
        16   -> sscanf
      16   cmd_swinfo
        16   -> FLASH_If_GetAppSize
        16   -> FLASH_If_GetBootSize
        16   -> printf
      16   cmd_ts
        16   -> SetTrainSetIdx
        16   -> printf
        16   -> sscanf
      16   cmd_txpwr
        16   -> printf
        16   -> sscanf
        16   -> vRadio_Set_TxPower


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable15
       4  ??DataTable15_1
       4  ??DataTable17
       4  ??DataTable36
       4  ??DataTable36_1
       4  ??DataTable36_2
       4  ??DataTable37
       4  ??DataTable37_1
       4  ??DataTable37_2
       4  ??DataTable37_3
       4  ??DataTable38
       4  ??DataTable38_1
       4  ??DataTable38_2
       4  ??DataTable38_3
       4  ??DataTable38_4
       4  ??DataTable39
       4  ??DataTable39_1
       4  ??DataTable39_2
       4  ??DataTable39_3
       4  ??DataTable39_4
       4  ??DataTable39_5
       4  ??DataTable40
       4  ??DataTable40_1
       4  ??DataTable40_10
       4  ??DataTable40_11
       4  ??DataTable40_12
       4  ??DataTable40_13
       4  ??DataTable40_14
       4  ??DataTable40_2
       4  ??DataTable40_3
       4  ??DataTable40_4
       4  ??DataTable40_5
       4  ??DataTable40_6
       4  ??DataTable40_7
       4  ??DataTable40_8
       4  ??DataTable40_9
       4  ??DataTable41
       4  ??DataTable42
       4  ??DataTable42_1
       4  ??DataTable42_10
       4  ??DataTable42_11
       4  ??DataTable42_12
       4  ??DataTable42_13
       4  ??DataTable42_2
       4  ??DataTable42_3
       4  ??DataTable42_4
       4  ??DataTable42_5
       4  ??DataTable42_6
       4  ??DataTable42_7
       4  ??DataTable42_8
       4  ??DataTable42_9
       4  ??DataTable43
       4  ??DataTable43_1
       4  ??DataTable43_2
       4  ??DataTable43_3
       4  ??DataTable44
       4  ??DataTable44_1
       4  ??DataTable45
       4  ??DataTable45_1
       4  ??DataTable45_2
       4  ??DataTable45_3
       4  ??DataTable45_4
       4  ??DataTable45_5
       4  ??DataTable45_6
       4  ??DataTable46
       4  ??DataTable46_1
       4  ??DataTable46_2
       4  ??DataTable46_3
       4  ??DataTable46_4
       4  ??DataTable47
       4  ??DataTable47_1
       4  ??DataTable47_10
       4  ??DataTable47_11
       4  ??DataTable47_12
       4  ??DataTable47_13
       4  ??DataTable47_14
       4  ??DataTable47_15
       4  ??DataTable47_16
       4  ??DataTable47_17
       4  ??DataTable47_18
       4  ??DataTable47_19
       4  ??DataTable47_2
       4  ??DataTable47_20
       4  ??DataTable47_21
       4  ??DataTable47_22
       4  ??DataTable47_23
       4  ??DataTable47_24
       4  ??DataTable47_25
       4  ??DataTable47_26
       4  ??DataTable47_27
       4  ??DataTable47_28
       4  ??DataTable47_29
       4  ??DataTable47_3
       4  ??DataTable47_30
       4  ??DataTable47_31
       4  ??DataTable47_32
       4  ??DataTable47_33
       4  ??DataTable47_34
       4  ??DataTable47_35
       4  ??DataTable47_36
       4  ??DataTable47_37
       4  ??DataTable47_38
       4  ??DataTable47_39
       4  ??DataTable47_4
       4  ??DataTable47_40
       4  ??DataTable47_41
       4  ??DataTable47_42
       4  ??DataTable47_43
       4  ??DataTable47_44
       4  ??DataTable47_45
       4  ??DataTable47_46
       4  ??DataTable47_47
       4  ??DataTable47_48
       4  ??DataTable47_49
       4  ??DataTable47_5
       4  ??DataTable47_50
       4  ??DataTable47_51
       4  ??DataTable47_52
       4  ??DataTable47_53
       4  ??DataTable47_54
       4  ??DataTable47_55
       4  ??DataTable47_56
       4  ??DataTable47_57
       4  ??DataTable47_58
       4  ??DataTable47_6
       4  ??DataTable47_7
       4  ??DataTable47_8
       4  ??DataTable47_9
      16  ?_0
       4  ?_1
      24  ?_10
      16  ?_11
      52  ?_12
       4  ?_13
       4  ?_14
      24  ?_15
      12  ?_16
      12  ?_17
      12  ?_18
       8  ?_19
       4  ?_2
       4  ?_20
      28  ?_21
      24  ?_22
      24  ?_23
      28  ?_24
      12  ?_25
      20  ?_26
      20  ?_27
      12  ?_28
      20  ?_29
       4  ?_3
      16  ?_30
      20  ?_31
      20  ?_32
      24  ?_33
      24  ?_34
      24  ?_35
      20  ?_36
      32  ?_37
      24  ?_38
      20  ?_39
      12  ?_4
      28  ?_40
       8  ?_41
      16  ?_42
      16  ?_43
       2  ?_44
       2  ?_45
      48  ?_46
      20  ?_47
      32  ?_48
      28  ?_49
       8  ?_5
       8  ?_50
      28  ?_51
      44  ?_52
      28  ?_53
      16  ?_54
      20  ?_55
       8  ?_6
       8  ?_7
       8  ?_8
       8  ?_9
      34  GetCarNo
      76  GetChNearRFM
      76  GetChNearRFT
      22  GetChOtherRFT
       8  GetChPA
       8  GetChPARFT
      60  GetChRx
       8  GetDevID
     122  GetManHop
      94  GetMicVol
       8  GetRFMMode
      28  GetRFTID
      94  GetSpkVol
      34  GetTrainSetIdx
     656  InitRFM
      76  IsNearRFT
     112  LoadCarNo
     102  LoadTrainSetIdx
     764  LoopProcRFM
      84  PrintVerInfo
     434  RFM_I2SEx_TxRxCpltCallback
      68  RFM_Spk
     128  RFM_main
     174  RF_RSSI
      96  ReflashStat
      50  ReloadStampStat
      98  SetCarNo
       8  SetChPA
       8  SetChPARFT
      42  SetDevID
      88  SetManHop
     104  SetMicVol
      60  SetRFMMode
     104  SetSpkVol
      38  SetStat
      98  SetTrainSetIdx
      60  StrRFMMode
     116  UpdateStat
       1  bRxBuffering
     480  bufAudioDec
     480  bufAudioEnc
     164  cmd_OccPa
      76  cmd_car
      84  cmd_ch
      74  cmd_hop
     162  cmd_info
      28  cmd_rfstat
     196  cmd_rspid
      44  cmd_swinfo
      78  cmd_ts
      60  cmd_txpwr
     352  g_devStat
       1  g_idxTrainSet
       1  g_nCarNo
       1  g_nChPA
       1  g_nChRFT
       1  g_nChRx
       1  g_nDevFlag
       1  g_nDevID
       1  g_nManHopping
       1  g_nRFMMode
       1  g_nRSSI
       1  g_nSpkLevel
       1  g_nStampRxPkt
       1  g_offsetCA
       1  idx
       4  nCallTimeCnt
       1  nOldRFMMode
       2  nlastSample
       1  oldTickStatReq
       1  s_bOnce
       1  s_bOnce
       1  s_idxCh
       1  s_nTickStandby
     244  -- Other

 
 1'331 bytes in section .bss
     8 bytes in section .data
 1'252 bytes in section .rodata
 5'718 bytes in section .text
 
 5'718 bytes of CODE  memory
 1'252 bytes of CONST memory
 1'339 bytes of DATA  memory

Errors: none
Warnings: 53
