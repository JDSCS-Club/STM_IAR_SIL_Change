###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         21/Sep/2022  13:40:13
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =  C:\D\Git_Hub\STM_IAR_SIL_Change\Library\adpcm.c
#    Command line      =
#        -f C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\adpcm.o.rsp
#        (C:\D\Git_Hub\STM_IAR_SIL_Change\Library\adpcm.c -D USE_HAL_DRIVER -D
#        STM32F407xx -lC C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Library
#        -o C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/App\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/Target\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Core/Inc\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Include\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio/Si446x\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/display\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Library\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\display\fonts\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\STM32F4xx_HAL_Driver\Src\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\arm\CMSIS\Core\Include\\") --dependencies=n
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\adpcm.o.d
#    Locale            =  C
#    List file         =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Library\adpcm.lst
#    Object file       =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\adpcm.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\D\Git_Hub\STM_IAR_SIL_Change\Library\adpcm.c
      1          /**
      2            ******************************************************************************
      3            * @file ADPCM/src/adpcm.c 
      4            * @author  MCD Application Team
      5            * @version  V2.0.0
      6            * @date  04/27/2009
      7            * @brief  This is ADPCM decoder/encoder souce file
      8            ******************************************************************************
      9            * @copy
     10            *
     11            * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
     12            * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
     13            * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
     14            * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
     15            * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
     16            * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     17            *
     18            * <h2><center>&copy; COPYRIGHT 2009 STMicroelectronics</center></h2>
     19            */ 
     20          
     21          
     22          /* Includes ------------------------------------------------------------------*/
     23          #include "adpcm.h"

  # warning unrecognized compiler
    ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",744  Warning[Pa183]: 
          #warning directive: unrecognized compiler
     24          
     25          /* Private define ------------------------------------------------------------*/
     26          /* Quantizer step size lookup table */

   \                                 In section .rodata, align 4
     27          const uint16_t StepSizeTable[89]={7,8,9,10,11,12,13,14,16,17,
   \                     StepSizeTable:
   \        0x0   0x0007 0x0008      DC16 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 19, 21, 23, 25, 28, 31, 34

   \               0x0009 0x000

   \              A 0x000B 0x00

   \              0C 0x000D 0x0

   \              00E 0x0010 0x

   \              0011 0x0013 0

   \              x0015 0x0017 

   \              0x0019 0x001C

   \               0x001F 0x002

   \              2
   \       0x22   0x0025 0x0029      DC16 37, 41, 45, 50, 55, 60, 66, 73, 80, 88, 97, 107, 118, 130, 143

   \               0x002D 0x003

   \              2 0x0037 0x00

   \              3C 0x0042 0x0

   \              049 0x0050 0x

   \              0058 0x0061 0

   \              x006B 0x0076 

   \              0x0082 0x008F
   \       0x40   0x009D 0x00AD      DC16 157, 173, 190, 209, 230, 253, 279, 307, 337, 371, 408, 449, 494

   \               0x00BE 0x00D

   \              1 0x00E6 0x00

   \              FD 0x0117 0x0

   \              133 0x0151 0x

   \              0173 0x0198 0

   \              x01C1 0x01EE
   \       0x5A   0x0220 0x0256      DC16 544, 598, 658, 724, 796, 876, 963, 1'060, 1'166, 1'282, 1'411

   \               0x0292 0x02D

   \              4 0x031C 0x03

   \              6C 0x03C3 0x0

   \              424 0x048E 0x

   \              0502 0x0583
   \       0x70   0x0610 0x06AB      DC16 1'552, 1'707, 1'878, 2'066, 2'272, 2'499, 2'749, 3'024, 3'327

   \               0x0756 0x081

   \              2 0x08E0 0x09

   \              C3 0x0ABD 0x0

   \              BD0 0x0CFF
   \       0x82   0x0E4C 0x0FBA      DC16 3'660, 4'026, 4'428, 4'871, 5'358, 5'894, 6'484, 7'132, 7'845

   \               0x114C 0x130

   \              7 0x14EE 0x17

   \              06 0x1954 0x1

   \              BDC 0x1EA5
   \       0x94   0x21B6 0x2515      DC16 8'630, 9'493, 10'442, 11'487, 12'635, 13'899, 15'289, 16'818

   \               0x28CA 0x2CD

   \              F 0x315B 0x36

   \              4B 0x3BB9 0x4

   \              1B2
   \       0xA4   0x4844 0x4F7E      DC16 18'500, 20'350, 22'385, 24'623, 27'086, 29'794, 32'767

   \               0x5771 0x602

   \              F 0x69CE 0x74

   \              62 0x7FFF
   \       0xB2                      DS8 2
     28                                      19,21,23,25,28,31,34,37,41,45,
     29                                      50,55,60,66,73,80,88,97,107,118,
     30                                      130,143,157,173,190,209,230,253,279,307,
     31                                      337,371,408,449,494,544,598,658,724,796,
     32                                      876,963,1060,1166,1282,1411,1552,1707,1878,2066,
     33                                      2272,2499,2749,3024,3327,3660,4026,4428,4871,5358,
     34                                      5894,6484,7132,7845,8630,9493,10442,11487,12635,13899,
     35                                      15289,16818,18500,20350,22385,24623,27086,29794,32767};
     36          /* Table of index changes */

   \                                 In section .rodata, align 4
     37          const int8_t IndexTable[16]={0xff,0xff,0xff,0xff,2,4,6,8,0xff,0xff,0xff,0xff,2,4,6,8};
   \                     IndexTable:
   \        0x0   0xFF 0xFF          DC8 -1, -1, -1, -1, 2, 4, 6, 8, -1, -1, -1, -1, 2, 4, 6, 8

   \              0xFF 0xFF    

   \              0x02 0x04    

   \              0x06 0x08    

   \              0xFF 0xFF    

   \              0xFF 0xFF    

   \              0x02 0x04    

   \              0x06 0x08
     38          
     39          /* Private macro -------------------------------------------------------------*/
     40          /* Private variables ---------------------------------------------------------*/
     41          /* Private function prototypes -----------------------------------------------*/
     42          /* Private functions ---------------------------------------------------------*/
     43          
     44          //========================================================================
     45          //	Encode

   \                                 In section .bss, align 2
     46          static int16_t indexEn 			= 	0;
   \                     indexEn:
   \        0x0                      DS8 2

   \                                 In section .bss, align 4
     47          static int32_t predsampleEn 	= 	0;
   \                     predsampleEn:
   \        0x0                      DS8 4
     48          
     49          //========================================================================
     50          //	Decode

   \                                 In section .bss, align 2
     51          static int16_t indexDec 		= 	0;
   \                     indexDec:
   \        0x0                      DS8 2

   \                                 In section .bss, align 4
     52          static int32_t predsampleDec 	= 	0;
   \                     predsampleDec:
   \        0x0                      DS8 4
     53          
     54          //========================================================================
     55          

   \                                 In section .text, align 2, keep-with-next
     56          void	ADPCM_ClearEncodeBuf( void )
     57          {
     58          	indexEn 		= 	0;
   \                     ADPCM_ClearEncodeBuf: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x....             LDR.N    R1,??DataTable3
   \        0x4   0x8008             STRH     R0,[R1, #+0]
     59          	predsampleEn 	= 	0;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x....             LDR.N    R1,??DataTable3_1
   \        0xA   0x6008             STR      R0,[R1, #+0]
     60          }
   \        0xC   0x4770             BX       LR
     61          

   \                                 In section .text, align 2, keep-with-next
     62          void	ADPCM_ClearDecodeBuf( void )
     63          {
     64          	indexDec 		= 	0;
   \                     ADPCM_ClearDecodeBuf: (+1)
   \        0x0   0x2000             MOVS     R0,#+0
   \        0x2   0x....             LDR.N    R1,??DataTable3_2
   \        0x4   0x8008             STRH     R0,[R1, #+0]
     65          	predsampleDec 	= 	0;
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x....             LDR.N    R1,??DataTable3_3
   \        0xA   0x6008             STR      R0,[R1, #+0]
     66          }
   \        0xC   0x4770             BX       LR
     67          
     68          
     69          /**
     70            * @brief  ADPCM_Encode.
     71            * @param sample: a 16-bit PCM sample
     72            * @retval : a 4-bit ADPCM sample
     73            */

   \                                 In section .text, align 2, keep-with-next
     74          uint8_t ADPCM_Encode(int32_t sample)
     75          {
   \                     ADPCM_Encode: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0002             MOVS     R2,R0
     76            uint8_t code=0;
   \        0x6   0x2000             MOVS     R0,#+0
     77            uint16_t tmpstep=0;
   \        0x8   0x2100             MOVS     R1,#+0
     78            int32_t diff=0;
   \        0xA   0xF05F 0x0C00      MOVS     R12,#+0
     79            int32_t diffq=0;
   \        0xE   0x2700             MOVS     R7,#+0
     80            uint16_t step=0;
   \       0x10   0xF05F 0x0E00      MOVS     LR,#+0
     81            
     82            step = StepSizeTable[indexEn];
   \       0x14   0x....             LDR.N    R5,??DataTable3
   \       0x16   0x....             LDR.N    R3,??DataTable3_4
   \       0x18   0xF9B5 0x4000      LDRSH    R4,[R5, #+0]
   \       0x1C   0xF833 0x3014      LDRH     R3,[R3, R4, LSL #+1]
     83          
     84            /* 2. compute diff and record sign and absolut value */
     85            diff = sample - predsampleEn;
   \       0x20   0x....             LDR.N    R6,??DataTable3_1
   \       0x22   0x6834             LDR      R4,[R6, #+0]
   \       0x24   0x1B14             SUBS     R4,R2,R4
     86            if (diff < 0)  
   \       0x26   0x2C00             CMP      R4,#+0
   \       0x28   0xD503             BPL.N    ??ADPCM_Encode_0
     87            {
     88              code=8;
   \       0x2A   0xF05F 0x0C08      MOVS     R12,#+8
   \       0x2E   0x4660             MOV      R0,R12
     89              diff = -diff;
   \       0x30   0x4264             RSBS     R4,R4,#+0
     90            }    
     91            
     92            /* 3. quantize the diff into ADPCM code */
     93            /* 4. inverse quantize the code into a predicted diff */
     94            tmpstep = step;
   \                     ??ADPCM_Encode_0: (+1)
   \       0x32   0x469E             MOV      LR,R3
     95            diffq = (step >> 3);
   \       0x34   0x469C             MOV      R12,R3
   \       0x36   0xFA1F 0xFC8C      UXTH     R12,R12
   \       0x3A   0xEA5F 0x0CDC      LSRS     R12,R12,#+3
   \       0x3E   0xFA1F 0xFC8C      UXTH     R12,R12
     96          
     97            if (diff >= tmpstep)
   \       0x42   0x46F0             MOV      R8,LR
   \       0x44   0xFA1F 0xF888      UXTH     R8,R8
   \       0x48   0x4544             CMP      R4,R8
   \       0x4A   0xDB06             BLT.N    ??ADPCM_Encode_1
     98            {
     99              code |= 0x04;
   \       0x4C   0xF050 0x0004      ORRS     R0,R0,#0x4
    100              diff -= tmpstep;
   \       0x50   0x4671             MOV      R1,LR
   \       0x52   0xB289             UXTH     R1,R1
   \       0x54   0x1A64             SUBS     R4,R4,R1
    101              diffq += step;
   \       0x56   0xFA1C 0xFC83      UXTAH    R12,R12,R3
    102            }
    103            
    104            tmpstep = tmpstep >> 1;
   \                     ??ADPCM_Encode_1: (+1)
   \       0x5A   0xFA1F 0xFE8E      UXTH     LR,LR
   \       0x5E   0xEA5F 0x0E5E      LSRS     LR,LR,#+1
    105          
    106            if (diff >= tmpstep)
   \       0x62   0x4671             MOV      R1,LR
   \       0x64   0xB289             UXTH     R1,R1
   \       0x66   0x428C             CMP      R4,R1
   \       0x68   0xDB09             BLT.N    ??ADPCM_Encode_2
    107            {
    108              code |= 0x02;
   \       0x6A   0xF050 0x0002      ORRS     R0,R0,#0x2
    109              diff -= tmpstep;
   \       0x6E   0x4671             MOV      R1,LR
   \       0x70   0xB289             UXTH     R1,R1
   \       0x72   0x1A64             SUBS     R4,R4,R1
    110              diffq+=(step >> 1);
   \       0x74   0x0019             MOVS     R1,R3
   \       0x76   0xB289             UXTH     R1,R1
   \       0x78   0x0849             LSRS     R1,R1,#+1
   \       0x7A   0xFA1C 0xFC81      UXTAH    R12,R12,R1
    111            }
    112            
    113            tmpstep = tmpstep >> 1;
   \                     ??ADPCM_Encode_2: (+1)
   \       0x7E   0xFA1F 0xFE8E      UXTH     LR,LR
   \       0x82   0xEA5F 0x0E5E      LSRS     LR,LR,#+1
    114            
    115            if (diff >= tmpstep)
   \       0x86   0x4671             MOV      R1,LR
   \       0x88   0xB289             UXTH     R1,R1
   \       0x8A   0x428C             CMP      R4,R1
   \       0x8C   0xDB06             BLT.N    ??ADPCM_Encode_3
    116            {
    117              code |=0x01;
   \       0x8E   0xF050 0x0001      ORRS     R0,R0,#0x1
    118              diffq+=(step >> 2);
   \       0x92   0x0019             MOVS     R1,R3
   \       0x94   0xB289             UXTH     R1,R1
   \       0x96   0x0889             LSRS     R1,R1,#+2
   \       0x98   0xFA1C 0xFC81      UXTAH    R12,R12,R1
    119            }
    120            
    121            /* 5. fixed predictor to get new predicted sample*/
    122            if (code & 8)
   \                     ??ADPCM_Encode_3: (+1)
   \       0x9C   0x0701             LSLS     R1,R0,#+28
   \       0x9E   0xD504             BPL.N    ??ADPCM_Encode_4
    123            {
    124          	  predsampleEn -= diffq;
   \       0xA0   0x6831             LDR      R1,[R6, #+0]
   \       0xA2   0xEBB1 0x010C      SUBS     R1,R1,R12
   \       0xA6   0x6031             STR      R1,[R6, #+0]
   \       0xA8   0xE003             B.N      ??ADPCM_Encode_5
    125            }
    126            else
    127            {
    128          	  predsampleEn += diffq;
   \                     ??ADPCM_Encode_4: (+1)
   \       0xAA   0x6831             LDR      R1,[R6, #+0]
   \       0xAC   0xEB1C 0x0101      ADDS     R1,R12,R1
   \       0xB0   0x6031             STR      R1,[R6, #+0]
    129            }  
    130          
    131            /* check for overflow*/
    132            if (predsampleEn > 32767)
   \                     ??ADPCM_Encode_5: (+1)
   \       0xB2   0x6831             LDR      R1,[R6, #+0]
   \       0xB4   0xF5B1 0x4F00      CMP      R1,#+32768
   \       0xB8   0xDB03             BLT.N    ??ADPCM_Encode_6
    133            {
    134          	  predsampleEn = 32767;
   \       0xBA   0xF647 0x71FF      MOVW     R1,#+32767
   \       0xBE   0x6031             STR      R1,[R6, #+0]
   \       0xC0   0xE004             B.N      ??ADPCM_Encode_7
    135            }
    136            else if (predsampleEn < -32768)
   \                     ??ADPCM_Encode_6: (+1)
   \       0xC2   0x....             LDR.N    R1,??DataTable3_5
   \       0xC4   0x6837             LDR      R7,[R6, #+0]
   \       0xC6   0x428F             CMP      R7,R1
   \       0xC8   0xDA00             BGE.N    ??ADPCM_Encode_7
    137            {
    138          	  predsampleEn = -32768;
   \       0xCA   0x6031             STR      R1,[R6, #+0]
    139            }
    140            
    141            /* 6. find new stepsize index */
    142            indexEn += IndexTable[code];
   \                     ??ADPCM_Encode_7: (+1)
   \       0xCC   0x8829             LDRH     R1,[R5, #+0]
   \       0xCE   0x....             LDR.N    R6,??DataTable3_6
   \       0xD0   0x0007             MOVS     R7,R0
   \       0xD2   0xB2FF             UXTB     R7,R7
   \       0xD4   0x57F6             LDRSB    R6,[R6, R7]
   \       0xD6   0x1989             ADDS     R1,R1,R6
   \       0xD8   0x8029             STRH     R1,[R5, #+0]
    143            /* check for overflow*/
    144            if (indexEn <0)
   \       0xDA   0xF9B5 0x1000      LDRSH    R1,[R5, #+0]
   \       0xDE   0x2900             CMP      R1,#+0
   \       0xE0   0xD502             BPL.N    ??ADPCM_Encode_8
    145            {
    146          	  indexEn = 0;
   \       0xE2   0x2100             MOVS     R1,#+0
   \       0xE4   0x8029             STRH     R1,[R5, #+0]
   \       0xE6   0xE005             B.N      ??ADPCM_Encode_9
    147            }
    148            else if (indexEn > 88)
   \                     ??ADPCM_Encode_8: (+1)
   \       0xE8   0xF9B5 0x1000      LDRSH    R1,[R5, #+0]
   \       0xEC   0x2959             CMP      R1,#+89
   \       0xEE   0xDB01             BLT.N    ??ADPCM_Encode_9
    149            {
    150          	  indexEn = 88;
   \       0xF0   0x2158             MOVS     R1,#+88
   \       0xF2   0x8029             STRH     R1,[R5, #+0]
    151            }
    152            
    153            /* 8. return new ADPCM code*/
    154            return (code & 0x0f);
   \                     ??ADPCM_Encode_9: (+1)
   \       0xF4   0xF010 0x000F      ANDS     R0,R0,#0xF
   \       0xF8   0xE8BD 0x81F0      POP      {R4-R8,PC}
    155          }
    156          
    157          
    158          
    159          /**
    160            * @brief  ADPCM_Decode.
    161            * @param code: a byte containing a 4-bit ADPCM sample. 
    162            * @retval : 16-bit ADPCM sample
    163            */

   \                                 In section .text, align 2, keep-with-next
    164          int16_t ADPCM_Decode(uint8_t code)
    165          {
   \                     ADPCM_Decode: (+1)
   \        0x0   0xB4F0             PUSH     {R4-R7}
   \        0x2   0x0001             MOVS     R1,R0
    166            uint16_t step=0;
   \        0x4   0x2400             MOVS     R4,#+0
    167            int32_t diffq=0;
   \        0x6   0x2500             MOVS     R5,#+0
    168            
    169            step = StepSizeTable[indexDec];
   \        0x8   0x....             LDR.N    R0,??DataTable3_2
   \        0xA   0x....             LDR.N    R2,??DataTable3_4
   \        0xC   0xF9B0 0x3000      LDRSH    R3,[R0, #+0]
   \       0x10   0xF832 0x2013      LDRH     R2,[R2, R3, LSL #+1]
    170          
    171            /* 2. inverse code into diff */
    172            diffq = step>> 3;
   \       0x14   0x0013             MOVS     R3,R2
   \       0x16   0xB29B             UXTH     R3,R3
   \       0x18   0x08DB             LSRS     R3,R3,#+3
   \       0x1A   0xB29B             UXTH     R3,R3
    173            if (code&4)
   \       0x1C   0x074E             LSLS     R6,R1,#+29
   \       0x1E   0xD501             BPL.N    ??ADPCM_Decode_0
    174            {
    175              diffq += step;
   \       0x20   0xFA13 0xF382      UXTAH    R3,R3,R2
    176            }
    177            
    178            if (code&2)
   \                     ??ADPCM_Decode_0: (+1)
   \       0x24   0x078C             LSLS     R4,R1,#+30
   \       0x26   0xD504             BPL.N    ??ADPCM_Decode_1
    179            {
    180              diffq += step>>1;
   \       0x28   0x0014             MOVS     R4,R2
   \       0x2A   0xB2A4             UXTH     R4,R4
   \       0x2C   0x0864             LSRS     R4,R4,#+1
   \       0x2E   0xFA13 0xF384      UXTAH    R3,R3,R4
    181            }
    182            
    183            if (code&1)
   \                     ??ADPCM_Decode_1: (+1)
   \       0x32   0x07CC             LSLS     R4,R1,#+31
   \       0x34   0xD504             BPL.N    ??ADPCM_Decode_2
    184            {
    185              diffq += step>>2;
   \       0x36   0x0014             MOVS     R4,R2
   \       0x38   0xB2A4             UXTH     R4,R4
   \       0x3A   0x08A4             LSRS     R4,R4,#+2
   \       0x3C   0xFA13 0xF384      UXTAH    R3,R3,R4
    186            }
    187          
    188            /* 3. add diff to predicted sample*/
    189            if (code&8)
   \                     ??ADPCM_Decode_2: (+1)
   \       0x40   0x070C             LSLS     R4,R1,#+28
   \       0x42   0xD504             BPL.N    ??ADPCM_Decode_3
    190            {
    191          	  predsampleDec -= diffq;
   \       0x44   0x....             LDR.N    R4,??DataTable3_3
   \       0x46   0x6825             LDR      R5,[R4, #+0]
   \       0x48   0x1AED             SUBS     R5,R5,R3
   \       0x4A   0x6025             STR      R5,[R4, #+0]
   \       0x4C   0xE003             B.N      ??ADPCM_Decode_4
    192            }
    193            else
    194            {
    195          	  predsampleDec += diffq;
   \                     ??ADPCM_Decode_3: (+1)
   \       0x4E   0x....             LDR.N    R4,??DataTable3_3
   \       0x50   0x6825             LDR      R5,[R4, #+0]
   \       0x52   0x195D             ADDS     R5,R3,R5
   \       0x54   0x6025             STR      R5,[R4, #+0]
    196            }
    197            
    198            /* check for overflow*/
    199            if (predsampleDec > 32767)
   \                     ??ADPCM_Decode_4: (+1)
   \       0x56   0x....             LDR.N    R4,??DataTable3_3
   \       0x58   0x6825             LDR      R5,[R4, #+0]
   \       0x5A   0xF5B5 0x4F00      CMP      R5,#+32768
   \       0x5E   0xDB03             BLT.N    ??ADPCM_Decode_5
    200            {
    201          	  predsampleDec = 32767;
   \       0x60   0xF647 0x75FF      MOVW     R5,#+32767
   \       0x64   0x6025             STR      R5,[R4, #+0]
   \       0x66   0xE004             B.N      ??ADPCM_Decode_6
    202            }
    203            else if (predsampleDec < -32768)
   \                     ??ADPCM_Decode_5: (+1)
   \       0x68   0x....             LDR.N    R5,??DataTable3_5
   \       0x6A   0x6826             LDR      R6,[R4, #+0]
   \       0x6C   0x42AE             CMP      R6,R5
   \       0x6E   0xDA00             BGE.N    ??ADPCM_Decode_6
    204            {
    205          	  predsampleDec = -32768;
   \       0x70   0x6025             STR      R5,[R4, #+0]
    206            }
    207          
    208            /* 4. find new quantizer step size */
    209            indexDec += IndexTable [code];
   \                     ??ADPCM_Decode_6: (+1)
   \       0x72   0x8805             LDRH     R5,[R0, #+0]
   \       0x74   0x....             LDR.N    R6,??DataTable3_6
   \       0x76   0x000F             MOVS     R7,R1
   \       0x78   0xB2FF             UXTB     R7,R7
   \       0x7A   0x57F6             LDRSB    R6,[R6, R7]
   \       0x7C   0x19AD             ADDS     R5,R5,R6
   \       0x7E   0x8005             STRH     R5,[R0, #+0]
    210            /* check for overflow*/
    211            if (indexDec < 0)
   \       0x80   0xF9B0 0x5000      LDRSH    R5,[R0, #+0]
   \       0x84   0x2D00             CMP      R5,#+0
   \       0x86   0xD501             BPL.N    ??ADPCM_Decode_7
    212            {
    213          	  indexDec = 0;
   \       0x88   0x2500             MOVS     R5,#+0
   \       0x8A   0x8005             STRH     R5,[R0, #+0]
    214            }
    215            if (indexDec > 88)
   \                     ??ADPCM_Decode_7: (+1)
   \       0x8C   0xF9B0 0x5000      LDRSH    R5,[R0, #+0]
   \       0x90   0x2D59             CMP      R5,#+89
   \       0x92   0xDB01             BLT.N    ??ADPCM_Decode_8
    216            {
    217          	  indexDec = 88;
   \       0x94   0x2558             MOVS     R5,#+88
   \       0x96   0x8005             STRH     R5,[R0, #+0]
    218            }
    219            
    220            /* 5. save predict sample and index for next iteration */
    221            /* done! static variables */
    222            
    223            /* 6. return new speech sample*/
    224            return ((int16_t)predsampleDec);
   \                     ??ADPCM_Decode_8: (+1)
   \       0x98   0x6820             LDR      R0,[R4, #+0]
   \       0x9A   0xB200             SXTH     R0,R0
   \       0x9C   0xBCF0             POP      {R4-R7}
   \       0x9E   0x4770             BX       LR
    225          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x....'....        DC32     indexEn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x....'....        DC32     predsampleEn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x....'....        DC32     indexDec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x....'....        DC32     predsampleDec

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x....'....        DC32     StepSizeTable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \        0x0   0xFFFF'8000        DC32     0xffff8000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \        0x0   0x....'....        DC32     IndexTable
    226          
    227          /**
    228            * @}
    229            */ 
    230          
    231          
    232          /******************* (C) COPYRIGHT 2009 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ADPCM_ClearDecodeBuf
       0   ADPCM_ClearEncodeBuf
      16   ADPCM_Decode
      24   ADPCM_Encode


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
      14  ADPCM_ClearDecodeBuf
      14  ADPCM_ClearEncodeBuf
     160  ADPCM_Decode
     252  ADPCM_Encode
      16  IndexTable
     180  StepSizeTable
       2  indexDec
       2  indexEn
       4  predsampleDec
       4  predsampleEn

 
  12 bytes in section .bss
 196 bytes in section .rodata
 468 bytes in section .text
 
 468 bytes of CODE  memory
 196 bytes of CONST memory
  12 bytes of DATA  memory

Errors: none
Warnings: 1
