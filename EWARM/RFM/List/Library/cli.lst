###############################################################################
#
#                                                         22/Sep/2022  08:40:12
# IAR ANSI C/C++ Compiler V9.20.3.326/W64 for ARM Functional Safety
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                     =  thumb
#    Endian                       =  little
#    Source file                  =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\Library\cli.c
#    Command line                 =
#        -f C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\cli.o.rsp
#        (C:\D\Git_Hub\STM_IAR_SIL_Change\Library\cli.c -D USE_HAL_DRIVER -D
#        STM32F407xx -lC C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Library
#        -o C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.0 EWARM FS 9.20.3\arm\inc\c\DLib_Config_Full.h" -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/App\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/Target\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Core/Inc\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Include\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio/Si446x\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/display\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Library\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\display\fonts\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\STM32F4xx_HAL_Driver\Src\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.0 EWARM FS 9.20.3\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\cli.o.d
#    Locale                       =  C
#    List file                    =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Library\cli.lst
#    Object file                  =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\cli.o
#    Runtime model:                  
#      __CPP_Runtime              =  1
#      __SystemLibrary            =  DLib
#      __dlib_file_descriptor     =  1
#      __dlib_full_locale_support =  1
#      __dlib_version             =  6
#      __iar_require _Printf      =  unknown,flags,int_specials,widths
#
###############################################################################

C:\D\Git_Hub\STM_IAR_SIL_Change\Library\cli.c
      1          /*------------------------------------------------------------------------------------------
      2          	Project			: RFM
      3          	Description		: console과 관련된 함수들 및 command line 처리
      4          
      5          	Writer			: $Author: zlkit $
      6          	Revision		: $Rev: 1891 $
      7          	Date			: 2020. 08.
      8          	Copyright		: Piranti Corp. ( zlkit@piranti.co.kr )
      9          	 
     10          	Revision History 
     11          	1. 2020. 08.	: Created
     12          -------------------------------------------------------------------------------------------*/
     13          
     14          #include <stdio.h>
     15          #include <stdlib.h>
     16          //#include <stdarg.h>
     17          #include <ctype.h>
     18          #include <string.h>
     19          
     20          //#include <stdarg.h>
     21          #include <stdio.h>			//	printf()
     22          
     23          #include <stdint.h>			//	uint32_t
     24          
     25          #include <string.h>			//	memset()
     26          
     27          #include "typedef.h"			//	uint32_t, ...
     28          #include "compiler_defs.h"		//	U8,

  # warning unrecognized compiler
    ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",744  Warning[Pa183]: 
          #warning directive: unrecognized compiler

  typedef unsigned char U8;
                        ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",788  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned int U16;
                       ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",789  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned long U32;
                        ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",790  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed char S8;
                      ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",792  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed int S16;
                     ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",793  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed long S32;
                      ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",794  Warning[Pe301]: 
          typedef name has already been declared (with same type)
     29          //=============================================================================
     30          #if defined(_WIN32)
     31          //=============================================================================
     32          
     33          #include "x86_hal_driver.h"
     34          
     35          //=============================================================================
     36          #else	//	stm32f207
     37          //=============================================================================
     38          
     39          #if defined(USE_FREERTOS)
     40          #include "FreeRTOS.h"
     41          #include "task.h"
     42          #include "queue.h"
     43          #include "semphr.h"
     44          #include "list.h"
     45          #endif
     46          
     47          #if defined(STM32F407xx)
     48          #include "stm32f4xx.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __vfp void __NVIC_SystemReset(void)
   \                     __NVIC_SystemReset: (+1)
   \        0x0   0xF3BF 0x8F4F      DSB      SY
   \        0x4   0x.... 0x....      LDR.W    R1,??DataTable11_4
   \        0x8   0x680A             LDR      R2,[R1, #+0]
   \        0xA   0xF412 0x62E0      ANDS     R2,R2,#0x700
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable11_5
   \       0x12   0x4302             ORRS     R2,R0,R2
   \       0x14   0x600A             STR      R2,[R1, #+0]
   \       0x16   0xF3BF 0x8F4F      DSB      SY
   \                     ??__NVIC_SystemReset_0: (+1)
   \       0x1A   0xBF00             Nop
   \       0x1C   0xE7FD             B.N      ??__NVIC_SystemReset_0
     49          #elif defined(STM32F207xx)
     50          #include "stm32f2xx.h"
     51          #endif
     52          
     53          //#include "i2c.h"
     54          
     55          //=============================================================================
     56          #endif
     57          //=============================================================================
     58          
     59          #include "cli.h"
     60          #include "serial.h"
     61          
     62          #include "version.h"		//	APP_VER / APP_BUILD_DATE
     63          
     64          #include "rfm.h"			//	cmd_ch()

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",293  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",311  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",419  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",457  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",462  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",484  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",510  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",518  Warning[Pe040]: 
          expected an identifier
     65          
     66          #include "diag.h"
     67          
     68          #include "eeprom.h"			//	cmd_eepromRead() / cmd_eepromWrite()
     69          
     70          #include "audio.h"			//	cmd_audio() / cmd_codec()
     71          
     72          #include "ProcPkt.h"		//	cmd_showpkt()
     73          
     74          #include "bootloader.h"		//	cmd_stboot()
     75          
     76          #include "upgrade.h"		//	cmd_upgrade()
     77          
     78          #define		NELEMENTS(array)	(sizeof(array) / sizeof((array)[0]))
     79          #define		MAX_COMMAND_LENGTH	64
     80          
     81          #if			defined(USE_BOOTLOADER)
     82          #define		PROMPT_STRING	"bootloader> "
     83          #else	//	LED
     84          //#define		PROMPT_STRING	"STM> "
     85          #define		PROMPT_STRING	"RFM> "
     86          #endif
     87          
     88          #define		CLEAR_VT_SCREEN()	printf("\033[2J")
     89          #define		GOTO_VT_XY()		printf("\033[1;1H")
     90          
     91          //int			input_check		( void );
     92          

   \                                 In section .bss, align 4
     93          char		prompt_string[0x10];
   \                     prompt_string:
   \        0x0                      DS8 16
     94          

   \                                 In section .data, align 4
     95          int			data_option = 1;
   \                     data_option:
   \        0x0   0x0000'0001        DC32 1
     96          
     97          //=============================================================================
     98          
     99          /*
    100           * command tables
    101           */

   \                                 In section .data, align 4
    102          user_command_t	user_command_table[] = {
   \                     user_command_table:
   \        0x0   0x....'....        DC32 ?_0, ?_1, 0x0, cmd_help, ?_2, ?_3, 0x0, cmd_uptime, ?_4, ?_5, 0x0

   \              0x....'....  

   \              0x0000'0000  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x0000'0000  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x0000'0000
   \       0x2C   0x....'....        DC32 cmd_ver, ?_6, ?_7, 0x0, cmd_reset, ?_8, ?_9, ?_10, cmd_hop, ?_11

   \              0x....'....  

   \              0x....'....  

   \              0x0000'0000  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....
   \       0x54   0x....'....        DC32 ?_12, 0x0, cmd_diag, ?_13, ?_14, 0x0, cmd_debug, ?_15, ?_16, ?_17

   \              0x0000'0000  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x0000'0000  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....
   \       0x7C   0x....'....        DC32 cmd_ch, ?_18, ?_19, ?_20, cmd_ts, ?_21, ?_22, ?_23, cmd_car, ?_24

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....
   \       0xA4   0x....'....        DC32 ?_25, 0x0, cmd_info, ?_26, ?_27, 0x0, cmd_swinfo, ?_28, ?_29, 0x0

   \              0x0000'0000  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x0000'0000  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x0000'0000
   \       0xCC   0x....'....        DC32 cmd_rfstat, ?_30, ?_31, ?_32, cmd_rspid, ?_33, ?_34, ?_35

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....
   \       0xEC   0x....'....        DC32 cmd_OccPa, ?_36, ?_37, ?_38, cmd_txpwr, ?_39, ?_40, ?_41

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....
   \      0x10C   0x....'....        DC32 cmd_eepromWrite, ?_42, ?_43, ?_44, cmd_eepromRead, ?_45, ?_46

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....
   \      0x128   0x....'....        DC32 ?_47, cmd_eepromDump, ?_48, ?_49, ?_50, cmd_audio, ?_51, ?_52

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....
   \      0x148   0x....'....        DC32 ?_53, cmd_codec, ?_54, ?_55, 0x0, cmd_stboot, ?_56, ?_57, 0x0

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x0000'0000  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x0000'0000
   \      0x16C   0x....'....        DC32 cmd_upgrade, ?_58, ?_59, ?_60, cmd_pktmon

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....
    103          	/*
    104          	 * {"xxxx",		명령
    105          	 * 	abc		help string1
    106          	 * 	def		help string2
    107          	 * 	func,},		실제 처리 함수
    108          	 */
    109          	{"help",
    110          		"help		-	display commands",
    111          		(char *)0,
    112          		cmd_help,},
    113          	{"uptime",
    114          		"uptime		-	display uptime",
    115          		(char *)0,
    116          		cmd_uptime,},
    117          	{"ver",
    118          		"ver		-	display version.",
    119          		(char *)0,
    120          		cmd_ver,},
    121          	{"reset",
    122          		"reset		-	restart system",
    123          		(char *)0,
    124          		cmd_reset,},
    125          
    126          #if defined(USE_HOP_MANUAL)
    127          
    128          #endif	//	defined(USE_HOP_MANUAL)
    129          
    130          #if defined(USE_HOP_MANUAL)
    131          	{"hop",
    132          		"hop		-	hopping",
    133          		"hop -	hop [ 0:default / 1:On / 2:Off ]",
    134          		cmd_hop},
    135          #endif	//	 defined(USE_HOP_MANUAL)
    136          
    137          #if defined(_DIAG_H_)
    138          	{"diag",
    139          		"diag		-	diagnostic test",
    140          		(char *)0,
    141          		cmd_diag,},
    142          #endif	//	defined(_DIAG_H_)
    143          
    144          	{"debug",
    145          		"debug		-	set debug level.",
    146          		(char *)0,
    147          		cmd_debug, },
    148          
    149          #if defined(RFM_H)
    150          	{"ch",
    151          		"ch		-	Setting Channel",
    152          		"ch -	ch [channel:0-9]",
    153          		cmd_ch},
    154          	{"ts",
    155          		"ts		-	Setting Train Set",
    156          		"ts -	ts [channel:0-9]",
    157          		cmd_ts},
    158          	{"car",
    159          		"car	-	Setting Car No.",
    160          		"car -	car [channel:0-9]",
    161          		cmd_car},
    162          	{"info",
    163          		"info	-	Display Information",
    164          		(char *)0,
    165          		cmd_info},
    166          	{"swinfo",
    167          		"swinfo	-	Software Information",
    168          		(char *)0,
    169          		cmd_swinfo},
    170          	{"rfstat",
    171          		"rfstat	-	RF Tx / Rx Information",
    172          		(char *)0,
    173          		cmd_rfstat},
    174          	{"rspid",
    175          		"rspid	-	Manual Set Resp ID",
    176          		"rspid	-	rspid [id] [set/clear]",
    177          		cmd_rspid},
    178          	{"occ",
    179          		"occ		-	OCC PA Start/Stop",
    180          		"occ [1(Start)/0(Stop)]",
    181          		cmd_OccPa},
    182          	{"txpwr",
    183          		"txpwr		-	RF Tx Power",
    184          		"txpwr [0(-38dBm)~7(0dBm)~12(5dBm)~22(10dBm)~40(15dBm)~127(20dBm)]",
    185          		cmd_txpwr},
    186          
    187          	#if defined(USE_TEST_RF_TX_LOOP)
    188          	{"tx",
    189          		"tx		-	RF Tx Data",
    190          		"tx [ch:0~63]",
    191          		&cmd_rftx},
    192          	#endif
    193          #endif	//	defined(RFM_H)
    194          
    195          #if defined(EEPROM_I2C_H)
    196          	{"eepw",
    197          		"eepw			-	write byte to address",
    198          		"eepw [addr] [data]",
    199          		cmd_eepromWrite,},
    200          	{"eepr",
    201          		"eepr			-	read byte from address",
    202          		"eepr [addr]",
    203          		cmd_eepromRead,},
    204          	{"eepdump",
    205          		"eepdump		-	eeprom dump",
    206          		"eepdump [addr] [size]",
    207          		cmd_eepromDump,},
    208          #endif	//	defined(EEPROM_I2C_H)
    209          
    210          #if defined(USE_ENV_TEST)
    211          	{"rftx",
    212          		"rftx	-	Loop RF Tx Data",
    213          		"rttx [1(On) / 0(Off)] [u(unmodulated)/m(modulated)] [ch:0~9] [power:0~127]",
    214          		cmd_rftx },
    215          
    216          #endif	//	defined(USE_ENV_TEST)
    217          
    218          #if defined( AUDIO_H )
    219          	{"audio",
    220          		"audio	-	audio command",
    221          		"audio [loop/null/sine/spk [0/1] / mute [0/1] ]",
    222          		cmd_audio},
    223          	{"codec",
    224          		"codec	-	codec command",
    225          		"codec [init/loop/mute [0/1] ]",
    226          		cmd_codec},
    227          #endif
    228          
    229          #if defined( BOOTLOADER_H )
    230          	{"stboot",
    231          		"stboot	- Enter STM32 Bootloader ( DFU Mode )",
    232          		(char *)0,
    233          		cmd_stboot},
    234          #endif
    235          
    236          #if defined( UPGRADE_H )
    237          	{"upgrade",
    238          		"upgrade	- upgrade command",
    239          		(char *)0,
    240          		cmd_upgrade},
    241          #endif
    242          
    243          #if defined( PROC_PKT_H )
    244          	{"mon",
    245          		"mon	-	show packet monitoring",
    246          		"mon [0/1]",
    247          		cmd_pktmon},
    248          #endif
    249          
    250          
    251          #if 0
    252          
    253          	{"test",
    254          		(char *)0,
    255          		(char *)0,
    256          		&cmd_test,},
    257          	{"do",
    258          		"do			-	set do value",
    259          		(char *)0,
    260          		&cmd_do,},
    261          	{"wr",
    262          		"wr			-	write byte to address",
    263          		"wr[.b|w|l] addr data",
    264          		&cmd_wr,},
    265          	{"rd",
    266          		"rd			-	read byte from address",
    267          		"rd[.b|w|l] [-l] addr",
    268          		&cmd_rd,},
    269          	{"md",
    270          		"md			-	memory dump",
    271          		"md[.b|w|l] [address] [count]",
    272          		&cmd_md},
    273          	{"i2cdetect",
    274          		"i2cdetect	-	I2C detect",
    275          		"i2cdetect -l",
    276          		&cmd_md},
    277          	{"i2cset",
    278          		"i2cset	-	I2C Write",
    279          		"i2cset	I2CBUS CHIP-ADDRESS DATA-ADDRESS [VALUE]",
    280          		&cmd_md},
    281          	{"i2cget",
    282          		"i2cget	-	I2C Read",
    283          		"i2cget	I2CBUS CHIP-ADDRESS [DATA-ADDRESS [MODE]]",
    284          		&cmd_md},
    285          	{"rftx",
    286          		"rftx	-	RF Tx Test",
    287          		"rftx [start/1/stop/0]",
    288          		&cmd_rftx},
    289          
    290          #endif
    291          
    292          #if defined(_WIN32)
    293          
    294          	//	Windows
    295          
    296          #else	//	STM32
    297          
    298          #if defined( _SPI_H_ )
    299          	{"spi",
    300          		"spi -	SPI Read / Write",
    301          		"spi[.b|w|l] [wr/rd] [dev [data]]",
    302          		&cmd_spi},
    303          #endif 	//	defined( _SPI_H_ )
    304          
    305          #endif
    306          
    307          /*
    308          	{"ts",
    309          		"ts       - display task status",
    310          		(char *)0,
    311          		cmd_ts,},
    312          
    313           */
    314          };
    315          

   \                                 In section .bss, align 4
    316          char	old_cmd[MAX_COMMAND_LENGTH];
   \                     old_cmd:
   \        0x0                      DS8 64
    317          
    318          //=============================================================================
    319          
    320          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    321          void dump_Cli(  S8 *a, uint8_t delta, uint8_t width )
    322          //========================================================================
    323          {
   \                     dump_Cli: (+1)
   \        0x0   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
   \        0xA   0x0016             MOVS     R6,R2
    324          	uint8_t	i, j, k;
    325          	uint8_t	*b;
    326          	uint8_t	c;
    327          	uint8_t	disp_unit = 16 ;
   \        0xC   0x2010             MOVS     R0,#+16
    328          
    329          	disp_unit = disp_unit / (uint8_t)width;
   \        0xE   0xB2C0             UXTB     R0,R0
   \       0x10   0x0031             MOVS     R1,R6
   \       0x12   0xB2C9             UXTB     R1,R1
   \       0x14   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \       0x18   0xF88D 0x0001      STRB     R0,[SP, #+1]
    330          
    331          	S8	*format[] = {
    332          							"",
    333          							"   ",			/* width 1 */
    334          							"     ",		/* width 2 */
    335          							"",
    336          							"         ",	/* width 4 */
    337          						};
   \       0x1C   0xA801             ADD      R0,SP,#+4
   \       0x1E   0x.... 0x....      LDR.W    R1,??DataTable11_6
   \       0x22   0x2214             MOVS     R2,#+20
   \       0x24   0x.... 0x....      BL       __aeabi_memcpy4
    338          
    339          	for ( i = 0; i < delta; )
   \       0x28   0xF05F 0x0A00      MOVS     R10,#+0
   \                     ??dump_Cli_0: (+1)
   \       0x2C   0x4650             MOV      R0,R10
   \       0x2E   0x0029             MOVS     R1,R5
   \       0x30   0xB2C0             UXTB     R0,R0
   \       0x32   0xB2C9             UXTB     R1,R1
   \       0x34   0x4288             CMP      R0,R1
   \       0x36   0xF080 0x80A3      BCS.W    ??dump_Cli_1
    340          	{
    341          		b = a;
                 		  ^
Warning[Pe513]: a value of type "S8 *" cannot be assigned to an entity of type
          "uint8_t *"
   \       0x3A   0x46A1             MOV      R9,R4
    342          		j = i;
   \       0x3C   0x4657             MOV      R7,R10
    343          
    344          		printf( "%08p  ", a );
   \       0x3E   0x0021             MOVS     R1,R4
   \       0x40   0x.... 0x....      LDR.W    R0,??DataTable11_7
   \       0x44   0x.... 0x....      BL       printf
    345          
    346          		for ( k = 0;( k < disp_unit )&& (i < delta); k++, (i += width) )
   \       0x48   0xF05F 0x0B00      MOVS     R11,#+0
   \                     ??dump_Cli_2: (+1)
   \       0x4C   0x4658             MOV      R0,R11
   \       0x4E   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \       0x52   0xB2C0             UXTB     R0,R0
   \       0x54   0x4288             CMP      R0,R1
   \       0x56   0xD232             BCS.N    ??dump_Cli_3
   \       0x58   0x4650             MOV      R0,R10
   \       0x5A   0x0029             MOVS     R1,R5
   \       0x5C   0xB2C0             UXTB     R0,R0
   \       0x5E   0xB2C9             UXTB     R1,R1
   \       0x60   0x4288             CMP      R0,R1
   \       0x62   0xD22C             BCS.N    ??dump_Cli_3
    347          		{
    348          			if ( k == 8 )
   \       0x64   0x4658             MOV      R0,R11
   \       0x66   0xB2C0             UXTB     R0,R0
   \       0x68   0x2808             CMP      R0,#+8
   \       0x6A   0xD102             BNE.N    ??dump_Cli_4
    349          			{
    350          				printf( " " );
   \       0x6C   0x....             ADR.N    R0,??DataTable2
   \       0x6E   0x.... 0x....      BL       printf
    351          			}
    352          
    353          			if ( width == 1 )
   \                     ??dump_Cli_4: (+1)
   \       0x72   0x0030             MOVS     R0,R6
   \       0x74   0xB2C0             UXTB     R0,R0
   \       0x76   0x2801             CMP      R0,#+1
   \       0x78   0xD106             BNE.N    ??dump_Cli_5
    354          			{
    355          				printf( "%02x ", *a );
   \       0x7A   0xF994 0x1000      LDRSB    R1,[R4, #+0]
   \       0x7E   0x.... 0x....      LDR.W    R0,??DataTable11_8
   \       0x82   0x.... 0x....      BL       printf
   \       0x86   0xE012             B.N      ??dump_Cli_6
    356          			}
    357          			else if ( width == 2 )
   \                     ??dump_Cli_5: (+1)
   \       0x88   0x0030             MOVS     R0,R6
   \       0x8A   0xB2C0             UXTB     R0,R0
   \       0x8C   0x2802             CMP      R0,#+2
   \       0x8E   0xD105             BNE.N    ??dump_Cli_7
    358          			{
    359          				printf( "%04x ", *(uint16_t *)a );
   \       0x90   0x8821             LDRH     R1,[R4, #+0]
   \       0x92   0x.... 0x....      LDR.W    R0,??DataTable11_9
   \       0x96   0x.... 0x....      BL       printf
   \       0x9A   0xE008             B.N      ??dump_Cli_6
    360          			}
    361          			else if ( width == 4 )
   \                     ??dump_Cli_7: (+1)
   \       0x9C   0x0030             MOVS     R0,R6
   \       0x9E   0xB2C0             UXTB     R0,R0
   \       0xA0   0x2804             CMP      R0,#+4
   \       0xA2   0xD104             BNE.N    ??dump_Cli_6
    362          			{
    363          				printf( "%08x ", *(uint32_t *)a );
   \       0xA4   0x6821             LDR      R1,[R4, #+0]
   \       0xA6   0x.... 0x....      LDR.W    R0,??DataTable11_10
   \       0xAA   0x.... 0x....      BL       printf
    364          			}
    365          			a = &a[width];
   \                     ??dump_Cli_6: (+1)
   \       0xAE   0x0030             MOVS     R0,R6
   \       0xB0   0xB2C0             UXTB     R0,R0
   \       0xB2   0x4404             ADD      R4,R4,R0
    366          		}
   \       0xB4   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \       0xB8   0xEB16 0x0A0A      ADDS     R10,R6,R10
   \       0xBC   0xE7C6             B.N      ??dump_Cli_2
    367          		for ( ; k < disp_unit; k++ )
   \                     ??dump_Cli_3: (+1)
   \       0xBE   0x4658             MOV      R0,R11
   \       0xC0   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \       0xC4   0xB2C0             UXTB     R0,R0
   \       0xC6   0x4288             CMP      R0,R1
   \       0xC8   0xD210             BCS.N    ??dump_Cli_8
    368          		{
    369          			if ( k == 8 )
   \       0xCA   0x4658             MOV      R0,R11
   \       0xCC   0xB2C0             UXTB     R0,R0
   \       0xCE   0x2808             CMP      R0,#+8
   \       0xD0   0xD102             BNE.N    ??dump_Cli_9
    370          			{
    371          				printf( " " );
   \       0xD2   0x....             ADR.N    R0,??DataTable2
   \       0xD4   0x.... 0x....      BL       printf
    372          			}
    373          
    374          			printf( format[width] );
                 			        ^
Warning[Pe167]: argument of type "S8 *" is incompatible with parameter of type
          "char const *"
   \                     ??dump_Cli_9: (+1)
   \       0xD8   0xA801             ADD      R0,SP,#+4
   \       0xDA   0x0031             MOVS     R1,R6
   \       0xDC   0xB2C9             UXTB     R1,R1
   \       0xDE   0xF850 0x0021      LDR      R0,[R0, R1, LSL #+2]
   \       0xE2   0x.... 0x....      BL       printf
    375          		}
   \       0xE6   0xF11B 0x0B01      ADDS     R11,R11,#+1
   \       0xEA   0xE7E8             B.N      ??dump_Cli_3
    376          		printf( "|" );
   \                     ??dump_Cli_8: (+1)
   \       0xEC   0x....             ADR.N    R0,??DataTable3
   \       0xEE   0x.... 0x....      BL       printf
    377          		for ( k = 0; (k < 16) && (j < delta); k++, j++ )
   \       0xF2   0xF05F 0x0800      MOVS     R8,#+0
   \                     ??dump_Cli_10: (+1)
   \       0xF6   0x4640             MOV      R0,R8
   \       0xF8   0xB2C0             UXTB     R0,R0
   \       0xFA   0x2810             CMP      R0,#+16
   \       0xFC   0xDA2B             BGE.N    ??dump_Cli_11
   \       0xFE   0x0038             MOVS     R0,R7
   \      0x100   0x0029             MOVS     R1,R5
   \      0x102   0xB2C0             UXTB     R0,R0
   \      0x104   0xB2C9             UXTB     R1,R1
   \      0x106   0x4288             CMP      R0,R1
   \      0x108   0xD225             BCS.N    ??dump_Cli_11
    378          		{
    379          			if ( k == 8 )
   \      0x10A   0x4640             MOV      R0,R8
   \      0x10C   0xB2C0             UXTB     R0,R0
   \      0x10E   0x2808             CMP      R0,#+8
   \      0x110   0xD102             BNE.N    ??dump_Cli_12
    380          			{
    381          				printf( " " );
   \      0x112   0x....             ADR.N    R0,??DataTable2
   \      0x114   0x.... 0x....      BL       printf
    382          			}
    383          
    384          			b = &b[k];
   \                     ??dump_Cli_12: (+1)
   \      0x118   0x4640             MOV      R0,R8
   \      0x11A   0xB2C0             UXTB     R0,R0
   \      0x11C   0x4481             ADD      R9,R9,R0
    385          
    386          			c = *b & 0x7f;
   \      0x11E   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \      0x122   0xF010 0x007F      ANDS     R0,R0,#0x7F
   \      0x126   0xF88D 0x0000      STRB     R0,[SP, #+0]
    387          
    388          			if ( (c < ' ') || (c == 0x7f) )
   \      0x12A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \      0x12E   0x2820             CMP      R0,#+32
   \      0x130   0xDB03             BLT.N    ??dump_Cli_13
   \      0x132   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \      0x136   0x287F             CMP      R0,#+127
   \      0x138   0xD104             BNE.N    ??dump_Cli_14
    389          			{
    390          				printf( "%c", '.' );
   \                     ??dump_Cli_13: (+1)
   \      0x13A   0x212E             MOVS     R1,#+46
   \      0x13C   0x....             ADR.N    R0,??DataTable3_1
   \      0x13E   0x.... 0x....      BL       printf
   \      0x142   0xE004             B.N      ??dump_Cli_15
    391          			}
    392          			else
    393          			{
    394          				printf( "%c", c );
   \                     ??dump_Cli_14: (+1)
   \      0x144   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \      0x148   0x....             ADR.N    R0,??DataTable3_1
   \      0x14A   0x.... 0x....      BL       printf
    395          			}
    396          		}
   \                     ??dump_Cli_15: (+1)
   \      0x14E   0xF118 0x0801      ADDS     R8,R8,#+1
   \      0x152   0x1C7F             ADDS     R7,R7,#+1
   \      0x154   0xE7CF             B.N      ??dump_Cli_10
    397          		for ( ; k < 16; k++ )
   \                     ??dump_Cli_11: (+1)
   \      0x156   0x4640             MOV      R0,R8
   \      0x158   0xB2C0             UXTB     R0,R0
   \      0x15A   0x2810             CMP      R0,#+16
   \      0x15C   0xDA0C             BGE.N    ??dump_Cli_16
    398          		{
    399          			if ( k == 8 )
   \      0x15E   0x4640             MOV      R0,R8
   \      0x160   0xB2C0             UXTB     R0,R0
   \      0x162   0x2808             CMP      R0,#+8
   \      0x164   0xD102             BNE.N    ??dump_Cli_17
    400          			{
    401          				printf( " " );
   \      0x166   0x....             ADR.N    R0,??DataTable2
   \      0x168   0x.... 0x....      BL       printf
    402          			}
    403          
    404          			printf( " " );
   \                     ??dump_Cli_17: (+1)
   \      0x16C   0x....             ADR.N    R0,??DataTable2
   \      0x16E   0x.... 0x....      BL       printf
    405          		}
   \      0x172   0xF118 0x0801      ADDS     R8,R8,#+1
   \      0x176   0xE7EE             B.N      ??dump_Cli_11
    406          		printf( "|\n" );
   \                     ??dump_Cli_16: (+1)
   \      0x178   0x....             ADR.N    R0,??DataTable3_2
   \      0x17A   0x.... 0x....      BL       printf
   \      0x17E   0xE755             B.N      ??dump_Cli_0
    407          	}
    408          }
   \                     ??dump_Cli_1: (+1)
   \      0x180   0xB007             ADD      SP,SP,#+28
   \      0x182   0xE8BD 0x8FF0      POP      {R4-R11,PC}

   \                                 In section .rodata, align 4
   \                     ?_89:
   \        0x0   0x....'....        DC32 ?_61, ?_62, ?_63, ?_61, ?_64

   \              0x....'....  

   \              0x....'....  

   \              0x....'....  

   \              0x....'....
    409          
    410          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    411          uint8_t 	a2hex(S8 *pv)
    412          //========================================================================
    413          {
   \                     a2hex: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    414          	S8 **pos=NULL;
   \        0x4   0x2500             MOVS     R5,#+0
    415          
    416          	return (uint8_t)strtol(pv, pos, 16 );
                 	                       ^
Warning[Pe167]: argument of type "S8 *" is incompatible with parameter of type
          "char const *"

  	return (uint8_t)strtol(pv, pos, 16 );
  	                           ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\cli.c",416  Warning[Pe167]: argument
          of type "S8 **" is incompatible with parameter of type "char **"
   \        0x6   0x2210             MOVS     R2,#+16
   \        0x8   0x0029             MOVS     R1,R5
   \        0xA   0x0020             MOVS     R0,R4
   \        0xC   0x.... 0x....      BL       strtol
   \       0x10   0xB2C0             UXTB     R0,R0
   \       0x12   0xBD32             POP      {R1,R4,R5,PC}
    417          }
    418          
    419          //=============================================================================
    420          #if defined(_WIN32)
    421          //=============================================================================
    422          
    423          char *
    424          strtok_r ( char *s, const char *delim, char **save_ptr )
    425          {
    426          	char *end;
    427          
    428          	if ( s == NULL )
    429          		s = *save_ptr;
    430          
    431          	if ( *s == '\0' )
    432          	{
    433          		*save_ptr = s;
    434          		return NULL;
    435          	}
    436          
    437          	/* Scan leading delimiters.  */
    438          	s += strspn ( s, delim );
    439          	if ( *s == '\0' )
    440          	{
    441          		*save_ptr = s;
    442          		return NULL;
    443          	}
    444          
    445          	/* Find the end of the token.  */
    446          	end = s + strcspn ( s, delim );
    447          	if ( *end == '\0' )
    448          	{
    449          		*save_ptr = end;
    450          		return s;
    451          	}
    452          
    453          	/* Terminate the token and make *SAVE_PTR point past it.  */
    454          	*end = '\0';
    455          	*save_ptr = end + 1;
    456          	return s;
    457          }
    458          
    459          //========================================================================
    460          #endif
    461          //========================================================================
    462          
    463          /*
    464           * parse cmd & argument, return argc
    465           */
    466          
    467          #define	MAXP	20
    468          
    469          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    470          uint8_t getarg(S8 *buffer, S8 *argv[])
    471          //========================================================================
    472          {
   \                     getarg: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
    473          	uint8_t		argc;
    474          	S8	*p;
    475          	S8	*sepchr = " \t";
   \        0x8   0x.... 0x....      ADR.W    R8,??DataTable3_3
    476          	S8	*saveptr;
    477          
    478          
    479          
    480          	p = (S8 *)strtok_r(buffer, sepchr, &saveptr);
                 	                   ^
Warning[Pe167]: argument of type "S8 *" is incompatible with parameter of type
          "char *"

  	p = (S8 *)strtok_r(buffer, sepchr, &saveptr);
  	                           ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\cli.c",480  Warning[Pe167]: argument
          of type "S8 *" is incompatible with parameter of type "char const *"

  	p = (S8 *)strtok_r(buffer, sepchr, &saveptr);
  	                                   ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\cli.c",480  Warning[Pe167]: argument
          of type "S8 **" is incompatible with parameter of type "char **"
   \        0xC   0x466A             MOV      R2,SP
   \        0xE   0x4641             MOV      R1,R8
   \       0x10   0x0028             MOVS     R0,R5
   \       0x12   0x.... 0x....      BL       strtok_r
   \       0x16   0x0004             MOVS     R4,R0
    481          
    482          	for ( argc = 0; (argc < MAXP) && (p != NULL); (p = (S8 *)strtok_r( NULL, sepchr, &saveptr )) )
                 	                                                                         ^
Warning[Pe167]: argument of type "S8 *" is incompatible with parameter of type
          "char const *"

  	for ( argc = 0; (argc < MAXP) && (p != NULL); (p = (S8 *)strtok_r( NULL, sepchr, &saveptr )) )
  	                                                                                 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\cli.c",482  Warning[Pe167]: argument
          of type "S8 **" is incompatible with parameter of type "char **"
   \       0x18   0x2700             MOVS     R7,#+0
   \                     ??getarg_0: (+1)
   \       0x1A   0x0038             MOVS     R0,R7
   \       0x1C   0xB2C0             UXTB     R0,R0
   \       0x1E   0x2814             CMP      R0,#+20
   \       0x20   0xDA0D             BGE.N    ??getarg_1
   \       0x22   0x2C00             CMP      R4,#+0
   \       0x24   0xD00B             BEQ.N    ??getarg_1
    483          	{
    484          //		printf( "%s(%d) - %s\n", __func__, __LINE__, p );
    485          		argv[argc++] = p;
   \       0x26   0x0038             MOVS     R0,R7
   \       0x28   0xB2C0             UXTB     R0,R0
   \       0x2A   0xF846 0x4020      STR      R4,[R6, R0, LSL #+2]
   \       0x2E   0x1C7F             ADDS     R7,R7,#+1
    486          	}
   \       0x30   0x466A             MOV      R2,SP
   \       0x32   0x4641             MOV      R1,R8
   \       0x34   0x2000             MOVS     R0,#+0
   \       0x36   0x.... 0x....      BL       strtok_r
   \       0x3A   0x0004             MOVS     R4,R0
   \       0x3C   0xE7ED             B.N      ??getarg_0
    487          
    488          	return (uint8_t)argc;
   \                     ??getarg_1: (+1)
   \       0x3E   0x0038             MOVS     R0,R7
   \       0x40   0xB2C0             UXTB     R0,R0
   \       0x42   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}
    489          }
    490          
    491          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    492          uint8_t ProcessCommand( char *cmd )
    493          //========================================================================
    494          {
   \                     ProcessCommand: (+1)
   \        0x0   0xE92D 0x47F8      PUSH     {R3-R10,LR}
   \        0x4   0xB0A9             SUB      SP,SP,#+164
   \        0x6   0x0006             MOVS     R6,R0
    495          	char	*argv[MAXP];
    496          	uint16_t		argc;
    497          	char	*p;
    498          	uint16_t		v = 0;
   \        0x8   0x2700             MOVS     R7,#+0
    499          	uint16_t		i;
    500          	char	temp[80];
    501          	char	upstr[4] = { 0x1b, '[', 'A', 0 };
   \        0xA   0x4668             MOV      R0,SP
   \        0xC   0x.... 0x....      LDR.W    R1,??DataTable11_11
   \       0x10   0x680A             LDR      R2,[R1, #+0]
   \       0x12   0x6002             STR      R2,[R0, #+0]
    502          
    503          	if ( (strcmp( "!!", cmd ) == 0) || (strcmp( cmd, upstr ) == 0) )
   \       0x14   0x0031             MOVS     R1,R6
   \       0x16   0x....             ADR.N    R0,??DataTable3_4
   \       0x18   0x.... 0x....      BL       strcmp
   \       0x1C   0x2800             CMP      R0,#+0
   \       0x1E   0xD005             BEQ.N    ??ProcessCommand_0
   \       0x20   0x4669             MOV      R1,SP
   \       0x22   0x0030             MOVS     R0,R6
   \       0x24   0x.... 0x....      BL       strcmp
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD10A             BNE.N    ??ProcessCommand_1
    504          	{
    505          		strcpy( temp, old_cmd );
   \                     ??ProcessCommand_0: (+1)
   \       0x2C   0x.... 0x....      LDR.W    R4,??DataTable11_12
   \       0x30   0x0021             MOVS     R1,R4
   \       0x32   0xA801             ADD      R0,SP,#+4
   \       0x34   0x.... 0x....      BL       strcpy
    506          		strcpy( cmd, old_cmd );
   \       0x38   0x0021             MOVS     R1,R4
   \       0x3A   0x0030             MOVS     R0,R6
   \       0x3C   0x.... 0x....      BL       strcpy
   \       0x40   0xE003             B.N      ??ProcessCommand_2
    507          	}
    508          	else
    509          	{
    510          		strcpy( temp, cmd );
   \                     ??ProcessCommand_1: (+1)
   \       0x42   0x0031             MOVS     R1,R6
   \       0x44   0xA801             ADD      R0,SP,#+4
   \       0x46   0x.... 0x....      BL       strcpy
    511          	}
    512          
    513          	memset( argv, 0, sizeof( argv ) );
   \                     ??ProcessCommand_2: (+1)
   \       0x4A   0xF05F 0x0850      MOVS     R8,#+80
   \       0x4E   0xF05F 0x0900      MOVS     R9,#+0
   \       0x52   0xAC15             ADD      R4,SP,#+84
   \       0x54   0x464A             MOV      R2,R9
   \       0x56   0x4641             MOV      R1,R8
   \       0x58   0x0020             MOVS     R0,R4
   \       0x5A   0x.... 0x....      BL       __aeabi_memset
    514          
    515          	// ignore after # char
    516          	p = (char *)strchr( cmd, '#' );
   \       0x5E   0x2123             MOVS     R1,#+35
   \       0x60   0x0030             MOVS     R0,R6
   \       0x62   0x.... 0x....      BL       strchr
   \       0x66   0x0004             MOVS     R4,R0
    517          	if ( p != 0 )
   \       0x68   0x2C00             CMP      R4,#+0
   \       0x6A   0xD001             BEQ.N    ??ProcessCommand_3
    518          	{
    519          		*p = (S8)NULL;
   \       0x6C   0x2000             MOVS     R0,#+0
   \       0x6E   0x7020             STRB     R0,[R4, #+0]
    520          	}
    521          
    522          	// 명령라인을 arg,argv 로 분해
    523          	argc = getarg( cmd, argv );
                 	               ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "S8 *"

  	argc = getarg( cmd, argv );
  	                    ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\cli.c",523  Warning[Pe167]: argument
          of type "char **" is incompatible with parameter of type "S8 **"
   \                     ??ProcessCommand_3: (+1)
   \       0x70   0xA915             ADD      R1,SP,#+84
   \       0x72   0x0030             MOVS     R0,R6
   \       0x74   0x.... 0x....      BL       getarg
   \       0x78   0x4680             MOV      R8,R0
    524          
    525          //	printf( "%s(%d) - argc(%d) / argv(%s)\n", __func__, __LINE__, argc, argv[0] );
    526          
    527          	if ( argc != 0 )
   \       0x7A   0x4640             MOV      R0,R8
   \       0x7C   0xB280             UXTH     R0,R0
   \       0x7E   0x2800             CMP      R0,#+0
   \       0x80   0xF000 0x8085      BEQ.W    ??ProcessCommand_4
    528          	{
    529          
    530          		// md/mm 등에 따르는 "[.b|.w|.l]에 대한 처리
    531          		p = strchr( argv[0], '.' );
   \       0x84   0x212E             MOVS     R1,#+46
   \       0x86   0x9815             LDR      R0,[SP, #+84]
   \       0x88   0x.... 0x....      BL       strchr
   \       0x8C   0x0004             MOVS     R4,R0
    532          		if ( p != NULL )
   \       0x8E   0x2C00             CMP      R4,#+0
   \       0x90   0xD019             BEQ.N    ??ProcessCommand_5
    533          		{
    534          			if ( p[1] == 'b' )
   \       0x92   0x7860             LDRB     R0,[R4, #+1]
   \       0x94   0x2862             CMP      R0,#+98
   \       0x96   0xD104             BNE.N    ??ProcessCommand_6
    535          			{
    536          				data_option = 1;
   \       0x98   0x2001             MOVS     R0,#+1
   \       0x9A   0x.... 0x....      LDR.W    R1,??DataTable11_13
   \       0x9E   0x6008             STR      R0,[R1, #+0]
   \       0xA0   0xE00E             B.N      ??ProcessCommand_7
    537          			}
    538          			else if ( p[1] == 'w' )
   \                     ??ProcessCommand_6: (+1)
   \       0xA2   0x7860             LDRB     R0,[R4, #+1]
   \       0xA4   0x2877             CMP      R0,#+119
   \       0xA6   0xD104             BNE.N    ??ProcessCommand_8
    539          			{
    540          				data_option = 2;
   \       0xA8   0x2002             MOVS     R0,#+2
   \       0xAA   0x.... 0x....      LDR.W    R1,??DataTable11_13
   \       0xAE   0x6008             STR      R0,[R1, #+0]
   \       0xB0   0xE006             B.N      ??ProcessCommand_7
    541          			}
    542          			else if ( p[1] == 'l' )
   \                     ??ProcessCommand_8: (+1)
   \       0xB2   0x7860             LDRB     R0,[R4, #+1]
   \       0xB4   0x286C             CMP      R0,#+108
   \       0xB6   0xD103             BNE.N    ??ProcessCommand_7
    543          			{
    544          				data_option = 4;
   \       0xB8   0x2004             MOVS     R0,#+4
   \       0xBA   0x.... 0x....      LDR.W    R1,??DataTable11_13
   \       0xBE   0x6008             STR      R0,[R1, #+0]
    545          			}
    546          			*p = (S8)NULL;
   \                     ??ProcessCommand_7: (+1)
   \       0xC0   0x2000             MOVS     R0,#+0
   \       0xC2   0x7020             STRB     R0,[R4, #+0]
   \       0xC4   0xE003             B.N      ??ProcessCommand_9
    547          		}
    548          		else
    549          		{
    550          			//	default
    551          			data_option = 1;
   \                     ??ProcessCommand_5: (+1)
   \       0xC6   0x2001             MOVS     R0,#+1
   \       0xC8   0x.... 0x....      LDR.W    R1,??DataTable11_13
   \       0xCC   0x6008             STR      R0,[R1, #+0]
    552          		}
    553          
    554          		// 명령을 table에서 찾아서 
    555          		for ( i = 0; i < NELEMENTS( user_command_table ); i++ )
   \                     ??ProcessCommand_9: (+1)
   \       0xCE   0x2000             MOVS     R0,#+0
   \       0xD0   0x0005             MOVS     R5,R0
   \                     ??ProcessCommand_10: (+1)
   \       0xD2   0x0028             MOVS     R0,R5
   \       0xD4   0xB280             UXTH     R0,R0
   \       0xD6   0x2818             CMP      R0,#+24
   \       0xD8   0xD24A             BCS.N    ??ProcessCommand_11
    556          		{
    557          			if ( strcmp( argv[0], user_command_table[i].command_name ) == 0 )
   \       0xDA   0x.... 0x....      LDR.W    R9,??DataTable11_14
   \       0xDE   0x0028             MOVS     R0,R5
   \       0xE0   0xB280             UXTH     R0,R0
   \       0xE2   0x0100             LSLS     R0,R0,#+4
   \       0xE4   0xF859 0x1000      LDR      R1,[R9, R0]
   \       0xE8   0x9815             LDR      R0,[SP, #+84]
   \       0xEA   0x.... 0x....      BL       strcmp
   \       0xEE   0x2800             CMP      R0,#+0
   \       0xF0   0xD13C             BNE.N    ??ProcessCommand_12
    558          			{
    559          				if ( argc >= 2 )
   \       0xF2   0x4640             MOV      R0,R8
   \       0xF4   0xB280             UXTH     R0,R0
   \       0xF6   0x2802             CMP      R0,#+2
   \       0xF8   0xDB2C             BLT.N    ??ProcessCommand_13
    560          				{
    561          					if ( (strcmp( argv[1], "help" ) == 0) || (strcmp( argv[1], "-h" ) == 0) )
   \       0xFA   0xF10D 0x0A54      ADD      R10,SP,#+84
   \       0xFE   0x.... 0x....      LDR.W    R1,??DataTable11_15
   \      0x102   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \      0x106   0x.... 0x....      BL       strcmp
   \      0x10A   0x2800             CMP      R0,#+0
   \      0x10C   0xD006             BEQ.N    ??ProcessCommand_14
   \      0x10E   0x....             ADR.N    R1,??DataTable8
   \      0x110   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \      0x114   0x.... 0x....      BL       strcmp
   \      0x118   0x2800             CMP      R0,#+0
   \      0x11A   0xD11B             BNE.N    ??ProcessCommand_13
    562          					{
    563          						printf( "%s\n", user_command_table[i].command_help1 );
   \                     ??ProcessCommand_14: (+1)
   \      0x11C   0x.... 0x....      ADR.W    R10,??DataTable8_1
   \      0x120   0x0028             MOVS     R0,R5
   \      0x122   0xB280             UXTH     R0,R0
   \      0x124   0x0100             LSLS     R0,R0,#+4
   \      0x126   0x4448             ADD      R0,R9,R0
   \      0x128   0x6841             LDR      R1,[R0, #+4]
   \      0x12A   0x4650             MOV      R0,R10
   \      0x12C   0x.... 0x....      BL       printf
    564          						if ( user_command_table[i].command_help2 != NULL )
   \      0x130   0x0028             MOVS     R0,R5
   \      0x132   0xB280             UXTH     R0,R0
   \      0x134   0x0100             LSLS     R0,R0,#+4
   \      0x136   0x4448             ADD      R0,R9,R0
   \      0x138   0x6880             LDR      R0,[R0, #+8]
   \      0x13A   0x2800             CMP      R0,#+0
   \      0x13C   0xD007             BEQ.N    ??ProcessCommand_15
    565          						{
    566          							printf( "%s\n", user_command_table[i].command_help2 );
   \      0x13E   0x0028             MOVS     R0,R5
   \      0x140   0xB280             UXTH     R0,R0
   \      0x142   0x0100             LSLS     R0,R0,#+4
   \      0x144   0x4448             ADD      R0,R9,R0
   \      0x146   0x6881             LDR      R1,[R0, #+8]
   \      0x148   0x4650             MOV      R0,R10
   \      0x14A   0x.... 0x....      BL       printf
    567          						}
    568          						v = 1;
   \                     ??ProcessCommand_15: (+1)
   \      0x14E   0x2001             MOVS     R0,#+1
   \      0x150   0x0007             MOVS     R7,R0
    569          						break;
   \      0x152   0xE00D             B.N      ??ProcessCommand_11
    570          					}
    571          				}
    572          				// 처리함수를 호출
    573          				if ( user_command_table[i].func( argc, argv ) < 0 )
                 				                                              ^
Warning[Pe186]: pointless comparison of unsigned integer with zero
   \                     ??ProcessCommand_13: (+1)
   \      0x154   0xA915             ADD      R1,SP,#+84
   \      0x156   0x4640             MOV      R0,R8
   \      0x158   0xB2C0             UXTB     R0,R0
   \      0x15A   0x002A             MOVS     R2,R5
   \      0x15C   0xB292             UXTH     R2,R2
   \      0x15E   0x0112             LSLS     R2,R2,#+4
   \      0x160   0x444A             ADD      R2,R9,R2
   \      0x162   0x68D2             LDR      R2,[R2, #+12]
   \      0x164   0x4790             BLX      R2
    574          				{
    575          					printf( "%s\n", user_command_table[i].command_help1 );
    576          					if ( user_command_table[i].command_help2 != NULL )
    577          					{
    578          						printf( "%s\n", user_command_table[i].command_help2 );
    579          					}
    580          				}
    581          				v = 1;	// 명령을 찾아서 처리했음을 표시
   \      0x166   0x2001             MOVS     R0,#+1
   \      0x168   0x0007             MOVS     R7,R0
    582          				break;
   \      0x16A   0xE001             B.N      ??ProcessCommand_11
    583          			}
    584          		}
   \                     ??ProcessCommand_12: (+1)
   \      0x16C   0x1C6D             ADDS     R5,R5,#+1
   \      0x16E   0xE7B0             B.N      ??ProcessCommand_10
    585          		if ( v == 0 )
   \                     ??ProcessCommand_11: (+1)
   \      0x170   0x0038             MOVS     R0,R7
   \      0x172   0xB280             UXTH     R0,R0
   \      0x174   0x2800             CMP      R0,#+0
   \      0x176   0xD105             BNE.N    ??ProcessCommand_16
    586          		{
    587          			// 엉뚱하게 입력한 경우
    588          			printf( "%s: command not found\n\r", argv[0] );
   \      0x178   0x9915             LDR      R1,[SP, #+84]
   \      0x17A   0x.... 0x....      LDR.W    R0,??DataTable11_16
   \      0x17E   0x.... 0x....      BL       printf
   \      0x182   0xE004             B.N      ??ProcessCommand_4
    589          		}
    590          		else
    591          		{
    592          			// !! 처리를 위해서 old_cmd로 명령 복사
    593          			strcpy( old_cmd, temp );
   \                     ??ProcessCommand_16: (+1)
   \      0x184   0xA901             ADD      R1,SP,#+4
   \      0x186   0x.... 0x....      LDR.W    R0,??DataTable11_12
   \      0x18A   0x.... 0x....      BL       strcpy
    594          		}
    595          	}
    596          
    597          	return (uint8_t) 1;
   \                     ??ProcessCommand_4: (+1)
   \      0x18E   0x2001             MOVS     R0,#+1
   \      0x190   0xB02A             ADD      SP,SP,#+168
   \      0x192   0xE8BD 0x87F0      POP      {R4-R10,PC}
    598          }
    599          
    600          
    601          
    602          
    603          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    604          int8_t readline( S8 *bufp )
    605          //========================================================================
    606          {
   \                     readline: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
    607          	//	printf( "%s\n", __func__ );
    608          
    609          	static int8_t		command_index = 0;
    610          
    611          	int8_t	ch;
    612          	S8	*command_buf = bufp;	//[MAX_COMMAND_LENGTH];
   \        0x6   0x0026             MOVS     R6,R4
    613          
    614          	int8_t		ret = 0;
   \        0x8   0x2700             MOVS     R7,#+0
    615          
    616          	for ( ;; )
    617          	{
    618          		ch =(int8_t) getchar();
   \                     ??readline_0: (+1)
   \        0xA   0x.... 0x....      BL       getchar
   \        0xE   0x0005             MOVS     R5,R0
    619          
    620          #if defined(USE_FREERTOS)
    621          #else
    622          		if ((int8_t) ch == (int8_t)-1 )
   \       0x10   0x0028             MOVS     R0,R5
   \       0x12   0xF05F 0x31FF      MOVS     R1,#+4294967295
   \       0x16   0xB240             SXTB     R0,R0
   \       0x18   0x4288             CMP      R0,R1
   \       0x1A   0xD102             BNE.N    ??readline_1
    623          		{
    624          			//	Input Data가 없는 경우 ( Non-Blocking - OS less )
    625          			return (int8_t)-1;
   \       0x1C   0xF05F 0x30FF      MOVS     R0,#+4294967295
   \       0x20   0xE09B             B.N      ??readline_2
    626          		}
    627          #endif
    628          
    629          		if ( (ch == 0x08) || (ch == 0x7F) )	// Backspace
   \                     ??readline_1: (+1)
   \       0x22   0x0028             MOVS     R0,R5
   \       0x24   0xB240             SXTB     R0,R0
   \       0x26   0x2808             CMP      R0,#+8
   \       0x28   0xD003             BEQ.N    ??readline_3
   \       0x2A   0x0028             MOVS     R0,R5
   \       0x2C   0xB240             SXTB     R0,R0
   \       0x2E   0x287F             CMP      R0,#+127
   \       0x30   0xD110             BNE.N    ??readline_4
    630          		{
    631          			if ( command_index > 0 )
   \                     ??readline_3: (+1)
   \       0x32   0x.... 0x....      LDR.W    R8,??DataTable11_17
   \       0x36   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \       0x3A   0x2801             CMP      R0,#+1
   \       0x3C   0xDBE5             BLT.N    ??readline_0
    632          			{
    633          				printf( "%c %c", 8, 8 );
   \       0x3E   0x2208             MOVS     R2,#+8
   \       0x40   0x2108             MOVS     R1,#+8
   \       0x42   0x....             LDR.N    R0,??DataTable11_18
   \       0x44   0x.... 0x....      BL       printf
    634          				command_index--;
   \       0x48   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \       0x4C   0x1E40             SUBS     R0,R0,#+1
   \       0x4E   0xF888 0x0000      STRB     R0,[R8, #+0]
   \       0x52   0xE7DA             B.N      ??readline_0
    635          			}
    636          		}
    637          		else if ( ch == 0x15 )			// control-u, all input clear
   \                     ??readline_4: (+1)
   \       0x54   0x0028             MOVS     R0,R5
   \       0x56   0xB240             SXTB     R0,R0
   \       0x58   0x2815             CMP      R0,#+21
   \       0x5A   0xD110             BNE.N    ??readline_5
    638          		{
    639          			while ( 0 < command_index )
   \                     ??readline_6: (+1)
   \       0x5C   0x.... 0x....      LDR.W    R8,??DataTable11_17
   \       0x60   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \       0x64   0x2801             CMP      R0,#+1
   \       0x66   0xDBD0             BLT.N    ??readline_0
    640          			{
    641          				printf( "%c %c", 8, 8 );
   \       0x68   0x2208             MOVS     R2,#+8
   \       0x6A   0x2108             MOVS     R1,#+8
   \       0x6C   0x....             LDR.N    R0,??DataTable11_18
   \       0x6E   0x.... 0x....      BL       printf
    642          				command_index--;
   \       0x72   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \       0x76   0x1E40             SUBS     R0,R0,#+1
   \       0x78   0xF888 0x0000      STRB     R0,[R8, #+0]
   \       0x7C   0xE7EE             B.N      ??readline_6
    643          			}
    644          		}
    645          		else if ( ch == 0x17 )			// control-w, erase one word
   \                     ??readline_5: (+1)
   \       0x7E   0x0028             MOVS     R0,R5
   \       0x80   0xB240             SXTB     R0,R0
   \       0x82   0x2817             CMP      R0,#+23
   \       0x84   0xD129             BNE.N    ??readline_7
    646          		{
    647          			/* erase space */
    648          			while ( (0 < command_index) && (command_buf[command_index] == ' ') ) {
   \                     ??readline_8: (+1)
   \       0x86   0x.... 0x....      LDR.W    R8,??DataTable11_17
   \       0x8A   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \       0x8E   0x2801             CMP      R0,#+1
   \       0x90   0xDB0F             BLT.N    ??readline_9
   \       0x92   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \       0x96   0x5630             LDRSB    R0,[R6, R0]
   \       0x98   0x2820             CMP      R0,#+32
   \       0x9A   0xD10A             BNE.N    ??readline_9
    649          				printf( "%c %c", 8, 8 );
   \       0x9C   0x2208             MOVS     R2,#+8
   \       0x9E   0x2108             MOVS     R1,#+8
   \       0xA0   0x....             LDR.N    R0,??DataTable11_18
   \       0xA2   0x.... 0x....      BL       printf
    650          				command_index--;
   \       0xA6   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \       0xAA   0x1E40             SUBS     R0,R0,#+1
   \       0xAC   0xF888 0x0000      STRB     R0,[R8, #+0]
   \       0xB0   0xE7E9             B.N      ??readline_8
    651          			}
    652          			/* erase char not space */
    653          			while ( (0 < command_index) && (command_buf[command_index] != ' ') ) {
   \                     ??readline_9: (+1)
   \       0xB2   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \       0xB6   0x2801             CMP      R0,#+1
   \       0xB8   0xDBA7             BLT.N    ??readline_0
   \       0xBA   0xF998 0x0000      LDRSB    R0,[R8, #+0]
   \       0xBE   0x5630             LDRSB    R0,[R6, R0]
   \       0xC0   0x2820             CMP      R0,#+32
   \       0xC2   0xD0A2             BEQ.N    ??readline_0
    654          				printf( "%c %c", 8, 8 );
   \       0xC4   0x2208             MOVS     R2,#+8
   \       0xC6   0x2108             MOVS     R1,#+8
   \       0xC8   0x....             LDR.N    R0,??DataTable11_18
   \       0xCA   0x.... 0x....      BL       printf
    655          				command_index--;
   \       0xCE   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \       0xD2   0x1E40             SUBS     R0,R0,#+1
   \       0xD4   0xF888 0x0000      STRB     R0,[R8, #+0]
   \       0xD8   0xE7EB             B.N      ??readline_9
    656          			}
    657          		}
    658          		else if ( (ch == 0x0D) || (ch == 0x0A) )
   \                     ??readline_7: (+1)
   \       0xDA   0x0028             MOVS     R0,R5
   \       0xDC   0xB240             SXTB     R0,R0
   \       0xDE   0x280D             CMP      R0,#+13
   \       0xE0   0xD003             BEQ.N    ??readline_10
   \       0xE2   0x0028             MOVS     R0,R5
   \       0xE4   0xB240             SXTB     R0,R0
   \       0xE6   0x280A             CMP      R0,#+10
   \       0xE8   0xD10D             BNE.N    ??readline_11
    659          		{
    660          			printf( "\n\r" );
   \                     ??readline_10: (+1)
   \       0xEA   0x....             ADR.N    R0,??DataTable11
   \       0xEC   0x.... 0x....      BL       printf
    661          			command_buf[command_index] = 0; // Null terminate the input command
   \       0xF0   0x....             LDR.N    R1,??DataTable11_17
   \       0xF2   0x2000             MOVS     R0,#+0
   \       0xF4   0xF991 0x2000      LDRSB    R2,[R1, #+0]
   \       0xF8   0x54B0             STRB     R0,[R6, R2]
    662          
    663          			ret = (int8_t)command_index;
   \       0xFA   0xF991 0x0000      LDRSB    R0,[R1, #+0]
    664          			command_index = 0;		//	입력후 index 초기화.
   \       0xFE   0x2200             MOVS     R2,#+0
   \      0x100   0x700A             STRB     R2,[R1, #+0]
    665          
    666          			return (int8_t)ret;
   \      0x102   0xB240             SXTB     R0,R0
   \      0x104   0xE029             B.N      ??readline_2
    667          		}
    668          		else if ( (0x20 <= ch) && (ch <= 0x7E) )
   \                     ??readline_11: (+1)
   \      0x106   0x0028             MOVS     R0,R5
   \      0x108   0xB240             SXTB     R0,R0
   \      0x10A   0x2820             CMP      R0,#+32
   \      0x10C   0xDB14             BLT.N    ??readline_12
   \      0x10E   0x0028             MOVS     R0,R5
   \      0x110   0xB240             SXTB     R0,R0
   \      0x112   0x287F             CMP      R0,#+127
   \      0x114   0xD010             BEQ.N    ??readline_12
    669          		{
    670          			//	ANSI 입력.
    671          			if ( command_index < (MAX_COMMAND_LENGTH - 2) )
   \      0x116   0x....             LDR.N    R0,??DataTable11_17
   \      0x118   0xF990 0x1000      LDRSB    R1,[R0, #+0]
   \      0x11C   0x293E             CMP      R1,#+62
   \      0x11E   0xDA05             BGE.N    ??readline_13
    672          			{
    673          				command_buf[command_index++] =(S8) ch;
   \      0x120   0xF990 0x1000      LDRSB    R1,[R0, #+0]
   \      0x124   0x5475             STRB     R5,[R6, R1]
   \      0x126   0x7801             LDRB     R1,[R0, #+0]
   \      0x128   0x1C49             ADDS     R1,R1,#+1
   \      0x12A   0x7001             STRB     R1,[R0, #+0]
    674          			}
    675          			printf( "%c", ch );    // Echo the character
   \                     ??readline_13: (+1)
   \      0x12C   0x0029             MOVS     R1,R5
   \      0x12E   0xB249             SXTB     R1,R1
   \      0x130   0x....             ADR.N    R0,??DataTable11_1
   \      0x132   0x.... 0x....      BL       printf
   \      0x136   0xE768             B.N      ??readline_0
    676          //			printf( "[%02X]", ch );    // Echo the character
    677          		}
    678          		else 
    679          		{
    680          			//	한글입력.
    681          			if ( command_index < ( MAX_COMMAND_LENGTH - 2 ) )
   \                     ??readline_12: (+1)
   \      0x138   0x....             LDR.N    R0,??DataTable11_17
   \      0x13A   0xF990 0x1000      LDRSB    R1,[R0, #+0]
   \      0x13E   0x293E             CMP      R1,#+62
   \      0x140   0xDA05             BGE.N    ??readline_14
    682          			{
    683          				command_buf[command_index++] = (S8)ch;
   \      0x142   0xF990 0x1000      LDRSB    R1,[R0, #+0]
   \      0x146   0x5475             STRB     R5,[R6, R1]
   \      0x148   0x7801             LDRB     R1,[R0, #+0]
   \      0x14A   0x1C49             ADDS     R1,R1,#+1
   \      0x14C   0x7001             STRB     R1,[R0, #+0]
    684          			}
    685          			printf( "%c", ch );    // Echo the character
   \                     ??readline_14: (+1)
   \      0x14E   0x0029             MOVS     R1,R5
   \      0x150   0xB249             SXTB     R1,R1
   \      0x152   0x....             ADR.N    R0,??DataTable11_1
   \      0x154   0x.... 0x....      BL       printf
   \      0x158   0xE757             B.N      ??readline_0
    686          //			printf( "[%02X]", ch );    // Echo the character
    687          		}
    688          
    689          #if defined(USE_FREERTOS)
    690          		//	FreeRTOS - Task Switching
    691          		taskYIELD();
    692          #else
    693          //		HAL_Delay( 0 );
    694          #endif
    695          	}
   \                     ??readline_2: (+1)
   \      0x15A   0xE8BD 0x81F0      POP      {R4-R8,PC}
    696          
    697          	//return (uint8_t)0;
    698          }

   \                                 In section .bss, align 1
   \                     `readline::command_index`:
   \        0x0                      DS8 1
    699          
    700          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    701          void	CLIPrompt( void )
    702          //========================================================================
    703          {
   \                     CLIPrompt: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    704          	printf( "%s", PROMPT_STRING );
   \        0x2   0x....             LDR.N    R1,??DataTable11_19
   \        0x4   0x....             ADR.N    R0,??DataTable11_2
   \        0x6   0x.... 0x....      BL       printf
    705          }
   \        0xA   0xBD01             POP      {R0,PC}
    706          

   \                                 In section .data, align 4
    707          void	( *g_fnCLIPrompt )( void ) = CLIPrompt;
   \                     g_fnCLIPrompt:
   \        0x0   0x....'....        DC32 CLIPrompt

   \                                 In section .data, align 4
    708          uint8_t		( *g_fnCLIProc )( char * ) = ProcessCommand;
   \                     g_fnCLIProc:
   \        0x0   0x....'....        DC32 ProcessCommand
    709          
    710          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    711          void	SetCLIPrompt( void ( *fnPrompt )( void ) )
    712          //========================================================================
    713          {
    714          	g_fnCLIPrompt = fnPrompt;
   \                     SetCLIPrompt: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11_20
   \        0x2   0x6008             STR      R0,[R1, #+0]
    715          }
   \        0x4   0x4770             BX       LR
    716          
    717          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    718          void	SetCLIProc( uint8_t ( *fnProc )( char *cmd ) )
    719          //========================================================================
    720          {
    721          	g_fnCLIProc = fnProc;
   \                     SetCLIProc: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable11_21
   \        0x2   0x6008             STR      R0,[R1, #+0]
    722          }
   \        0x4   0x4770             BX       LR
    723          
    724          
    725          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    726          void	LoopProcCLI ( void )
    727          //========================================================================
    728          {
   \                     LoopProcCLI: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
    729          	static S8		command_buf[MAX_COMMAND_LENGTH];
    730          	int8_t len;
    731          	if ( input_check() )
   \        0x2   0x.... 0x....      BL       input_check
   \        0x6   0x2800             CMP      R0,#+0
   \        0x8   0xD00F             BEQ.N    ??LoopProcCLI_0
    732          	{
    733          		len = readline( command_buf );
   \        0xA   0x....             LDR.N    R5,??DataTable11_22
   \        0xC   0x0028             MOVS     R0,R5
   \        0xE   0x.... 0x....      BL       readline
   \       0x12   0x0004             MOVS     R4,R0
    734          		if ( len != 0 )
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0xB240             SXTB     R0,R0
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD006             BEQ.N    ??LoopProcCLI_0
    735          		{
    736          //			printf( "%s(%d) : %s\n", __func__, __LINE__, command_buf );
    737          			//	Process Command
    738          //			ProcessCommand( command_buf );
    739          			g_fnCLIProc( command_buf );
                 			             ^
Warning[Pe167]: argument of type "S8 *" is incompatible with parameter of type
          "char *"
   \       0x1C   0x0028             MOVS     R0,R5
   \       0x1E   0x....             LDR.N    R1,??DataTable11_21
   \       0x20   0x6809             LDR      R1,[R1, #+0]
   \       0x22   0x4788             BLX      R1
    740          
    741          			//	Print Prompt
    742          //			printf( "%s", PROMPT_STRING );
    743          			g_fnCLIPrompt();
   \       0x24   0x....             LDR.N    R0,??DataTable11_20
   \       0x26   0x6800             LDR      R0,[R0, #+0]
   \       0x28   0x4780             BLX      R0
    744          		}
    745          	}
    746          }
   \                     ??LoopProcCLI_0: (+1)
   \       0x2A   0xBD31             POP      {R0,R4,R5,PC}

   \                                 In section .bss, align 4
   \                     `LoopProcCLI::command_buf`:
   \        0x0                      DS8 64
    747          
    748          
    749          //========================================================================
    750          #if defined(_WIN32)
    751          DWORD	vCLITask	( void *pvParameters )
    752          #else	//	RTOS

   \                                 In section .text, align 2, keep-with-next
    753          void	vCLITask	( void *pvParameters )
    754          #endif
    755          //========================================================================
    756          {
   \                     vCLITask: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    757          	/* The parameters are not used. */
    758          	//( void ) pvParameters;
    759          
    760          	/*
    761          	 * print Logo & version
    762          	 */
    763          //	CLEAR_VT_SCREEN();
    764          //	GOTO_VT_XY();
    765          
    766          //	user_commands = NELEMENTS(user_command_table);
    767          
    768          	for(;;)
    769          	{
    770          		LoopProcCLI();
   \                     ??vCLITask_0: (+1)
   \        0x4   0x.... 0x....      BL       LoopProcCLI
    771          
    772          #if defined(USE_FREERTOS)
    773          		taskYIELD();
    774          #else
    775          		HAL_Delay( (uint32_t)0 );
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x.... 0x....      BL       HAL_Delay
   \        0xE   0xE7F9             B.N      ??vCLITask_0
    776          #endif
    777          	}
    778          }
    779          
    780          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    781          uint8_t cmd_help( uint8_t argc, char *argv[] )
    782          //========================================================================
    783          {
   \                     cmd_help: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
    784          	uint16_t	i;
    785          	uint16_t	ok = 0;
   \        0x8   0x2600             MOVS     R6,#+0
    786          
    787          //	printf( "%s(%d)\n", __func__, __LINE__ );
    788          
    789          	for ( i = 1; i < NELEMENTS( user_command_table ); i++ )
   \        0xA   0x2701             MOVS     R7,#+1
   \                     ??cmd_help_0: (+1)
   \        0xC   0x0038             MOVS     R0,R7
   \        0xE   0xB280             UXTH     R0,R0
   \       0x10   0x2818             CMP      R0,#+24
   \       0x12   0xD244             BCS.N    ??cmd_help_1
    790          	{
    791          		if ( 1 < argc )
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0xB2C0             UXTB     R0,R0
   \       0x18   0x2802             CMP      R0,#+2
   \       0x1A   0xDB2C             BLT.N    ??cmd_help_2
    792          		{
    793          			if ( strcmp( argv[1], user_command_table[i].command_name ) == 0 )
   \       0x1C   0x.... 0x....      LDR.W    R8,??DataTable11_14
   \       0x20   0x0038             MOVS     R0,R7
   \       0x22   0xB280             UXTH     R0,R0
   \       0x24   0x0100             LSLS     R0,R0,#+4
   \       0x26   0xF858 0x1000      LDR      R1,[R8, R0]
   \       0x2A   0x6868             LDR      R0,[R5, #+4]
   \       0x2C   0x.... 0x....      BL       strcmp
   \       0x30   0x2800             CMP      R0,#+0
   \       0x32   0xD132             BNE.N    ??cmd_help_3
    794          			{
    795          				if ( user_command_table[i].command_help1 != NULL )
   \       0x34   0x0038             MOVS     R0,R7
   \       0x36   0xB280             UXTH     R0,R0
   \       0x38   0x0100             LSLS     R0,R0,#+4
   \       0x3A   0x4440             ADD      R0,R8,R0
   \       0x3C   0x6840             LDR      R0,[R0, #+4]
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD007             BEQ.N    ??cmd_help_4
    796          				{
    797          					printf( "%s\n", user_command_table[i].command_help1 );
   \       0x42   0x0038             MOVS     R0,R7
   \       0x44   0xB280             UXTH     R0,R0
   \       0x46   0x0100             LSLS     R0,R0,#+4
   \       0x48   0x4440             ADD      R0,R8,R0
   \       0x4A   0x6841             LDR      R1,[R0, #+4]
   \       0x4C   0x....             ADR.N    R0,??DataTable11_3
   \       0x4E   0x.... 0x....      BL       printf
    798          				}
    799          				if ( user_command_table[i].command_help2 != NULL )
   \                     ??cmd_help_4: (+1)
   \       0x52   0x0038             MOVS     R0,R7
   \       0x54   0xB280             UXTH     R0,R0
   \       0x56   0x0100             LSLS     R0,R0,#+4
   \       0x58   0x4440             ADD      R0,R8,R0
   \       0x5A   0x6880             LDR      R0,[R0, #+8]
   \       0x5C   0x2800             CMP      R0,#+0
   \       0x5E   0xD007             BEQ.N    ??cmd_help_5
    800          				{
    801          					printf( "%s\n", user_command_table[i].command_help2 );
   \       0x60   0x0038             MOVS     R0,R7
   \       0x62   0xB280             UXTH     R0,R0
   \       0x64   0x0100             LSLS     R0,R0,#+4
   \       0x66   0x4440             ADD      R0,R8,R0
   \       0x68   0x6881             LDR      R1,[R0, #+8]
   \       0x6A   0x....             ADR.N    R0,??DataTable11_3
   \       0x6C   0x.... 0x....      BL       printf
    802          				}
    803          				ok = 1;
   \                     ??cmd_help_5: (+1)
   \       0x70   0x2001             MOVS     R0,#+1
   \       0x72   0x0006             MOVS     R6,R0
   \       0x74   0xE011             B.N      ??cmd_help_3
    804          			}
    805          		}
    806          		else
    807          		{
    808          			if ( user_command_table[i].command_help1 != NULL )
   \                     ??cmd_help_2: (+1)
   \       0x76   0x....             LDR.N    R1,??DataTable11_14
   \       0x78   0x0038             MOVS     R0,R7
   \       0x7A   0xB280             UXTH     R0,R0
   \       0x7C   0x0100             LSLS     R0,R0,#+4
   \       0x7E   0x4408             ADD      R0,R1,R0
   \       0x80   0x6840             LDR      R0,[R0, #+4]
   \       0x82   0x2800             CMP      R0,#+0
   \       0x84   0xD007             BEQ.N    ??cmd_help_6
    809          			{
    810          				printf( "%s\n", user_command_table[i].command_help1 );
   \       0x86   0x0038             MOVS     R0,R7
   \       0x88   0xB280             UXTH     R0,R0
   \       0x8A   0x0100             LSLS     R0,R0,#+4
   \       0x8C   0x4408             ADD      R0,R1,R0
   \       0x8E   0x6841             LDR      R1,[R0, #+4]
   \       0x90   0x....             ADR.N    R0,??DataTable11_3
   \       0x92   0x.... 0x....      BL       printf
    811          			}
    812          			ok = 1;
   \                     ??cmd_help_6: (+1)
   \       0x96   0x2001             MOVS     R0,#+1
   \       0x98   0x0006             MOVS     R6,R0
    813          		}
    814          	}
   \                     ??cmd_help_3: (+1)
   \       0x9A   0x1C7F             ADDS     R7,R7,#+1
   \       0x9C   0xE7B6             B.N      ??cmd_help_0
    815          	if ( ok == 0 )
   \                     ??cmd_help_1: (+1)
   \       0x9E   0x0030             MOVS     R0,R6
   \       0xA0   0xB280             UXTH     R0,R0
   \       0xA2   0x2800             CMP      R0,#+0
   \       0xA4   0xD103             BNE.N    ??cmd_help_7
    816          	{
    817          		printf( "unknown command %s\n", argv[1] );
   \       0xA6   0x6869             LDR      R1,[R5, #+4]
   \       0xA8   0x....             LDR.N    R0,??DataTable11_23
   \       0xAA   0x.... 0x....      BL       printf
    818          	}
    819          	return (uint8_t)0;
   \                     ??cmd_help_7: (+1)
   \       0xAE   0x2000             MOVS     R0,#+0
   \       0xB0   0xE8BD 0x81F0      POP      {R4-R8,PC}
    820          }
    821          
    822          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    823          uint8_t cmd_uptime(uint8_t argc, char *argv[])
    824          //========================================================================
    825          {
   \                     cmd_uptime: (+1)
   \        0x0   0xE92D 0x47FC      PUSH     {R2-R10,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
    826          
    827          //=============================================================================
    828          #if defined(_WIN32)
    829          //=============================================================================
    830          
    831          //=============================================================================
    832          #else	//	stm32f207
    833          //=============================================================================
    834          
    835          #if defined( USE_FREERTOS )
    836          	uint32_t	tmp = xTaskGetTickCount() / configTICK_RATE_HZ;
    837          #else
    838          	uint32_t	tmp = HAL_GetTick() / 1000;
   \        0x8   0x.... 0x....      BL       HAL_GetTick
   \        0xC   0xF44F 0x717A      MOV      R1,#+1000
   \       0x10   0xFBB0 0xF4F1      UDIV     R4,R0,R1
    839          #endif
    840          
    841          	uint8_t	sec, min, hour;
    842          	uint8_t	day;
    843          
    844          	day = (uint8_t)((uint8_t)tmp / 3600 / 24);
   \       0x14   0x2700             MOVS     R7,#+0
    845          	tmp = (uint8_t)((uint8_t)tmp % (uint8_t)(3600 * 24));
   \       0x16   0xB2E4             UXTB     R4,R4
   \       0x18   0x2080             MOVS     R0,#+128
   \       0x1A   0xFB94 0xF1F0      SDIV     R1,R4,R0
   \       0x1E   0xFB00 0x4411      MLS      R4,R0,R1,R4
   \       0x22   0xB2E4             UXTB     R4,R4
    846          
    847          	hour = (uint8_t)((uint8_t)tmp / 3600);
   \       0x24   0xF05F 0x0800      MOVS     R8,#+0
    848          	tmp = (uint8_t)((uint8_t)tmp % 3600);
   \       0x28   0xB2E4             UXTB     R4,R4
   \       0x2A   0xF44F 0x6061      MOV      R0,#+3600
   \       0x2E   0xFB94 0xF1F0      SDIV     R1,R4,R0
   \       0x32   0xFB00 0x4411      MLS      R4,R0,R1,R4
   \       0x36   0xB2E4             UXTB     R4,R4
    849          
    850          	min = (uint8_t)((uint8_t)tmp / 60);
   \       0x38   0x0020             MOVS     R0,R4
   \       0x3A   0xB2C0             UXTB     R0,R0
   \       0x3C   0x213C             MOVS     R1,#+60
   \       0x3E   0xFB90 0xF9F1      SDIV     R9,R0,R1
    851          	sec = (uint8_t)((uint8_t)tmp % 60);
   \       0x42   0x0021             MOVS     R1,R4
   \       0x44   0xB2C9             UXTB     R1,R1
   \       0x46   0x203C             MOVS     R0,#+60
   \       0x48   0xFB91 0xFAF0      SDIV     R10,R1,R0
   \       0x4C   0xFB00 0x1A1A      MLS      R10,R0,R10,R1
    852          
    853          	if (0 < day)
   \       0x50   0x0038             MOVS     R0,R7
   \       0x52   0xB2C0             UXTB     R0,R0
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD00C             BEQ.N    ??cmd_uptime_0
    854          	{
    855          		printf("%d day(s) %d:%02d:%02d up.\n", day, hour, min, sec);
   \       0x58   0x4650             MOV      R0,R10
   \       0x5A   0xB2C0             UXTB     R0,R0
   \       0x5C   0x9000             STR      R0,[SP, #+0]
   \       0x5E   0x464B             MOV      R3,R9
   \       0x60   0xB2DB             UXTB     R3,R3
   \       0x62   0x4642             MOV      R2,R8
   \       0x64   0xB2D2             UXTB     R2,R2
   \       0x66   0x0039             MOVS     R1,R7
   \       0x68   0xB2C9             UXTB     R1,R1
   \       0x6A   0x....             LDR.N    R0,??DataTable11_24
   \       0x6C   0x.... 0x....      BL       printf
   \       0x70   0xE008             B.N      ??cmd_uptime_1
    856          	}
    857          	else
    858          	{
    859          		printf("%d:%02d:%02d up.\n", hour, min, sec);
   \                     ??cmd_uptime_0: (+1)
   \       0x72   0x4653             MOV      R3,R10
   \       0x74   0xB2DB             UXTB     R3,R3
   \       0x76   0x464A             MOV      R2,R9
   \       0x78   0xB2D2             UXTB     R2,R2
   \       0x7A   0x4641             MOV      R1,R8
   \       0x7C   0xB2C9             UXTB     R1,R1
   \       0x7E   0x....             LDR.N    R0,??DataTable11_25
   \       0x80   0x.... 0x....      BL       printf
    860          	}
    861          
    862          //=============================================================================
    863          #endif
    864          //=============================================================================
    865          
    866          	return (uint8_t)0;
   \                     ??cmd_uptime_1: (+1)
   \       0x84   0x2000             MOVS     R0,#+0
   \       0x86   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}
    867          }
    868          
    869          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    870          uint8_t cmd_ver(uint8_t argc, char *argv[])
    871          //========================================================================
    872          {
   \                     cmd_ver: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    873          	printf("Version = %s(%s)\n", APP_VER, APP_BUILD_DATE );
   \        0x6   0x....             LDR.N    R2,??DataTable11_26
   \        0x8   0x....             LDR.N    R1,??DataTable11_27
   \        0xA   0x....             LDR.N    R0,??DataTable11_28
   \        0xC   0x.... 0x....      BL       printf
    874          
    875          	return (uint8_t)0;
   \       0x10   0x2000             MOVS     R0,#+0
   \       0x12   0xBD32             POP      {R1,R4,R5,PC}
    876          }
    877          
    878          
    879          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    880          uint8_t cmd_reset(uint8_t argc, char *argv[])
    881          //========================================================================
    882          {
   \                     cmd_reset: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    883            	NVIC_SystemReset();
   \        0x6   0x.... 0x....      BL       __NVIC_SystemReset
    884          	return (uint8_t)0;
                 	^
Warning[Pe111]: statement is unreachable
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0xBD32             POP      {R1,R4,R5,PC}
    885          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x20 0x00          DC8      " ",0x0,0x0    

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \        0x0   0x7C 0x00          DC8      "|",0x0,0x0    

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \        0x0   0x25 0x63          DC8      0x25, 0x63, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \        0x0   0x7C 0x0A          DC8      0x7C, 0x0A, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \        0x0   0x20 0x09          DC8      0x20, 0x09, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \        0x0   0x21 0x21          DC8      0x21, 0x21, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0x2D 0x68          DC8      0x2D, 0x68, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \        0x0   0x25 0x73          DC8      "%s\n"         

   \              0x0A 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11:
   \        0x0   0x0A 0x0D          DC8      0x0A, 0x0D, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_1:
   \        0x0   0x25 0x63          DC8      0x25, 0x63, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_2:
   \        0x0   0x25 0x73          DC8      0x25, 0x73, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_3:
   \        0x0   0x25 0x73          DC8      "%s\n"         

   \              0x0A 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_4:
   \        0x0   0xE000'ED0C        DC32     0xe000ed0c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_5:
   \        0x0   0x05FA'0004        DC32     0x5fa0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_6:
   \        0x0   0x....'....        DC32     ?_89

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_7:
   \        0x0   0x....'....        DC32     ?_65

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_8:
   \        0x0   0x....'....        DC32     ?_67

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_9:
   \        0x0   0x....'....        DC32     ?_68

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_10:
   \        0x0   0x....'....        DC32     ?_69

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_11:
   \        0x0   0x....'....        DC32     ?_74

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_12:
   \        0x0   0x....'....        DC32     old_cmd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_13:
   \        0x0   0x....'....        DC32     data_option

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_14:
   \        0x0   0x....'....        DC32     user_command_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_15:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_16:
   \        0x0   0x....'....        DC32     ?_78

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_17:
   \        0x0   0x....'....        DC32     `readline::command_index`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_18:
   \        0x0   0x....'....        DC32     ?_79

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_19:
   \        0x0   0x....'....        DC32     ?_82

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_20:
   \        0x0   0x....'....        DC32     g_fnCLIPrompt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_21:
   \        0x0   0x....'....        DC32     g_fnCLIProc

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_22:
   \        0x0   0x....'....        DC32     `LoopProcCLI::command_buf`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_23:
   \        0x0   0x....'....        DC32     ?_83

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_24:
   \        0x0   0x....'....        DC32     ?_84

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_25:
   \        0x0   0x....'....        DC32     ?_85

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_26:
   \        0x0   0x....'....        DC32     ?_88

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_27:
   \        0x0   0x....'....        DC32     ?_87

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable11_28:
   \        0x0   0x....'....        DC32     ?_86

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x68 0x65          DC8 "help"

   \              0x6C 0x70    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x68 0x65          DC8 "help\t\t-\tdisplay commands"

   \              0x6C 0x70    

   \              0x09 0x09    

   \              0x2D 0x09    

   \              0x64 0x69    

   \              0x73 0x70    

   \              0x6C 0x61    

   \              0x79 0x20    

   \              0x63 0x6F    

   \              0x6D 0x6D    

   \              0x61 0x6E    

   \              0x64 0x73    

   \              0x00
   \       0x19                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x75 0x70          DC8 "uptime"

   \              0x74 0x69    

   \              0x6D 0x65    

   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x75 0x70          DC8 "uptime\t\t-\tdisplay uptime"

   \              0x74 0x69    

   \              0x6D 0x65    

   \              0x09 0x09    

   \              0x2D 0x09    

   \              0x64 0x69    

   \              0x73 0x70    

   \              0x6C 0x61    

   \              0x79 0x20    

   \              0x75 0x70    

   \              0x74 0x69    

   \              0x6D 0x65    

   \              0x00
   \       0x19                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x76 0x65          DC8 "ver"

   \              0x72 0x00

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x76 0x65          DC8 "ver\t\t-\tdisplay version."

   \              0x72 0x09    

   \              0x09 0x2D    

   \              0x09 0x64    

   \              0x69 0x73    

   \              0x70 0x6C    

   \              0x61 0x79    

   \              0x20 0x76    

   \              0x65 0x72    

   \              0x73 0x69    

   \              0x6F 0x6E    

   \              0x2E 0x00

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x72 0x65          DC8 "reset"

   \              0x73 0x65    

   \              0x74 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x72 0x65          DC8 "reset\t\t-\trestart system"

   \              0x73 0x65    

   \              0x74 0x09    

   \              0x09 0x2D    

   \              0x09 0x72    

   \              0x65 0x73    

   \              0x74 0x61    

   \              0x72 0x74    

   \              0x20 0x73    

   \              0x79 0x73    

   \              0x74 0x65    

   \              0x6D 0x00

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x68 0x6F          DC8 "hop"

   \              0x70 0x00

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x68 0x6F          DC8 "hop\t\t-\thopping"

   \              0x70 0x09    

   \              0x09 0x2D    

   \              0x09 0x68    

   \              0x6F 0x70    

   \              0x70 0x69    

   \              0x6E 0x67    

   \              0x00
   \        0xF                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x68 0x6F          DC8 "hop -\thop [ 0:default / 1:On / 2:Off ]"

   \              0x70 0x20    

   \              0x2D 0x09    

   \              0x68 0x6F    

   \              0x70 0x20    

   \              0x5B 0x20    

   \              0x30 0x3A    

   \              0x64 0x65    

   \              0x66 0x61    

   \              0x75 0x6C    

   \              0x74 0x20    

   \              0x2F 0x20    

   \              0x31 0x3A    

   \              0x4F 0x6E    

   \              0x20 0x2F    

   \              0x20 0x32    

   \              0x3A 0x4F    

   \              0x66 0x66    

   \              0x20 0x5D    

   \              0x00
   \       0x27                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x64 0x69          DC8 "diag"

   \              0x61 0x67    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x64 0x69          DC8 "diag\t\t-\tdiagnostic test"

   \              0x61 0x67    

   \              0x09 0x09    

   \              0x2D 0x09    

   \              0x64 0x69    

   \              0x61 0x67    

   \              0x6E 0x6F    

   \              0x73 0x74    

   \              0x69 0x63    

   \              0x20 0x74    

   \              0x65 0x73    

   \              0x74 0x00

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x64 0x65          DC8 "debug"

   \              0x62 0x75    

   \              0x67 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x64 0x65          DC8 "debug\t\t-\tset debug level."

   \              0x62 0x75    

   \              0x67 0x09    

   \              0x09 0x2D    

   \              0x09 0x73    

   \              0x65 0x74    

   \              0x20 0x64    

   \              0x65 0x62    

   \              0x75 0x67    

   \              0x20 0x6C    

   \              0x65 0x76    

   \              0x65 0x6C    

   \              0x2E 0x00
   \       0x1A                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x63 0x68          DC8 "ch"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x63 0x68          DC8 "ch\t\t-\tSetting Channel"

   \              0x09 0x09    

   \              0x2D 0x09    

   \              0x53 0x65    

   \              0x74 0x74    

   \              0x69 0x6E    

   \              0x67 0x20    

   \              0x43 0x68    

   \              0x61 0x6E    

   \              0x6E 0x65    

   \              0x6C 0x00
   \       0x16                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x63 0x68          DC8 "ch -\tch [channel:0-9]"

   \              0x20 0x2D    

   \              0x09 0x63    

   \              0x68 0x20    

   \              0x5B 0x63    

   \              0x68 0x61    

   \              0x6E 0x6E    

   \              0x65 0x6C    

   \              0x3A 0x30    

   \              0x2D 0x39    

   \              0x5D 0x00
   \       0x16                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x74 0x73          DC8 "ts"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x74 0x73          DC8 "ts\t\t-\tSetting Train Set"

   \              0x09 0x09    

   \              0x2D 0x09    

   \              0x53 0x65    

   \              0x74 0x74    

   \              0x69 0x6E    

   \              0x67 0x20    

   \              0x54 0x72    

   \              0x61 0x69    

   \              0x6E 0x20    

   \              0x53 0x65    

   \              0x74 0x00

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x74 0x73          DC8 "ts -\tts [channel:0-9]"

   \              0x20 0x2D    

   \              0x09 0x74    

   \              0x73 0x20    

   \              0x5B 0x63    

   \              0x68 0x61    

   \              0x6E 0x6E    

   \              0x65 0x6C    

   \              0x3A 0x30    

   \              0x2D 0x39    

   \              0x5D 0x00
   \       0x16                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x63 0x61          DC8 "car"

   \              0x72 0x00

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x63 0x61          DC8 "car\t-\tSetting Car No."

   \              0x72 0x09    

   \              0x2D 0x09    

   \              0x53 0x65    

   \              0x74 0x74    

   \              0x69 0x6E    

   \              0x67 0x20    

   \              0x43 0x61    

   \              0x72 0x20    

   \              0x4E 0x6F    

   \              0x2E 0x00
   \       0x16                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x63 0x61          DC8 "car -\tcar [channel:0-9]"

   \              0x72 0x20    

   \              0x2D 0x09    

   \              0x63 0x61    

   \              0x72 0x20    

   \              0x5B 0x63    

   \              0x68 0x61    

   \              0x6E 0x6E    

   \              0x65 0x6C    

   \              0x3A 0x30    

   \              0x2D 0x39    

   \              0x5D 0x00

   \                                 In section .rodata, align 4
   \                     ?_24:
   \        0x0   0x69 0x6E          DC8 "info"

   \              0x66 0x6F    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_25:
   \        0x0   0x69 0x6E          DC8 "info\t-\tDisplay Information"

   \              0x66 0x6F    

   \              0x09 0x2D    

   \              0x09 0x44    

   \              0x69 0x73    

   \              0x70 0x6C    

   \              0x61 0x79    

   \              0x20 0x49    

   \              0x6E 0x66    

   \              0x6F 0x72    

   \              0x6D 0x61    

   \              0x74 0x69    

   \              0x6F 0x6E    

   \              0x00
   \       0x1B                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_26:
   \        0x0   0x73 0x77          DC8 "swinfo"

   \              0x69 0x6E    

   \              0x66 0x6F    

   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_27:
   \        0x0   0x73 0x77          DC8 "swinfo\t-\tSoftware Information"

   \              0x69 0x6E    

   \              0x66 0x6F    

   \              0x09 0x2D    

   \              0x09 0x53    

   \              0x6F 0x66    

   \              0x74 0x77    

   \              0x61 0x72    

   \              0x65 0x20    

   \              0x49 0x6E    

   \              0x66 0x6F    

   \              0x72 0x6D    

   \              0x61 0x74    

   \              0x69 0x6F    

   \              0x6E 0x00
   \       0x1E                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_28:
   \        0x0   0x72 0x66          DC8 "rfstat"

   \              0x73 0x74    

   \              0x61 0x74    

   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_29:
   \        0x0   0x72 0x66          DC8 "rfstat\t-\tRF Tx / Rx Information"

   \              0x73 0x74    

   \              0x61 0x74    

   \              0x09 0x2D    

   \              0x09 0x52    

   \              0x46 0x20    

   \              0x54 0x78    

   \              0x20 0x2F    

   \              0x20 0x52    

   \              0x78 0x20    

   \              0x49 0x6E    

   \              0x66 0x6F    

   \              0x72 0x6D    

   \              0x61 0x74    

   \              0x69 0x6F    

   \              0x6E 0x00

   \                                 In section .rodata, align 4
   \                     ?_30:
   \        0x0   0x72 0x73          DC8 "rspid"

   \              0x70 0x69    

   \              0x64 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_31:
   \        0x0   0x72 0x73          DC8 "rspid\t-\tManual Set Resp ID"

   \              0x70 0x69    

   \              0x64 0x09    

   \              0x2D 0x09    

   \              0x4D 0x61    

   \              0x6E 0x75    

   \              0x61 0x6C    

   \              0x20 0x53    

   \              0x65 0x74    

   \              0x20 0x52    

   \              0x65 0x73    

   \              0x70 0x20    

   \              0x49 0x44    

   \              0x00
   \       0x1B                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_32:
   \        0x0   0x72 0x73          DC8 "rspid\t-\trspid [id] [set/clear]"

   \              0x70 0x69    

   \              0x64 0x09    

   \              0x2D 0x09    

   \              0x72 0x73    

   \              0x70 0x69    

   \              0x64 0x20    

   \              0x5B 0x69    

   \              0x64 0x5D    

   \              0x20 0x5B    

   \              0x73 0x65    

   \              0x74 0x2F    

   \              0x63 0x6C    

   \              0x65 0x61    

   \              0x72 0x5D    

   \              0x00
   \       0x1F                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_33:
   \        0x0   0x6F 0x63          DC8 "occ"

   \              0x63 0x00

   \                                 In section .rodata, align 4
   \                     ?_34:
   \        0x0   0x6F 0x63          DC8 "occ\t\t-\tOCC PA Start/Stop"

   \              0x63 0x09    

   \              0x09 0x2D    

   \              0x09 0x4F    

   \              0x43 0x43    

   \              0x20 0x50    

   \              0x41 0x20    

   \              0x53 0x74    

   \              0x61 0x72    

   \              0x74 0x2F    

   \              0x53 0x74    

   \              0x6F 0x70    

   \              0x00
   \       0x19                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_35:
   \        0x0   0x6F 0x63          DC8 "occ [1(Start)/0(Stop)]"

   \              0x63 0x20    

   \              0x5B 0x31    

   \              0x28 0x53    

   \              0x74 0x61    

   \              0x72 0x74    

   \              0x29 0x2F    

   \              0x30 0x28    

   \              0x53 0x74    

   \              0x6F 0x70    

   \              0x29 0x5D    

   \              0x00
   \       0x17                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_36:
   \        0x0   0x74 0x78          DC8 "txpwr"

   \              0x70 0x77    

   \              0x72 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_37:
   \        0x0   0x74 0x78          DC8 "txpwr\t\t-\tRF Tx Power"

   \              0x70 0x77    

   \              0x72 0x09    

   \              0x09 0x2D    

   \              0x09 0x52    

   \              0x46 0x20    

   \              0x54 0x78    

   \              0x20 0x50    

   \              0x6F 0x77    

   \              0x65 0x72    

   \              0x00
   \       0x15                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_38:
   \        0x0   0x74 0x78          DC8 0x74, 0x78, 0x70, 0x77, 0x72, 0x20, 0x5B, 0x30

   \              0x70 0x77    

   \              0x72 0x20    

   \              0x5B 0x30
   \        0x8   0x28 0x2D          DC8 0x28, 0x2D, 0x33, 0x38, 0x64, 0x42, 0x6D, 0x29

   \              0x33 0x38    

   \              0x64 0x42    

   \              0x6D 0x29
   \       0x10   0x7E 0x37          DC8 0x7E, 0x37, 0x28, 0x30, 0x64, 0x42, 0x6D, 0x29

   \              0x28 0x30    

   \              0x64 0x42    

   \              0x6D 0x29
   \       0x18   0x7E 0x31          DC8 0x7E, 0x31, 0x32, 0x28, 0x35, 0x64, 0x42, 0x6D

   \              0x32 0x28    

   \              0x35 0x64    

   \              0x42 0x6D
   \       0x20   0x29 0x7E          DC8 0x29, 0x7E, 0x32, 0x32, 0x28, 0x31, 0x30, 0x64

   \              0x32 0x32    

   \              0x28 0x31    

   \              0x30 0x64
   \       0x28   0x42 0x6D          DC8 0x42, 0x6D, 0x29, 0x7E, 0x34, 0x30, 0x28, 0x31

   \              0x29 0x7E    

   \              0x34 0x30    

   \              0x28 0x31
   \       0x30   0x35 0x64          DC8 0x35, 0x64, 0x42, 0x6D, 0x29, 0x7E, 0x31, 0x32

   \              0x42 0x6D    

   \              0x29 0x7E    

   \              0x31 0x32
   \       0x38   0x37 0x28          DC8 0x37, 0x28, 0x32, 0x30, 0x64, 0x42, 0x6D, 0x29

   \              0x32 0x30    

   \              0x64 0x42    

   \              0x6D 0x29
   \       0x40   0x5D 0x00          DC8 0x5D, 0
   \       0x42                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_39:
   \        0x0   0x65 0x65          DC8 "eepw"

   \              0x70 0x77    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_40:
   \        0x0   0x65 0x65          DC8 "eepw\t\t\t-\twrite byte to address"

   \              0x70 0x77    

   \              0x09 0x09    

   \              0x09 0x2D    

   \              0x09 0x77    

   \              0x72 0x69    

   \              0x74 0x65    

   \              0x20 0x62    

   \              0x79 0x74    

   \              0x65 0x20    

   \              0x74 0x6F    

   \              0x20 0x61    

   \              0x64 0x64    

   \              0x72 0x65    

   \              0x73 0x73    

   \              0x00
   \       0x1F                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_41:
   \        0x0   0x65 0x65          DC8 "eepw [addr] [data]"

   \              0x70 0x77    

   \              0x20 0x5B    

   \              0x61 0x64    

   \              0x64 0x72    

   \              0x5D 0x20    

   \              0x5B 0x64    

   \              0x61 0x74    

   \              0x61 0x5D    

   \              0x00
   \       0x13                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_42:
   \        0x0   0x65 0x65          DC8 "eepr"

   \              0x70 0x72    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_43:
   \        0x0   0x65 0x65          DC8 "eepr\t\t\t-\tread byte from address"

   \              0x70 0x72    

   \              0x09 0x09    

   \              0x09 0x2D    

   \              0x09 0x72    

   \              0x65 0x61    

   \              0x64 0x20    

   \              0x62 0x79    

   \              0x74 0x65    

   \              0x20 0x66    

   \              0x72 0x6F    

   \              0x6D 0x20    

   \              0x61 0x64    

   \              0x64 0x72    

   \              0x65 0x73    

   \              0x73 0x00

   \                                 In section .rodata, align 4
   \                     ?_44:
   \        0x0   0x65 0x65          DC8 "eepr [addr]"

   \              0x70 0x72    

   \              0x20 0x5B    

   \              0x61 0x64    

   \              0x64 0x72    

   \              0x5D 0x00

   \                                 In section .rodata, align 4
   \                     ?_45:
   \        0x0   0x65 0x65          DC8 "eepdump"

   \              0x70 0x64    

   \              0x75 0x6D    

   \              0x70 0x00

   \                                 In section .rodata, align 4
   \                     ?_46:
   \        0x0   0x65 0x65          DC8 "eepdump\t\t-\teeprom dump"

   \              0x70 0x64    

   \              0x75 0x6D    

   \              0x70 0x09    

   \              0x09 0x2D    

   \              0x09 0x65    

   \              0x65 0x70    

   \              0x72 0x6F    

   \              0x6D 0x20    

   \              0x64 0x75    

   \              0x6D 0x70    

   \              0x00
   \       0x17                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_47:
   \        0x0   0x65 0x65          DC8 "eepdump [addr] [size]"

   \              0x70 0x64    

   \              0x75 0x6D    

   \              0x70 0x20    

   \              0x5B 0x61    

   \              0x64 0x64    

   \              0x72 0x5D    

   \              0x20 0x5B    

   \              0x73 0x69    

   \              0x7A 0x65    

   \              0x5D 0x00
   \       0x16                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_48:
   \        0x0   0x61 0x75          DC8 "audio"

   \              0x64 0x69    

   \              0x6F 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_49:
   \        0x0   0x61 0x75          DC8 "audio\t-\taudio command"

   \              0x64 0x69    

   \              0x6F 0x09    

   \              0x2D 0x09    

   \              0x61 0x75    

   \              0x64 0x69    

   \              0x6F 0x20    

   \              0x63 0x6F    

   \              0x6D 0x6D    

   \              0x61 0x6E    

   \              0x64 0x00
   \       0x16                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_50:
   \        0x0   0x61 0x75          DC8 "audio [loop/null/sine/spk [0/1] / mute [0/1] ]"

   \              0x64 0x69    

   \              0x6F 0x20    

   \              0x5B 0x6C    

   \              0x6F 0x6F    

   \              0x70 0x2F    

   \              0x6E 0x75    

   \              0x6C 0x6C    

   \              0x2F 0x73    

   \              0x69 0x6E    

   \              0x65 0x2F    

   \              0x73 0x70    

   \              0x6B 0x20    

   \              0x5B 0x30    

   \              0x2F 0x31    

   \              0x5D 0x20    

   \              0x2F 0x20    

   \              0x6D 0x75    

   \              0x74 0x65    

   \              0x20 0x5B    

   \              0x30 0x2F    

   \              0x31 0x5D    

   \              0x20 0x5D    

   \              0x00
   \       0x2F                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_51:
   \        0x0   0x63 0x6F          DC8 "codec"

   \              0x64 0x65    

   \              0x63 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_52:
   \        0x0   0x63 0x6F          DC8 "codec\t-\tcodec command"

   \              0x64 0x65    

   \              0x63 0x09    

   \              0x2D 0x09    

   \              0x63 0x6F    

   \              0x64 0x65    

   \              0x63 0x20    

   \              0x63 0x6F    

   \              0x6D 0x6D    

   \              0x61 0x6E    

   \              0x64 0x00
   \       0x16                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_53:
   \        0x0   0x63 0x6F          DC8 "codec [init/loop/mute [0/1] ]"

   \              0x64 0x65    

   \              0x63 0x20    

   \              0x5B 0x69    

   \              0x6E 0x69    

   \              0x74 0x2F    

   \              0x6C 0x6F    

   \              0x6F 0x70    

   \              0x2F 0x6D    

   \              0x75 0x74    

   \              0x65 0x20    

   \              0x5B 0x30    

   \              0x2F 0x31    

   \              0x5D 0x20    

   \              0x5D 0x00
   \       0x1E                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_54:
   \        0x0   0x73 0x74          DC8 "stboot"

   \              0x62 0x6F    

   \              0x6F 0x74    

   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_55:
   \        0x0   0x73 0x74          DC8 "stboot\t- Enter STM32 Bootloader ( DFU Mode )"

   \              0x62 0x6F    

   \              0x6F 0x74    

   \              0x09 0x2D    

   \              0x20 0x45    

   \              0x6E 0x74    

   \              0x65 0x72    

   \              0x20 0x53    

   \              0x54 0x4D    

   \              0x33 0x32    

   \              0x20 0x42    

   \              0x6F 0x6F    

   \              0x74 0x6C    

   \              0x6F 0x61    

   \              0x64 0x65    

   \              0x72 0x20    

   \              0x28 0x20    

   \              0x44 0x46    

   \              0x55 0x20    

   \              0x4D 0x6F    

   \              0x64 0x65    

   \              0x20 0x29    

   \              0x00
   \       0x2D                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_56:
   \        0x0   0x75 0x70          DC8 "upgrade"

   \              0x67 0x72    

   \              0x61 0x64    

   \              0x65 0x00

   \                                 In section .rodata, align 4
   \                     ?_57:
   \        0x0   0x75 0x70          DC8 "upgrade\t- upgrade command"

   \              0x67 0x72    

   \              0x61 0x64    

   \              0x65 0x09    

   \              0x2D 0x20    

   \              0x75 0x70    

   \              0x67 0x72    

   \              0x61 0x64    

   \              0x65 0x20    

   \              0x63 0x6F    

   \              0x6D 0x6D    

   \              0x61 0x6E    

   \              0x64 0x00
   \       0x1A                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_58:
   \        0x0   0x6D 0x6F          DC8 "mon"

   \              0x6E 0x00

   \                                 In section .rodata, align 4
   \                     ?_59:
   \        0x0   0x6D 0x6F          DC8 "mon\t-\tshow packet monitoring"

   \              0x6E 0x09    

   \              0x2D 0x09    

   \              0x73 0x68    

   \              0x6F 0x77    

   \              0x20 0x70    

   \              0x61 0x63    

   \              0x6B 0x65    

   \              0x74 0x20    

   \              0x6D 0x6F    

   \              0x6E 0x69    

   \              0x74 0x6F    

   \              0x72 0x69    

   \              0x6E 0x67    

   \              0x00
   \       0x1D                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_60:
   \        0x0   0x6D 0x6F          DC8 "mon [0/1]"

   \              0x6E 0x20    

   \              0x5B 0x30    

   \              0x2F 0x31    

   \              0x5D 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 1
   \                     ?_61:
   \        0x0   0x00               DC8 ""

   \                                 In section .rodata, align 4
   \                     ?_62:
   \        0x0   0x20 0x20          DC8 "   "

   \              0x20 0x00

   \                                 In section .rodata, align 4
   \                     ?_63:
   \        0x0   0x20 0x20          DC8 "     "

   \              0x20 0x20    

   \              0x20 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_64:
   \        0x0   0x20 0x20          DC8 "         "

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x20    

   \              0x20 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_65:
   \        0x0   0x25 0x30          DC8 "%08p  "

   \              0x38 0x70    

   \              0x20 0x20    

   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 2
   \        0x0   0x20 0x00          DC8 " "

   \                                 In section .rodata, align 4
   \                     ?_67:
   \        0x0   0x25 0x30          DC8 "%02x "

   \              0x32 0x78    

   \              0x20 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_68:
   \        0x0   0x25 0x30          DC8 "%04x "

   \              0x34 0x78    

   \              0x20 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_69:
   \        0x0   0x25 0x30          DC8 "%08x "

   \              0x38 0x78    

   \              0x20 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 2
   \        0x0   0x7C 0x00          DC8 "|"

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x63          DC8 "%c"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \        0x0   0x7C 0x0A          DC8 "|\012"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \        0x0   0x20 0x09          DC8 " \t"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_74:
   \        0x0   0x1B 0x5B          DC8 27, 91, 65, 0

   \              0x41 0x00

   \                                 In section .rodata, align 4
   \        0x0   0x21 0x21          DC8 "!!"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \        0x0   0x2D 0x68          DC8 "-h"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x73          DC8 "%s\012"

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_78:
   \        0x0   0x25 0x73          DC8 "%s: command not found\012\015"

   \              0x3A 0x20    

   \              0x63 0x6F    

   \              0x6D 0x6D    

   \              0x61 0x6E    

   \              0x64 0x20    

   \              0x6E 0x6F    

   \              0x74 0x20    

   \              0x66 0x6F    

   \              0x75 0x6E    

   \              0x64 0x0A    

   \              0x0D 0x00

   \                                 In section .rodata, align 4
   \                     ?_79:
   \        0x0   0x25 0x63          DC8 "%c %c"

   \              0x20 0x25    

   \              0x63 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \        0x0   0x0A 0x0D          DC8 "\012\015"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x73          DC8 "%s"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_82:
   \        0x0   0x52 0x46          DC8 "RFM> "

   \              0x4D 0x3E    

   \              0x20 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_83:
   \        0x0   0x75 0x6E          DC8 "unknown command %s\012"

   \              0x6B 0x6E    

   \              0x6F 0x77    

   \              0x6E 0x20    

   \              0x63 0x6F    

   \              0x6D 0x6D    

   \              0x61 0x6E    

   \              0x64 0x20    

   \              0x25 0x73    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_84:
   \        0x0   0x25 0x64          DC8 "%d day(s) %d:%02d:%02d up.\012"

   \              0x20 0x64    

   \              0x61 0x79    

   \              0x28 0x73    

   \              0x29 0x20    

   \              0x25 0x64    

   \              0x3A 0x25    

   \              0x30 0x32    

   \              0x64 0x3A    

   \              0x25 0x30    

   \              0x32 0x64    

   \              0x20 0x75    

   \              0x70 0x2E    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_85:
   \        0x0   0x25 0x64          DC8 "%d:%02d:%02d up.\012"

   \              0x3A 0x25    

   \              0x30 0x32    

   \              0x64 0x3A    

   \              0x25 0x30    

   \              0x32 0x64    

   \              0x20 0x75    

   \              0x70 0x2E    

   \              0x0A 0x00
   \       0x12                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_86:
   \        0x0   0x56 0x65          DC8 "Version = %s(%s)\012"

   \              0x72 0x73    

   \              0x69 0x6F    

   \              0x6E 0x20    

   \              0x3D 0x20    

   \              0x25 0x73    

   \              0x28 0x25    

   \              0x73 0x29    

   \              0x0A 0x00
   \       0x12                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_87:
   \        0x0   0x31 0x2E          DC8 "1.1.0.274"

   \              0x31 0x2E    

   \              0x30 0x2E    

   \              0x32 0x37    

   \              0x34 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_88:
   \        0x0   0x53 0x65          DC8 "Sep 22 2022, 08:40:11"

   \              0x70 0x20    

   \              0x32 0x32    

   \              0x20 0x32    

   \              0x30 0x32    

   \              0x32 0x2C    

   \              0x20 0x30    

   \              0x38 0x3A    

   \              0x34 0x30    

   \              0x3A 0x31    

   \              0x31 0x00
   \       0x16                      DS8 2
    886          
    887          /*
    888          //========================================================================
    889          int cmd_ts(int argc, char *argv[])
    890          //========================================================================
    891          {
    892          	char	*pbuffer;
    893          
    894          	pbuffer = pvPortMalloc( 512 );
    895          	vTaskList(pbuffer);
    896          	printf("Name            Status  Pri     StkHigh Task#\n");
    897          	printf(pbuffer);
    898          	vPortFree(pbuffer);
    899          	return 0;
    900          }
    901          */
    902          
    903          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   CLIPrompt
         8   -> printf
      16   LoopProcCLI
        16   -- Indirect call
        16   -> input_check
        16   -> readline
     200   ProcessCommand
       200   -- Indirect call
       200   -> __aeabi_memset
       200   -> getarg
       200   -> printf
       200   -> strchr
       200   -> strcmp
       200   -> strcpy
       0   SetCLIProc
       0   SetCLIPrompt
       0   __NVIC_SystemReset
      16   a2hex
        16   -> strtol
      24   cmd_help
        24   -> printf
        24   -> strcmp
      16   cmd_reset
        16   -> __NVIC_SystemReset
      40   cmd_uptime
        40   -> HAL_GetTick
        40   -> printf
      16   cmd_ver
        16   -> printf
      64   dump_Cli
        64   -> __aeabi_memcpy4
        64   -> printf
      32   getarg
        32   -> strtok_r
      24   readline
        24   -> getchar
        24   -> printf
       8   vCLITask
         8   -> HAL_Delay
         8   -> LoopProcCLI


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable11
       4  ??DataTable11_1
       4  ??DataTable11_10
       4  ??DataTable11_11
       4  ??DataTable11_12
       4  ??DataTable11_13
       4  ??DataTable11_14
       4  ??DataTable11_15
       4  ??DataTable11_16
       4  ??DataTable11_17
       4  ??DataTable11_18
       4  ??DataTable11_19
       4  ??DataTable11_2
       4  ??DataTable11_20
       4  ??DataTable11_21
       4  ??DataTable11_22
       4  ??DataTable11_23
       4  ??DataTable11_24
       4  ??DataTable11_25
       4  ??DataTable11_26
       4  ??DataTable11_27
       4  ??DataTable11_28
       4  ??DataTable11_3
       4  ??DataTable11_4
       4  ??DataTable11_5
       4  ??DataTable11_6
       4  ??DataTable11_7
       4  ??DataTable11_8
       4  ??DataTable11_9
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable8
       4  ??DataTable8_1
       8  ?_0
      28  ?_1
      40  ?_10
       8  ?_11
      24  ?_12
       8  ?_13
      28  ?_14
       4  ?_15
      24  ?_16
      24  ?_17
       4  ?_18
      24  ?_19
       8  ?_2
      24  ?_20
       4  ?_21
      24  ?_22
      24  ?_23
       8  ?_24
      28  ?_25
       8  ?_26
      32  ?_27
       8  ?_28
      32  ?_29
      28  ?_3
       8  ?_30
      28  ?_31
      32  ?_32
       4  ?_33
      28  ?_34
      24  ?_35
       8  ?_36
      24  ?_37
      68  ?_38
       8  ?_39
       4  ?_4
      32  ?_40
      20  ?_41
       8  ?_42
      32  ?_43
      12  ?_44
       8  ?_45
      24  ?_46
      24  ?_47
       8  ?_48
      24  ?_49
      24  ?_5
      48  ?_50
       8  ?_51
      24  ?_52
      32  ?_53
       8  ?_54
      48  ?_55
       8  ?_56
      28  ?_57
       4  ?_58
      32  ?_59
       8  ?_6
      12  ?_60
       1  ?_61
       4  ?_62
       8  ?_63
      12  ?_64
       8  ?_65
       2  ?_66
       8  ?_67
       8  ?_68
       8  ?_69
      24  ?_7
       2  ?_70
       4  ?_71
       4  ?_72
       4  ?_73
       4  ?_74
       4  ?_75
       4  ?_76
       4  ?_77
      24  ?_78
       8  ?_79
       4  ?_8
       4  ?_80
       4  ?_81
       8  ?_82
      20  ?_83
      28  ?_84
      20  ?_85
      20  ?_86
      12  ?_87
      24  ?_88
      20  ?_89
      16  ?_9
      12  CLIPrompt
      44  LoopProcCLI
     406  ProcessCommand
       6  SetCLIProc
       6  SetCLIPrompt
      30  __NVIC_SystemReset
      20  a2hex
     180  cmd_help
      14  cmd_reset
     138  cmd_uptime
      20  cmd_ver
      64  command_buf
       1  command_index
       4  data_option
     390  dump_Cli
       4  g_fnCLIProc
       4  g_fnCLIPrompt
      70  getarg
      64  old_cmd
      16  prompt_string
     350  readline
     384  user_command_table
      16  vCLITask

 
   145 bytes in section .bss
   396 bytes in section .data
 1'489 bytes in section .rodata
 1'850 bytes in section .text
 
 1'850 bytes of CODE  memory
 1'489 bytes of CONST memory
   541 bytes of DATA  memory

Errors: none
Warnings: 29
