###############################################################################
#
#                                                         06/Oct/2022  13:55:47
# IAR ANSI C/C++ Compiler V9.20.3.326/W64 for ARM Functional Safety
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode          =  thumb
#    Endian            =  little
#    Source file       =  C:\D\Git_Hub\STM_IAR_SIL_Change\Library\iap_common.c
#    Command line      =
#        -f
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\iap_common.o.rsp
#        (C:\D\Git_Hub\STM_IAR_SIL_Change\Library\iap_common.c -D
#        USE_HAL_DRIVER -D STM32F407xx -lC
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Library -o
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.0 EWARM FS 9.20.3\arm\inc\c\DLib_Config_Full.h" -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/App\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/Target\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Core/Inc\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Include\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio/Si446x\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/display\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Library\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\display\fonts\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\STM32F4xx_HAL_Driver\Src\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.0 EWARM FS 9.20.3\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\iap_common.o.d
#    Locale            =  C
#    List file         =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Library\iap_common.lst
#    Object file       =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\iap_common.o
#    Runtime model:       
#      __CPP_Runtime   =  1
#      __SystemLibrary =  DLib
#      __dlib_version  =  6
#
###############################################################################

C:\D\Git_Hub\STM_IAR_SIL_Change\Library\iap_common.c
      1          /**
      2            ******************************************************************************
      3            * @file    IAP/IAP_Main/Src/common.c 
      4            * @author  MCD Application Team
      5            * @brief   This file provides all the common functions.
      6            ******************************************************************************
      7            * @attention
      8            *
      9            * <h2><center>&copy; Copyright (c) 2018 STMicroelectronics.
     10            * All rights reserved.</center></h2>
     11            *
     12            * This software component is licensed by ST under BSD 3-Clause license,
     13            * the "License"; You may not use this file except in compliance with the
     14            * License. You may obtain a copy of the License at:
     15            *                        opensource.org/licenses/BSD-3-Clause
     16            *
     17            ******************************************************************************
     18            */ 
     19          
     20          /** @addtogroup STM32F2xx_IAP_Main
     21            * @{
     22            */
     23          
     24          /* Includes ------------------------------------------------------------------*/
     25          #include "iap_common.h"
     26          #include "main.h"

  # warning unrecognized compiler
    ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",744  Warning[Pa183]: 
          #warning directive: unrecognized compiler
     27          
     28          #include "ymodem.h"         //  YModem ( Master / Slave )
     29          
     30          /* Private typedef -----------------------------------------------------------*/
     31          /* Private define ------------------------------------------------------------*/
     32          /* Private macro -------------------------------------------------------------*/
     33          /* Private variables ---------------------------------------------------------*/
     34          /* Private function prototypes -----------------------------------------------*/
     35          /* Private functions ---------------------------------------------------------*/
     36          
     37          /**
     38            * @brief  Convert an Integer to a string
     39            * @param  p_str: The string output pointer
     40            * @param  intnum: The integer to be converted
     41            * @retval None
     42            */

   \                                 In section .text, align 2, keep-with-next
     43          void Int2Str(uint8_t *p_str, uint32_t intnum)
     44          {
   \                     Int2Str: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
     45            uint32_t i, divider = 1000000000, pos = 0, status = 0;
   \        0x2   0x....             LDR.N    R4,??DataTable2
   \        0x4   0x2500             MOVS     R5,#+0
   \        0x6   0x2200             MOVS     R2,#+0
     46          
     47            for (i = 0; i < 10; i++)
   \        0x8   0x2300             MOVS     R3,#+0
   \                     ??Int2Str_0: (+1)
   \        0xA   0x2B0A             CMP      R3,#+10
   \        0xC   0xD219             BCS.N    ??Int2Str_1
     48            {
     49              p_str[pos++] = (intnum / divider) + 48;
   \        0xE   0xFBB1 0xF6F4      UDIV     R6,R1,R4
   \       0x12   0x3630             ADDS     R6,R6,#+48
   \       0x14   0x5546             STRB     R6,[R0, R5]
   \       0x16   0x1C6D             ADDS     R5,R5,#+1
     50          
     51              intnum = intnum % divider;
   \       0x18   0xFBB1 0xF6F4      UDIV     R6,R1,R4
   \       0x1C   0xFB04 0x1116      MLS      R1,R4,R6,R1
     52              divider /= 10;
   \       0x20   0x260A             MOVS     R6,#+10
   \       0x22   0xFBB4 0xF4F6      UDIV     R4,R4,R6
     53              if ((p_str[pos-1] == '0') & (status == 0))
   \       0x26   0xEB00 0x0605      ADD      R6,R0,R5
   \       0x2A   0xF816 0x6C01      LDRB     R6,[R6, #+4294967295]
   \       0x2E   0x2E30             CMP      R6,#+48
   \       0x30   0xD104             BNE.N    ??Int2Str_2
   \       0x32   0x2A00             CMP      R2,#+0
   \       0x34   0xD102             BNE.N    ??Int2Str_2
     54              {
     55                pos = 0;
   \       0x36   0x2600             MOVS     R6,#+0
   \       0x38   0x0035             MOVS     R5,R6
   \       0x3A   0xE000             B.N      ??Int2Str_3
     56              }
     57              else
     58              {
     59                status++;
   \                     ??Int2Str_2: (+1)
   \       0x3C   0x1C52             ADDS     R2,R2,#+1
     60              }
     61            }
   \                     ??Int2Str_3: (+1)
   \       0x3E   0x1C5B             ADDS     R3,R3,#+1
   \       0x40   0xE7E3             B.N      ??Int2Str_0
     62          }
   \                     ??Int2Str_1: (+1)
   \       0x42   0xBC70             POP      {R4-R6}
   \       0x44   0x4770             BX       LR
     63          
     64          /**
     65            * @brief  Convert a string to an integer
     66            * @param  p_inputstr: The string to be converted
     67            * @param  p_intnum: The integer value
     68            * @retval 1: Correct
     69            *         0: Error
     70            */

   \                                 In section .text, align 2, keep-with-next
     71          uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
     72          {
   \                     Str2Int: (+1)
   \        0x0   0xB470             PUSH     {R4-R6}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000A             MOVS     R2,R1
     73            uint32_t i = 0, res = 0;
   \        0x6   0x2100             MOVS     R1,#+0
   \        0x8   0x2300             MOVS     R3,#+0
     74            uint32_t val = 0;
   \        0xA   0x2500             MOVS     R5,#+0
     75          
     76            if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
   \        0xC   0x7820             LDRB     R0,[R4, #+0]
   \        0xE   0x2830             CMP      R0,#+48
   \       0x10   0xD141             BNE.N    ??Str2Int_0
   \       0x12   0x7860             LDRB     R0,[R4, #+1]
   \       0x14   0x2878             CMP      R0,#+120
   \       0x16   0xD002             BEQ.N    ??Str2Int_1
   \       0x18   0x7860             LDRB     R0,[R4, #+1]
   \       0x1A   0x2858             CMP      R0,#+88
   \       0x1C   0xD13B             BNE.N    ??Str2Int_0
     77            {
     78              i = 2;
   \                     ??Str2Int_1: (+1)
   \       0x1E   0x2002             MOVS     R0,#+2
   \       0x20   0x0001             MOVS     R1,R0
     79              while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
   \                     ??Str2Int_2: (+1)
   \       0x22   0x290B             CMP      R1,#+11
   \       0x24   0xD230             BCS.N    ??Str2Int_3
   \       0x26   0x5C60             LDRB     R0,[R4, R1]
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD02D             BEQ.N    ??Str2Int_3
     80              {
     81                if (ISVALIDHEX(p_inputstr[i]))
   \       0x2C   0x5C60             LDRB     R0,[R4, R1]
   \       0x2E   0x2841             CMP      R0,#+65
   \       0x30   0xDB02             BLT.N    ??Str2Int_4
   \       0x32   0x5C60             LDRB     R0,[R4, R1]
   \       0x34   0x2847             CMP      R0,#+71
   \       0x36   0xDB0B             BLT.N    ??Str2Int_5
   \                     ??Str2Int_4: (+1)
   \       0x38   0x5C60             LDRB     R0,[R4, R1]
   \       0x3A   0x2861             CMP      R0,#+97
   \       0x3C   0xDB02             BLT.N    ??Str2Int_6
   \       0x3E   0x5C60             LDRB     R0,[R4, R1]
   \       0x40   0x2867             CMP      R0,#+103
   \       0x42   0xDB05             BLT.N    ??Str2Int_5
   \                     ??Str2Int_6: (+1)
   \       0x44   0x5C60             LDRB     R0,[R4, R1]
   \       0x46   0x2830             CMP      R0,#+48
   \       0x48   0xDB1C             BLT.N    ??Str2Int_7
   \       0x4A   0x5C60             LDRB     R0,[R4, R1]
   \       0x4C   0x283A             CMP      R0,#+58
   \       0x4E   0xDA19             BGE.N    ??Str2Int_7
     82                {
     83                  val = (val << 4) + CONVERTHEX(p_inputstr[i]);
   \                     ??Str2Int_5: (+1)
   \       0x50   0x5C60             LDRB     R0,[R4, R1]
   \       0x52   0x2830             CMP      R0,#+48
   \       0x54   0xDB05             BLT.N    ??Str2Int_8
   \       0x56   0x5C60             LDRB     R0,[R4, R1]
   \       0x58   0x283A             CMP      R0,#+58
   \       0x5A   0xDA02             BGE.N    ??Str2Int_8
   \       0x5C   0x5C60             LDRB     R0,[R4, R1]
   \       0x5E   0x3830             SUBS     R0,R0,#+48
   \       0x60   0xE00A             B.N      ??Str2Int_9
   \                     ??Str2Int_8: (+1)
   \       0x62   0x5C60             LDRB     R0,[R4, R1]
   \       0x64   0x2841             CMP      R0,#+65
   \       0x66   0xDB05             BLT.N    ??Str2Int_10
   \       0x68   0x5C60             LDRB     R0,[R4, R1]
   \       0x6A   0x2847             CMP      R0,#+71
   \       0x6C   0xDA02             BGE.N    ??Str2Int_10
   \       0x6E   0x5C60             LDRB     R0,[R4, R1]
   \       0x70   0x3837             SUBS     R0,R0,#+55
   \       0x72   0xE001             B.N      ??Str2Int_9
   \                     ??Str2Int_10: (+1)
   \       0x74   0x5C60             LDRB     R0,[R4, R1]
   \       0x76   0x3857             SUBS     R0,R0,#+87
   \                     ??Str2Int_9: (+1)
   \       0x78   0x002E             MOVS     R6,R5
   \       0x7A   0x0005             MOVS     R5,R0
   \       0x7C   0xEB15 0x1506      ADDS     R5,R5,R6, LSL #+4
     84                }
     85                else
     86                {
     87                  /* Return 0, Invalid input */
     88                  res = 0;
     89                  break;
     90                }
     91                i++;
   \       0x80   0x1C49             ADDS     R1,R1,#+1
   \       0x82   0xE7CE             B.N      ??Str2Int_2
   \                     ??Str2Int_7: (+1)
   \       0x84   0x2000             MOVS     R0,#+0
   \       0x86   0x0003             MOVS     R3,R0
     92              }
     93          
     94              /* valid result */
     95              if (p_inputstr[i] == '\0')
   \                     ??Str2Int_3: (+1)
   \       0x88   0x5C60             LDRB     R0,[R4, R1]
   \       0x8A   0x2800             CMP      R0,#+0
   \       0x8C   0xD139             BNE.N    ??Str2Int_11
     96              {
     97                *p_intnum = val;
   \       0x8E   0x6015             STR      R5,[R2, #+0]
     98                res = 1;
   \       0x90   0x2001             MOVS     R0,#+1
   \       0x92   0x0003             MOVS     R3,R0
   \       0x94   0xE035             B.N      ??Str2Int_11
     99              }
    100            }
    101            else /* max 10-digit decimal input */
    102            {
    103              while ( ( i < 11 ) && ( res != 1 ) )
   \                     ??Str2Int_0: (+1)
   \       0x96   0x290B             CMP      R1,#+11
   \       0x98   0xD233             BCS.N    ??Str2Int_11
   \       0x9A   0x2B01             CMP      R3,#+1
   \       0x9C   0xD031             BEQ.N    ??Str2Int_11
    104              {
    105                if (p_inputstr[i] == '\0')
   \       0x9E   0x5C60             LDRB     R0,[R4, R1]
   \       0xA0   0x2800             CMP      R0,#+0
   \       0xA2   0xD103             BNE.N    ??Str2Int_12
    106                {
    107                  *p_intnum = val;
   \       0xA4   0x6015             STR      R5,[R2, #+0]
    108                  /* return 1 */
    109                  res = 1;
   \       0xA6   0x2001             MOVS     R0,#+1
   \       0xA8   0x0003             MOVS     R3,R0
   \       0xAA   0xE028             B.N      ??Str2Int_13
    110                }
    111                else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
   \                     ??Str2Int_12: (+1)
   \       0xAC   0x5C60             LDRB     R0,[R4, R1]
   \       0xAE   0x286B             CMP      R0,#+107
   \       0xB0   0xD002             BEQ.N    ??Str2Int_14
   \       0xB2   0x5C60             LDRB     R0,[R4, R1]
   \       0xB4   0x284B             CMP      R0,#+75
   \       0xB6   0xD106             BNE.N    ??Str2Int_15
   \                     ??Str2Int_14: (+1)
   \       0xB8   0x2900             CMP      R1,#+0
   \       0xBA   0xD004             BEQ.N    ??Str2Int_15
    112                {
    113                  val = val << 10;
   \       0xBC   0x02AD             LSLS     R5,R5,#+10
    114                  *p_intnum = val;
   \       0xBE   0x6015             STR      R5,[R2, #+0]
    115                  res = 1;
   \       0xC0   0x2001             MOVS     R0,#+1
   \       0xC2   0x0003             MOVS     R3,R0
   \       0xC4   0xE01B             B.N      ??Str2Int_13
    116                }
    117                else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
   \                     ??Str2Int_15: (+1)
   \       0xC6   0x5C60             LDRB     R0,[R4, R1]
   \       0xC8   0x286D             CMP      R0,#+109
   \       0xCA   0xD002             BEQ.N    ??Str2Int_16
   \       0xCC   0x5C60             LDRB     R0,[R4, R1]
   \       0xCE   0x284D             CMP      R0,#+77
   \       0xD0   0xD106             BNE.N    ??Str2Int_17
   \                     ??Str2Int_16: (+1)
   \       0xD2   0x2900             CMP      R1,#+0
   \       0xD4   0xD004             BEQ.N    ??Str2Int_17
    118                {
    119                  val = val << 20;
   \       0xD6   0x052D             LSLS     R5,R5,#+20
    120                  *p_intnum = val;
   \       0xD8   0x6015             STR      R5,[R2, #+0]
    121                  res = 1;
   \       0xDA   0x2001             MOVS     R0,#+1
   \       0xDC   0x0003             MOVS     R3,R0
   \       0xDE   0xE00E             B.N      ??Str2Int_13
    122                }
    123                else if (ISVALIDDEC(p_inputstr[i]))
   \                     ??Str2Int_17: (+1)
   \       0xE0   0x5C60             LDRB     R0,[R4, R1]
   \       0xE2   0x2830             CMP      R0,#+48
   \       0xE4   0xDB08             BLT.N    ??Str2Int_18
   \       0xE6   0x5C60             LDRB     R0,[R4, R1]
   \       0xE8   0x283A             CMP      R0,#+58
   \       0xEA   0xDA05             BGE.N    ??Str2Int_18
    124                {
    125                  val = val * 10 + CONVERTDEC(p_inputstr[i]);
   \       0xEC   0x200A             MOVS     R0,#+10
   \       0xEE   0x5C66             LDRB     R6,[R4, R1]
   \       0xF0   0x3E30             SUBS     R6,R6,#+48
   \       0xF2   0xFB00 0x6505      MLA      R5,R0,R5,R6
   \       0xF6   0xE002             B.N      ??Str2Int_13
    126                }
    127                else
    128                {
    129                  /* return 0, Invalid input */
    130                  res = 0;
   \                     ??Str2Int_18: (+1)
   \       0xF8   0x2000             MOVS     R0,#+0
   \       0xFA   0x0003             MOVS     R3,R0
    131                  break;
   \       0xFC   0xE001             B.N      ??Str2Int_11
    132                }
    133                i++;
   \                     ??Str2Int_13: (+1)
   \       0xFE   0x1C49             ADDS     R1,R1,#+1
   \      0x100   0xE7C9             B.N      ??Str2Int_0
    134              }
    135            }
    136          
    137            return res;
   \                     ??Str2Int_11: (+1)
   \      0x102   0x0018             MOVS     R0,R3
   \      0x104   0xBC70             POP      {R4-R6}
   \      0x106   0x4770             BX       LR
    138          }
    139          
    140          /**
    141            * @brief  Print a string on the HyperTerminal
    142            * @param  p_string: The string to be printed
    143            * @retval None
    144            */

   \                                 In section .text, align 2, keep-with-next
    145          void Serial_PutString(uint8_t *p_string)
    146          {
   \                     Serial_PutString: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    147            uint16_t length = 0;
   \        0x4   0x2500             MOVS     R5,#+0
    148          
    149            while (p_string[length] != '\0')
   \                     ??Serial_PutString_0: (+1)
   \        0x6   0x0028             MOVS     R0,R5
   \        0x8   0xB280             UXTH     R0,R0
   \        0xA   0x5C20             LDRB     R0,[R4, R0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD001             BEQ.N    ??Serial_PutString_1
    150            {
    151              length++;
   \       0x10   0x1C6D             ADDS     R5,R5,#+1
   \       0x12   0xE7F8             B.N      ??Serial_PutString_0
    152            }
    153          
    154            HAL_UART_Transmit(&huart2, p_string, length, TX_TIMEOUT);
   \                     ??Serial_PutString_1: (+1)
   \       0x14   0x2364             MOVS     R3,#+100
   \       0x16   0x002A             MOVS     R2,R5
   \       0x18   0xB292             UXTH     R2,R2
   \       0x1A   0x0021             MOVS     R1,R4
   \       0x1C   0x....             LDR.N    R0,??DataTable2_1
   \       0x1E   0x.... 0x....      BL       HAL_UART_Transmit
    155          
    156          }
   \       0x22   0xBD31             POP      {R0,R4,R5,PC}
    157          
    158          /**
    159            * @brief  Transmit a byte to the HyperTerminal
    160            * @param  param The byte to be sent
    161            * @retval HAL_StatusTypeDef HAL_OK if OK
    162            */

   \                                 In section .text, align 2, keep-with-next
    163          HAL_StatusTypeDef Serial_PutByte( uint8_t param )
    164          {
   \                     Serial_PutByte: (+1)
   \        0x0   0xB531             PUSH     {R0,R4,R5,LR}
    165            /* May be timeouted... */
    166            if ( huart2.gState == HAL_UART_STATE_TIMEOUT )
   \        0x2   0x....             LDR.N    R5,??DataTable2_1
   \        0x4   0xF895 0x0039      LDRB     R0,[R5, #+57]
   \        0x8   0x28A0             CMP      R0,#+160
   \        0xA   0xD102             BNE.N    ??Serial_PutByte_0
    167            {
    168                huart2.gState = HAL_UART_STATE_READY;
   \        0xC   0x2020             MOVS     R0,#+32
   \        0xE   0xF885 0x0039      STRB     R0,[R5, #+57]
    169            }
    170          
    171            HAL_StatusTypeDef ret;
    172          
    173            if ( IsYModemMaster() )
   \                     ??Serial_PutByte_0: (+1)
   \       0x12   0x.... 0x....      BL       IsYModemMaster
   \       0x16   0x2800             CMP      R0,#+0
   \       0x18   0xD006             BEQ.N    ??Serial_PutByte_1
    174            {
    175                //===========================================================================
    176                //    Y-Modem Master 장치 - ACK 전송.
    177          
    178          //      HAL_Delay( 100 );
    179          
    180                //===========================================================================
    181                //     RS485 Send
    182          //      rts_high( &huart1 );
    183                ret = HAL_UART_Transmit( &huart2, &param, 1, TX_TIMEOUT );
   \       0x1A   0x2364             MOVS     R3,#+100
   \       0x1C   0x2201             MOVS     R2,#+1
   \       0x1E   0x4669             MOV      R1,SP
   \       0x20   0x0028             MOVS     R0,R5
   \       0x22   0x.... 0x....      BL       HAL_UART_Transmit
   \       0x26   0x0004             MOVS     R4,R0
    184          //      rts_low( &huart1 );
    185                //===========================================================================
    186            }
    187          //  else
    188          //  {
    189          //      //===========================================================================
    190          //      //    Y-Modem Slave 장치 - ACK 수신.
    191          //      ret = HAL_UART_Receive( &huart1, &param, 1, RX_TIMEOUT );
    192          //
    193          //      //===========================================================================
    194          //  }
    195          
    196            return ret;
   \                     ??Serial_PutByte_1: (+1)
   \       0x28   0x0020             MOVS     R0,R4
   \       0x2A   0xB2C0             UXTB     R0,R0
   \       0x2C   0xBD32             POP      {R1,R4,R5,PC}
    197          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x3B9A'CA00        DC32     0x3b9aca00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x....'....        DC32     huart2
    198          /**
    199            * @}
    200            */
    201          
    202          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   Int2Str
      16   Serial_PutByte
        16   -> HAL_UART_Transmit
        16   -> IsYModemMaster
      16   Serial_PutString
        16   -> HAL_UART_Transmit
      12   Str2Int


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
      70  Int2Str
      46  Serial_PutByte
      36  Serial_PutString
     264  Str2Int

 
 424 bytes in section .text
 
 424 bytes of CODE memory

Errors: none
Warnings: 1
