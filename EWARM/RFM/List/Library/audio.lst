###############################################################################
#
# IAR ANSI C/C++ Compiler V9.30.1.335/W64 for ARM         15/Sep/2022  19:49:58
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                 =  thumb
#    Endian                   =  little
#    Source file              =
#        C:\D\JDS_DATA\RFM_IAR_source_220915\Library\audio.c
#    Command line             =
#        -f
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM\RFM\Obj\Library\audio.o.rsp
#        (C:\D\JDS_DATA\RFM_IAR_source_220915\Library\audio.c -D USE_HAL_DRIVER
#        -D STM32F407xx -lC
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM\RFM\List\Library -o
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM\RFM\Obj\Library --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\arm\inc\c\DLib_Config_Full.h" -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../USB_DEVICE/App\ -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../USB_DEVICE/Target\ -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../Core/Inc\ -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../Drivers/CMSIS/Include\
#        -I C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../Drivers/radio\ -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../Drivers/radio/Si446x\ -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../Drivers/display\ -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM/../Library\ -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM\..\Drivers\display\fonts\ -I
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM\..\Drivers\STM32F4xx_HAL_Driver\Src\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.1\arm\CMSIS\Core\Include\\") --dependencies=n
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM\RFM\Obj\Library\audio.o.d
#    Locale                   =  C
#    List file                =
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM\RFM\List\Library\audio.lst
#    Object file              =
#        C:\D\JDS_DATA\RFM_IAR_source_220915\EWARM\RFM\Obj\Library\audio.o
#    Runtime model:              
#      __CPP_Runtime          =  1
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  1
#      __dlib_version         =  6
#      __iar_require _Printf     
#      __iar_require _Scanf      
#
###############################################################################

C:\D\JDS_DATA\RFM_IAR_source_220915\Library\audio.c
      1          /*------------------------------------------------------------------------------------------
      2          	Project			: RFM - Audio
      3          	Description		:
      4          
      5          	Writer			: $Author: zlkit $
      6          	Revision		: $Rev: 1891 $
      7          	Date			: 2019. 10.
      8          	Copyright		: Piranti Corp.	( sw@piranti.co.kr )
      9          
     10          	Revision History
     11          	1. 2019. 10.	: Created
     12          -------------------------------------------------------------------------------------------*/
     13          
     14          //========================================================================
     15          // Header
     16          
     17          //=============================================================================
     18          #if defined(_WIN32)
     19          //=============================================================================
     20          
     21          #include "x86_hal_driver.h"
     22          
     23          //=============================================================================
     24          #else	//	stm32f207
     25          //=============================================================================
     26          
     27          #if defined(STM32F407xx)
     28          #include "stm32f4xx_hal.h"
     29          #elif defined(STM32F207xx)
     30          #include "stm32f2xx_hal.h"
     31          #endif
     32          
     33          //=============================================================================
     34          #endif
     35          //=============================================================================
     36          
     37          #include <stdio.h>			//	printf()
     38          
     39          #include <stdint.h>			//	uint32_t
     40          
     41          #include <string.h>			//	memset()
     42          
     43          #include "typedef.h"		//	ip_addr

  typedef unsigned char       BYTE;
                              ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Library\typedef.h",73  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned short      WORD;
                              ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Library\typedef.h",77  Warning[Pe301]: 
          typedef name has already been declared (with same type)
     44          
     45          #include "main.h"

  # warning unrecognized compiler
    ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Drivers\radio\compiler_defs.h",744  Warning[Pa183]: 
          #warning directive: unrecognized compiler

  typedef unsigned char U8;
                        ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Drivers\radio\compiler_defs.h",788  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned int U16;
                       ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Drivers\radio\compiler_defs.h",789  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned long U32;
                        ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Drivers\radio\compiler_defs.h",790  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed char S8;
                      ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Drivers\radio\compiler_defs.h",792  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed int S16;
                     ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Drivers\radio\compiler_defs.h",793  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed long S32;
                      ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Drivers\radio\compiler_defs.h",794  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef bit BIT;
              ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Drivers\radio\compiler_defs.h",820  Warning[Pe301]: 
          typedef name has already been declared (with same type)
     46          
     47          #include "audio.h"

  	};
  	 ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Library\RFMProtocol.h",304  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Library\RFMProtocol.h",322  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Library\RFMProtocol.h",468  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Library\RFMProtocol.h",506  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Library\RFMProtocol.h",511  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Library\RFMProtocol.h",533  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Library\RFMProtocol.h",559  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\JDS_DATA\RFM_IAR_source_220915\Library\RFMProtocol.h",567  Warning[Pe040]: 
          expected an identifier
     48          
     49          #define FRAME_SIZE 160
     50          
     51          //========================================================================
     52          // Define
     53          
     54          #if 0
     55          uint16_t sine_table[256] = {
     56          
     57             0x0000, 0x0324, 0x0647, 0x096a, 0x0c8b, 0x0fab, 0x12c8, 0x15e2,
     58             0x18f8, 0x1c0b, 0x1f19, 0x2223, 0x2528, 0x2826, 0x2b1f, 0x2e11,
     59             0x30fb, 0x33de, 0x36ba, 0x398c, 0x3c56, 0x3f17, 0x41ce, 0x447a,
     60             0x471c, 0x49b4, 0x4c3f, 0x4ebf, 0x5133, 0x539b, 0x55f5, 0x5842,
     61             0x5a82, 0x5cb4, 0x5ed7, 0x60ec, 0x62f2, 0x64e8, 0x66cf, 0x68a6,
     62             0x6a6d, 0x6c24, 0x6dca, 0x6f5f, 0x70e2, 0x7255, 0x73b5, 0x7504,
     63             0x7641, 0x776c, 0x7884, 0x798a, 0x7a7d, 0x7b5d, 0x7c29, 0x7ce3,
     64             0x7d8a, 0x7e1d, 0x7e9d, 0x7f09, 0x7f62, 0x7fa7, 0x7fd8, 0x7ff6,
     65             0x7fff, 0x7ff6, 0x7fd8, 0x7fa7, 0x7f62, 0x7f09, 0x7e9d, 0x7e1d,
     66             0x7d8a, 0x7ce3, 0x7c29, 0x7b5d, 0x7a7d, 0x798a, 0x7884, 0x776c,
     67             0x7641, 0x7504, 0x73b5, 0x7255, 0x70e2, 0x6f5f, 0x6dca, 0x6c24,
     68             0x6a6d, 0x68a6, 0x66cf, 0x64e8, 0x62f2, 0x60ec, 0x5ed7, 0x5cb4,
     69             0x5a82, 0x5842, 0x55f5, 0x539b, 0x5133, 0x4ebf, 0x4c3f, 0x49b4,
     70             0x471c, 0x447a, 0x41ce, 0x3f17, 0x3c56, 0x398c, 0x36ba, 0x33de,
     71             0x30fb, 0x2e11, 0x2b1f, 0x2826, 0x2528, 0x2223, 0x1f19, 0x1c0b,
     72             0x18f8, 0x15e2, 0x12c8, 0x0fab, 0x0c8b, 0x096a, 0x0647, 0x0324,
     73             0x0000, 0xfcdc, 0xf9b9, 0xf696, 0xf375, 0xf055, 0xed38, 0xea1e,
     74             0xe708, 0xe3f5, 0xe0e7, 0xdddd, 0xdad8, 0xd7da, 0xd4e1, 0xd1ef,
     75             0xcf05, 0xcc22, 0xc946, 0xc674, 0xc3aa, 0xc0e9, 0xbe32, 0xbb86,
     76             0xb8e4, 0xb64c, 0xb3c1, 0xb141, 0xaecd, 0xac65, 0xaa0b, 0xa7be,
     77             0xa57e, 0xa34c, 0xa129, 0x9f14, 0x9d0e, 0x9b18, 0x9931, 0x975a,
     78             0x9593, 0x93dc, 0x9236, 0x90a1, 0x8f1e, 0x8dab, 0x8c4b, 0x8afc,
     79             0x89bf, 0x8894, 0x877c, 0x8676, 0x8583, 0x84a3, 0x83d7, 0x831d,
     80             0x8276, 0x81e3, 0x8163, 0x80f7, 0x809e, 0x8059, 0x8028, 0x800a,
     81             0x8000, 0x800a, 0x8028, 0x8059, 0x809e, 0x80f7, 0x8163, 0x81e3,
     82             0x8276, 0x831d, 0x83d7, 0x84a3, 0x8583, 0x8676, 0x877c, 0x8894,
     83             0x89bf, 0x8afc, 0x8c4b, 0x8dab, 0x8f1e, 0x90a1, 0x9236, 0x93dc,
     84             0x9593, 0x975a, 0x9931, 0x9b18, 0x9d0e, 0x9f14, 0xa129, 0xa34c,
     85             0xa57e, 0xa7be, 0xaa0b, 0xac65, 0xaecd, 0xb141, 0xb3c1, 0xb64c,
     86             0xb8e4, 0xbb86, 0xbe32, 0xc0e9, 0xc3aa, 0xc674, 0xc946, 0xcc22,
     87             0xcf05, 0xd1ef, 0xd4e1, 0xd7da, 0xdad8, 0xdddd, 0xe0e7, 0xe3f5,
     88             0xe708, 0xea1e, 0xed38, 0xf055, 0xf375, 0xf696, 0xf9b9, 0xfcdc,
     89          };
     90          
     91          #else
     92          //	Sine Wave
     93          //	Numbers Per Row	: 16

   \                                 In section .data, align 4
     94          int16_t sine_table[160] = {
   \                     sine_table:
   \        0x0   0xFFFF 0x186C      DC16 -1, 6'252, 12'803, 18'323, 23'170, 27'165, 30'381, 32'165, 32'767

   \               0x3203 0x479

   \              3 0x5A82 0x6A

   \              1D 0x76AD 0x7

   \              DA5 0x7FFF
   \       0x12   0x7DA5 0x75D2      DC16 32'165, 30'162, 27'165, 23'170, 18'323, 12'274, 6'252, 0, -6'253

   \               0x6A1D 0x5A8

   \              2 0x4793 0x2F

   \              F2 0x186C 0x0

   \              000 0xE793
   \       0x24   0xCDFC 0xB86C      DC16 -12'804, -18'324, -23'171, -27'166, -30'382, -32'166, -32'768

   \               0xA57D 0x95E

   \              2 0x8952 0x82

   \              5A 0x8000
   \       0x32   0x825A 0x8A2D      DC16 -32'166, -30'163, -27'166, -23'171, -18'324, -12'275, -6'253, -1

   \               0x95E2 0xA57

   \              D 0xB86C 0xD0

   \              0D 0xE793 0xF

   \              FFF
   \       0x42   0x186C 0x3203      DC16 6'252, 12'803, 18'323, 23'170, 27'165, 30'381, 32'165, 32'767

   \               0x4793 0x5A8

   \              2 0x6A1D 0x76

   \              AD 0x7DA5 0x7

   \              FFF
   \       0x52   0x7DA5 0x75D2      DC16 32'165, 30'162, 27'165, 23'170, 18'323, 12'274, 6'252, 0, -6'253

   \               0x6A1D 0x5A8

   \              2 0x4793 0x2F

   \              F2 0x186C 0x0

   \              000 0xE793
   \       0x64   0xCDFC 0xB86C      DC16 -12'804, -18'324, -23'171, -27'166, -30'382, -32'166, -32'768

   \               0xA57D 0x95E

   \              2 0x8952 0x82

   \              5A 0x8000
   \       0x72   0x825A 0x8A2D      DC16 -32'166, -30'163, -27'166, -23'171, -18'324, -12'275, -6'253, -1

   \               0x95E2 0xA57

   \              D 0xB86C 0xD0

   \              0D 0xE793 0xF

   \              FFF
   \       0x82   0x186C 0x3203      DC16 6'252, 12'803, 18'323, 23'170, 27'165, 30'381, 32'165, 32'767

   \               0x4793 0x5A8

   \              2 0x6A1D 0x76

   \              AD 0x7DA5 0x7

   \              FFF
   \       0x92   0x7DA5 0x75D2      DC16 32'165, 30'162, 27'165, 23'170, 18'323, 12'274, 6'252, 0, -6'253

   \               0x6A1D 0x5A8

   \              2 0x4793 0x2F

   \              F2 0x186C 0x0

   \              000 0xE793
   \       0xA4   0xCDFC 0xB86C      DC16 -12'804, -18'324, -23'171, -27'166, -30'382, -32'166, -32'768

   \               0xA57D 0x95E

   \              2 0x8952 0x82

   \              5A 0x8000
   \       0xB2   0x825A 0x8A2D      DC16 -32'166, -30'163, -27'166, -23'171, -18'324, -12'275, -6'253, -1

   \               0x95E2 0xA57

   \              D 0xB86C 0xD0

   \              0D 0xE793 0xF

   \              FFF
   \       0xC2   0x186C 0x3203      DC16 6'252, 12'803, 18'323, 23'170, 27'165, 30'381, 32'165, 32'767

   \               0x4793 0x5A8

   \              2 0x6A1D 0x76

   \              AD 0x7DA5 0x7

   \              FFF
   \       0xD2   0x7DA5 0x75D2      DC16 32'165, 30'162, 27'165, 23'170, 18'323, 12'274, 6'252, 0, -6'253

   \               0x6A1D 0x5A8

   \              2 0x4793 0x2F

   \              F2 0x186C 0x0

   \              000 0xE793
   \       0xE4   0xCDFC 0xB86C      DC16 -12'804, -18'324, -23'171, -27'166, -30'382, -32'166, -32'768

   \               0xA57D 0x95E

   \              2 0x8952 0x82

   \              5A 0x8000
   \       0xF2   0x825A 0x8A2D      DC16 -32'166, -30'163, -27'166, -23'171, -18'324, -12'275, -6'253, -1

   \               0x95E2 0xA57

   \              D 0xB86C 0xD0

   \              0D 0xE793 0xF

   \              FFF
   \      0x102   0x186C 0x3203      DC16 6'252, 12'803, 18'323, 23'170, 27'165, 30'381, 32'165, 32'767

   \               0x4793 0x5A8

   \              2 0x6A1D 0x76

   \              AD 0x7DA5 0x7

   \              FFF
   \      0x112   0x7DA5 0x75D2      DC16 32'165, 30'162, 27'165, 23'170, 18'323, 12'274, 6'252, 0, -6'253

   \               0x6A1D 0x5A8

   \              2 0x4793 0x2F

   \              F2 0x186C 0x0

   \              000 0xE793
   \      0x124   0xCDFC 0xB86C      DC16 -12'804, -18'324, -23'171, -27'166, -30'382, -32'166, -32'768

   \               0xA57D 0x95E

   \              2 0x8952 0x82

   \              5A 0x8000
   \      0x132   0x825A 0x8A2D      DC16 -32'166, -30'163, -27'166, -23'171, -18'324, -12'275, -6'253

   \               0x95E2 0xA57

   \              D 0xB86C 0xD0

   \              0D 0xE793
     95          	-1, 6252, 12803, 18323, 23170, 27165, 30381, 32165, 32767, 32165, 30162, 27165, 23170, 18323, 12274, 6252, 0, -6253, -12804, -18324, -23171, -27166, -30382, -32166, -32768, -32166, -30163, -27166, -23171, -18324, -12275, -6253,
     96          	-1, 6252, 12803, 18323, 23170, 27165, 30381, 32165, 32767, 32165, 30162, 27165, 23170, 18323, 12274, 6252, 0, -6253, -12804, -18324, -23171, -27166, -30382, -32166, -32768, -32166, -30163, -27166, -23171, -18324, -12275, -6253,
     97          	-1, 6252, 12803, 18323, 23170, 27165, 30381, 32165, 32767, 32165, 30162, 27165, 23170, 18323, 12274, 6252, 0, -6253, -12804, -18324, -23171, -27166, -30382, -32166, -32768, -32166, -30163, -27166, -23171, -18324, -12275, -6253,
     98          	-1, 6252, 12803, 18323, 23170, 27165, 30381, 32165, 32767, 32165, 30162, 27165, 23170, 18323, 12274, 6252, 0, -6253, -12804, -18324, -23171, -27166, -30382, -32166, -32768, -32166, -30163, -27166, -23171, -18324, -12275, -6253,
     99          	-1, 6252, 12803, 18323, 23170, 27165, 30381, 32165, 32767, 32165, 30162, 27165, 23170, 18323, 12274, 6252, 0, -6253, -12804, -18324, -23171, -27166, -30382, -32166, -32768, -32166, -30163, -27166, -23171, -18324, -12275, -6253,
    100          };
    101          
    102          #endif
    103          

   \                                 In section .bss, align 4
    104          uint16_t speex_sine_table[160]; 	//	256 * 5 = 160 * 8
   \                     speex_sine_table:
   \        0x0                      DS8 320
    105          

   \                                 In section .bss, align 4
    106          uint16_t null_table[256] = { 0, };
   \                     null_table:
   \        0x0                      DS8 512
    107          
    108          //uint16_t bufAudio[I2S_DMA_LOOP_SIZE * I2S_DMA_LOOP_QCNT] = { 0, };	//	512
    109          	//	[ Frame1 | Frame2 ]

   \                                 In section .bss, align 4
    110          volatile uint16_t bufAudio[FRAME_SIZE * 2] = { 0, };	//	512
   \                     bufAudio:
   \        0x0                      DS8 640
    111          

   \                                 In section .bss, align 4
    112          volatile uint16_t bufAudioCodec[FRAME_SIZE * 2] = { 0, };	//	512
   \                     bufAudioCodec:
   \        0x0                      DS8 640
    113          
    114          //========================================================================
    115          //	Audio Buffer ( PCM )

   \                                 In section .bss, align 4
    116          QBuf_t		g_qBufAudioRx;		//	Audio Queue Buffer	( RF Rx Buffer )
   \                     g_qBufAudioRx:
   \        0x0                      DS8 16

   \                                 In section .bss, align 4
    117          uint16_t	g_bufAudioRx[I2S_DMA_LOOP_SIZE * I2S_DMA_LOOP_QCNT] = { 0, };	//	512
   \                     g_bufAudioRx:
   \        0x0                      DS8 480
    118          

   \                                 In section .bss, align 4
    119          QBuf_t		g_qBufAudioTx;		//	Audio Queue Buffer	( RF Tx Buffer )
   \                     g_qBufAudioTx:
   \        0x0                      DS8 16

   \                                 In section .bss, align 4
    120          uint16_t	g_bufAudioTx[I2S_DMA_LOOP_SIZE * I2S_DMA_LOOP_QCNT] = { 0, };	//	512
   \                     g_bufAudioTx:
   \        0x0                      DS8 480
    121          

   \                                 In section .bss, align 4
    122          int16_t		t_audio_buff[I2S_DMA_LOOP_SIZE * 2];
   \                     t_audio_buff:
   \        0x0                      DS8 120

   \                                 In section .bss, align 4
    123          int16_t		r_audio_buff[I2S_DMA_LOOP_SIZE * 2];
   \                     r_audio_buff:
   \        0x0                      DS8 120
    124          
    125          //========================================================================
    126          
    127          //========================================================================
    128          // Function
    129          
    130          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    131          void AudioInit( void )
    132          //========================================================================
    133          {
   \                     AudioInit: (+1)
   \        0x0   0xE92D 0x41FC      PUSH     {R2-R8,LR}
    134          //DEL	printf( "%s(%d)\n", __func__, __LINE__ );
    135          
    136          	//	pAudioTable = sine_table;
    137          	//========================================================================
    138          	//	Init RF Audio Rx Buffer
    139          	qBufInit( &g_qBufAudioRx, (uint8_t *)g_bufAudioRx, ( I2S_DMA_LOOP_SIZE * 2 ) * I2S_DMA_LOOP_QCNT );
   \        0x4   0xF44F 0x72F0      MOV      R2,#+480
   \        0x8   0x.... 0x....      LDR.W    R1,??DataTable18_4
   \        0xC   0x.... 0x....      LDR.W    R0,??DataTable18_5
   \       0x10   0x.... 0x....      BL       qBufInit
    140          	qBufInit( &g_qBufAudioTx, (uint8_t *)g_bufAudioTx, ( I2S_DMA_LOOP_SIZE * 2 ) * I2S_DMA_LOOP_QCNT );
   \       0x14   0xF44F 0x72F0      MOV      R2,#+480
   \       0x18   0x.... 0x....      LDR.W    R1,??DataTable18_6
   \       0x1C   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \       0x20   0x.... 0x....      BL       qBufInit
    141          
    142          	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)sine_table, (uint16_t*)bufAudio, 256 );
   \       0x24   0x.... 0x....      LDR.W    R7,??DataTable18_8
   \       0x28   0xF44F 0x7380      MOV      R3,#+256
   \       0x2C   0x.... 0x....      LDR.W    R2,??DataTable18_9
   \       0x30   0x0039             MOVS     R1,R7
   \       0x32   0x.... 0x....      LDR.W    R0,??DataTable18_10
   \       0x36   0x.... 0x....      BL       HAL_I2SEx_TransmitReceive_DMA
    143          
    144          	int i;
                 	    ^
Warning[Pe177]: variable "i" was declared but never referenced
    145          	int index;
                 	    ^
Warning[Pe550]: variable "index" was set but never used
    146          
    147          	index = 0;
   \       0x3A   0x2400             MOVS     R4,#+0
    148          
    149          	//	sine table copy
    150          	memcpy( speex_sine_table, sine_table, 160 * 2 );
   \       0x3C   0xF44F 0x78A0      MOV      R8,#+320
   \       0x40   0x.... 0x....      LDR.W    R5,??DataTable18_11
   \       0x44   0x4642             MOV      R2,R8
   \       0x46   0x0039             MOVS     R1,R7
   \       0x48   0x0028             MOVS     R0,R5
   \       0x4A   0x.... 0x....      BL       __aeabi_memcpy
    151          
    152          	int tick_start, tick_end;
    153          
    154          	tick_start = HAL_GetTick();
   \       0x4E   0x.... 0x....      BL       HAL_GetTick
   \       0x52   0x0005             MOVS     R5,R0
    155          
    156          	tick_end = HAL_GetTick();
   \       0x54   0x.... 0x....      BL       HAL_GetTick
   \       0x58   0x0006             MOVS     R6,R0
    157          
    158          	printf("%s : [%d] %d / %d\n", __func__, tick_end - tick_start, tick_start, tick_end);
   \       0x5A   0x9600             STR      R6,[SP, #+0]
   \       0x5C   0x002B             MOVS     R3,R5
   \       0x5E   0x1B72             SUBS     R2,R6,R5
   \       0x60   0x.... 0x....      LDR.W    R1,??DataTable18_12
   \       0x64   0x.... 0x....      LDR.W    R0,??DataTable18_13
   \       0x68   0x.... 0x....      BL       printf
    159          
    160          	//========================================================================
    161          }
   \       0x6C   0xE8BD 0x81F3      POP      {R0,R1,R4-R8,PC}
    162          
    163          ////========================================================================
    164          //void AudioSine( void )
    165          ////========================================================================
    166          //{
    167          //	SetCallbackI2STxRxCplt( AudioSine_I2SEx_TxRxCpltCallback );
    168          //	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[FRAME_SIZE], FRAME_SIZE );
    169          //}
    170          
    171          
    172          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    173          void AudioStop( void )
    174          //========================================================================
    175          {
   \                     AudioStop: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    176          	SetCallbackI2STxRxCplt( NULL );
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x.... 0x....      BL       SetCallbackI2STxRxCplt
    177          	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)null_table, (uint16_t*)bufAudio, 256 );
   \        0x8   0xF44F 0x7380      MOV      R3,#+256
   \        0xC   0x.... 0x....      LDR.W    R2,??DataTable18_9
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable18_14
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable18_10
   \       0x18   0x.... 0x....      BL       HAL_I2SEx_TransmitReceive_DMA
    178          }
   \       0x1C   0xBD01             POP      {R0,PC}
    179          

   \                                 In section .bss, align 4
    180          void ( *pCallback_I2SEx_TxRxCpltCallback )( I2S_HandleTypeDef *hi2s ) = NULL;
   \                     pCallback_I2SEx_TxRxCpltCallback:
   \        0x0                      DS8 4
    181          
    182          
    183          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    184          void	SetCallbackI2STxRxCplt	( void ( *pCallbackTxRxCplt )( I2S_HandleTypeDef *hi2s ) )
    185          //========================================================================
    186          {
    187          	pCallback_I2SEx_TxRxCpltCallback = pCallbackTxRxCplt;
   \                     SetCallbackI2STxRxCplt: (+1)
   \        0x0   0x.... 0x....      LDR.W    R1,??DataTable18_15
   \        0x4   0x6008             STR      R0,[R1, #+0]
    188          }
   \        0x6   0x4770             BX       LR
    189          
    190          /**
    191            * @brief Rx Transfer completed callbacks
    192            * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
    193            *         the configuration information for I2S module
    194            * @retval None
    195            */
    196          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    197          void HAL_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
    198          //========================================================================
    199          {
   \                     HAL_I2SEx_TxRxCpltCallback: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x0004             MOVS     R4,R0
    200          	/* Prevent unused argument(s) compilation warning */
    201          	/* NOTE : This function Should not be modified, when the callback is needed,
    202          			  the HAL_I2S_RxCpltCallback could be implemented in the user file
    203          	 */
    204          
    205          //	printf( "%s(%d)\n", __func__, __LINE__ );
    206          
    207          	if ( pCallback_I2SEx_TxRxCpltCallback )
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable18_15
   \        0xA   0x6808             LDR      R0,[R1, #+0]
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD003             BEQ.N    ??HAL_I2SEx_TxRxCpltCallback_0
    208          	{
    209          		pCallback_I2SEx_TxRxCpltCallback( hi2s );
   \       0x10   0x0020             MOVS     R0,R4
   \       0x12   0x6809             LDR      R1,[R1, #+0]
   \       0x14   0x4788             BLX      R1
   \       0x16   0xE012             B.N      ??HAL_I2SEx_TxRxCpltCallback_1
    210          	}
    211          	else
    212          	{
    213          		//	Default Loopback
    214          		//	pAudioTable = sine_table;
    215          		memcpy( (void *)&bufAudio[0], (void *)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE * 2 );
   \                     ??HAL_I2SEx_TxRxCpltCallback_0: (+1)
   \       0x18   0x253C             MOVS     R5,#+60
   \       0x1A   0x.... 0x....      LDR.W    R6,??DataTable18_9
   \       0x1E   0xF116 0x073C      ADDS     R7,R6,#+60
   \       0x22   0x46B8             MOV      R8,R7
   \       0x24   0x46B1             MOV      R9,R6
   \       0x26   0x002A             MOVS     R2,R5
   \       0x28   0x4641             MOV      R1,R8
   \       0x2A   0x4648             MOV      R0,R9
   \       0x2C   0x.... 0x....      BL       __aeabi_memcpy
    216          		HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE );
   \       0x30   0x231E             MOVS     R3,#+30
   \       0x32   0x003A             MOVS     R2,R7
   \       0x34   0x0031             MOVS     R1,R6
   \       0x36   0x.... 0x....      LDR.W    R0,??DataTable18_10
   \       0x3A   0x.... 0x....      BL       HAL_I2SEx_TransmitReceive_DMA
    217          	}
    218          }
   \                     ??HAL_I2SEx_TxRxCpltCallback_1: (+1)
   \       0x3E   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}
    219          
    220          //========================================================================
    221          //
    222          //		Audio Chip ( XE3005 / MAX9860 )
    223          //
    224          //========================================================================
    225          

   \                                 In section .bss, align 4
    226          int		g_nAudioIC = AudioNone;
   \                     g_nAudioIC:
   \        0x0                      DS8 4
    227          
    228          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    229          void SetAudioIC( int nAudioIC )
    230          //========================================================================
    231          {
    232          	g_nAudioIC = nAudioIC;
   \                     SetAudioIC: (+1)
   \        0x0   0x.... 0x....      LDR.W    R1,??DataTable18_16
   \        0x4   0x6008             STR      R0,[R1, #+0]
    233          }
   \        0x6   0x4770             BX       LR
    234          
    235          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    236          int GetAudioIC( void )
    237          //========================================================================
    238          {
    239          	return g_nAudioIC;
   \                     GetAudioIC: (+1)
   \        0x0   0x.... 0x....      LDR.W    R0,??DataTable18_16
   \        0x4   0x6800             LDR      R0,[R0, #+0]
   \        0x6   0x4770             BX       LR
    240          }
    241          
    242          //========================================================================
    243          //
    244          //		Codec ( MAX9860 )
    245          //
    246          //========================================================================
    247          
    248          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    249          int WriteI2CCodec( uint8_t addr, uint8_t data )
    250          //========================================================================
    251          {
   \                     WriteI2CCodec: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0xB086             SUB      SP,SP,#+24
   \        0x6   0x0004             MOVS     R4,R0
   \        0x8   0x000D             MOVS     R5,R1
    252          	if ( GetAudioIC() != AudioMAX9860 )	return 0;
   \        0xA   0x.... 0x....      BL       GetAudioIC
   \        0xE   0x2801             CMP      R0,#+1
   \       0x10   0xD001             BEQ.N    ??WriteI2CCodec_0
   \       0x12   0x2000             MOVS     R0,#+0
   \       0x14   0xE027             B.N      ??WriteI2CCodec_1
    253          
    254          	int cntRetry;
    255          
    256          	cntRetry = 0;
   \                     ??WriteI2CCodec_0: (+1)
   \       0x16   0x2600             MOVS     R6,#+0
    257          
    258          	char buf[10];
    259          	memset( buf, 0, sizeof( buf ) );
   \       0x18   0x270A             MOVS     R7,#+10
   \       0x1A   0xF05F 0x0800      MOVS     R8,#+0
   \       0x1E   0xF10D 0x090C      ADD      R9,SP,#+12
   \       0x22   0x4642             MOV      R2,R8
   \       0x24   0x0039             MOVS     R1,R7
   \       0x26   0x4648             MOV      R0,R9
   \       0x28   0x.... 0x....      BL       __aeabi_memset
    260          	buf[0] = data;
   \       0x2C   0xF88D 0x500C      STRB     R5,[SP, #+12]
    261          
    262          	while ( HAL_I2C_Mem_Write( &hi2c1, (uint16_t)( 0x10 << 1 ), (uint16_t)addr, I2C_MEMADD_SIZE_8BIT, buf, (uint16_t)1, 1000 ) != HAL_OK && cntRetry < 10 ) cntRetry++;
                 	                                                                                                  ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "uint8_t *"
   \                     ??WriteI2CCodec_2: (+1)
   \       0x30   0xF44F 0x707A      MOV      R0,#+1000
   \       0x34   0x9002             STR      R0,[SP, #+8]
   \       0x36   0x2001             MOVS     R0,#+1
   \       0x38   0x9001             STR      R0,[SP, #+4]
   \       0x3A   0xA803             ADD      R0,SP,#+12
   \       0x3C   0x9000             STR      R0,[SP, #+0]
   \       0x3E   0x2301             MOVS     R3,#+1
   \       0x40   0x0022             MOVS     R2,R4
   \       0x42   0xB2D2             UXTB     R2,R2
   \       0x44   0xB292             UXTH     R2,R2
   \       0x46   0x2120             MOVS     R1,#+32
   \       0x48   0x.... 0x....      LDR.W    R0,??DataTable18_17
   \       0x4C   0x.... 0x....      BL       HAL_I2C_Mem_Write
   \       0x50   0x2800             CMP      R0,#+0
   \       0x52   0xD003             BEQ.N    ??WriteI2CCodec_3
   \       0x54   0x2E0A             CMP      R6,#+10
   \       0x56   0xDA01             BGE.N    ??WriteI2CCodec_3
   \       0x58   0x1C76             ADDS     R6,R6,#+1
   \       0x5A   0xE7E9             B.N      ??WriteI2CCodec_2
    263          
    264          	if ( cntRetry == 10 )   return 0;
   \                     ??WriteI2CCodec_3: (+1)
   \       0x5C   0x2E0A             CMP      R6,#+10
   \       0x5E   0xD101             BNE.N    ??WriteI2CCodec_4
   \       0x60   0x2000             MOVS     R0,#+0
   \       0x62   0xE000             B.N      ??WriteI2CCodec_1
    265          	else					return 1;
   \                     ??WriteI2CCodec_4: (+1)
   \       0x64   0x2001             MOVS     R0,#+1
   \                     ??WriteI2CCodec_1: (+1)
   \       0x66   0xB007             ADD      SP,SP,#+28
   \       0x68   0xE8BD 0x83F0      POP      {R4-R9,PC}
    266          }
    267          
    268          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    269          void InitCodecMAX9860   ( void )
    270          //========================================================================
    271          {
   \                     InitCodecMAX9860: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    272          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x2   0xF44F 0x7288      MOV      R2,#+272
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable18_18
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable18_19
   \        0xE   0x.... 0x....      BL       printf
    273          
    274          	SetAudioIC( AudioMAX9860 );
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0x.... 0x....      BL       SetAudioIC
    275          
    276          #define MCLOCK_FREQUENCY	12000000	//	Codec Master Clock ( 12 MHz )
    277          
    278          #define AUDIO_FREQ			8000 		//	Audio Freq : 8 KHz
    279          
    280          #define MAX9860 0						//	unsure of address
    281          
    282          #define N (( 65536 * 96 * AUDIO_FREQ ) / MCLOCK_FREQUENCY )		//	N = (65536*96*F_lrclk)/F_pclk
    283          #define NHI (N>>8)						//	high 7 bits of N
    284          
    285          	//#define NLO (N&0b000000011111111)		//	NLO is lower 8 bits of N
    286          #define NLO (N&0xFF)		//	NLO is lower 8 bits of N
    287          
    288          	//========================================================================
    289          	//  Audio Master Clock 13 MHz 설정.
    290          
    291          	//========================================================================
    292          	//  Codec 초기화. ( MAX9860ETG+ )
    293          
    294          	/*	Initialize the MAX9860 by setting registers	*/
    295          	//	registers at 0x03, 0x04, and 0x05 are clock control registers
    296          	WriteI2CCodec( 0X03, 0X12 );	//	PSCLK = 01, FREQ = 10(12MHz), 8KHz = 0 (LRCLK = 8KHz)
   \       0x18   0x2112             MOVS     R1,#+18
   \       0x1A   0x2003             MOVS     R0,#+3
   \       0x1C   0x.... 0x....      BL       WriteI2CCodec
    297          
    298          	WriteI2CCodec( 0X04, NHI );	//	PLL =0,
                 	                     ^
Warning[Pe061]: integer operation result is out of range
   \       0x20   0x21FF             MOVS     R1,#+255
   \       0x22   0x2004             MOVS     R0,#+4
   \       0x24   0x.... 0x....      BL       WriteI2CCodec
    299          	WriteI2CCodec( 0X05, NLO );
                 	                     ^
Warning[Pe061]: integer operation result is out of range
   \       0x28   0x219C             MOVS     R1,#+156
   \       0x2A   0x2005             MOVS     R0,#+5
   \       0x2C   0x.... 0x....      BL       WriteI2CCodec
    300          
    301          	//	WriteI2CCodec( 0X06, 0x2C );	//	MAS = 0, WCI = 0 (really not sure), DBCI = 1( Falling Edge SDIN ), DDLY = 0, HIZ = 1, TDM = 1, 
    302          	//	WriteI2CCodec( 0X06, 0x24 );	//	MAS = 0, WCI = 0 (really not sure), DBCI = 1( Falling Edge SDIN ), DDLY = 0, HIZ = 0, TDM = 1, 
    303          		//	Rising Edge
    304          	WriteI2CCodec( 0X06, 0x04 );	//	MAS = 0, WCI = 0 (really not sure), DBCI = 0( Rising Edge SDIN ), DDLY = 0, HIZ = 0, TDM = 1, 
   \       0x30   0x2104             MOVS     R1,#+4
   \       0x32   0x2006             MOVS     R0,#+6
   \       0x34   0x.... 0x....      BL       WriteI2CCodec
    305          
    306          //sendTwoBytes(MAX9860, 0X07, 0x00);	//	ABCI = 0, ADLY = 0, ST = 0, BSEL = 000
    307          
    308          //	WriteI2CCodec( 0X07, 0x20 );	//	ABCI = 1 ( Falling Edge SDOUT ), ADLY = 0, ST = 0, BSEL = 000
    309          
    310          	//	Rising Edge
    311          	WriteI2CCodec( 0X07, 0x00 );	//	ABCI = 0 ( Rising Edge SDOUT ), ADLY = 0, ST = 0, BSEL = 000
   \       0x38   0x2100             MOVS     R1,#+0
   \       0x3A   0x2007             MOVS     R0,#+7
   \       0x3C   0x.... 0x....      BL       WriteI2CCodec
    312          
    313          	//	Digital filters
    314          	WriteI2CCodec( 0x08, 0x00 );	//AVFLT = 0, DVFLT = 0 (not sure which filter would be best for this, choosing no filter)
   \       0x40   0x2100             MOVS     R1,#+0
   \       0x42   0x2008             MOVS     R0,#+8
   \       0x44   0x.... 0x....      BL       WriteI2CCodec
    315          
    316          	//	Digital level control registers
    317          	//		Spk. Vol
    318          	WriteI2CCodec( 0x09, 0x06 );	//0 DAC adjustment, this would require testing and/or a better understanding of the overall system
   \       0x48   0x2106             MOVS     R1,#+6
   \       0x4A   0x2009             MOVS     R0,#+9
   \       0x4C   0x.... 0x....      BL       WriteI2CCodec
    319          	WriteI2CCodec( 0x0A, 0x33 );	//both ADC's set to 0 adjustment, same reason as above AND mic not supported yet
   \       0x50   0x2133             MOVS     R1,#+51
   \       0x52   0x200A             MOVS     R0,#+10
   \       0x54   0x.... 0x....      BL       WriteI2CCodec
    320          	WriteI2CCodec( 0x0B, 0x00 );	//no gain on DAC, unsure of DVST bits safer to disable
   \       0x58   0x2100             MOVS     R1,#+0
   \       0x5A   0x200B             MOVS     R0,#+11
   \       0x5C   0x.... 0x....      BL       WriteI2CCodec
    321          //	WriteI2CCodec( 0x0B, 0x61 );	// DAC - DVG 11(+18) / DVST 0x01(0)
    322          //	WriteI2CCodec( 0x0B, 0x01 );	// DAC - DVG 00(+0) / DVST 0x01(0)
    323          
    324          	//	microphone input register
    325          //	WriteI2CCodec( 0x0c, 0x00 );	//I haven't set this up to allow microphones (make MAX9860 master, ARM slave)
    326          //	WriteI2CCodec( 0x0c, 0x4A );	// PAM = 10(+20) / PGAM = 0x0A(+10)
    327          
    328          	WriteI2CCodec( 0x0c, 0x2A );	// PAM = 01(+0) / PGAM = 0x0A(+10)
   \       0x60   0x212A             MOVS     R1,#+42
   \       0x62   0x200C             MOVS     R0,#+12
   \       0x64   0x.... 0x....      BL       WriteI2CCodec
    329          
    330          //	WriteI2CCodec( 0x0c, 0x34 );	// PAM = 01(+0) / PGAM = 0x14(+0)
    331          
    332          	//	AGC and Noise gate registers
    333          //	WriteI2CCodec( 0x0E, 0x80 );	//sum of left & right noise gates for AGC & noise gate, AGCRLS shortest time, but AGC disabled since I am unsure of its need
    334          	WriteI2CCodec( 0x0E, 0x00 );	//  Disable AGC
   \       0x68   0x2100             MOVS     R1,#+0
   \       0x6A   0x200E             MOVS     R0,#+14
   \       0x6C   0x.... 0x....      BL       WriteI2CCodec
    335          	WriteI2CCodec( 0x0F, 0x00 );	//Noise gate threshhold disabled, AGC signal threshhold -3bBFS
   \       0x70   0x2100             MOVS     R1,#+0
   \       0x72   0x200F             MOVS     R0,#+15
   \       0x74   0x.... 0x....      BL       WriteI2CCodec
    336          
    337          	//	power management register
    338          //	WriteI2CCodec( 0x10, 0x88 );	//powered on, DAC on, both ADC's off (since this is not set up for microphone input)
    339          	WriteI2CCodec( 0x10, 0x8A );	//powered on, DAC on, both ADC(Left) Enable
   \       0x78   0x218A             MOVS     R1,#+138
   \       0x7A   0x2010             MOVS     R0,#+16
   \       0x7C   0x.... 0x....      BL       WriteI2CCodec
    340          
    341          	//========================================================================
    342          	//	Set Speaker Volume
    343          //	WriteI2CCodec( 0x09, 0x0C );	//  0x0C ( -3 )
    344          //	WriteI2CCodec( 0x09, 0x1E );	//  0x0C ( -12 )
    345          //	WriteI2CCodec( 0x09, 0x2A );	//  0x0C ( -18 )
    346          //	WriteI2CCodec( 0x09, 0x30 );	//  0x0C ( -21 )
    347          
    348          //	//	sine 파 출력 검사. ( I2S Data 영역 검사 )
    349          //	WriteI2CCodec( 0x09, 0x36 );	//  0x0C ( -24 )
    350          
    351          //	WriteI2CCodec( 0x09, 0x3E );	//  0x0C ( -28 )
    352          //	WriteI2CCodec( 0x0B, 0x20 );	//  01 ( +6 dB )
    353          }
   \       0x80   0xBD01             POP      {R0,PC}
    354          
    355          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    356          void Default_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
    357          //========================================================================
    358          {
   \                     Default_I2SEx_TxRxCpltCallback: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x0004             MOVS     R4,R0
    359          	//	printf( "%s(%d)\n", __func__, __LINE__ );
    360          
    361          	//========================================================================
    362          	//	Loopback
    363          	memcpy( (void *)&bufAudio[0], (void *)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE * 2 );
   \        0x6   0x253C             MOVS     R5,#+60
   \        0x8   0x.... 0x....      LDR.W    R6,??DataTable18_9
   \        0xC   0xF116 0x073C      ADDS     R7,R6,#+60
   \       0x10   0x46B8             MOV      R8,R7
   \       0x12   0x46B1             MOV      R9,R6
   \       0x14   0x002A             MOVS     R2,R5
   \       0x16   0x4641             MOV      R1,R8
   \       0x18   0x4648             MOV      R0,R9
   \       0x1A   0x.... 0x....      BL       __aeabi_memcpy
    364          	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE );
   \       0x1E   0x231E             MOVS     R3,#+30
   \       0x20   0x003A             MOVS     R2,R7
   \       0x22   0x0031             MOVS     R1,R6
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable18_10
   \       0x28   0x.... 0x....      BL       HAL_I2SEx_TransmitReceive_DMA
    365          }
   \       0x2C   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}
    366          
    367          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    368          int	AudioDMALoopback( void )
    369          //========================================================================
    370          {
   \                     AudioDMALoopback: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    371          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x2   0xF240 0x1273      MOVW     R2,#+371
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable18_20
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable18_19
   \        0xE   0x.... 0x....      BL       printf
    372          
    373          	SetCallbackI2STxRxCplt( Default_I2SEx_TxRxCpltCallback );
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable18_21
   \       0x16   0x.... 0x....      BL       SetCallbackI2STxRxCplt
    374          
    375          	//	Speex ( 1 frame ) : 160 sample ( 320 bytes ) / 20 msec
    376          	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[FRAME_SIZE], I2S_DMA_LOOP_SIZE );
   \       0x1A   0x.... 0x....      LDR.W    R1,??DataTable18_9
   \       0x1E   0x231E             MOVS     R3,#+30
   \       0x20   0xF511 0x72A0      ADDS     R2,R1,#+320
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable18_10
   \       0x28   0x.... 0x....      BL       HAL_I2SEx_TransmitReceive_DMA
    377          
    378          	return 0;
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0xBD02             POP      {R1,PC}
    379          }
    380          
    381          void 	RFM_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s );	//	rfm.c
    382          
    383          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    384          int	AudioDMARFM( void )
    385          //========================================================================
    386          {
   \                     AudioDMARFM: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    387          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x2   0xF240 0x1283      MOVW     R2,#+387
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable18_22
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable18_19
   \        0xE   0x.... 0x....      BL       printf
    388          
    389          	SetCallbackI2STxRxCplt( RFM_I2SEx_TxRxCpltCallback );
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable18_23
   \       0x16   0x.... 0x....      BL       SetCallbackI2STxRxCplt
    390          
    391          	//	Speex ( 1 frame ) : 160 sample ( 320 bytes ) / 20 msec
    392          	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[FRAME_SIZE], I2S_DMA_LOOP_SIZE );
   \       0x1A   0x.... 0x....      LDR.W    R1,??DataTable18_9
   \       0x1E   0x231E             MOVS     R3,#+30
   \       0x20   0xF511 0x72A0      ADDS     R2,R1,#+320
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable18_10
   \       0x28   0x.... 0x....      BL       HAL_I2SEx_TransmitReceive_DMA
    393          
    394          	return 0;
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0xBD02             POP      {R1,PC}
    395          }
    396          
    397          
    398          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    399          void AudioSpeex_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
    400          //========================================================================
    401          {
   \                     AudioSpeex_I2SEx_TxRxCpltCallback: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
    402          	//	printf( "%s(%d)\n", __func__, __LINE__ );
    403          
    404          	//========================================================================
    405          	//	Speex Loopback
    406          	//	pAudioTable = sine_table;
    407          //	memcpy( &bufAudio[0], &bufAudio[FRAME_SIZE], FRAME_SIZE );
    408          
    409          	//	Audio Buffer Put
    410          	qBufPut( &g_qBufAudioRx, (uint8_t *)&bufAudio[FRAME_SIZE], FRAME_SIZE );
   \        0x4   0x.... 0x....      LDR.W    R5,??DataTable18_9
   \        0x8   0xF515 0x76A0      ADDS     R6,R5,#+320
   \        0xC   0x22A0             MOVS     R2,#+160
   \        0xE   0x0031             MOVS     R1,R6
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable18_5
   \       0x14   0x.... 0x....      BL       qBufPut
    411          	qBufGet( &g_qBufAudioTx, (uint8_t *)&bufAudio[0], FRAME_SIZE );
   \       0x18   0x22A0             MOVS     R2,#+160
   \       0x1A   0x0029             MOVS     R1,R5
   \       0x1C   0x.... 0x....      LDR.W    R0,??DataTable18_7
   \       0x20   0x.... 0x....      BL       qBufGet
    412          
    413          	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[FRAME_SIZE], FRAME_SIZE );
   \       0x24   0x23A0             MOVS     R3,#+160
   \       0x26   0x0032             MOVS     R2,R6
   \       0x28   0x0029             MOVS     R1,R5
   \       0x2A   0x.... 0x....      LDR.W    R0,??DataTable18_10
   \       0x2E   0x.... 0x....      BL       HAL_I2SEx_TransmitReceive_DMA
    414          }
   \       0x32   0xBD70             POP      {R4-R6,PC}
    415          
    416          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    417          void AudioSine_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
    418          //========================================================================
    419          {
   \                     AudioSine_I2SEx_TxRxCpltCallback: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    420          	//	printf( "%s(%d)\n", __func__, __LINE__ );
    421          
    422          	//========================================================================
    423          	//	Speex Loopback
    424          	//	pAudioTable = sine_table;
    425          //	memcpy( &bufAudio[0], &bufAudio[FRAME_SIZE], FRAME_SIZE );
    426          
    427          #if 0
    428          
    429          	//	Speex Sine
    430          	static int idx = 0;
    431          
    432          	HAL_I2SEx_TransmitReceive_DMA( 	&hi2s3,
    433          									(uint16_t*)&speex_sine_table[idx*160],			//	Audio Tx
    434          									(uint16_t*)&bufAudio[FRAME_SIZE],
    435          									FRAME_SIZE
    436          									);
    437          
    438          //	idx = (idx + 1) % 8;
    439          
    440          #else
    441          
    442          	HAL_I2SEx_TransmitReceive_DMA( 	&hi2s3,
    443          									(uint16_t*)&sine_table[0],			//	Audio Tx
    444          									(uint16_t*)&bufAudio[FRAME_SIZE],
    445          									FRAME_SIZE
    446          									);
   \        0x4   0x23A0             MOVS     R3,#+160
   \        0x6   0x.... 0x....      LDR.W    R2,??DataTable18_24
   \        0xA   0x.... 0x....      LDR.W    R1,??DataTable18_8
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable18_10
   \       0x12   0x.... 0x....      BL       HAL_I2SEx_TransmitReceive_DMA
    447          
    448          #endif
    449          }
   \       0x16   0xBD10             POP      {R4,PC}
    450          
    451          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    452          int		AudioLoopbackDMASpeex( void )
    453          //========================================================================
    454          {
   \                     AudioLoopbackDMASpeex: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    455          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x2   0xF240 0x12C7      MOVW     R2,#+455
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable18_25
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable18_19
   \        0xE   0x.... 0x....      BL       printf
    456          
    457          	SetCallbackI2STxRxCplt( AudioSpeex_I2SEx_TxRxCpltCallback );
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable18_26
   \       0x16   0x.... 0x....      BL       SetCallbackI2STxRxCplt
    458          
    459          	//	Speex ( 1 frame ) : 160 sample ( 320 bytes ) / 20 msec
    460          	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[FRAME_SIZE], FRAME_SIZE );
   \       0x1A   0x.... 0x....      LDR.W    R1,??DataTable18_9
   \       0x1E   0x23A0             MOVS     R3,#+160
   \       0x20   0xF511 0x72A0      ADDS     R2,R1,#+320
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable18_10
   \       0x28   0x.... 0x....      BL       HAL_I2SEx_TransmitReceive_DMA
    461          
    462          	return 0;
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0xBD02             POP      {R1,PC}
    463          }
    464          
    465          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    466          int		AudioPlayDMASine( void )
    467          //========================================================================
    468          {
   \                     AudioPlayDMASine: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    469          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x2   0xF240 0x12D5      MOVW     R2,#+469
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable18_27
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable18_19
   \        0xE   0x.... 0x....      BL       printf
    470          
    471          	SetCallbackI2STxRxCplt( AudioSine_I2SEx_TxRxCpltCallback );
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable18_28
   \       0x16   0x.... 0x....      BL       SetCallbackI2STxRxCplt
    472          
    473          	//	Speex ( 1 frame ) : 160 sample ( 320 bytes ) / 20 msec
    474          	HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[FRAME_SIZE], FRAME_SIZE );
   \       0x1A   0x.... 0x....      LDR.W    R1,??DataTable18_9
   \       0x1E   0x23A0             MOVS     R3,#+160
   \       0x20   0xF511 0x72A0      ADDS     R2,R1,#+320
   \       0x24   0x.... 0x....      LDR.W    R0,??DataTable18_10
   \       0x28   0x.... 0x....      BL       HAL_I2SEx_TransmitReceive_DMA
    475          
    476          	return 0;
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0xBD02             POP      {R1,PC}
    477          }
    478          
    479          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    480          void	AudioSpkVol	    ( int nSpkVol )
    481          //========================================================================
    482          {
   \                     AudioSpkVol: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    483              //========================================================================
    484              //	Codec MAX9860ETG+
    485              if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), 2, 2 ) )
   \        0x4   0x2302             MOVS     R3,#+2
   \        0x6   0x2202             MOVS     R2,#+2
   \        0x8   0x2120             MOVS     R1,#+32
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable18_17
   \        0xE   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD11A             BNE.N    ??AudioSpkVol_0
    486              {
    487                  // Power DAC / ADC Disable
    488          //        WriteI2CCodec( 0x10, 0x00 );	//powered on, DAC on, both ADC(Left) Enable
    489          
    490              	switch ( nSpkVol )
   \       0x16   0x2C00             CMP      R4,#+0
   \       0x18   0xD005             BEQ.N    ??AudioSpkVol_1
   \       0x1A   0x2C02             CMP      R4,#+2
   \       0x1C   0xD00D             BEQ.N    ??AudioSpkVol_2
   \       0x1E   0xD307             BCC.N    ??AudioSpkVol_3
   \       0x20   0x2C03             CMP      R4,#+3
   \       0x22   0xD00F             BEQ.N    ??AudioSpkVol_4
   \       0x24   0xE012             B.N      ??AudioSpkVol_0
    491                  {
    492                  case 0:		WriteI2CCodec( 0x09, 0xBA );	break;	//  Mute ( 0xBC )
   \                     ??AudioSpkVol_1: (+1)
   \       0x26   0x21BA             MOVS     R1,#+186
   \       0x28   0x2009             MOVS     R0,#+9
   \       0x2A   0x.... 0x....      BL       WriteI2CCodec
   \       0x2E   0xE00D             B.N      ??AudioSpkVol_0
    493                  case 1:		WriteI2CCodec( 0x09, 0x0C );	break;	//  0x0C ( -3 )
   \                     ??AudioSpkVol_3: (+1)
   \       0x30   0x210C             MOVS     R1,#+12
   \       0x32   0x2009             MOVS     R0,#+9
   \       0x34   0x.... 0x....      BL       WriteI2CCodec
   \       0x38   0xE008             B.N      ??AudioSpkVol_0
    494                  case 2:		WriteI2CCodec( 0x09, 0x06 );	break;	//  0x02 ( 0 dB ) DAC adjustment, this would require testing and/or a better understanding of the overall system
   \                     ??AudioSpkVol_2: (+1)
   \       0x3A   0x2106             MOVS     R1,#+6
   \       0x3C   0x2009             MOVS     R0,#+9
   \       0x3E   0x.... 0x....      BL       WriteI2CCodec
   \       0x42   0xE003             B.N      ??AudioSpkVol_0
    495                  case 3:		WriteI2CCodec( 0x09, 0x00 );	break;	//  0x02 ( +3 )
   \                     ??AudioSpkVol_4: (+1)
   \       0x44   0x2100             MOVS     R1,#+0
   \       0x46   0x2009             MOVS     R0,#+9
   \       0x48   0x.... 0x....      BL       WriteI2CCodec
    496                  }
    497          
    498                  // Power DAC / ADC Enable
    499          //        WriteI2CCodec( 0x10, 0x8A );	//powered on, DAC on, both ADC(Left) Enable
    500              }
    501          }
   \                     ??AudioSpkVol_0: (+1)
   \       0x4C   0xBD10             POP      {R4,PC}
    502          
    503          
    504          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    505          void	AudioMicVol	    ( int nMicVol )
    506          //========================================================================
    507          {
   \                     AudioMicVol: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    508              //========================================================================
    509              //	Codec MAX9860ETG+
    510              if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c1, (uint16_t)( 0x10 << 1 ), 2, 2 ) )
   \        0x4   0x2302             MOVS     R3,#+2
   \        0x6   0x2202             MOVS     R2,#+2
   \        0x8   0x2120             MOVS     R1,#+32
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable18_17
   \        0xE   0x.... 0x....      BL       HAL_I2C_IsDeviceReady
   \       0x12   0x2800             CMP      R0,#+0
   \       0x14   0xD144             BNE.N    ??AudioMicVol_0
    511              {
    512                  // Power DAC / ADC Disable
    513          //        WriteI2CCodec( 0x10, 0x00 );	//powered on, DAC on, both ADC(Left) Enable
    514                  switch ( nMicVol )
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD010             BEQ.N    ??AudioMicVol_1
   \       0x1C   0x2801             CMP      R0,#+1
   \       0x1E   0xD013             BEQ.N    ??AudioMicVol_2
   \       0x20   0x2802             CMP      R0,#+2
   \       0x22   0xD016             BEQ.N    ??AudioMicVol_3
   \       0x24   0x2803             CMP      R0,#+3
   \       0x26   0xD019             BEQ.N    ??AudioMicVol_4
   \       0x28   0x2804             CMP      R0,#+4
   \       0x2A   0xD01C             BEQ.N    ??AudioMicVol_5
   \       0x2C   0x2806             CMP      R0,#+6
   \       0x2E   0xD024             BEQ.N    ??AudioMicVol_6
   \       0x30   0x2807             CMP      R0,#+7
   \       0x32   0xD027             BEQ.N    ??AudioMicVol_7
   \       0x34   0x2808             CMP      R0,#+8
   \       0x36   0xD02A             BEQ.N    ??AudioMicVol_8
   \       0x38   0x2809             CMP      R0,#+9
   \       0x3A   0xD02D             BEQ.N    ??AudioMicVol_9
   \       0x3C   0xE018             B.N      ??AudioMicVol_10
    515          		{
    516          		case 0:		WriteI2CCodec( 0x0c, 0x34 );	break;	// ( 0 dB ) PAM = 01(+0) / PGAM = 0x14(+0)
   \                     ??AudioMicVol_1: (+1)
   \       0x3E   0x2134             MOVS     R1,#+52
   \       0x40   0x200C             MOVS     R0,#+12
   \       0x42   0x.... 0x....      BL       WriteI2CCodec
   \       0x46   0xE02B             B.N      ??AudioMicVol_0
    517          		case 1:		WriteI2CCodec( 0x0c, 0x32 );	break;	// ( 2 dB ) PAM = 01(+0) / PGAM = 0x12(+2)
   \                     ??AudioMicVol_2: (+1)
   \       0x48   0x2132             MOVS     R1,#+50
   \       0x4A   0x200C             MOVS     R0,#+12
   \       0x4C   0x.... 0x....      BL       WriteI2CCodec
   \       0x50   0xE026             B.N      ??AudioMicVol_0
    518          		case 2:		WriteI2CCodec( 0x0c, 0x30 );	break;	// ( 4 dB ) PAM = 01(+0) / PGAM = 0x10(+4)
   \                     ??AudioMicVol_3: (+1)
   \       0x52   0x2130             MOVS     R1,#+48
   \       0x54   0x200C             MOVS     R0,#+12
   \       0x56   0x.... 0x....      BL       WriteI2CCodec
   \       0x5A   0xE021             B.N      ??AudioMicVol_0
    519          		case 3:		WriteI2CCodec( 0x0c, 0x2E );	break;	// ( 6 dB ) PAM = 01(+0) / PGAM = 0x0E(+6)
   \                     ??AudioMicVol_4: (+1)
   \       0x5C   0x212E             MOVS     R1,#+46
   \       0x5E   0x200C             MOVS     R0,#+12
   \       0x60   0x.... 0x....      BL       WriteI2CCodec
   \       0x64   0xE01C             B.N      ??AudioMicVol_0
    520          		case 4:		WriteI2CCodec( 0x0c, 0x2C );	break;	// ( 8 dB ) PAM = 01(+0) / PGAM = 0x0C(+8)
   \                     ??AudioMicVol_5: (+1)
   \       0x66   0x212C             MOVS     R1,#+44
   \       0x68   0x200C             MOVS     R0,#+12
   \       0x6A   0x.... 0x....      BL       WriteI2CCodec
   \       0x6E   0xE017             B.N      ??AudioMicVol_0
    521          		default:	//	Default ( 5 )
    522          		case 5:		WriteI2CCodec( 0x0c, 0x2A );	break;	// ( 10 dB ) PAM = 01(+0) / PGAM = 0x0A(+10) - Default
   \                     ??AudioMicVol_10: (+1)
   \       0x70   0x212A             MOVS     R1,#+42
   \       0x72   0x200C             MOVS     R0,#+12
   \       0x74   0x.... 0x....      BL       WriteI2CCodec
   \       0x78   0xE012             B.N      ??AudioMicVol_0
    523          		case 6:		WriteI2CCodec( 0x0c, 0x28 );	break;	// ( 12 dB ) PAM = 01(+0) / PGAM = 0x08(+12)
   \                     ??AudioMicVol_6: (+1)
   \       0x7A   0x2128             MOVS     R1,#+40
   \       0x7C   0x200C             MOVS     R0,#+12
   \       0x7E   0x.... 0x....      BL       WriteI2CCodec
   \       0x82   0xE00D             B.N      ??AudioMicVol_0
    524          		case 7:		WriteI2CCodec( 0x0c, 0x26 );	break;	// ( 14 dB ) PAM = 01(+0) / PGAM = 0x06(+14)
   \                     ??AudioMicVol_7: (+1)
   \       0x84   0x2126             MOVS     R1,#+38
   \       0x86   0x200C             MOVS     R0,#+12
   \       0x88   0x.... 0x....      BL       WriteI2CCodec
   \       0x8C   0xE008             B.N      ??AudioMicVol_0
    525          		case 8:		WriteI2CCodec( 0x0c, 0x24 );	break;	// ( 16 dB ) PAM = 01(+0) / PGAM = 0x04(+16)
   \                     ??AudioMicVol_8: (+1)
   \       0x8E   0x2124             MOVS     R1,#+36
   \       0x90   0x200C             MOVS     R0,#+12
   \       0x92   0x.... 0x....      BL       WriteI2CCodec
   \       0x96   0xE003             B.N      ??AudioMicVol_0
    526          		case 9:		WriteI2CCodec( 0x0c, 0x22 );	break;	// ( 18 dB ) PAM = 01(+0) / PGAM = 0x02(+18)
   \                     ??AudioMicVol_9: (+1)
   \       0x98   0x2122             MOVS     R1,#+34
   \       0x9A   0x200C             MOVS     R0,#+12
   \       0x9C   0x.... 0x....      BL       WriteI2CCodec
    527          		}
    528          
    529                  // Power DAC / ADC Enable
    530          //        WriteI2CCodec( 0x10, 0x8A );	//powered on, DAC on, both ADC(Left) Enable
    531              }
    532          }
   \                     ??AudioMicVol_0: (+1)
   \       0xA0   0xBD10             POP      {R4,PC}
    533          
    534          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    535          int cmd_audio( int argc, char *argv[] )
    536          //========================================================================
    537          {
   \                     cmd_audio: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    538          	//	audio [ loop / null / sine / spk / mute / vol ] [0/1 - spk relay]
    539          	if ( argc < 2 )
   \        0x6   0x2C02             CMP      R4,#+2
   \        0x8   0xDA09             BGE.N    ??cmd_audio_0
    540          	{
    541          		printf( "%s(%d) - return\n", __func__, __LINE__ );
   \        0xA   0xF240 0x221D      MOVW     R2,#+541
   \        0xE   0x.... 0x....      LDR.W    R1,??DataTable18_29
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable18_30
   \       0x16   0x.... 0x....      BL       printf
    542          		return 0;
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0xE110             B.N      ??cmd_audio_1
    543          	}
    544          
    545          	char	*sCmd;
                 	    	 ^
Warning[Pe550]: variable "sCmd" was set but never used
    546          	int		nVal;
    547          
    548          	switch ( argc )
   \                     ??cmd_audio_0: (+1)
   \       0x1E   0x0020             MOVS     R0,R4
   \       0x20   0x2802             CMP      R0,#+2
   \       0x22   0xD006             BEQ.N    ??cmd_audio_2
   \       0x24   0x2803             CMP      R0,#+3
   \       0x26   0xD106             BNE.N    ??cmd_audio_3
    549          	{
    550          	case 3:		sscanf( argv[2], "%d", &nVal );		//	Value
   \                     ??cmd_audio_4: (+1)
   \       0x28   0x466A             MOV      R2,SP
   \       0x2A   0x....             ADR.N    R1,??DataTable17
   \       0x2C   0x68A8             LDR      R0,[R5, #+8]
   \       0x2E   0x.... 0x....      BL       sscanf
    551          	case 2:		sCmd = argv[1];						//	Command
   \                     ??cmd_audio_2: (+1)
   \       0x32   0x6868             LDR      R0,[R5, #+4]
   \       0x34   0x0006             MOVS     R6,R0
    552          //	case 2:		sText = argv[1];					//	sscanf( argv[1], "%s", sText );		//	cmd [Text]
    553          		break;
    554          	}
    555          
    556          	if ( strcmp( argv[1], "spk" ) == 0 )
   \                     ??cmd_audio_3: (+1)
   \       0x36   0x....             ADR.N    R1,??DataTable17_1
   \       0x38   0x6868             LDR      R0,[R5, #+4]
   \       0x3A   0x.... 0x....      BL       strcmp
   \       0x3E   0x2800             CMP      R0,#+0
   \       0x40   0xD120             BNE.N    ??cmd_audio_5
    557          	{
    558          		if ( nVal == 1 )	//	strcmp( argv[2], "1" ) == 0 )
   \       0x42   0x9800             LDR      R0,[SP, #+0]
   \       0x44   0x2801             CMP      R0,#+1
   \       0x46   0xD10E             BNE.N    ??cmd_audio_6
    559          		{
    560          			//	Spk On
    561          			printf( "%s(%d) - Spk Relay : On\n", __func__, __LINE__ );
   \       0x48   0xF240 0x2231      MOVW     R2,#+561
   \       0x4C   0x.... 0x....      LDR.W    R1,??DataTable18_29
   \       0x50   0x.... 0x....      LDR.W    R0,??DataTable18_31
   \       0x54   0x.... 0x....      BL       printf
    562          			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
   \       0x58   0x2201             MOVS     R2,#+1
   \       0x5A   0x2120             MOVS     R1,#+32
   \       0x5C   0x.... 0x....      LDR.W    R0,??DataTable18_32
   \       0x60   0x.... 0x....      BL       HAL_GPIO_WritePin
   \       0x64   0xE0EB             B.N      ??cmd_audio_7
    563          		}
    564          		else	//	if ( strcmp( argv[2], "0" ) == 0 )
    565          		{
    566          			//	Spk On
    567          			printf( "%s(%d) - Spk Relay : Off\n", __func__, __LINE__ );
   \                     ??cmd_audio_6: (+1)
   \       0x66   0xF240 0x2237      MOVW     R2,#+567
   \       0x6A   0x.... 0x....      LDR.W    R1,??DataTable18_29
   \       0x6E   0x.... 0x....      LDR.W    R0,??DataTable18_33
   \       0x72   0x.... 0x....      BL       printf
    568          			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
   \       0x76   0x2200             MOVS     R2,#+0
   \       0x78   0x2120             MOVS     R1,#+32
   \       0x7A   0x.... 0x....      LDR.W    R0,??DataTable18_32
   \       0x7E   0x.... 0x....      BL       HAL_GPIO_WritePin
   \       0x82   0xE0DC             B.N      ??cmd_audio_7
    569          		}
    570          	}
    571          	else if ( strcmp( argv[1], "loop" ) == 0 )
   \                     ??cmd_audio_5: (+1)
   \       0x84   0x.... 0x....      LDR.W    R1,??DataTable18_34
   \       0x88   0x6868             LDR      R0,[R5, #+4]
   \       0x8A   0x.... 0x....      BL       strcmp
   \       0x8E   0x2800             CMP      R0,#+0
   \       0x90   0xD10D             BNE.N    ??cmd_audio_8
    572          	{
    573          		//	Audio Loop Test
    574          		printf( "%s(%d) - loop\n", __func__, __LINE__ );
   \       0x92   0xF240 0x223E      MOVW     R2,#+574
   \       0x96   0x....             LDR.N    R1,??DataTable18_29
   \       0x98   0x....             LDR.N    R0,??DataTable18_35
   \       0x9A   0x.... 0x....      BL       printf
    575          
    576          		AudioDMALoopback();
   \       0x9E   0x.... 0x....      BL       AudioDMALoopback
    577          
    578          		//	Spk On
    579          		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
   \       0xA2   0x2201             MOVS     R2,#+1
   \       0xA4   0x2120             MOVS     R1,#+32
   \       0xA6   0x....             LDR.N    R0,??DataTable18_32
   \       0xA8   0x.... 0x....      BL       HAL_GPIO_WritePin
   \       0xAC   0xE0C7             B.N      ??cmd_audio_7
    580          	}
    581          	else if ( strcmp( argv[1], "sine" ) == 0 )
   \                     ??cmd_audio_8: (+1)
   \       0xAE   0x....             LDR.N    R1,??DataTable18_36
   \       0xB0   0x6868             LDR      R0,[R5, #+4]
   \       0xB2   0x.... 0x....      BL       strcmp
   \       0xB6   0x2800             CMP      R0,#+0
   \       0xB8   0xD108             BNE.N    ??cmd_audio_9
    582          	{
    583          		//	Audio Output Sine Wave
    584          		printf( "%s(%d) - sine\n", __func__, __LINE__ );
   \       0xBA   0xF44F 0x7212      MOV      R2,#+584
   \       0xBE   0x....             LDR.N    R1,??DataTable18_29
   \       0xC0   0x....             LDR.N    R0,??DataTable18_37
   \       0xC2   0x.... 0x....      BL       printf
    585          		AudioPlayDMASine();
   \       0xC6   0x.... 0x....      BL       AudioPlayDMASine
   \       0xCA   0xE0B8             B.N      ??cmd_audio_7
    586          
    587          //		//	Spk On
    588          //		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
    589          	}
    590          	else if ( strcmp( argv[1], "stop" ) == 0 )
   \                     ??cmd_audio_9: (+1)
   \       0xCC   0x....             LDR.N    R1,??DataTable18_38
   \       0xCE   0x6868             LDR      R0,[R5, #+4]
   \       0xD0   0x.... 0x....      BL       strcmp
   \       0xD4   0x2800             CMP      R0,#+0
   \       0xD6   0xD109             BNE.N    ??cmd_audio_10
    591          	{
    592          		//	Audio Loop Test
    593          		printf( "%s(%d) - %s\n", __func__, __LINE__, argv[1] );
   \       0xD8   0x686B             LDR      R3,[R5, #+4]
   \       0xDA   0xF240 0x2251      MOVW     R2,#+593
   \       0xDE   0x....             LDR.N    R1,??DataTable18_29
   \       0xE0   0x....             LDR.N    R0,??DataTable18_39
   \       0xE2   0x.... 0x....      BL       printf
    594          
    595          //		//	Spk Off
    596          //		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_RESET );
    597          
    598          		AudioStop();
   \       0xE6   0x.... 0x....      BL       AudioStop
   \       0xEA   0xE0A8             B.N      ??cmd_audio_7
    599          	}
    600          	else if ( strcmp( argv[1], "vol" ) == 0 )
   \                     ??cmd_audio_10: (+1)
   \       0xEC   0x....             ADR.N    R1,??DataTable18
   \       0xEE   0x6868             LDR      R0,[R5, #+4]
   \       0xF0   0x.... 0x....      BL       strcmp
   \       0xF4   0x2800             CMP      R0,#+0
   \       0xF6   0xD14A             BNE.N    ??cmd_audio_11
    601          	{
    602          		switch( nVal )
   \       0xF8   0x9800             LDR      R0,[SP, #+0]
   \       0xFA   0x2800             CMP      R0,#+0
   \       0xFC   0xD00E             BEQ.N    ??cmd_audio_12
   \       0xFE   0x2802             CMP      R0,#+2
   \      0x100   0xD016             BEQ.N    ??cmd_audio_13
   \      0x102   0xD310             BCC.N    ??cmd_audio_14
   \      0x104   0x2804             CMP      R0,#+4
   \      0x106   0xD01D             BEQ.N    ??cmd_audio_15
   \      0x108   0xD317             BCC.N    ??cmd_audio_16
   \      0x10A   0x2806             CMP      R0,#+6
   \      0x10C   0xD024             BEQ.N    ??cmd_audio_17
   \      0x10E   0xD31E             BCC.N    ??cmd_audio_18
   \      0x110   0x2808             CMP      R0,#+8
   \      0x112   0xD02B             BEQ.N    ??cmd_audio_19
   \      0x114   0xD325             BCC.N    ??cmd_audio_20
   \      0x116   0x2809             CMP      R0,#+9
   \      0x118   0xD02D             BEQ.N    ??cmd_audio_21
   \      0x11A   0xE031             B.N      ??cmd_audio_22
    603          		{
    604          	    case 0:		WriteI2CCodec( 0x09, 0xBA );	break;	//  Mute ( 0xBC )
   \                     ??cmd_audio_12: (+1)
   \      0x11C   0x21BA             MOVS     R1,#+186
   \      0x11E   0x2009             MOVS     R0,#+9
   \      0x120   0x.... 0x....      BL       WriteI2CCodec
   \      0x124   0xE08B             B.N      ??cmd_audio_7
    605          	    case 1:		WriteI2CCodec( 0x09, 0x36 );	break;	// ( -24 )
   \                     ??cmd_audio_14: (+1)
   \      0x126   0x2136             MOVS     R1,#+54
   \      0x128   0x2009             MOVS     R0,#+9
   \      0x12A   0x.... 0x....      BL       WriteI2CCodec
   \      0x12E   0xE086             B.N      ??cmd_audio_7
    606          	    case 2:		WriteI2CCodec( 0x09, 0x30 );	break;	// ( -21 )
   \                     ??cmd_audio_13: (+1)
   \      0x130   0x2130             MOVS     R1,#+48
   \      0x132   0x2009             MOVS     R0,#+9
   \      0x134   0x.... 0x....      BL       WriteI2CCodec
   \      0x138   0xE081             B.N      ??cmd_audio_7
    607          	    case 3:		WriteI2CCodec( 0x09, 0x2A );	break;	// ( -18 )
   \                     ??cmd_audio_16: (+1)
   \      0x13A   0x212A             MOVS     R1,#+42
   \      0x13C   0x2009             MOVS     R0,#+9
   \      0x13E   0x.... 0x....      BL       WriteI2CCodec
   \      0x142   0xE07C             B.N      ??cmd_audio_7
    608          	    case 4:		WriteI2CCodec( 0x09, 0x1E );	break;	// ( -12 )
   \                     ??cmd_audio_15: (+1)
   \      0x144   0x211E             MOVS     R1,#+30
   \      0x146   0x2009             MOVS     R0,#+9
   \      0x148   0x.... 0x....      BL       WriteI2CCodec
   \      0x14C   0xE077             B.N      ??cmd_audio_7
    609          	    case 5:		WriteI2CCodec( 0x09, 0x18 );	break;	// ( -9 )
   \                     ??cmd_audio_18: (+1)
   \      0x14E   0x2118             MOVS     R1,#+24
   \      0x150   0x2009             MOVS     R0,#+9
   \      0x152   0x.... 0x....      BL       WriteI2CCodec
   \      0x156   0xE072             B.N      ??cmd_audio_7
    610          	    case 6:		WriteI2CCodec( 0x09, 0x12 );	break;	// ( -6 )
   \                     ??cmd_audio_17: (+1)
   \      0x158   0x2112             MOVS     R1,#+18
   \      0x15A   0x2009             MOVS     R0,#+9
   \      0x15C   0x.... 0x....      BL       WriteI2CCodec
   \      0x160   0xE06D             B.N      ??cmd_audio_7
    611          	    case 7:		WriteI2CCodec( 0x09, 0x0C );	break;	// ( -3 )
   \                     ??cmd_audio_20: (+1)
   \      0x162   0x210C             MOVS     R1,#+12
   \      0x164   0x2009             MOVS     R0,#+9
   \      0x166   0x.... 0x....      BL       WriteI2CCodec
   \      0x16A   0xE068             B.N      ??cmd_audio_7
    612                  case 8:		WriteI2CCodec( 0x09, 0x06 );	break;	// ( 0 dB ) DAC adjustment, this would require testing and/or a better understanding of the overall system
   \                     ??cmd_audio_19: (+1)
   \      0x16C   0x2106             MOVS     R1,#+6
   \      0x16E   0x2009             MOVS     R0,#+9
   \      0x170   0x.... 0x....      BL       WriteI2CCodec
   \      0x174   0xE063             B.N      ??cmd_audio_7
    613                  case 9:		WriteI2CCodec( 0x09, 0x00 );	break;	// ( +3 )
   \                     ??cmd_audio_21: (+1)
   \      0x176   0x2100             MOVS     R1,#+0
   \      0x178   0x2009             MOVS     R0,#+9
   \      0x17A   0x.... 0x....      BL       WriteI2CCodec
   \      0x17E   0xE05E             B.N      ??cmd_audio_7
    614                  default:	printf( "%s(%d) - invalid\n", __func__, __LINE__ );	break;
   \                     ??cmd_audio_22: (+1)
   \      0x180   0xF240 0x2266      MOVW     R2,#+614
   \      0x184   0x....             LDR.N    R1,??DataTable18_29
   \      0x186   0x....             LDR.N    R0,??DataTable18_40
   \      0x188   0x.... 0x....      BL       printf
   \      0x18C   0xE057             B.N      ??cmd_audio_7
    615          		}
    616          	}
    617          	else if ( strcmp( argv[1], "mic" ) == 0 )
   \                     ??cmd_audio_11: (+1)
   \      0x18E   0x....             ADR.N    R1,??DataTable18_1
   \      0x190   0x6868             LDR      R0,[R5, #+4]
   \      0x192   0x.... 0x....      BL       strcmp
   \      0x196   0x2800             CMP      R0,#+0
   \      0x198   0xD14A             BNE.N    ??cmd_audio_23
    618          	{
    619          		switch( nVal )
   \      0x19A   0x9800             LDR      R0,[SP, #+0]
   \      0x19C   0x2800             CMP      R0,#+0
   \      0x19E   0xD00E             BEQ.N    ??cmd_audio_24
   \      0x1A0   0x2802             CMP      R0,#+2
   \      0x1A2   0xD016             BEQ.N    ??cmd_audio_25
   \      0x1A4   0xD310             BCC.N    ??cmd_audio_26
   \      0x1A6   0x2804             CMP      R0,#+4
   \      0x1A8   0xD01D             BEQ.N    ??cmd_audio_27
   \      0x1AA   0xD317             BCC.N    ??cmd_audio_28
   \      0x1AC   0x2806             CMP      R0,#+6
   \      0x1AE   0xD024             BEQ.N    ??cmd_audio_29
   \      0x1B0   0xD31E             BCC.N    ??cmd_audio_30
   \      0x1B2   0x2808             CMP      R0,#+8
   \      0x1B4   0xD02B             BEQ.N    ??cmd_audio_31
   \      0x1B6   0xD325             BCC.N    ??cmd_audio_32
   \      0x1B8   0x2809             CMP      R0,#+9
   \      0x1BA   0xD02D             BEQ.N    ??cmd_audio_33
   \      0x1BC   0xE031             B.N      ??cmd_audio_34
    620          		{
    621          		case 0:		WriteI2CCodec( 0x0c, 0x34 );	break;	// ( 0 dB ) PAM = 01(+0) / PGAM = 0x14(+0)
   \                     ??cmd_audio_24: (+1)
   \      0x1BE   0x2134             MOVS     R1,#+52
   \      0x1C0   0x200C             MOVS     R0,#+12
   \      0x1C2   0x.... 0x....      BL       WriteI2CCodec
   \      0x1C6   0xE03A             B.N      ??cmd_audio_7
    622          		case 1:		WriteI2CCodec( 0x0c, 0x32 );	break;	// ( 2 dB ) PAM = 01(+0) / PGAM = 0x12(+2)
   \                     ??cmd_audio_26: (+1)
   \      0x1C8   0x2132             MOVS     R1,#+50
   \      0x1CA   0x200C             MOVS     R0,#+12
   \      0x1CC   0x.... 0x....      BL       WriteI2CCodec
   \      0x1D0   0xE035             B.N      ??cmd_audio_7
    623          		case 2:		WriteI2CCodec( 0x0c, 0x30 );	break;	// ( 4 dB ) PAM = 01(+0) / PGAM = 0x10(+4)
   \                     ??cmd_audio_25: (+1)
   \      0x1D2   0x2130             MOVS     R1,#+48
   \      0x1D4   0x200C             MOVS     R0,#+12
   \      0x1D6   0x.... 0x....      BL       WriteI2CCodec
   \      0x1DA   0xE030             B.N      ??cmd_audio_7
    624          		case 3:		WriteI2CCodec( 0x0c, 0x2E );	break;	// ( 6 dB ) PAM = 01(+0) / PGAM = 0x0E(+6)
   \                     ??cmd_audio_28: (+1)
   \      0x1DC   0x212E             MOVS     R1,#+46
   \      0x1DE   0x200C             MOVS     R0,#+12
   \      0x1E0   0x.... 0x....      BL       WriteI2CCodec
   \      0x1E4   0xE02B             B.N      ??cmd_audio_7
    625          		case 4:		WriteI2CCodec( 0x0c, 0x2C );	break;	// ( 8 dB ) PAM = 01(+0) / PGAM = 0x0C(+8)
   \                     ??cmd_audio_27: (+1)
   \      0x1E6   0x212C             MOVS     R1,#+44
   \      0x1E8   0x200C             MOVS     R0,#+12
   \      0x1EA   0x.... 0x....      BL       WriteI2CCodec
   \      0x1EE   0xE026             B.N      ??cmd_audio_7
    626          		case 5:		WriteI2CCodec( 0x0c, 0x2A );	break;	// ( 10 dB ) PAM = 01(+0) / PGAM = 0x0A(+10) - Default
   \                     ??cmd_audio_30: (+1)
   \      0x1F0   0x212A             MOVS     R1,#+42
   \      0x1F2   0x200C             MOVS     R0,#+12
   \      0x1F4   0x.... 0x....      BL       WriteI2CCodec
   \      0x1F8   0xE021             B.N      ??cmd_audio_7
    627          		case 6:		WriteI2CCodec( 0x0c, 0x28 );	break;	// ( 12 dB ) PAM = 01(+0) / PGAM = 0x08(+12)
   \                     ??cmd_audio_29: (+1)
   \      0x1FA   0x2128             MOVS     R1,#+40
   \      0x1FC   0x200C             MOVS     R0,#+12
   \      0x1FE   0x.... 0x....      BL       WriteI2CCodec
   \      0x202   0xE01C             B.N      ??cmd_audio_7
    628          		case 7:		WriteI2CCodec( 0x0c, 0x26 );	break;	// ( 14 dB ) PAM = 01(+0) / PGAM = 0x06(+14)
   \                     ??cmd_audio_32: (+1)
   \      0x204   0x2126             MOVS     R1,#+38
   \      0x206   0x200C             MOVS     R0,#+12
   \      0x208   0x.... 0x....      BL       WriteI2CCodec
   \      0x20C   0xE017             B.N      ??cmd_audio_7
    629          		case 8:		WriteI2CCodec( 0x0c, 0x24 );	break;	// ( 16 dB ) PAM = 01(+0) / PGAM = 0x04(+16)
   \                     ??cmd_audio_31: (+1)
   \      0x20E   0x2124             MOVS     R1,#+36
   \      0x210   0x200C             MOVS     R0,#+12
   \      0x212   0x.... 0x....      BL       WriteI2CCodec
   \      0x216   0xE012             B.N      ??cmd_audio_7
    630          		case 9:		WriteI2CCodec( 0x0c, 0x22 );	break;	// ( 18 dB ) PAM = 01(+0) / PGAM = 0x02(+18)
   \                     ??cmd_audio_33: (+1)
   \      0x218   0x2122             MOVS     R1,#+34
   \      0x21A   0x200C             MOVS     R0,#+12
   \      0x21C   0x.... 0x....      BL       WriteI2CCodec
   \      0x220   0xE00D             B.N      ??cmd_audio_7
    631                  default:	printf( "%s(%d) - invalid\n", __func__, __LINE__ );	break;
   \                     ??cmd_audio_34: (+1)
   \      0x222   0xF240 0x2277      MOVW     R2,#+631
   \      0x226   0x....             LDR.N    R1,??DataTable18_29
   \      0x228   0x....             LDR.N    R0,??DataTable18_40
   \      0x22A   0x.... 0x....      BL       printf
   \      0x22E   0xE006             B.N      ??cmd_audio_7
    632          		}
    633          	}
    634          	else
    635          	{
    636          		printf( "%s(%d) - Invalid Cmd : %s\n", __func__, __LINE__, argv[1] );
   \                     ??cmd_audio_23: (+1)
   \      0x230   0x686B             LDR      R3,[R5, #+4]
   \      0x232   0xF44F 0x721F      MOV      R2,#+636
   \      0x236   0x....             LDR.N    R1,??DataTable18_29
   \      0x238   0x....             LDR.N    R0,??DataTable18_41
   \      0x23A   0x.... 0x....      BL       printf
    637          	}
    638          
    639          	return 1;
   \                     ??cmd_audio_7: (+1)
   \      0x23E   0x2001             MOVS     R0,#+1
   \                     ??cmd_audio_1: (+1)
   \      0x240   0xBD76             POP      {R1,R2,R4-R6,PC}
    640          }
    641          
    642          
    643          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    644          int cmd_codec( int argc, char *argv[] )
    645          //========================================================================
    646          {
   \                     cmd_codec: (+1)
   \        0x0   0xB57C             PUSH     {R2-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    647          	//	audio [ loop / null / sine / spk / mute ] [0/1 - spk relay]
    648          	if ( argc < 2 )
   \        0x6   0x2C02             CMP      R4,#+2
   \        0x8   0xDA07             BGE.N    ??cmd_codec_0
    649          	{
    650          		printf( "%s(%d) - return\n", __func__, __LINE__ );
   \        0xA   0xF240 0x228A      MOVW     R2,#+650
   \        0xE   0x....             LDR.N    R1,??DataTable18_42
   \       0x10   0x....             LDR.N    R0,??DataTable18_30
   \       0x12   0x.... 0x....      BL       printf
    651          		return 0;
   \       0x16   0x2000             MOVS     R0,#+0
   \       0x18   0xE048             B.N      ??cmd_codec_1
    652          	}
    653          
    654          	int bOnOff = 0;
   \                     ??cmd_codec_0: (+1)
   \       0x1A   0x2600             MOVS     R6,#+0
    655          
    656          	if ( argc >= 3 )
   \       0x1C   0x2C03             CMP      R4,#+3
   \       0x1E   0xDB10             BLT.N    ??cmd_codec_2
    657          	{
    658          		if ( strcmp( argv[2], "1" ) == 0 )
   \       0x20   0x....             ADR.N    R1,??DataTable18_2
   \       0x22   0x68A8             LDR      R0,[R5, #+8]
   \       0x24   0x.... 0x....      BL       strcmp
   \       0x28   0x2800             CMP      R0,#+0
   \       0x2A   0xD102             BNE.N    ??cmd_codec_3
    659          		{
    660          			bOnOff = 1;
   \       0x2C   0x2001             MOVS     R0,#+1
   \       0x2E   0x0006             MOVS     R6,R0
   \       0x30   0xE007             B.N      ??cmd_codec_2
    661          		}
    662          		else if ( strcmp( argv[2], "0" ) == 0 )
   \                     ??cmd_codec_3: (+1)
   \       0x32   0x....             ADR.N    R1,??DataTable18_3
   \       0x34   0x68A8             LDR      R0,[R5, #+8]
   \       0x36   0x.... 0x....      BL       strcmp
   \       0x3A   0x2800             CMP      R0,#+0
   \       0x3C   0xD101             BNE.N    ??cmd_codec_2
    663          		{
    664          			bOnOff = 0;
   \       0x3E   0x2000             MOVS     R0,#+0
   \       0x40   0x0006             MOVS     R6,R0
    665          		}
    666          	}
    667          
    668          	if ( strcmp( argv[1], "init" ) == 0 )
   \                     ??cmd_codec_2: (+1)
   \       0x42   0x....             LDR.N    R1,??DataTable18_43
   \       0x44   0x6868             LDR      R0,[R5, #+4]
   \       0x46   0x.... 0x....      BL       strcmp
   \       0x4A   0x2800             CMP      R0,#+0
   \       0x4C   0xD108             BNE.N    ??cmd_codec_4
    669          	{
    670          		//	Audio Init
    671          		printf( "%s(%d) - init\n", __func__, __LINE__ );
   \       0x4E   0xF240 0x229F      MOVW     R2,#+671
   \       0x52   0x....             LDR.N    R1,??DataTable18_42
   \       0x54   0x....             LDR.N    R0,??DataTable18_44
   \       0x56   0x.... 0x....      BL       printf
    672          
    673          		AudioInit();
   \       0x5A   0x.... 0x....      BL       AudioInit
   \       0x5E   0xE024             B.N      ??cmd_codec_5
    674          	}
    675          	else if ( strcmp( argv[1], "mute" ) == 0 )
   \                     ??cmd_codec_4: (+1)
   \       0x60   0x....             LDR.N    R1,??DataTable18_45
   \       0x62   0x6868             LDR      R0,[R5, #+4]
   \       0x64   0x.... 0x....      BL       strcmp
   \       0x68   0x2800             CMP      R0,#+0
   \       0x6A   0xD108             BNE.N    ??cmd_codec_6
    676          	{
    677          		//	Audio Output Sine Wave
    678          		printf( "%s(%d) - %s(%d)\n", __func__, __LINE__, argv[1], bOnOff );
   \       0x6C   0x9600             STR      R6,[SP, #+0]
   \       0x6E   0x686B             LDR      R3,[R5, #+4]
   \       0x70   0xF240 0x22A6      MOVW     R2,#+678
   \       0x74   0x....             LDR.N    R1,??DataTable18_42
   \       0x76   0x....             LDR.N    R0,??DataTable18_46
   \       0x78   0x.... 0x....      BL       printf
   \       0x7C   0xE015             B.N      ??cmd_codec_5
    679          
    680          //		CodecMuteDAC( bOnOff );
    681          	}
    682          	else if ( strcmp( argv[1], "loop" ) == 0 )
   \                     ??cmd_codec_6: (+1)
   \       0x7E   0x....             LDR.N    R1,??DataTable18_34
   \       0x80   0x6868             LDR      R0,[R5, #+4]
   \       0x82   0x.... 0x....      BL       strcmp
   \       0x86   0x2800             CMP      R0,#+0
   \       0x88   0xD108             BNE.N    ??cmd_codec_7
    683          	{
    684          		//	Audio Codec Loopback
    685          		printf( "%s(%d) - %s(%d)\n", __func__, __LINE__, argv[1], bOnOff );
   \       0x8A   0x9600             STR      R6,[SP, #+0]
   \       0x8C   0x686B             LDR      R3,[R5, #+4]
   \       0x8E   0xF240 0x22AD      MOVW     R2,#+685
   \       0x92   0x....             LDR.N    R1,??DataTable18_42
   \       0x94   0x....             LDR.N    R0,??DataTable18_46
   \       0x96   0x.... 0x....      BL       printf
   \       0x9A   0xE006             B.N      ??cmd_codec_5
    686          
    687          //		CodecLoopback( bOnOff );
    688          	}
    689          	else
    690          	{
    691          		printf( "%s(%d) - Invalid Cmd : %s\n", __func__, __LINE__, argv[1] );
   \                     ??cmd_codec_7: (+1)
   \       0x9C   0x686B             LDR      R3,[R5, #+4]
   \       0x9E   0xF240 0x22B3      MOVW     R2,#+691
   \       0xA2   0x....             LDR.N    R1,??DataTable18_42
   \       0xA4   0x....             LDR.N    R0,??DataTable18_41
   \       0xA6   0x.... 0x....      BL       printf
    692          	}
    693          
    694          	return 1;
   \                     ??cmd_codec_5: (+1)
   \       0xAA   0x2001             MOVS     R0,#+1
   \                     ??cmd_codec_1: (+1)
   \       0xAC   0xBD76             POP      {R1,R2,R4-R6,PC}
    695          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17:
   \        0x0   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable17_1:
   \        0x0   0x73 0x70          DC8      "spk"          

   \              0x6B 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18:
   \        0x0   0x76 0x6F          DC8      "vol"          

   \              0x6C 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_1:
   \        0x0   0x6D 0x69          DC8      "mic"          

   \              0x63 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_2:
   \        0x0   0x31 0x00          DC8      "1",0x0,0x0    

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_3:
   \        0x0   0x30 0x00          DC8      "0",0x0,0x0    

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_4:
   \        0x0   0x....'....        DC32     g_bufAudioRx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_5:
   \        0x0   0x....'....        DC32     g_qBufAudioRx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_6:
   \        0x0   0x....'....        DC32     g_bufAudioTx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_7:
   \        0x0   0x....'....        DC32     g_qBufAudioTx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_8:
   \        0x0   0x....'....        DC32     sine_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_9:
   \        0x0   0x....'....        DC32     bufAudio

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_10:
   \        0x0   0x....'....        DC32     hi2s3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_11:
   \        0x0   0x....'....        DC32     speex_sine_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_12:
   \        0x0   0x....'....        DC32     `AudioInit::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_13:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_14:
   \        0x0   0x....'....        DC32     null_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_15:
   \        0x0   0x....'....        DC32     pCallback_I2SEx_TxRxCpltCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_16:
   \        0x0   0x....'....        DC32     g_nAudioIC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_17:
   \        0x0   0x....'....        DC32     hi2c1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_18:
   \        0x0   0x....'....        DC32     `InitCodecMAX9860::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_19:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_20:
   \        0x0   0x....'....        DC32     `AudioDMALoopback::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_21:
   \        0x0   0x....'....        DC32     Default_I2SEx_TxRxCpltCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_22:
   \        0x0   0x....'....        DC32     `AudioDMARFM::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_23:
   \        0x0   0x....'....        DC32     RFM_I2SEx_TxRxCpltCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_24:
   \        0x0   0x....'....        DC32     bufAudio+0x140

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_25:
   \        0x0   0x....'....        DC32     `AudioLoopbackDMASpeex::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_26:
   \        0x0   0x....'....        DC32     AudioSpeex_I2SEx_TxRxCpltCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_27:
   \        0x0   0x....'....        DC32     `AudioPlayDMASine::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_28:
   \        0x0   0x....'....        DC32     AudioSine_I2SEx_TxRxCpltCallback

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_29:
   \        0x0   0x....'....        DC32     `cmd_audio::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_30:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_31:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_32:
   \        0x0   0x4002'1000        DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_33:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_34:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_35:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_36:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_37:
   \        0x0   0x....'....        DC32     ?_10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_38:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_39:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_40:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_41:
   \        0x0   0x....'....        DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_42:
   \        0x0   0x....'....        DC32     `cmd_codec::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_43:
   \        0x0   0x....'....        DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_44:
   \        0x0   0x....'....        DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_45:
   \        0x0   0x....'....        DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable18_46:
   \        0x0   0x....'....        DC32     ?_22

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x25 0x73          DC8 "%s : [%d] %d / %d\012"

   \              0x20 0x3A    

   \              0x20 0x5B    

   \              0x25 0x64    

   \              0x5D 0x20    

   \              0x25 0x64    

   \              0x20 0x2F    

   \              0x20 0x25    

   \              0x64 0x0A    

   \              0x00
   \       0x13                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x25 0x73          DC8 "%s(%d)\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x25 0x73          DC8 "%s(%d) - return\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x72    

   \              0x65 0x74    

   \              0x75 0x72    

   \              0x6E 0x0A    

   \              0x00
   \       0x11                      DS8 3

   \                                 In section .rodata, align 4
   \        0x0   0x25 0x64          DC8 "%d"

   \              0x00
   \        0x3                      DS8 1

   \                                 In section .rodata, align 4
   \        0x0   0x73 0x70          DC8 "spk"

   \              0x6B 0x00

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Spk Relay : On\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x53    

   \              0x70 0x6B    

   \              0x20 0x52    

   \              0x65 0x6C    

   \              0x61 0x79    

   \              0x20 0x3A    

   \              0x20 0x4F    

   \              0x6E 0x0A    

   \              0x00
   \       0x19                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Spk Relay : Off\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x53    

   \              0x70 0x6B    

   \              0x20 0x52    

   \              0x65 0x6C    

   \              0x61 0x79    

   \              0x20 0x3A    

   \              0x20 0x4F    

   \              0x66 0x66    

   \              0x0A 0x00
   \       0x1A                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x6C 0x6F          DC8 "loop"

   \              0x6F 0x70    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x25 0x73          DC8 "%s(%d) - loop\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x6C    

   \              0x6F 0x6F    

   \              0x70 0x0A    

   \              0x00
   \        0xF                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x73 0x69          DC8 "sine"

   \              0x6E 0x65    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_10:
   \        0x0   0x25 0x73          DC8 "%s(%d) - sine\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x73    

   \              0x69 0x6E    

   \              0x65 0x0A    

   \              0x00
   \        0xF                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x73 0x74          DC8 "stop"

   \              0x6F 0x70    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x25 0x73          DC8 "%s(%d) - %s\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x25    

   \              0x73 0x0A    

   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \        0x0   0x76 0x6F          DC8 "vol"

   \              0x6C 0x00

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x25 0x73          DC8 "%s(%d) - invalid\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x69    

   \              0x6E 0x76    

   \              0x61 0x6C    

   \              0x69 0x64    

   \              0x0A 0x00
   \       0x12                      DS8 2

   \                                 In section .rodata, align 4
   \        0x0   0x6D 0x69          DC8 "mic"

   \              0x63 0x00

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Invalid Cmd : %s\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x49    

   \              0x6E 0x76    

   \              0x61 0x6C    

   \              0x69 0x64    

   \              0x20 0x43    

   \              0x6D 0x64    

   \              0x20 0x3A    

   \              0x20 0x25    

   \              0x73 0x0A    

   \              0x00
   \       0x1B                      DS8 1

   \                                 In section .rodata, align 2
   \        0x0   0x31 0x00          DC8 "1"

   \                                 In section .rodata, align 2
   \        0x0   0x30 0x00          DC8 "0"

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x69 0x6E          DC8 "init"

   \              0x69 0x74    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x25 0x73          DC8 "%s(%d) - init\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x69    

   \              0x6E 0x69    

   \              0x74 0x0A    

   \              0x00
   \        0xF                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x6D 0x75          DC8 "mute"

   \              0x74 0x65    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x25 0x73          DC8 "%s(%d) - %s(%d)\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x25    

   \              0x73 0x28    

   \              0x25 0x64    

   \              0x29 0x0A    

   \              0x00
   \       0x11                      DS8 3
    696          
    697          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   AudioDMALoopback
         8   -> HAL_I2SEx_TransmitReceive_DMA
         8   -> SetCallbackI2STxRxCplt
         8   -> printf
       8   AudioDMARFM
         8   -> HAL_I2SEx_TransmitReceive_DMA
         8   -> SetCallbackI2STxRxCplt
         8   -> printf
      32   AudioInit
        32   -> HAL_GetTick
        32   -> HAL_I2SEx_TransmitReceive_DMA
        32   -> __aeabi_memcpy
        32   -> printf
        32   -> qBufInit
       8   AudioLoopbackDMASpeex
         8   -> HAL_I2SEx_TransmitReceive_DMA
         8   -> SetCallbackI2STxRxCplt
         8   -> printf
       8   AudioMicVol
         8   -> HAL_I2C_IsDeviceReady
         8   -> WriteI2CCodec
       8   AudioPlayDMASine
         8   -> HAL_I2SEx_TransmitReceive_DMA
         8   -> SetCallbackI2STxRxCplt
         8   -> printf
       8   AudioSine_I2SEx_TxRxCpltCallback
         8   -> HAL_I2SEx_TransmitReceive_DMA
      16   AudioSpeex_I2SEx_TxRxCpltCallback
        16   -> HAL_I2SEx_TransmitReceive_DMA
        16   -> qBufGet
        16   -> qBufPut
       8   AudioSpkVol
         8   -> HAL_I2C_IsDeviceReady
         8   -> WriteI2CCodec
       8   AudioStop
         8   -> HAL_I2SEx_TransmitReceive_DMA
         8   -> SetCallbackI2STxRxCplt
      32   Default_I2SEx_TxRxCpltCallback
        32   -> HAL_I2SEx_TransmitReceive_DMA
        32   -> __aeabi_memcpy
       0   GetAudioIC
      32   HAL_I2SEx_TxRxCpltCallback
        32   -- Indirect call
        32   -> HAL_I2SEx_TransmitReceive_DMA
        32   -> __aeabi_memcpy
       8   InitCodecMAX9860
         8   -> SetAudioIC
         8   -> WriteI2CCodec
         8   -> printf
       0   SetAudioIC
       0   SetCallbackI2STxRxCplt
      56   WriteI2CCodec
        56   -> GetAudioIC
        56   -> HAL_I2C_Mem_Write
        56   -> __aeabi_memset
      24   cmd_audio
        24   -> AudioDMALoopback
        24   -> AudioPlayDMASine
        24   -> AudioStop
        24   -> HAL_GPIO_WritePin
        24   -> WriteI2CCodec
        24   -> printf
        24   -> sscanf
        24   -> strcmp
      24   cmd_codec
        24   -> AudioInit
        24   -> printf
        24   -> strcmp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable17
       4  ??DataTable17_1
       4  ??DataTable18
       4  ??DataTable18_1
       4  ??DataTable18_10
       4  ??DataTable18_11
       4  ??DataTable18_12
       4  ??DataTable18_13
       4  ??DataTable18_14
       4  ??DataTable18_15
       4  ??DataTable18_16
       4  ??DataTable18_17
       4  ??DataTable18_18
       4  ??DataTable18_19
       4  ??DataTable18_2
       4  ??DataTable18_20
       4  ??DataTable18_21
       4  ??DataTable18_22
       4  ??DataTable18_23
       4  ??DataTable18_24
       4  ??DataTable18_25
       4  ??DataTable18_26
       4  ??DataTable18_27
       4  ??DataTable18_28
       4  ??DataTable18_29
       4  ??DataTable18_3
       4  ??DataTable18_30
       4  ??DataTable18_31
       4  ??DataTable18_32
       4  ??DataTable18_33
       4  ??DataTable18_34
       4  ??DataTable18_35
       4  ??DataTable18_36
       4  ??DataTable18_37
       4  ??DataTable18_38
       4  ??DataTable18_39
       4  ??DataTable18_4
       4  ??DataTable18_40
       4  ??DataTable18_41
       4  ??DataTable18_42
       4  ??DataTable18_43
       4  ??DataTable18_44
       4  ??DataTable18_45
       4  ??DataTable18_46
       4  ??DataTable18_5
       4  ??DataTable18_6
       4  ??DataTable18_7
       4  ??DataTable18_8
       4  ??DataTable18_9
      20  ?_0
       8  ?_1
      16  ?_10
       8  ?_11
      16  ?_12
       4  ?_13
      20  ?_14
       4  ?_15
      28  ?_16
       2  ?_17
       2  ?_18
       8  ?_19
      20  ?_2
      16  ?_20
       8  ?_21
      20  ?_22
       4  ?_3
       4  ?_4
      28  ?_5
      28  ?_6
       8  ?_7
      16  ?_8
       8  ?_9
      48  AudioDMALoopback
      48  AudioDMARFM
     112  AudioInit
      48  AudioLoopbackDMASpeex
     162  AudioMicVol
      48  AudioPlayDMASine
      24  AudioSine_I2SEx_TxRxCpltCallback
      52  AudioSpeex_I2SEx_TxRxCpltCallback
      78  AudioSpkVol
      30  AudioStop
      48  Default_I2SEx_TxRxCpltCallback
       8  GetAudioIC
      66  HAL_I2SEx_TxRxCpltCallback
     130  InitCodecMAX9860
       8  SetAudioIC
       8  SetCallbackI2STxRxCplt
     108  WriteI2CCodec
     640  bufAudio
     640  bufAudioCodec
     578  cmd_audio
     174  cmd_codec
     480  g_bufAudioRx
     480  g_bufAudioTx
       4  g_nAudioIC
      16  g_qBufAudioRx
      16  g_qBufAudioTx
     512  null_table
       4  pCallback_I2SEx_TxRxCpltCallback
     120  r_audio_buff
     320  sine_table
     320  speex_sine_table
     120  t_audio_buff
     132  -- Other

 
 3'352 bytes in section .bss
   320 bytes in section .data
   428 bytes in section .rodata
 1'974 bytes in section .text
 
 1'974 bytes of CODE  memory
   428 bytes of CONST memory
 3'672 bytes of DATA  memory

Errors: none
Warnings: 24
