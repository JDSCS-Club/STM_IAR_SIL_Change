###############################################################################
#
#                                                         29/Sep/2022  16:58:16
# IAR ANSI C/C++ Compiler V9.20.3.326/W64 for ARM Functional Safety
# Copyright 1999-2022 IAR Systems AB.
#
#    Cpu mode                 =  thumb
#    Endian                   =  little
#    Source file              =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.c
#    Command line             =
#        -f
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\RFMProtocol.o.rsp
#        (C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.c -D
#        USE_HAL_DRIVER -D STM32F407xx -lC
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Library -o
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M4 -e
#        --fpu=VFPv4_sp --dlib_config "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.0 EWARM FS 9.20.3\arm\inc\c\DLib_Config_Full.h" -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/App\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../USB_DEVICE/Target\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Core/Inc\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/STM32F4xx_HAL_Driver/Inc/Legacy\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Core/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc\
#        -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Device/ST/STM32F4xx/Include\
#        -I C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/CMSIS/Include\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/radio/Si446x\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Drivers/display\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM/../Library\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\display\fonts\ -I
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\..\Drivers\STM32F4xx_HAL_Driver\Src\
#        -On --use_c++_inline -I "C:\Program Files\IAR Systems\Embedded
#        Workbench 9.0 EWARM FS 9.20.3\arm\CMSIS\Core\Include\\")
#        --dependencies=n
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\RFMProtocol.o.d
#    Locale                   =  C
#    List file                =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\List\Library\RFMProtocol.lst
#    Object file              =
#        C:\D\Git_Hub\STM_IAR_SIL_Change\EWARM\RFM\Obj\Library\RFMProtocol.o
#    Runtime model:              
#      __CPP_Runtime          =  1
#      __SystemLibrary        =  DLib
#      __dlib_file_descriptor =  1
#      __dlib_version         =  6
#      __iar_require _Printf  =  flags,widths
#
###############################################################################

C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.c
      1          /*------------------------------------------------------------------------------------------
      2          	Project			: RFM ( RF-Module )
      3          	Description		: RFM Protocol Header
      4          
      5          	Writer			: $Author: zlkit $
      6          	Revision		: $Rev: 1446 $
      7          	Date			: 2020. 02.
      8          	Copyright		: Piranti Corp.
      9          	 
     10          	Revision History 
     11          	1. 2020. 02.	: Created
     12          -------------------------------------------------------------------------------------------*/
     13          
     14          #include <stdio.h>				//	printf()
     15          #include <stdint.h>				//	uint8_t, ...
     16          
     17          #include <string.h>				//	memset()
     18          
     19          #include "typedef.h"			//	char_t, int32_t, ...
     20          
     21          #include "RFMProtocol.h"		//	RFM Protocol

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",293  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",311  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",419  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",457  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",462  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",484  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",510  Warning[Pe040]: 
          expected an identifier

  	};
  	 ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.h",518  Warning[Pe040]: 
          expected an identifier
     22          
     23          #include "radio.h"				//	vRadio_StartTx_Variable_Packet()

  # warning unrecognized compiler
    ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",744  Warning[Pa183]: 
          #warning directive: unrecognized compiler

  typedef unsigned char U8;
                        ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",788  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned int U16;
                       ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",789  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef unsigned long U32;
                        ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",790  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed char S8;
                      ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",792  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed int S16;
                     ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",793  Warning[Pe301]: 
          typedef name has already been declared (with same type)

  typedef signed long S32;
                      ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Drivers\radio\compiler_defs.h",794  Warning[Pe301]: 
          typedef name has already been declared (with same type)
     24          
     25          #include "Adafruit_SSD1306.h"	//	LCDPrintf()
     26          
     27          #include "main.h"				//	FLASH_ON_Pin / GPIO_PIN_SET / ...
     28          
     29          #include "ProcPkt.h"			//	SendPacekt()
     30          
     31          #include "version.h"			//	Version Info
     32          
     33          #include "rfm.h"				//	g_nManHopping
     34          
     35          #include "audio.h"				//	I2S_DMA_LOOP_SIZE
     36          
     37          #include "flash_if.h"			//	FLASH_If_Write()
     38          
     39          #include "eeprom.h"				//	AddrEEPUpgrMGN1
     40          
     41          #include "diag.h"
     42          
     43          #include "upgrade.h"
     44          
     45          #include "cli.h"
     46          
     47          //==========================================================================
     48          //	Define
     49          
     50          
     51          //==========================================================================
     52          //	Function
     53          
     54          
     55          //==========================================================================
     56          //		API
     57          //==========================================================================
     58          
     59          
     60          
     61          //==========================================================================
     62          //		Send Packet
     63          //==========================================================================
     64          
     65          //========================================================================

   \                                 In section .text, align 2, keep-with-next
     66          void _MakePktHdr	( RFMPkt *pPkt, uint8_t addrSrc, uint8_t addrDest, uint8_t nLen, uint8_t nPktCmd )
     67          //========================================================================
     68          {
   \                     _MakePktHdr: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x0005             MOVS     R5,R0
   \        0x6   0x000E             MOVS     R6,R1
   \        0x8   0x0017             MOVS     R7,R2
   \        0xA   0x4698             MOV      R8,R3
   \        0xC   0x9C06             LDR      R4,[SP, #+24]
     69          #if	defined(USE_HOPPING)
     70          
     71          	if ( nPktCmd == PktStat
     72          		|| nPktCmd == PktCmd
     73          		|| nPktCmd == PktUpgr
     74          		)
   \        0xE   0x0020             MOVS     R0,R4
   \       0x10   0xB2C0             UXTB     R0,R0
   \       0x12   0x2801             CMP      R0,#+1
   \       0x14   0xD007             BEQ.N    ??_MakePktHdr_0
   \       0x16   0x0020             MOVS     R0,R4
   \       0x18   0xB2C0             UXTB     R0,R0
   \       0x1A   0x2820             CMP      R0,#+32
   \       0x1C   0xD003             BEQ.N    ??_MakePktHdr_0
   \       0x1E   0x0020             MOVS     R0,R4
   \       0x20   0xB2C0             UXTB     R0,R0
   \       0x22   0x2840             CMP      R0,#+64
   \       0x24   0xD10C             BNE.N    ??_MakePktHdr_1
     75          	{
     76          		//	상태정보의 경우 Seq / ID : 0x00
     77          		pPkt->hdr.bHdrID		=	HdrID1;		//	Header ID #1
   \                     ??_MakePktHdr_0: (+1)
   \       0x26   0x0028             MOVS     R0,R5
   \       0x28   0x6801             LDR      R1,[R0, #+0]
   \       0x2A   0xF431 0x4140      BICS     R1,R1,#0xC000
   \       0x2E   0x6001             STR      R1,[R0, #+0]
     78          		pPkt->hdr.nSeq			=	0x00;		//	Sequence
   \       0x30   0x2000             MOVS     R0,#+0
   \       0x32   0x70A8             STRB     R0,[R5, #+2]
     79          		pPkt->hdr.nIDFlag		=	0x00;		//	ID Flag
   \       0x34   0x0028             MOVS     R0,R5
   \       0x36   0x6801             LDR      R1,[R0, #+0]
   \       0x38   0x0B89             LSRS     R1,R1,#+14
   \       0x3A   0x0389             LSLS     R1,R1,#+14
   \       0x3C   0x6001             STR      R1,[R0, #+0]
   \       0x3E   0xE02B             B.N      ??_MakePktHdr_2
     80          	}
     81          	else
     82          	{
     83          		g_nPktSeq++;
   \                     ??_MakePktHdr_1: (+1)
   \       0x40   0x.... 0x....      LDR.W    R1,??DataTable22_1
   \       0x44   0x7808             LDRB     R0,[R1, #+0]
   \       0x46   0x1C40             ADDS     R0,R0,#+1
   \       0x48   0x7008             STRB     R0,[R1, #+0]
     84          		if ( g_nPktSeq == 0 )
   \       0x4A   0x7808             LDRB     R0,[R1, #+0]
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD102             BNE.N    ??_MakePktHdr_3
     85          		{
     86          			g_nPktSeq++;
   \       0x50   0x7808             LDRB     R0,[R1, #+0]
   \       0x52   0x1C40             ADDS     R0,R0,#+1
   \       0x54   0x7008             STRB     R0,[R1, #+0]
     87          		}
     88          
     89          		pPkt->hdr.nSeq			=	g_nPktSeq;			//
   \                     ??_MakePktHdr_3: (+1)
   \       0x56   0x7808             LDRB     R0,[R1, #+0]
   \       0x58   0x70A8             STRB     R0,[R5, #+2]
     90          
     91          		if ( GetDevID() == DevRF900T )
   \       0x5A   0x.... 0x....      BL       GetDevID
   \       0x5E   0x2802             CMP      R0,#+2
   \       0x60   0xD10D             BNE.N    ??_MakePktHdr_4
     92          		{
     93          			//	송신기.
     94          			//		송신기의 송/수신반경과 수신기의 송/수신반경의 차이로 
     95          			//		송신기가 상태정보를 수신후에 수신기에 송신을 할때 범위에 도달하지 못하는 경우가 있으므로, 
     96          			//		수신기에서 중계를 할 수 있도록 송신기 ID만 설정하여 송신함.
     97          			pPkt->hdr.nIDFlag		= (uint16_t)	((uint16_t)0x1 << (uint16_t)GetCarNo());	//	송신기는 자신의 ID만 Set하여 전송.
   \       0x62   0x.... 0x....      BL       GetCarNo
   \       0x66   0x0029             MOVS     R1,R5
   \       0x68   0x680A             LDR      R2,[R1, #+0]
   \       0x6A   0x0B92             LSRS     R2,R2,#+14
   \       0x6C   0x0392             LSLS     R2,R2,#+14
   \       0x6E   0x2301             MOVS     R3,#+1
   \       0x70   0xFA13 0xF000      LSLS     R0,R3,R0
   \       0x74   0x0480             LSLS     R0,R0,#+18
   \       0x76   0x0C80             LSRS     R0,R0,#+18
   \       0x78   0x4310             ORRS     R0,R0,R2
   \       0x7A   0x6008             STR      R0,[R1, #+0]
   \       0x7C   0xE00C             B.N      ??_MakePktHdr_2
     98          		}
     99          		else
    100          		{
    101          			//	수신기.
    102          			pPkt->hdr.nIDFlag		=	 g_flagRspID;		//
   \                     ??_MakePktHdr_4: (+1)
   \       0x7E   0x.... 0x....      LDR.W    R0,??DataTable24
   \       0x82   0x8800             LDRH     R0,[R0, #+0]
   \       0x84   0x0480             LSLS     R0,R0,#+18
   \       0x86   0x0C80             LSRS     R0,R0,#+18
   \       0x88   0x0029             MOVS     R1,R5
   \       0x8A   0x680A             LDR      R2,[R1, #+0]
   \       0x8C   0x0B92             LSRS     R2,R2,#+14
   \       0x8E   0x0392             LSLS     R2,R2,#+14
   \       0x90   0x0480             LSLS     R0,R0,#+18
   \       0x92   0x0C80             LSRS     R0,R0,#+18
   \       0x94   0x4310             ORRS     R0,R0,R2
   \       0x96   0x6008             STR      R0,[R1, #+0]
    103          		}
    104          	}
    105          
    106          #else
    107          
    108          	pPkt->hdr.addrSrc		=	addrSrc;		//	Src Address
    109          	pPkt->hdr.addrDest		=	addrDest;		//	Broadcast
    110          	pPkt->hdr.nLen			=	nLen;			//	Length
    111          
    112          #endif
    113          
    114          	pPkt->hdr.nPktCmd		=	nPktCmd;		//	Status
   \                     ??_MakePktHdr_2: (+1)
   \       0x98   0x70EC             STRB     R4,[R5, #+3]
    115          }
   \       0x9A   0xE8BD 0x81F0      POP      {R4-R8,PC}
    116          
    117          #if defined(USE_CH_ISO_DEV)		//	장치별 채널분리.
    118          
    119          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    120          void _MakePktHdr2	( RFMPkt *pPkt, uint8_t nPktCmd )
    121          //========================================================================
    122          {
   \                     _MakePktHdr2: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
    123          	//	상태정보의 경우 Seq / ID : 0x00
    124          	pPkt->hdr2.bHdrID		=	HdrID2;				//	Header ID #1
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x6801             LDR      R1,[R0, #+0]
   \        0xA   0xF031 0x01C0      BICS     R1,R1,#0xC0
   \        0xE   0xF051 0x0140      ORRS     R1,R1,#0x40
   \       0x12   0x6001             STR      R1,[R0, #+0]
    125          	pPkt->hdr2.nSrcCh		=	GetChRx();			//	Source Channel
   \       0x14   0x.... 0x....      BL       GetChRx
   \       0x18   0x0021             MOVS     R1,R4
   \       0x1A   0x680A             LDR      R2,[R1, #+0]
   \       0x1C   0xF432 0x527C      BICS     R2,R2,#0x3F00
   \       0x20   0xB2C0             UXTB     R0,R0
   \       0x22   0x0200             LSLS     R0,R0,#+8
   \       0x24   0xF410 0x507C      ANDS     R0,R0,#0x3F00
   \       0x28   0x4310             ORRS     R0,R0,R2
   \       0x2A   0x6008             STR      R0,[R1, #+0]
    126          	pPkt->hdr2.nTS			=	GetTrainSetIdx();	//	ID Flag
   \       0x2C   0x.... 0x....      BL       GetTrainSetIdx
   \       0x30   0x0021             MOVS     R1,R4
   \       0x32   0x680A             LDR      R2,[R1, #+0]
   \       0x34   0x0992             LSRS     R2,R2,#+6
   \       0x36   0x0192             LSLS     R2,R2,#+6
   \       0x38   0xB2C0             UXTB     R0,R0
   \       0x3A   0xF010 0x003F      ANDS     R0,R0,#0x3F
   \       0x3E   0x4310             ORRS     R0,R0,R2
   \       0x40   0x6008             STR      R0,[R1, #+0]
    127          	pPkt->hdr2.nPktCmd		=	nPktCmd;			//	Status
   \       0x42   0x0028             MOVS     R0,R5
   \       0x44   0xB2C0             UXTB     R0,R0
   \       0x46   0xF8C4 0x0006      STR      R0,[R4, #+6]
    128          
    129          //	CLEAR_BIT(pPkt->hdr2.nTS, (0x1<<7));
    130          //	SET_BIT(pPkt->hdr2.nTS, (0x1<<6));
    131          
    132          #if defined( USE_RFT_REG_TO_RFM )
    133          	//	자신의 송신기 ID Flag 설정.	-	재수신 받지 않음.
    134          	if( GetRFTID() == 1 )
   \       0x4A   0x.... 0x....      BL       GetRFTID
   \       0x4E   0x2801             CMP      R0,#+1
   \       0x50   0xD10E             BNE.N    ??_MakePktHdr2_0
    135          	{
    136          		pPkt->hdr2.bRFT1	=	1;	//	SET_BIT( pPkt->hdr2.nSrcCh, (0x1<<6) );	//
   \       0x52   0x0020             MOVS     R0,R4
   \       0x54   0x6801             LDR      R1,[R0, #+0]
   \       0x56   0xF451 0x4180      ORRS     R1,R1,#0x4000
   \       0x5A   0x6001             STR      R1,[R0, #+0]
    137          		if( GetChPARFT() != 0 )
   \       0x5C   0x.... 0x....      BL       GetChPARFT
   \       0x60   0x2800             CMP      R0,#+0
   \       0x62   0xD017             BEQ.N    ??_MakePktHdr2_1
    138          		{
    139          			pPkt->hdr2.bRFT2	=	1;	//	송신기에 직접 전송하는경우.
   \       0x64   0x0020             MOVS     R0,R4
   \       0x66   0x6801             LDR      R1,[R0, #+0]
   \       0x68   0xF451 0x4100      ORRS     R1,R1,#0x8000
   \       0x6C   0x6001             STR      R1,[R0, #+0]
   \       0x6E   0xE011             B.N      ??_MakePktHdr2_1
    140          		}
    141          	}
    142          	else if( GetRFTID() == 2 )
   \                     ??_MakePktHdr2_0: (+1)
   \       0x70   0x.... 0x....      BL       GetRFTID
   \       0x74   0x2802             CMP      R0,#+2
   \       0x76   0xD10D             BNE.N    ??_MakePktHdr2_1
    143          	{
    144          		pPkt->hdr2.bRFT2	=	1;	//	SET_BIT( pPkt->hdr2.nSrcCh, (0x1<<7) );//
   \       0x78   0x0020             MOVS     R0,R4
   \       0x7A   0x6801             LDR      R1,[R0, #+0]
   \       0x7C   0xF451 0x4100      ORRS     R1,R1,#0x8000
   \       0x80   0x6001             STR      R1,[R0, #+0]
    145          		if( GetChPARFT() != 0 )
   \       0x82   0x.... 0x....      BL       GetChPARFT
   \       0x86   0x2800             CMP      R0,#+0
   \       0x88   0xD004             BEQ.N    ??_MakePktHdr2_1
    146          		{
    147          			pPkt->hdr2.bRFT1	=	1;	//	송신기에 직접 전송하는경우.
   \       0x8A   0x0020             MOVS     R0,R4
   \       0x8C   0x6801             LDR      R1,[R0, #+0]
   \       0x8E   0xF451 0x4180      ORRS     R1,R1,#0x4000
   \       0x92   0x6001             STR      R1,[R0, #+0]
    148          		}
    149          	}
    150          
    151          #endif
    152          }
   \                     ??_MakePktHdr2_1: (+1)
   \       0x94   0xBD31             POP      {R0,R4,R5,PC}
    153          
    154          #endif	//	defined(USE_CH_ISO_DEV)		//	장치별 채널분리.
    155          
    156          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
    157          void _MakeRFCmd( RFMPkt	*pPkt, S8 *sCmd, uint8_t nRSSI )
    158          //==========================================================================
    159          {
   \                     _MakeRFCmd: (+1)
   \        0x0   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
    160          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xA   0x22A0             MOVS     R2,#+160
   \        0xC   0x.... 0x....      LDR.W    R1,??DataTable23
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x14   0x.... 0x....      BL       printf
    161          
    162          	memset( pPkt, 0, sizeof( RFMPkt ) );
   \       0x18   0x2746             MOVS     R7,#+70
   \       0x1A   0xF05F 0x0800      MOVS     R8,#+0
   \       0x1E   0x46A1             MOV      R9,R4
   \       0x20   0x4642             MOV      R2,R8
   \       0x22   0x0039             MOVS     R1,R7
   \       0x24   0x4648             MOV      R0,R9
   \       0x26   0x.... 0x....      BL       __aeabi_memset
    163          
    164          	//========================================================================
    165          	//	Packet Header
    166          	_MakePktHdr( pPkt, (uint8_t)GetDevID(),(uint8_t) 0xFF, (uint8_t)RFPktDataLen,(uint8_t) PktCmd );
   \       0x2A   0x.... 0x....      BL       GetDevID
   \       0x2E   0x2120             MOVS     R1,#+32
   \       0x30   0x9100             STR      R1,[SP, #+0]
   \       0x32   0x233C             MOVS     R3,#+60
   \       0x34   0x22FF             MOVS     R2,#+255
   \       0x36   0x0001             MOVS     R1,R0
   \       0x38   0xB2C9             UXTB     R1,R1
   \       0x3A   0x0020             MOVS     R0,R4
   \       0x3C   0x.... 0x....      BL       _MakePktHdr
    167          
    168          	//========================================================================
    169          	//	Command
    170          	pPkt->dat.cmd.nRSSIOver = (int8_t)nRSSI;		//	명령 동작 RSSI 범위.
   \       0x40   0x72A6             STRB     R6,[R4, #+10]
    171          	strcpy( pPkt->dat.cmd.sCmd, sCmd );		//	명령 전송.
                 	        ^
Warning[Pe167]: argument of type "S8 *" is incompatible with parameter of type
          "char *"

  	strcpy( pPkt->dat.cmd.sCmd, sCmd );		//	명령 전송.
  	                            ^
"C:\D\Git_Hub\STM_IAR_SIL_Change\Library\RFMProtocol.c",171  Warning[Pe167]: 
          argument of type "S8 *" is incompatible with parameter of type "char
          const *"
   \       0x42   0x0029             MOVS     R1,R5
   \       0x44   0xF114 0x000E      ADDS     R0,R4,#+14
   \       0x48   0x.... 0x....      BL       strcpy
    172          
    173          	//========================================================================
    174          }
   \       0x4C   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}
    175          
    176          
    177          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    178          void SendStatReq( uint8_t nDestCh )
    179          //========================================================================
    180          {
   \                     SendStatReq: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB093             SUB      SP,SP,#+76
   \        0x4   0x0004             MOVS     R4,R0
    181          	if ( GetDbg() )
   \        0x6   0x.... 0x....      BL       GetDbg
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD006             BEQ.N    ??SendStatReq_0
    182          	{
    183          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xE   0x22B7             MOVS     R2,#+183
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable24_2
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x18   0x.... 0x....      BL       printf
    184          	}
    185          
    186          	RFMPkt			stPkt;
    187          	RFMPktStatReq	*pStatReq;
    188          
    189          	memset( &stPkt, 0, sizeof( stPkt ) );
   \                     ??SendStatReq_0: (+1)
   \       0x1C   0x2646             MOVS     R6,#+70
   \       0x1E   0x2700             MOVS     R7,#+0
   \       0x20   0xAD01             ADD      R5,SP,#+4
   \       0x22   0x003A             MOVS     R2,R7
   \       0x24   0x0031             MOVS     R1,R6
   \       0x26   0x0028             MOVS     R0,R5
   \       0x28   0x.... 0x....      BL       __aeabi_memset
    190          	pStatReq = (RFMPktStatReq *)&stPkt.dat.statReq;
   \       0x2C   0xF10D 0x050E      ADD      R5,SP,#+14
    191          
    192          	//========================================================================
    193          	//	Packet Header
    194          	_MakePktHdr( &stPkt, (uint8_t)GetDevID(), (uint8_t)0xFF, (uint8_t)sizeof( RFMPktStatReq ),(uint8_t) PktStatReq );
   \       0x30   0x.... 0x....      BL       GetDevID
   \       0x34   0x0001             MOVS     R1,R0
   \       0x36   0x2011             MOVS     R0,#+17
   \       0x38   0x9000             STR      R0,[SP, #+0]
   \       0x3A   0x2306             MOVS     R3,#+6
   \       0x3C   0x22FF             MOVS     R2,#+255
   \       0x3E   0xB2C9             UXTB     R1,R1
   \       0x40   0xA801             ADD      R0,SP,#+4
   \       0x42   0x.... 0x....      BL       _MakePktHdr
    195          
    196          	//========================================================================
    197          	//	Packet Body
    198          	pStatReq->nSrcCh	=	GetChRx();	//	수신받을 채널
   \       0x46   0x.... 0x....      BL       GetChRx
   \       0x4A   0x7028             STRB     R0,[R5, #+0]
    199          
    200          	pStatReq->nCarNo	=	GetCarNo();			//	호차번호.
   \       0x4C   0x.... 0x....      BL       GetCarNo
   \       0x50   0x7168             STRB     R0,[R5, #+5]
    201          	pStatReq->nTrainNo	=	GetTrainSetIdx();	//	편성번호.
   \       0x52   0x.... 0x....      BL       GetTrainSetIdx
   \       0x56   0x7128             STRB     R0,[R5, #+4]
    202          
    203          	//========================================================================
    204          	//	Send RF
    205          	SendPktCh( (uint8_t)nDestCh, (U8 *)&stPkt, (uint8_t)(sizeof( RFMPktHdr ) + sizeof( RFMPktStatReq )) );
   \       0x58   0x220A             MOVS     R2,#+10
   \       0x5A   0xA901             ADD      R1,SP,#+4
   \       0x5C   0x0020             MOVS     R0,R4
   \       0x5E   0xB2C0             UXTB     R0,R0
   \       0x60   0x.... 0x....      BL       SendPktCh
    206          }
   \       0x64   0xB013             ADD      SP,SP,#+76
   \       0x66   0xBDF0             POP      {R4-R7,PC}
    207          
    208          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    209          void SendStat( uint8_t nDestCh )
    210          //========================================================================
    211          {
   \                     SendStat: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB093             SUB      SP,SP,#+76
   \        0x4   0x0004             MOVS     R4,R0
    212          	//	RF Mode가 RFMModeNormal인 경우.
    213          	//		상태정보 전송.
    214          
    215          	if ( GetDbg() )
   \        0x6   0x.... 0x....      BL       GetDbg
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD006             BEQ.N    ??SendStat_0
    216          	{
    217          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xE   0x22D9             MOVS     R2,#+217
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable24_3
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x18   0x.... 0x....      BL       printf
    218          	}
    219          
    220          	RFMPkt		stPkt;
    221          	RFMPktStat	*pStat;
    222          
    223          	memset( &stPkt, 0, sizeof( stPkt ) );
   \                     ??SendStat_0: (+1)
   \       0x1C   0x2546             MOVS     R5,#+70
   \       0x1E   0x2600             MOVS     R6,#+0
   \       0x20   0xAF01             ADD      R7,SP,#+4
   \       0x22   0x0032             MOVS     R2,R6
   \       0x24   0x0029             MOVS     R1,R5
   \       0x26   0x0038             MOVS     R0,R7
   \       0x28   0x.... 0x....      BL       __aeabi_memset
    224          	pStat = (RFMPktStat *)&stPkt.dat.stat;
   \       0x2C   0xF10D 0x070E      ADD      R7,SP,#+14
    225          
    226          	//========================================================================
    227          	//	Packet Header
    228          	_MakePktHdr( &stPkt, (uint8_t)GetDevID(),(uint8_t) 0xFF,(uint8_t) sizeof( RFMPktStat ),(uint8_t) PktStat );
   \       0x30   0x.... 0x....      BL       GetDevID
   \       0x34   0x0001             MOVS     R1,R0
   \       0x36   0x2001             MOVS     R0,#+1
   \       0x38   0x9000             STR      R0,[SP, #+0]
   \       0x3A   0x2319             MOVS     R3,#+25
   \       0x3C   0x22FF             MOVS     R2,#+255
   \       0x3E   0xB2C9             UXTB     R1,R1
   \       0x40   0xA801             ADD      R0,SP,#+4
   \       0x42   0x.... 0x....      BL       _MakePktHdr
    229          
    230          	//========================================================================
    231          	//	Status Data
    232          	pStat->ver_main		=	APP_MAIN_VER;		//	1;
   \       0x46   0x2001             MOVS     R0,#+1
   \       0x48   0x73B8             STRB     R0,[R7, #+14]
    233          	pStat->ver_sub		=	APP_SUB_VER;		//	0;
   \       0x4A   0x2001             MOVS     R0,#+1
   \       0x4C   0x73F8             STRB     R0,[R7, #+15]
    234          	pStat->ver_det		=	APP_DETAIL_VER;		//	0;
   \       0x4E   0x2000             MOVS     R0,#+0
   \       0x50   0x8238             STRH     R0,[R7, #+16]
    235          	pStat->ver_build	=	APP_BUILD_VER;		//	0;
   \       0x52   0xF44F 0x7089      MOV      R0,#+274
   \       0x56   0x8278             STRH     R0,[R7, #+18]
    236          
    237          	pStat->nMagicNum	=	0xAA55;				//	패킷 요류검출용.
   \       0x58   0xF64A 0x2055      MOVW     R0,#+43605
   \       0x5C   0x8078             STRH     R0,[R7, #+2]
    238          
    239          	pStat->nCarNo		=	GetCarNo();
   \       0x5E   0x.... 0x....      BL       GetCarNo
   \       0x62   0x7378             STRB     R0,[R7, #+13]
    240          	pStat->nDevID		=	GetDevID();
   \       0x64   0x.... 0x....      BL       GetDevID
   \       0x68   0x7078             STRB     R0,[R7, #+1]
    241          
    242          	pStat->nTrainNo		=	GetTrainSetIdx();	//	편성번호.
   \       0x6A   0x.... 0x....      BL       GetTrainSetIdx
   \       0x6E   0x7338             STRB     R0,[R7, #+12]
    243          
    244          	pStat->upTime		=	HAL_GetTick();
   \       0x70   0x.... 0x....      BL       HAL_GetTick
   \       0x74   0x6078             STR      R0,[R7, #+4]
    245          
    246          	pStat->rspID		=	g_flagRspID;		//	Rsp ID Flag
   \       0x76   0x.... 0x....      LDR.W    R0,??DataTable24
   \       0x7A   0x8800             LDRH     R0,[R0, #+0]
   \       0x7C   0x82B8             STRH     R0,[R7, #+20]
    247          
    248          	pStat->nManHop		=	g_nManHopping;		//	Manual Hopping Setting
   \       0x7E   0x.... 0x....      LDR.W    R0,??DataTable24_4
   \       0x82   0x7800             LDRB     R0,[R0, #+0]
   \       0x84   0x75B8             STRB     R0,[R7, #+22]
    249          
    250          	pStat->nDevFlag		=	g_nDevFlag;			//	Device Flag : 조명 상태 등.
   \       0x86   0x.... 0x....      LDR.W    R0,??DataTable24_5
   \       0x8A   0x7800             LDRB     R0,[R0, #+0]
   \       0x8C   0x7638             STRB     R0,[R7, #+24]
    251          
    252          	pStat->nChRx		=	GetChRx();			//	수신 채널
   \       0x8E   0x.... 0x....      BL       GetChRx
   \       0x92   0x72B8             STRB     R0,[R7, #+10]
    253          
    254          	//========================================================================
    255          	//	Send RF
    256          #if defined(USE_CH_ISO_DEV)
    257          	//	상태정보는 송신기로 전송.
    258          	uint8_t nCh;
    259          
    260          	//========================================================================
    261          	if ( nDestCh == 0 )
   \       0x94   0x0020             MOVS     R0,R4
   \       0x96   0xB2C0             UXTB     R0,R0
   \       0x98   0x2800             CMP      R0,#+0
   \       0x9A   0xD101             BNE.N    ??SendStat_1
    262          	{
    263          		nCh = (uint8_t)ChTx_1;
   \       0x9C   0x2508             MOVS     R5,#+8
   \       0x9E   0xE000             B.N      ??SendStat_2
    264          	}
    265          	else
    266          	{
    267          		nCh = (uint8_t)nDestCh;
   \                     ??SendStat_1: (+1)
   \       0xA0   0x0025             MOVS     R5,R4
    268          	}
    269          	//========================================================================
    270          
    271          	SendPktCh((uint8_t)nCh, (U8 *)&stPkt, (uint8_t)(sizeof( RFMPktHdr ) + sizeof( RFMPktStat )) );
   \                     ??SendStat_2: (+1)
   \       0xA2   0x221D             MOVS     R2,#+29
   \       0xA4   0xA901             ADD      R1,SP,#+4
   \       0xA6   0x0028             MOVS     R0,R5
   \       0xA8   0xB2C0             UXTB     R0,R0
   \       0xAA   0x.... 0x....      BL       SendPktCh
    272          #else
    273          	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktStat ) );
    274          #endif
    275          	//========================================================================
    276          }
   \       0xAE   0xB013             ADD      SP,SP,#+76
   \       0xB0   0xBDF0             POP      {R4-R7,PC}
    277          
    278          
    279          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    280          void SendPA( uint8_t nStartStop )
    281          //========================================================================
    282          {
   \                     SendPA: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x0004             MOVS     R4,R0
    283          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x6   0xF240 0x121B      MOVW     R2,#+283
   \        0xA   0x.... 0x....      LDR.W    R1,??DataTable24_6
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x12   0x.... 0x....      BL       printf
    284          
    285          	RFMPkt				stPkt;
    286          	RFMPktCtrlPACall	*pPACall;
    287          
    288          	memset( &stPkt, 0, sizeof( stPkt ) );
   \       0x16   0x2646             MOVS     R6,#+70
   \       0x18   0x2700             MOVS     R7,#+0
   \       0x1A   0x466D             MOV      R5,SP
   \       0x1C   0x003A             MOVS     R2,R7
   \       0x1E   0x0031             MOVS     R1,R6
   \       0x20   0x0028             MOVS     R0,R5
   \       0x22   0x.... 0x....      BL       __aeabi_memset
    289          	pPACall = (RFMPktCtrlPACall *)&stPkt.dat.pacall;
   \       0x26   0xF10D 0x050A      ADD      R5,SP,#+10
    290          
    291          	//========================================================================
    292          	//	Packet Header
    293          #if defined(USE_CH_ISO_DEV)
    294          	_MakePktHdr2( &stPkt, (uint8_t)PktCtrlPaCall );
   \       0x2A   0x2108             MOVS     R1,#+8
   \       0x2C   0x4668             MOV      R0,SP
   \       0x2E   0x.... 0x....      BL       _MakePktHdr2
    295          #else
    296          	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktCtrlPACall ), PktCtrlPaCall );
    297          #endif
    298          
    299          	//========================================================================
    300          	//	Status Data
    301          	pPACall->nStartStop		=	nStartStop;
   \       0x32   0x702C             STRB     R4,[R5, #+0]
    302          
    303          	pPACall->nTypePACall	=	CtrlPA;
   \       0x34   0x2001             MOVS     R0,#+1
   \       0x36   0x7068             STRB     R0,[R5, #+1]
    304          
    305          	//========================================================================
    306          	//	Send RF
    307          
    308          #if defined(USE_CH_ISO_DEV)
    309          
    310          	if ( GetChPARFT() != 0 )
   \       0x38   0x.... 0x....      BL       GetChPARFT
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD006             BEQ.N    ??SendPA_0
    311          	{
    312          		//	송신기에 전송.
    313          		SendPktCh( (uint8_t)GetChPARFT(), (U8 *)&stPkt,
    314          			(uint8_t)(sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall )) );
   \       0x40   0x.... 0x....      BL       GetChPARFT
   \       0x44   0x2208             MOVS     R2,#+8
   \       0x46   0x4669             MOV      R1,SP
   \       0x48   0xB2C0             UXTB     R0,R0
   \       0x4A   0x.... 0x....      BL       SendPktCh
    315          	}
    316          
    317          	//	수신기에 전송
    318          	SendPktCh( (uint8_t)GetChPA(), (U8 *)&stPkt,
    319          			(uint8_t)(sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall )) );
   \                     ??SendPA_0: (+1)
   \       0x4E   0x.... 0x....      BL       GetChPA
   \       0x52   0x2208             MOVS     R2,#+8
   \       0x54   0x4669             MOV      R1,SP
   \       0x56   0xB2C0             UXTB     R0,R0
   \       0x58   0x.... 0x....      BL       SendPktCh
    320          
    321          #else
    322          	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );
    323          #endif
    324          
    325          	//========================================================================
    326          }
   \       0x5C   0xB013             ADD      SP,SP,#+76
   \       0x5E   0xBDF0             POP      {R4-R7,PC}
    327          
    328          
    329          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    330          void SendCall( uint8_t nStartStop )
    331          //========================================================================
    332          {
   \                     SendCall: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x0004             MOVS     R4,R0
    333          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x6   0xF240 0x124D      MOVW     R2,#+333
   \        0xA   0x.... 0x....      LDR.W    R1,??DataTable24_7
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x12   0x.... 0x....      BL       printf
    334          
    335          	RFMPkt			stPkt;
    336          	RFMPktCtrlPACall	*pPACall;
    337          
    338          	memset( &stPkt, 0, sizeof( stPkt ) );
   \       0x16   0x2646             MOVS     R6,#+70
   \       0x18   0x2700             MOVS     R7,#+0
   \       0x1A   0x466D             MOV      R5,SP
   \       0x1C   0x003A             MOVS     R2,R7
   \       0x1E   0x0031             MOVS     R1,R6
   \       0x20   0x0028             MOVS     R0,R5
   \       0x22   0x.... 0x....      BL       __aeabi_memset
    339          	pPACall = (RFMPktCtrlPACall *)&stPkt.dat.pacall;
   \       0x26   0xF10D 0x050A      ADD      R5,SP,#+10
    340          
    341          	//========================================================================
    342          	//	Packet Header
    343          #if defined(USE_CH_ISO_DEV)
    344          	_MakePktHdr2( &stPkt, (uint8_t)PktCtrlPaCall );
   \       0x2A   0x2108             MOVS     R1,#+8
   \       0x2C   0x4668             MOV      R0,SP
   \       0x2E   0x.... 0x....      BL       _MakePktHdr2
    345          #else
    346          	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktCtrlPACall ), PktCtrlPaCall );
    347          #endif
    348          
    349          	//========================================================================
    350          	//	Status Data
    351          	pPACall->nStartStop		=	nStartStop;
   \       0x32   0x702C             STRB     R4,[R5, #+0]
    352          
    353          	pPACall->nTypePACall	=	CtrlCall;
   \       0x34   0x2002             MOVS     R0,#+2
   \       0x36   0x7068             STRB     R0,[R5, #+1]
    354          
    355          	//========================================================================
    356          	//	Send RF
    357          
    358          #if defined(USE_CH_ISO_DEV)
    359          
    360          	if ( GetChPARFT() != 0 )
   \       0x38   0x.... 0x....      BL       GetChPARFT
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD007             BEQ.N    ??SendCall_0
    361          	{
    362          		//	송신기에 직접 전송.
    363          		SendPktCh( (uint8_t)GetChPARFT(), (U8 *)&stPkt,
    364          				(uint8_t)(sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall )) );
   \       0x40   0x.... 0x....      BL       GetChPARFT
   \       0x44   0x2208             MOVS     R2,#+8
   \       0x46   0x4669             MOV      R1,SP
   \       0x48   0xB2C0             UXTB     R0,R0
   \       0x4A   0x.... 0x....      BL       SendPktCh
   \       0x4E   0xE006             B.N      ??SendCall_1
    365          	}
    366          	else
    367          	{
    368          		//	수신기를 통해 전송.
    369          		SendPktCh( (uint8_t)GetChPA(),	//GetChOtherRFT(),
    370          				(U8 *)&stPkt,
    371          				(uint8_t)(sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall )) );
   \                     ??SendCall_0: (+1)
   \       0x50   0x.... 0x....      BL       GetChPA
   \       0x54   0x2208             MOVS     R2,#+8
   \       0x56   0x4669             MOV      R1,SP
   \       0x58   0xB2C0             UXTB     R0,R0
   \       0x5A   0x.... 0x....      BL       SendPktCh
    372          	}
    373          
    374          #else
    375          
    376          	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );
    377          
    378          #endif
    379          
    380          	//========================================================================
    381          }
   \                     ??SendCall_1: (+1)
   \       0x5E   0xB013             ADD      SP,SP,#+76
   \       0x60   0xBDF0             POP      {R4-R7,PC}
    382          
    383          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    384          void SendOCCPA( uint8_t nStartStop )
    385          //========================================================================
    386          {
   \                     SendOCCPA: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x0004             MOVS     R4,R0
    387          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x6   0xF240 0x1283      MOVW     R2,#+387
   \        0xA   0x.... 0x....      LDR.W    R1,??DataTable24_8
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x12   0x.... 0x....      BL       printf
    388          
    389          	RFMPkt				stPkt;
    390          	RFMPktCtrlPACall	*pPACall;
    391          
    392          	memset( &stPkt, 0, sizeof( stPkt ) );
   \       0x16   0x2646             MOVS     R6,#+70
   \       0x18   0x2700             MOVS     R7,#+0
   \       0x1A   0x466D             MOV      R5,SP
   \       0x1C   0x003A             MOVS     R2,R7
   \       0x1E   0x0031             MOVS     R1,R6
   \       0x20   0x0028             MOVS     R0,R5
   \       0x22   0x.... 0x....      BL       __aeabi_memset
    393          	pPACall = (RFMPktCtrlPACall *)&stPkt.dat.pacall;
   \       0x26   0xF10D 0x050A      ADD      R5,SP,#+10
    394          
    395          	//========================================================================
    396          	//	Packet Header
    397          #if defined(USE_CH_ISO_DEV)
    398          	_MakePktHdr2( &stPkt, (uint8_t)PktCtrlPaCall );
   \       0x2A   0x2108             MOVS     R1,#+8
   \       0x2C   0x4668             MOV      R0,SP
   \       0x2E   0x.... 0x....      BL       _MakePktHdr2
    399          #else
    400          	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktCtrlPACall ), PktCtrlPaCall );
    401          #endif
    402          
    403          	//========================================================================
    404          	//	Status Data
    405          	pPACall->nStartStop		=	nStartStop;
   \       0x32   0x702C             STRB     R4,[R5, #+0]
    406          
    407          	pPACall->nTypePACall	=	CtrlOccPa;
   \       0x34   0x2003             MOVS     R0,#+3
   \       0x36   0x7068             STRB     R0,[R5, #+1]
    408          
    409          	//========================================================================
    410          	//	Send RF
    411          
    412          #if defined(USE_CH_ISO_DEV)
    413          
    414          	if ( GetChPARFT() != 0 )
   \       0x38   0x.... 0x....      BL       GetChPARFT
   \       0x3C   0x2800             CMP      R0,#+0
   \       0x3E   0xD006             BEQ.N    ??SendOCCPA_0
    415          	{
    416          		//	송신기에 전송.
    417          		SendPktCh( (uint8_t)GetChPARFT(), (U8 *)&stPkt,
    418          				(uint8_t)(sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall )) );
   \       0x40   0x.... 0x....      BL       GetChPARFT
   \       0x44   0x2208             MOVS     R2,#+8
   \       0x46   0x4669             MOV      R1,SP
   \       0x48   0xB2C0             UXTB     R0,R0
   \       0x4A   0x.... 0x....      BL       SendPktCh
    419          	}
    420          
    421          	//	수신기에 전송
    422          	SendPktCh( (uint8_t)GetChPA(), (U8 *)&stPkt,
    423          			(uint8_t)(sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) ));
   \                     ??SendOCCPA_0: (+1)
   \       0x4E   0x.... 0x....      BL       GetChPA
   \       0x52   0x2208             MOVS     R2,#+8
   \       0x54   0x4669             MOV      R1,SP
   \       0x56   0xB2C0             UXTB     R0,R0
   \       0x58   0x.... 0x....      BL       SendPktCh
    424          
    425          #else
    426          	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktCtrlPACall ) );
    427          #endif
    428          
    429          	//========================================================================
    430          }
   \       0x5C   0xB013             ADD      SP,SP,#+76
   \       0x5E   0xBDF0             POP      {R4-R7,PC}
    431          
    432          
    433          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    434          void SendLight( uint8_t nOnOff )
    435          //========================================================================
    436          {
   \                     SendLight: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x0004             MOVS     R4,R0
    437          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x6   0xF240 0x12B5      MOVW     R2,#+437
   \        0xA   0x.... 0x....      LDR.W    R1,??DataTable24_9
   \        0xE   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x12   0x.... 0x....      BL       printf
    438          
    439          	RFMPkt			stPkt;
    440          	RFMPktLight		*pLight;
    441          
    442          	memset( &stPkt, 0, sizeof( stPkt ) );
   \       0x16   0x2646             MOVS     R6,#+70
   \       0x18   0x2700             MOVS     R7,#+0
   \       0x1A   0x466D             MOV      R5,SP
   \       0x1C   0x003A             MOVS     R2,R7
   \       0x1E   0x0031             MOVS     R1,R6
   \       0x20   0x0028             MOVS     R0,R5
   \       0x22   0x.... 0x....      BL       __aeabi_memset
    443          	pLight = (RFMPktLight *)&stPkt.dat.light;
   \       0x26   0xF10D 0x050A      ADD      R5,SP,#+10
    444          
    445          	//========================================================================
    446          	//	Packet Header
    447          #if defined(USE_CH_ISO_DEV)
    448          
    449          	_MakePktHdr2( &stPkt,(uint8_t) PktLight );
   \       0x2A   0x2104             MOVS     R1,#+4
   \       0x2C   0x4668             MOV      R0,SP
   \       0x2E   0x.... 0x....      BL       _MakePktHdr2
    450          
    451          #else
    452          
    453          	_MakePktHdr( &stPkt, GetDevID(), 0xFF, sizeof( RFMPktLight ), PktLight );
    454          
    455          #endif
    456          
    457          	//========================================================================
    458          	//	Status Data
    459          	pLight->nOnOff = nOnOff;
   \       0x32   0x702C             STRB     R4,[R5, #+0]
    460          
    461          	//========================================================================
    462          	//	Send RF
    463          #if defined(USE_CH_ISO_DEV)
    464          
    465          	SendPktCh( (uint8_t)GetChPA(), (U8 *)&stPkt,
    466          			(uint8_t)(sizeof( RFMPktHdr ) + sizeof( RFMPktLight )) );
   \       0x34   0x.... 0x....      BL       GetChPA
   \       0x38   0x2208             MOVS     R2,#+8
   \       0x3A   0x4669             MOV      R1,SP
   \       0x3C   0xB2C0             UXTB     R0,R0
   \       0x3E   0x.... 0x....      BL       SendPktCh
    467          
    468          #else
    469          
    470          	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + sizeof( RFMPktLight ) );
    471          
    472          #endif
    473          
    474          	//========================================================================
    475          }
   \       0x42   0xB013             ADD      SP,SP,#+76
   \       0x44   0xBDF0             POP      {R4-R7,PC}
    476          
    477          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
    478          void SendLightOn( void )
    479          //==========================================================================
    480          {
   \                     SendLightOn: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    481          	SendLight((uint8_t) 1 );		//	Light On
   \        0x2   0x2001             MOVS     R0,#+1
   \        0x4   0x.... 0x....      BL       SendLight
    482          }
   \        0x8   0xBD01             POP      {R0,PC}
    483          
    484          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
    485          void SendLightOff( void )
    486          //==========================================================================
    487          {
   \                     SendLightOff: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    488          	SendLight((uint8_t) 0 );		//	Light Off
   \        0x2   0x2000             MOVS     R0,#+0
   \        0x4   0x.... 0x....      BL       SendLight
    489          }
   \        0x8   0xBD01             POP      {R0,PC}
    490          
    491          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
    492          void SendRFCmdCh( uint8_t nCh, char *sCmd, uint8_t nRSSI )
    493          //==========================================================================
    494          {
   \                     SendRFCmdCh: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
   \        0x8   0x0016             MOVS     R6,R2
    495          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xA   0xF240 0x12EF      MOVW     R2,#+495
   \        0xE   0x.... 0x....      LDR.W    R1,??DataTable24_10
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x16   0x.... 0x....      BL       printf
    496          	//========================================================================
    497          	RFMPkt			stPkt;
    498          	_MakeRFCmd( &stPkt, sCmd, (uint8_t)nRSSI );
                 	                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "S8 *"
   \       0x1A   0x0032             MOVS     R2,R6
   \       0x1C   0xB2D2             UXTB     R2,R2
   \       0x1E   0x0029             MOVS     R1,R5
   \       0x20   0x4668             MOV      R0,SP
   \       0x22   0x.... 0x....      BL       _MakeRFCmd
    499          
    500          	//========================================================================
    501          	//	Send RF
    502          	SendPktCh( (uint8_t)nCh, (U8 *)&stPkt, (uint8_t)(sizeof( RFMPktHdr ) + RFPktDataLen) );
   \       0x26   0x2240             MOVS     R2,#+64
   \       0x28   0x4669             MOV      R1,SP
   \       0x2A   0x0020             MOVS     R0,R4
   \       0x2C   0xB2C0             UXTB     R0,R0
   \       0x2E   0x.... 0x....      BL       SendPktCh
    503          	//========================================================================
    504          }
   \       0x32   0xB012             ADD      SP,SP,#+72
   \       0x34   0xBD70             POP      {R4-R6,PC}
    505          
    506          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
    507          void SendRFCmd( char *sCmd, uint8_t nRSSI )
    508          //==========================================================================
    509          {
   \                     SendRFCmd: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
   \        0x4   0x0004             MOVS     R4,R0
   \        0x6   0x000D             MOVS     R5,R1
    510          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x8   0xF44F 0x72FF      MOV      R2,#+510
   \        0xC   0x.... 0x....      LDR.W    R1,??DataTable24_11
   \       0x10   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x14   0x.... 0x....      BL       printf
    511          	//========================================================================
    512          	RFMPkt			stPkt;
    513          	_MakeRFCmd( &stPkt, sCmd, (uint8_t)nRSSI );
                 	                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "S8 *"
   \       0x18   0x002A             MOVS     R2,R5
   \       0x1A   0xB2D2             UXTB     R2,R2
   \       0x1C   0x0021             MOVS     R1,R4
   \       0x1E   0x4668             MOV      R0,SP
   \       0x20   0x.... 0x....      BL       _MakeRFCmd
    514          
    515          	//========================================================================
    516          	//	Send RF
    517          //	SendPacket( (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
    518          
    519          	//========================================================================
    520          	//	모든 수신기로 전송.
    521          	for ( uint8_t nCh = (uint8_t)ChTS_base; nCh < (uint8_t)(ChTS1_1 + (ChGap * 10)); nCh++ )
   \       0x24   0x260B             MOVS     R6,#+11
   \                     ??SendRFCmd_0: (+1)
   \       0x26   0x0030             MOVS     R0,R6
   \       0x28   0xB2C0             UXTB     R0,R0
   \       0x2A   0x283D             CMP      R0,#+61
   \       0x2C   0xDA0A             BGE.N    ??SendRFCmd_1
    522          	{
    523          		SendPktCh( (uint8_t)nCh, (U8 *)&stPkt, (uint8_t)(sizeof( RFMPktHdr ) + RFPktDataLen ));
   \       0x2E   0x2240             MOVS     R2,#+64
   \       0x30   0x4669             MOV      R1,SP
   \       0x32   0x0030             MOVS     R0,R6
   \       0x34   0xB2C0             UXTB     R0,R0
   \       0x36   0x.... 0x....      BL       SendPktCh
    524          
    525          		HAL_Delay((uint32_t)3);	//	Tx Delay
   \       0x3A   0x2003             MOVS     R0,#+3
   \       0x3C   0x.... 0x....      BL       HAL_Delay
    526          	}
   \       0x40   0x1C76             ADDS     R6,R6,#+1
   \       0x42   0xE7F0             B.N      ??SendRFCmd_0
    527          	//========================================================================
    528          }
   \                     ??SendRFCmd_1: (+1)
   \       0x44   0xB012             ADD      SP,SP,#+72
   \       0x46   0xBD70             POP      {R4-R6,PC}
    529          
    530          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
    531          void SendRFCmdReset( void )
    532          //==========================================================================
    533          {
   \                     SendRFCmdReset: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB092             SUB      SP,SP,#+72
    534          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x4   0xF240 0x2216      MOVW     R2,#+534
   \        0x8   0x.... 0x....      LDR.W    R1,??DataTable24_12
   \        0xC   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x10   0x.... 0x....      BL       printf
    535          
    536          	SendRFCmd( "reset", (uint8_t)190 );
   \       0x14   0x.... 0x....      LDR.W    R4,??DataTable24_13
   \       0x18   0x21BE             MOVS     R1,#+190
   \       0x1A   0x0020             MOVS     R0,R4
   \       0x1C   0x.... 0x....      BL       SendRFCmd
    537          
    538          	//========================================================================
    539          	//	Reset시 Upgrade채널도 reset
    540          	RFMPkt			stPkt;
    541          	_MakeRFCmd( &stPkt, "reset", (uint8_t)190 );
   \       0x20   0x22BE             MOVS     R2,#+190
   \       0x22   0x0021             MOVS     R1,R4
   \       0x24   0x4668             MOV      R0,SP
   \       0x26   0x.... 0x....      BL       _MakeRFCmd
    542          	SendPktCh((uint8_t) ChUpgrDst, (U8 *)&stPkt, (uint8_t)(sizeof( RFMPktHdr ) + RFPktDataLen) );
   \       0x2A   0x2240             MOVS     R2,#+64
   \       0x2C   0x4669             MOV      R1,SP
   \       0x2E   0x2003             MOVS     R0,#+3
   \       0x30   0x.... 0x....      BL       SendPktCh
    543          	//========================================================================
    544          }
   \       0x34   0xB012             ADD      SP,SP,#+72
   \       0x36   0xBD10             POP      {R4,PC}
    545          
    546          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
    547          void SendRFCmdDFUMode( void )
    548          //==========================================================================
    549          {
   \                     SendRFCmdDFUMode: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    550          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x2   0xF240 0x2226      MOVW     R2,#+550
   \        0x6   0x.... 0x....      LDR.W    R1,??DataTable24_14
   \        0xA   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \        0xE   0x.... 0x....      BL       printf
    551          	//==========================================================================
    552          	SendRFCmd( "stboot", (uint8_t)247 );	//	DFU모드의 경우 아주 근접(RSSI-247)하지 않으면 동작하지 않도록 한다!!!
   \       0x12   0x21F7             MOVS     R1,#+247
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable24_15
   \       0x18   0x.... 0x....      BL       SendRFCmd
    553          	//==========================================================================
    554          }
   \       0x1C   0xBD01             POP      {R0,PC}
    555          
    556          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
    557          void SendRFCmdUpgrade( uint16_t bRetry )
    558          //==========================================================================
    559          {
   \                     SendRFCmdUpgrade: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    560          	//==========================================================================
    561          	//	송신기에서 Upgrade 명령 전송.
    562          	//==========================================================================
    563          
    564          	printf( "%s(%d)\n", __func__, __LINE__ );
   \        0x4   0xF44F 0x720D      MOV      R2,#+564
   \        0x8   0x.... 0x....      LDR.W    R1,??DataTable24_16
   \        0xC   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x10   0x.... 0x....      BL       printf
    565          	//==========================================================================
    566          	//	Upgrade Start Command
    567          
    568          	if ( bRetry )
   \       0x14   0x0020             MOVS     R0,R4
   \       0x16   0xB280             UXTH     R0,R0
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD006             BEQ.N    ??SendRFCmdUpgrade_0
    569          	{
    570          		//	Upgrade 채널로 전송
    571          		//	Upgrade Mode로 변경.
    572          		SendRFCmdCh( (uint8_t)ChUpgrDst, (char *)"upgrade 1", (uint8_t) 200 );	//	DFU모드의 경우 근접(RSSI-200)하지 않으면 동작하지 않도록 한다!!!
   \       0x1C   0x22C8             MOVS     R2,#+200
   \       0x1E   0x.... 0x....      LDR.W    R1,??DataTable24_17
   \       0x22   0x2003             MOVS     R0,#+3
   \       0x24   0x.... 0x....      BL       SendRFCmdCh
   \       0x28   0xE004             B.N      ??SendRFCmdUpgrade_1
    573          	}
    574          	else
    575          	{
    576          		//	Upgrade Mode로 변경.
    577          		SendRFCmd( (char *)"upgrade 1", (uint8_t)200 );	//	DFU모드의 경우 근접(RSSI-200)하지 않으면 동작하지 않도록 한다!!!
   \                     ??SendRFCmdUpgrade_0: (+1)
   \       0x2A   0x21C8             MOVS     R1,#+200
   \       0x2C   0x.... 0x....      LDR.W    R0,??DataTable24_17
   \       0x30   0x.... 0x....      BL       SendRFCmd
    578          	}
    579          	//==========================================================================
    580          
    581          	SetUpgrReTry((uint16_t) bRetry );			//	Retry 설정.
   \                     ??SendRFCmdUpgrade_1: (+1)
   \       0x34   0x0020             MOVS     R0,R4
   \       0x36   0xB280             UXTH     R0,R0
   \       0x38   0x.... 0x....      BL       SetUpgrReTry
    582          
    583          	HAL_Delay( (uint32_t)500 );	//	sleep 200 msec
   \       0x3C   0xF44F 0x70FA      MOV      R0,#+500
   \       0x40   0x.... 0x....      BL       HAL_Delay
    584          
    585          	//========================================================================
    586          	//	Upgrade Image 전송.
    587          	UpgrSendImageApp();
   \       0x44   0x.... 0x....      BL       UpgrSendImageApp
    588          	//========================================================================
    589          
    590          	//==========================================================================
    591          	//	Upgrade End Command
    592          //DEL	SendRFCmd( "upgrade 0", 200 );	//	DFU모드의 경우 근접(RSSI-200)하지 않으면 동작하지 않도록 한다!!!
    593          	//==========================================================================
    594          }
   \       0x48   0xBD10             POP      {R4,PC}
    595          
    596          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
    597          void	SendUpgrData		( uint32_t nAddrTarget, uint16_t nPktTot, uint16_t nPktIdx, uint8_t *sBuf, uint8_t nSize )	//	Send Upgrade Data
    598          //==========================================================================
    599          {
   \                     SendUpgrData: (+1)
   \        0x0   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \        0x4   0xB093             SUB      SP,SP,#+76
   \        0x6   0x0005             MOVS     R5,R0
   \        0x8   0x000E             MOVS     R6,R1
   \        0xA   0x0017             MOVS     R7,R2
   \        0xC   0x4698             MOV      R8,R3
   \        0xE   0x9C1C             LDR      R4,[SP, #+112]
    600          //	printf( "%s(%d)\n", __func__, __LINE__ );
    601          
    602          	RFMPkt			stPkt;
    603          	memset( &stPkt, 0, sizeof( stPkt ) );
   \       0x10   0xF05F 0x0946      MOVS     R9,#+70
   \       0x14   0xF05F 0x0A00      MOVS     R10,#+0
   \       0x18   0xF10D 0x0B04      ADD      R11,SP,#+4
   \       0x1C   0x4652             MOV      R2,R10
   \       0x1E   0x4649             MOV      R1,R9
   \       0x20   0x4658             MOV      R0,R11
   \       0x22   0x.... 0x....      BL       __aeabi_memset
    604          
    605          	//========================================================================
    606          	//	Packet Header
    607          	_MakePktHdr( &stPkt, (uint8_t)GetDevID(), (uint8_t)0xFF, (uint8_t)RFPktDataLen,(uint8_t) PktUpgr );
   \       0x26   0x.... 0x....      BL       GetDevID
   \       0x2A   0x2140             MOVS     R1,#+64
   \       0x2C   0x9100             STR      R1,[SP, #+0]
   \       0x2E   0x233C             MOVS     R3,#+60
   \       0x30   0x22FF             MOVS     R2,#+255
   \       0x32   0x0001             MOVS     R1,R0
   \       0x34   0xB2C9             UXTB     R1,R1
   \       0x36   0xA801             ADD      R0,SP,#+4
   \       0x38   0x.... 0x....      BL       _MakePktHdr
    608          
    609          	//========================================================================
    610          	//	Packet Body
    611          	RFMPktUpgr	*pUpgr = (RFMPktUpgr *)&stPkt.dat.upgr;
   \       0x3C   0xF10D 0x0B0E      ADD      R11,SP,#+14
    612          
    613          	pUpgr->baseAddr		=	nAddrTarget;
   \       0x40   0xF8CB 0x5000      STR      R5,[R11, #+0]
    614          	pUpgr->totPkt		=	nPktTot;
   \       0x44   0xF8AB 0x6004      STRH     R6,[R11, #+4]
    615          	pUpgr->idxPkt		=	nPktIdx;
   \       0x48   0xF8AB 0x7006      STRH     R7,[R11, #+6]
    616          	pUpgr->nSize		=	nSize;
   \       0x4C   0xF88B 0x4008      STRB     R4,[R11, #+8]
    617          
    618          	if( GetUpgrReTry() )
   \       0x50   0x.... 0x....      BL       GetUpgrReTry
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD005             BEQ.N    ??SendUpgrData_0
    619          	{
    620          		pUpgr->bFlag	|=	PktUpgrFlagRetry;	//	Retry Flag
   \       0x58   0xF89B 0x0009      LDRB     R0,[R11, #+9]
   \       0x5C   0xF050 0x0001      ORRS     R0,R0,#0x1
   \       0x60   0xF88B 0x0009      STRB     R0,[R11, #+9]
    621          	}
    622          
    623          	memcpy( pUpgr->data, sBuf, (uint32_t)nSize );
   \                     ??SendUpgrData_0: (+1)
   \       0x64   0x46A1             MOV      R9,R4
   \       0x66   0xFA5F 0xF989      UXTB     R9,R9
   \       0x6A   0xF8CD 0x8000      STR      R8,[SP, #+0]
   \       0x6E   0xF11B 0x0A0A      ADDS     R10,R11,#+10
   \       0x72   0x464A             MOV      R2,R9
   \       0x74   0x9900             LDR      R1,[SP, #+0]
   \       0x76   0x4650             MOV      R0,R10
   \       0x78   0x.... 0x....      BL       __aeabi_memcpy
    624          
    625          	//========================================================================
    626          	//	Send RF
    627          	SendPktCh( (uint8_t)ChUpgrDst, (U8 *)&stPkt, (uint8_t)(sizeof( RFMPktHdr ) + RFPktDataLen) );
   \       0x7C   0x2240             MOVS     R2,#+64
   \       0x7E   0xA901             ADD      R1,SP,#+4
   \       0x80   0x2003             MOVS     R0,#+3
   \       0x82   0x.... 0x....      BL       SendPktCh
    628          
    629          	//========================================================================
    630          }
   \       0x86   0xB013             ADD      SP,SP,#+76
   \       0x88   0xE8BD 0x8FF0      POP      {R4-R11,PC}
    631          
    632          //==========================================================================

   \                                 In section .text, align 2, keep-with-next
    633          void	SendUpgrStat		( uint8_t nUpgrResult )	//	Send Upgrade Data
    634          //==========================================================================
    635          {
   \                     SendUpgrStat: (+1)
   \        0x0   0xB5F0             PUSH     {R4-R7,LR}
   \        0x2   0xB093             SUB      SP,SP,#+76
   \        0x4   0x0004             MOVS     R4,R0
    636          	printf( "%s(%d) - %d\n", __func__, __LINE__, nUpgrResult );
   \        0x6   0x0023             MOVS     R3,R4
   \        0x8   0xB2DB             UXTB     R3,R3
   \        0xA   0xF44F 0x721F      MOV      R2,#+636
   \        0xE   0x.... 0x....      LDR.W    R1,??DataTable24_18
   \       0x12   0x.... 0x....      LDR.W    R0,??DataTable24_19
   \       0x16   0x.... 0x....      BL       printf
    637          
    638          	RFMPkt			stPkt;
    639          	memset( &stPkt, 0, sizeof( stPkt ) );
   \       0x1A   0x2546             MOVS     R5,#+70
   \       0x1C   0x2600             MOVS     R6,#+0
   \       0x1E   0xAF01             ADD      R7,SP,#+4
   \       0x20   0x0032             MOVS     R2,R6
   \       0x22   0x0029             MOVS     R1,R5
   \       0x24   0x0038             MOVS     R0,R7
   \       0x26   0x.... 0x....      BL       __aeabi_memset
    640          
    641          	//========================================================================
    642          	//	Packet Header
    643          	_MakePktHdr( &stPkt, (uint8_t)GetDevID(), (uint8_t)0xFF, (uint8_t)RFPktDataLen, (uint8_t)PktUpgrStat );
   \       0x2A   0x.... 0x....      BL       GetDevID
   \       0x2E   0x0001             MOVS     R1,R0
   \       0x30   0x2041             MOVS     R0,#+65
   \       0x32   0x9000             STR      R0,[SP, #+0]
   \       0x34   0x233C             MOVS     R3,#+60
   \       0x36   0x22FF             MOVS     R2,#+255
   \       0x38   0xB2C9             UXTB     R1,R1
   \       0x3A   0xA801             ADD      R0,SP,#+4
   \       0x3C   0x.... 0x....      BL       _MakePktHdr
    644          
    645          	//========================================================================
    646          	//	Packet Body
    647          	RFMPktUpgrStat	*pUpgrStat = (RFMPktUpgrStat *)&stPkt.dat.upgrStat;
   \       0x40   0xF10D 0x070E      ADD      R7,SP,#+14
    648          
    649          	pUpgrStat->nResult		=	nUpgrResult;
   \       0x44   0x703C             STRB     R4,[R7, #+0]
    650          	pUpgrStat->nTrainSet	=	g_idxTrainSet;
   \       0x46   0x.... 0x....      LDR.W    R0,??DataTable24_20
   \       0x4A   0x7800             LDRB     R0,[R0, #+0]
   \       0x4C   0x7138             STRB     R0,[R7, #+4]
    651          	pUpgrStat->nCarNo 		=	g_nCarNo;
   \       0x4E   0x.... 0x....      LDR.W    R0,??DataTable24_21
   \       0x52   0x7800             LDRB     R0,[R0, #+0]
   \       0x54   0x7178             STRB     R0,[R7, #+5]
    652          
    653          	//========================================================================
    654          	//	Send RF
    655          #if defined( USE_CH_ISO_DEV )
    656          
    657          	//	송신기#1
    658          	SendPktCh( (uint8_t)ChTx_1, (U8 *)&stPkt, (uint8_t)(sizeof( RFMPktHdr ) + RFPktDataLen) );
   \       0x56   0x2240             MOVS     R2,#+64
   \       0x58   0xA901             ADD      R1,SP,#+4
   \       0x5A   0x2008             MOVS     R0,#+8
   \       0x5C   0x.... 0x....      BL       SendPktCh
    659          
    660          	HAL_Delay((uint32_t)3);	//	재전송 전 Delay
   \       0x60   0x2003             MOVS     R0,#+3
   \       0x62   0x.... 0x....      BL       HAL_Delay
    661          
    662          	//	송신기#2
    663          	SendPktCh( (uint8_t)ChTx_2, (U8 *)&stPkt, (uint8_t)(sizeof( RFMPktHdr ) + RFPktDataLen) );
   \       0x66   0x2240             MOVS     R2,#+64
   \       0x68   0xA901             ADD      R1,SP,#+4
   \       0x6A   0x2009             MOVS     R0,#+9
   \       0x6C   0x.... 0x....      BL       SendPktCh
    664          
    665          #else
    666          	int nCh;
    667          	nCh = ChTS1_1 + g_idxTrainSet * 2 + ((g_nCarNo) % 2);	// 현재 호차 채널
    668          	SendPktCh( nCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
    669          
    670          	HAL_Delay(5);	//	재전송 전 Delay
    671          
    672          	nCh = ChTS1_1 + g_idxTrainSet * 2 + ((g_nCarNo+1) % 2);	// 현재 호차 채널
    673          	SendPktCh( nCh, (U8 *)&stPkt, (U8)sizeof( RFMPktHdr ) + RFPktDataLen );
    674          #endif
    675          
    676          	//========================================================================
    677          }
   \       0x70   0xB013             ADD      SP,SP,#+76
   \       0x72   0xBDF0             POP      {R4-R7,PC}
    678          
    679          //==========================================================================
    680          //		Process Packet
    681          //==========================================================================
    682          
    683          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    684          uint8_t	ProcPktStat			( const RFMPkt *pRFPkt )
    685          //========================================================================
    686          {
   \                     ProcPktStat: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
    687          	if ( GetDbg() )
   \        0x4   0x.... 0x....      BL       GetDbg
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD007             BEQ.N    ??ProcPktStat_0
    688          	{
    689          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xC   0xF240 0x22B1      MOVW     R2,#+689
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable24_22
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x18   0x.... 0x....      BL       printf
    690          	}
    691          
    692          	uint8_t nRspID = pRFPkt->dat.stat.nCarNo;
   \                     ??ProcPktStat_0: (+1)
   \       0x1C   0x7DE5             LDRB     R5,[R4, #+23]
    693          	const RFMPktStat *pStat = &pRFPkt->dat.stat;
   \       0x1E   0xF114 0x060A      ADDS     R6,R4,#+10
    694          	//	상태정보 수신.
    695          //		printf ( "[Stat] Car:%d\n", pRFPkt->dat.stat.nCarNo );
    696          
    697          	if( nRspID < MaxCarNo	//	MaxCarNo(13)
    698          		&& ( pStat->nDevID == DevRF900M || pStat->nDevID == DevRF900T )
    699          		&& pStat->nMagicNum == 0xAA55
    700          		&& g_bSetRspIDManual == 0		//	수동설정모드가 아닌경우.
    701          		)
   \       0x22   0x0028             MOVS     R0,R5
   \       0x24   0xB2C0             UXTB     R0,R0
   \       0x26   0x280D             CMP      R0,#+13
   \       0x28   0xDA16             BGE.N    ??ProcPktStat_1
   \       0x2A   0x7870             LDRB     R0,[R6, #+1]
   \       0x2C   0x2801             CMP      R0,#+1
   \       0x2E   0xD002             BEQ.N    ??ProcPktStat_2
   \       0x30   0x7870             LDRB     R0,[R6, #+1]
   \       0x32   0x2802             CMP      R0,#+2
   \       0x34   0xD110             BNE.N    ??ProcPktStat_1
   \                     ??ProcPktStat_2: (+1)
   \       0x36   0x8870             LDRH     R0,[R6, #+2]
   \       0x38   0xF64A 0x2155      MOVW     R1,#+43605
   \       0x3C   0x4288             CMP      R0,R1
   \       0x3E   0xD10B             BNE.N    ??ProcPktStat_1
   \       0x40   0x.... 0x....      LDR.W    R0,??DataTable24_23
   \       0x44   0x7800             LDRB     R0,[R0, #+0]
   \       0x46   0x2800             CMP      R0,#+0
   \       0x48   0xD106             BNE.N    ??ProcPktStat_1
    702          	{
    703          		//	장치 응답 Flag 설정.
    704          		SetStat( (uint8_t)nRspID );		//	상태정보 설정.
   \       0x4A   0x0028             MOVS     R0,R5
   \       0x4C   0xB2C0             UXTB     R0,R0
   \       0x4E   0x.... 0x....      BL       SetStat
    705          
    706          		UpdateStat((RFMPktStat *) pStat );	//	상태정보 Update. ( 버전정보 갱신 등 )
   \       0x52   0x0030             MOVS     R0,R6
   \       0x54   0x.... 0x....      BL       UpdateStat
    707          	}
    708          
    709          	//========================================================================
    710          	//	송신기 조명상태에 따른 조명 제어.
    711          #if defined(USE_STAT_LIGHT)
    712          	if( pStat->nDevID == DevRF900T )
    713          	{
    714          		//	조명상태 저장 및 제어.
    715          		if( pStat->nDevFlag & DevFlagLight )
    716          		{
    717          			// 조명 On 명령 수신시.
    718          			g_nDevFlag |= DevFlagLight;
    719          			HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
    720          		}
    721          		else
    722          		{
    723          			// 조명 Off
    724          			g_nDevFlag &= ~DevFlagLight;
    725          			HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_RESET );
    726          		}
    727          	}
    728          #endif
    729          	//========================================================================
    730          
    731          	return (uint8_t)0;
   \                     ??ProcPktStat_1: (+1)
   \       0x58   0x2000             MOVS     R0,#+0
   \       0x5A   0xBD70             POP      {R4-R6,PC}
    732          }
    733          
    734          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    735          uint8_t	ProcPktStatReq		( const RFMPkt *pRFPkt )
    736          //========================================================================
    737          {
   \                     ProcPktStatReq: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
    738          	if ( GetDbg() )
   \        0x4   0x.... 0x....      BL       GetDbg
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD007             BEQ.N    ??ProcPktStatReq_0
    739          	{
    740          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xC   0xF44F 0x7239      MOV      R2,#+740
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable24_24
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x18   0x.... 0x....      BL       printf
    741          	}
    742          
    743          	const RFMPktStatReq *pStatReq = &pRFPkt->dat.statReq;
   \                     ??ProcPktStatReq_0: (+1)
   \       0x1C   0xF114 0x050A      ADDS     R5,R4,#+10
    744          
    745          	//	수신기의 경우 송신기 상태정보 갱신.
    746          	//		-> 상태정보 요청한 송신기의 상태정보를 갱신한다.
    747          	if ( GetDevID() == DevRF900M )
   \       0x20   0x.... 0x....      BL       GetDevID
   \       0x24   0x2801             CMP      R0,#+1
   \       0x26   0xD115             BNE.N    ??ProcPktStatReq_1
    748          	{
    749          		uint8_t idx = pStatReq->nCarNo;
   \       0x28   0x796E             LDRB     R6,[R5, #+5]
    750          
    751          		//========================================================================
    752          		//	장치 응답 Flag 설정.
    753          		SetStat( (uint8_t)idx );		//	상태정보 설정.
   \       0x2A   0x0030             MOVS     R0,R6
   \       0x2C   0xB2C0             UXTB     R0,R0
   \       0x2E   0x.... 0x....      BL       SetStat
    754          
    755          		//========================================================================
    756          		//	RSSI 갱신
    757          		g_devStat[idx].stat.nChRx = pStatReq->nSrcCh;
   \       0x32   0x201B             MOVS     R0,#+27
   \       0x34   0x.... 0x....      LDR.W    R1,??DataTable24_25
   \       0x38   0x0032             MOVS     R2,R6
   \       0x3A   0xB2D2             UXTB     R2,R2
   \       0x3C   0x4342             MULS     R2,R0,R2
   \       0x3E   0x440A             ADD      R2,R1,R2
   \       0x40   0x782B             LDRB     R3,[R5, #+0]
   \       0x42   0x7293             STRB     R3,[R2, #+10]
    758          		g_devStat[idx].nRSSI = g_nRSSI;
   \       0x44   0xB2F6             UXTB     R6,R6
   \       0x46   0x4346             MULS     R6,R0,R6
   \       0x48   0xEB01 0x0006      ADD      R0,R1,R6
   \       0x4C   0x.... 0x....      LDR.W    R1,??DataTable24_26
   \       0x50   0x7809             LDRB     R1,[R1, #+0]
   \       0x52   0x7681             STRB     R1,[R0, #+26]
    759          	}
    760          
    761          	//	Source Channel로 상태정보 송신.
    762          	SendStat( pStatReq->nSrcCh );
   \                     ??ProcPktStatReq_1: (+1)
   \       0x54   0x7828             LDRB     R0,[R5, #+0]
   \       0x56   0x.... 0x....      BL       SendStat
    763          
    764          	return (uint8_t) 0;
   \       0x5A   0x2000             MOVS     R0,#+0
   \       0x5C   0xBD70             POP      {R4-R6,PC}
    765          }
    766          
    767          
    768          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    769          uint8_t	ProcPktCtrlPaCall	( const RFMPkt *pRFPkt )
    770          //========================================================================
    771          {
   \                     ProcPktCtrlPaCall: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    772          	if ( GetDbg() )
   \        0x4   0x.... 0x....      BL       GetDbg
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD007             BEQ.N    ??ProcPktCtrlPaCall_0
    773          	{
    774          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xC   0xF240 0x3206      MOVW     R2,#+774
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable24_27
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x18   0x.... 0x....      BL       printf
    775          	}
    776          
    777          	//	방송/통화 시작 종료 명령.
    778          	const RFMPktCtrlPACall	*pCtrl = &pRFPkt->dat.pacall;
   \                     ??ProcPktCtrlPaCall_0: (+1)
   \       0x1C   0xF114 0x050A      ADDS     R5,R4,#+10
    779          
    780          	switch ( pCtrl->nStartStop )
   \       0x20   0x7828             LDRB     R0,[R5, #+0]
   \       0x22   0x2800             CMP      R0,#+0
   \       0x24   0xD009             BEQ.N    ??ProcPktCtrlPaCall_1
   \       0x26   0x2801             CMP      R0,#+1
   \       0x28   0xD115             BNE.N    ??ProcPktCtrlPaCall_2
    781          	{
    782          	case CtrlStart:
    783          		printf("[Start]");
   \                     ??ProcPktCtrlPaCall_3: (+1)
   \       0x2A   0x.... 0x....      LDR.W    R0,??DataTable24_28
   \       0x2E   0x.... 0x....      BL       printf
    784          		SetRFMMode( (uint8_t)RFMModeRx );
   \       0x32   0x2002             MOVS     R0,#+2
   \       0x34   0x.... 0x....      BL       SetRFMMode
    785          		break;
   \       0x38   0xE00D             B.N      ??ProcPktCtrlPaCall_2
    786          	case CtrlStop:
    787          		printf("[Stop]");
   \                     ??ProcPktCtrlPaCall_1: (+1)
   \       0x3A   0x.... 0x....      LDR.W    R0,??DataTable24_29
   \       0x3E   0x.... 0x....      BL       printf
    788          		SetRFMMode( (uint8_t)RFMModeNormal );
   \       0x42   0x2000             MOVS     R0,#+0
   \       0x44   0x.... 0x....      BL       SetRFMMode
    789          		//  송신기 & 수신기 Spk Relay Off
    790          		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_RESET );
   \       0x48   0x2200             MOVS     R2,#+0
   \       0x4A   0xF44F 0x7180      MOV      R1,#+256
   \       0x4E   0x.... 0x....      LDR.W    R0,??DataTable24_30
   \       0x52   0x.... 0x....      BL       HAL_GPIO_WritePin
    791          		break;
    792          	//default:
    793          	//	printf("%s:Invalid\n", __func__);
    794          	//	return 0;
    795          	}
    796          
    797          	switch ( pCtrl->nTypePACall )
   \                     ??ProcPktCtrlPaCall_2: (+1)
   \       0x56   0x7868             LDRB     R0,[R5, #+1]
   \       0x58   0x2801             CMP      R0,#+1
   \       0x5A   0xD004             BEQ.N    ??ProcPktCtrlPaCall_4
   \       0x5C   0xD311             BCC.N    ??ProcPktCtrlPaCall_5
   \       0x5E   0x2803             CMP      R0,#+3
   \       0x60   0xD00B             BEQ.N    ??ProcPktCtrlPaCall_6
   \       0x62   0xD305             BCC.N    ??ProcPktCtrlPaCall_7
   \       0x64   0xE00D             B.N      ??ProcPktCtrlPaCall_5
    798          	{
    799          	case CtrlPA:
    800          		printf("[PA]");
   \                     ??ProcPktCtrlPaCall_4: (+1)
   \       0x66   0x.... 0x....      LDR.W    R0,??DataTable24_31
   \       0x6A   0x.... 0x....      BL       printf
    801          		break;
   \       0x6E   0xE008             B.N      ??ProcPktCtrlPaCall_5
    802          	case CtrlCall:
    803          		printf("[Call]");
   \                     ??ProcPktCtrlPaCall_7: (+1)
   \       0x70   0x.... 0x....      LDR.W    R0,??DataTable24_32
   \       0x74   0x.... 0x....      BL       printf
    804          		break;
   \       0x78   0xE003             B.N      ??ProcPktCtrlPaCall_5
    805          	case CtrlOccPa:
    806          		printf("[OccPa]");
   \                     ??ProcPktCtrlPaCall_6: (+1)
   \       0x7A   0x.... 0x....      LDR.W    R0,??DataTable24_33
   \       0x7E   0x.... 0x....      BL       printf
    807          		break;
    808          	//default:
    809          	//	printf("%s:Invalid\n", __func__);
    810          	//	return 0;
    811          	}
    812          
    813          	printf("\n");
   \                     ??ProcPktCtrlPaCall_5: (+1)
   \       0x82   0x....             ADR.N    R0,??DataTable22
   \       0x84   0x.... 0x....      BL       printf
    814          
    815          	if ( GetDevID() == DevRF900M )
   \       0x88   0x.... 0x....      BL       GetDevID
   \       0x8C   0x2801             CMP      R0,#+1
   \       0x8E   0xD104             BNE.N    ??ProcPktCtrlPaCall_8
    816          	{
    817          		//	수신기
    818          
    819          		//	가까이 있는 송신기 설정. ( 수신기 -> 송신기 중계시 사용 )
    820          		SetChPARFT( GetChNearRFT() );
   \       0x90   0x.... 0x....      BL       GetChNearRFT
   \       0x94   0xB2C0             UXTB     R0,R0
   \       0x96   0x.... 0x....      BL       SetChPARFT
    821          	}
    822          
    823          	g_nStampRxPkt = (uint8_t)HAL_GetTick();		//	방송/통화 Stamp
   \                     ??ProcPktCtrlPaCall_8: (+1)
   \       0x9A   0x.... 0x....      BL       HAL_GetTick
   \       0x9E   0x.... 0x....      LDR.W    R1,??DataTable24_34
   \       0xA2   0x7008             STRB     R0,[R1, #+0]
    824          
    825          	return (uint8_t) 0;
   \       0xA4   0x2000             MOVS     R0,#+0
   \       0xA6   0xBD32             POP      {R1,R4,R5,PC}
    826          }
    827          
    828          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    829          uint8_t	ProcPktPA			( const RFMPkt *pRFPkt )
    830          //========================================================================
    831          {
   \                     ProcPktPA: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
    832          	if ( GetDbg() )
   \        0x4   0x.... 0x....      BL       GetDbg
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD007             BEQ.N    ??ProcPktPA_0
    833          	{
    834          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xC   0xF240 0x3242      MOVW     R2,#+834
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable24_35
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x18   0x.... 0x....      BL       printf
    835          	}
    836          
    837          	//========================================================================
    838          	//  방송 ( PTT )
    839          	if ( GetDevID() == DevRF900M )
   \                     ??ProcPktPA_0: (+1)
   \       0x1C   0x.... 0x....      BL       GetDevID
   \       0x20   0x2801             CMP      R0,#+1
   \       0x22   0xD11C             BNE.N    ??ProcPktPA_1
    840          	{
    841          		//  수신기
    842          		uint16_t	 *pAudioBuf = (uint16_t*)pRFPkt->dat.data;
   \       0x24   0xF114 0x050A      ADDS     R5,R4,#+10
    843          
    844          		//  방송 : 송신기 -> 수신기
    845          		qBufPut( &g_qBufAudioRx, (uint8_t*)pAudioBuf, ( (uint16_t)I2S_DMA_LOOP_SIZE * 2 ) );
   \       0x28   0x223C             MOVS     R2,#+60
   \       0x2A   0x0029             MOVS     R1,R5
   \       0x2C   0x.... 0x....      LDR.W    R0,??DataTable24_36
   \       0x30   0x.... 0x....      BL       qBufPut
    846          
    847          		// 조명 On
    848          		HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
   \       0x34   0x.... 0x....      LDR.W    R6,??DataTable24_30
   \       0x38   0x2201             MOVS     R2,#+1
   \       0x3A   0xF44F 0x7100      MOV      R1,#+512
   \       0x3E   0x0030             MOVS     R0,R6
   \       0x40   0x.... 0x....      BL       HAL_GPIO_WritePin
    849          
    850          		SetRFMMode( (uint8_t)RFMModeRx );
   \       0x44   0x2002             MOVS     R0,#+2
   \       0x46   0x.... 0x....      BL       SetRFMMode
    851          
    852          		//	Codec Speaker On
    853          		RFM_Spk((uint8_t)1);
   \       0x4A   0x2001             MOVS     R0,#+1
   \       0x4C   0x.... 0x....      BL       RFM_Spk
    854          		//  수신기 Spk Relay On
    855          		HAL_GPIO_WritePin( AUDIO_ON_GPIO_Port, AUDIO_ON_Pin, GPIO_PIN_SET );
   \       0x50   0x2201             MOVS     R2,#+1
   \       0x52   0xF44F 0x7180      MOV      R1,#+256
   \       0x56   0x0030             MOVS     R0,R6
   \       0x58   0x.... 0x....      BL       HAL_GPIO_WritePin
   \       0x5C   0xE014             B.N      ??ProcPktPA_2
    856          	}
    857          	else
    858          	{
    859          		//========================================================================
    860          		uint16_t	 *pAudioBuf = (uint16_t*)pRFPkt->dat.data;
   \                     ??ProcPktPA_1: (+1)
   \       0x5E   0xF114 0x050A      ADDS     R5,R4,#+10
    861          
    862          #if defined(USE_RFT_ONLY_RX_SPK_ON)
    863          		//  송신기 : 수신중인 경우 SPK ON
    864          //			HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
    865          		RFM_Spk((uint8_t)1);
   \       0x62   0x2001             MOVS     R0,#+1
   \       0x64   0x.... 0x....      BL       RFM_Spk
    866          #endif
    867          
    868          		//  방송 : 송신기 -> 수신기
    869          		qBufPut( &g_qBufAudioRx, (uint8_t*)pAudioBuf, (uint16_t)( I2S_DMA_LOOP_SIZE * 2 ) );
   \       0x68   0x223C             MOVS     R2,#+60
   \       0x6A   0x0029             MOVS     R1,R5
   \       0x6C   0x.... 0x....      LDR.W    R0,??DataTable24_36
   \       0x70   0x.... 0x....      BL       qBufPut
    870          		//========================================================================
    871          
    872          		//  송신기
    873          		SetRFMMode( (uint8_t)RFMModeRx );
   \       0x74   0x2002             MOVS     R0,#+2
   \       0x76   0x.... 0x....      BL       SetRFMMode
    874          
    875          		//  Red LED On
    876          		HAL_GPIO_WritePin ( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_SET ); //  RED LED
   \       0x7A   0x2201             MOVS     R2,#+1
   \       0x7C   0xF44F 0x4180      MOV      R1,#+16384
   \       0x80   0x.... 0x....      LDR.W    R0,??DataTable24_37
   \       0x84   0x.... 0x....      BL       HAL_GPIO_WritePin
    877          	}
    878          	g_nStampRxPkt = (uint8_t)HAL_GetTick();		//	방송/통화 Stamp
   \                     ??ProcPktPA_2: (+1)
   \       0x88   0x.... 0x....      BL       HAL_GetTick
   \       0x8C   0x.... 0x....      LDR.W    R1,??DataTable24_34
   \       0x90   0x7008             STRB     R0,[R1, #+0]
    879          
    880          	return (uint8_t) 0;
   \       0x92   0x2000             MOVS     R0,#+0
   \       0x94   0xBD70             POP      {R4-R6,PC}
    881          }
    882          
    883          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    884          uint8_t	ProcPktCall			( const RFMPkt *pRFPkt )
    885          //========================================================================
    886          {
   \                     ProcPktCall: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    887          	if ( GetDbg() )
   \        0x4   0x.... 0x....      BL       GetDbg
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD007             BEQ.N    ??ProcPktCall_0
    888          	{
    889          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xC   0xF240 0x3279      MOVW     R2,#+889
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable24_38
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x18   0x.... 0x....      BL       printf
    890          	}
    891          
    892          	if( GetDevID() == DevRF900T )
   \                     ??ProcPktCall_0: (+1)
   \       0x1C   0x.... 0x....      BL       GetDevID
   \       0x20   0x2802             CMP      R0,#+2
   \       0x22   0xD115             BNE.N    ??ProcPktCall_1
    893          	{
    894          		//	송신기
    895          
    896          		//========================================================================
    897          		//  통화 ( SOS )
    898          		uint16_t	 *pAudioBuf = (uint16_t*)pRFPkt->dat.data;
   \       0x24   0xF114 0x050A      ADDS     R5,R4,#+10
    899          
    900          		SetRFMMode( (uint8_t)RFMModeRx );
   \       0x28   0x2002             MOVS     R0,#+2
   \       0x2A   0x.... 0x....      BL       SetRFMMode
    901          
    902          #if defined(USE_RFT_ONLY_RX_SPK_ON)
    903          		//  송신기 : 수신중인 경우 SPK ON
    904          //		HAL_GPIO_WritePin( SPK_ON_GPIO_Port, SPK_ON_Pin, GPIO_PIN_SET );
    905          		RFM_Spk((uint8_t)1);
   \       0x2E   0x2001             MOVS     R0,#+1
   \       0x30   0x.... 0x....      BL       RFM_Spk
    906          #endif
    907          
    908          		//  Red LED On
    909          		HAL_GPIO_WritePin ( LED_ON_B_GPIO_Port, LED_ON_B_Pin, GPIO_PIN_SET ); //  RED LED
   \       0x34   0x2201             MOVS     R2,#+1
   \       0x36   0xF44F 0x4180      MOV      R1,#+16384
   \       0x3A   0x.... 0x....      LDR.W    R0,??DataTable24_37
   \       0x3E   0x.... 0x....      BL       HAL_GPIO_WritePin
    910          
    911          		//  통화 : 송신기 -> 송신기
    912          
    913          		qBufPut( &g_qBufAudioRx, (uint8_t*)pAudioBuf, (uint16_t)( I2S_DMA_LOOP_SIZE * 2 ) );
   \       0x42   0x223C             MOVS     R2,#+60
   \       0x44   0x0029             MOVS     R1,R5
   \       0x46   0x.... 0x....      LDR.W    R0,??DataTable24_36
   \       0x4A   0x.... 0x....      BL       qBufPut
   \       0x4E   0xE006             B.N      ??ProcPktCall_2
    914          	}
    915          	else if ( GetDevID() == DevRF900M )
   \                     ??ProcPktCall_1: (+1)
   \       0x50   0x.... 0x....      BL       GetDevID
   \       0x54   0x2801             CMP      R0,#+1
   \       0x56   0xD102             BNE.N    ??ProcPktCall_2
    916          	{
    917          		//	수신기
    918          
    919          		SetRFMMode( (uint8_t)RFMModeRx );
   \       0x58   0x2002             MOVS     R0,#+2
   \       0x5A   0x.... 0x....      BL       SetRFMMode
    920          	}
    921          
    922          	g_nStampRxPkt = (uint8_t)HAL_GetTick();		//	방송/통화 Stamp
   \                     ??ProcPktCall_2: (+1)
   \       0x5E   0x.... 0x....      BL       HAL_GetTick
   \       0x62   0x.... 0x....      LDR.W    R1,??DataTable24_34
   \       0x66   0x7008             STRB     R0,[R1, #+0]
    923          
    924          	return (uint8_t) 0;
   \       0x68   0x2000             MOVS     R0,#+0
   \       0x6A   0xBD32             POP      {R1,R4,R5,PC}
    925          }
    926          
    927          
    928          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    929          uint8_t	ProcPktDevConn			( const RFMPkt *pRFPkt )
    930          //========================================================================
    931          {
   \                     ProcPktDevConn: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
    932          	//	Device Node Connection
    933          	if ( GetDbg() )
   \        0x4   0x.... 0x....      BL       GetDbg
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD007             BEQ.N    ??ProcPktDevConn_0
    934          	{
    935          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xC   0xF240 0x32A7      MOVW     R2,#+935
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable24_39
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x18   0x.... 0x....      BL       printf
    936          	}
    937          
    938          	const RFMPktDevConn	*pConn = &pRFPkt->dat.devConn;
                 	                   	 ^
Warning[Pe177]: variable "pConn" was declared but never referenced
   \                     ??ProcPktDevConn_0: (+1)
   \       0x1C   0xF114 0x050A      ADDS     R5,R4,#+10
    939          
    940          	if( GetDevID() == DevRF900T )
   \       0x20   0x.... 0x....      BL       GetDevID
   \       0x24   0x2802             CMP      R0,#+2
   \       0x26   0xD001             BEQ.N    ??ProcPktDevConn_1
    941          	{
    942          		//========================================================================
    943          		//	송신기
    944          		//SetDevConn( pConn->nSrcCh, pConn->nDevType, pConn->nConnect );
    945          	}
    946          	else if ( GetDevID() == DevRF900M )
   \       0x28   0x.... 0x....      BL       GetDevID
    947          	{
    948          		//========================================================================
    949          		//	수신기
    950          		//SetDevConn( pConn->nSrcCh, pConn->nDevType, pConn->nConnect );
    951          	}
    952          
    953          	return (uint8_t) 0;
   \                     ??ProcPktDevConn_1: (+1)
   \       0x2C   0x2000             MOVS     R0,#+0
   \       0x2E   0xBD32             POP      {R1,R4,R5,PC}
    954          }
    955          
    956          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    957          uint8_t	ProcPktLight		( const RFMPkt *pRFPkt )
    958          //========================================================================
    959          {
   \                     ProcPktLight: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    960          	if ( GetDbg() )
   \        0x4   0x.... 0x....      BL       GetDbg
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD007             BEQ.N    ??ProcPktLight_0
    961          	{
    962          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xC   0xF240 0x32C2      MOVW     R2,#+962
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable24_40
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x18   0x.... 0x....      BL       printf
    963          	}
    964          
    965          	if ( GetDevID() == DevRF900M && pRFPkt->hdr.nPktCmd == PktLight )
   \                     ??ProcPktLight_0: (+1)
   \       0x1C   0x.... 0x....      BL       GetDevID
   \       0x20   0x2801             CMP      R0,#+1
   \       0x22   0xD117             BNE.N    ??ProcPktLight_1
   \       0x24   0x78E0             LDRB     R0,[R4, #+3]
   \       0x26   0x2804             CMP      R0,#+4
   \       0x28   0xD114             BNE.N    ??ProcPktLight_1
    966          	{
    967          		//  수신기 조명제어.
    968          		if ( pRFPkt->dat.light.nOnOff == 0 )
   \       0x2A   0x7AA0             LDRB     R0,[R4, #+10]
   \       0x2C   0x2800             CMP      R0,#+0
   \       0x2E   0xD107             BNE.N    ??ProcPktLight_2
    969          		{
    970          			// 조명 Off 명령 수신시.
    971          			HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_RESET );
   \       0x30   0x2200             MOVS     R2,#+0
   \       0x32   0xF44F 0x7100      MOV      R1,#+512
   \       0x36   0x.... 0x....      LDR.W    R0,??DataTable24_30
   \       0x3A   0x.... 0x....      BL       HAL_GPIO_WritePin
   \       0x3E   0xE009             B.N      ??ProcPktLight_1
    972          		}
    973          		else if ( pRFPkt->dat.light.nOnOff == 1 )
   \                     ??ProcPktLight_2: (+1)
   \       0x40   0x7AA0             LDRB     R0,[R4, #+10]
   \       0x42   0x2801             CMP      R0,#+1
   \       0x44   0xD106             BNE.N    ??ProcPktLight_1
    974          		{
    975          			// 조명 On 명령 수신시.
    976          			HAL_GPIO_WritePin ( LIGHT_ON_GPIO_Port, LIGHT_ON_Pin, GPIO_PIN_SET );
   \       0x46   0x2201             MOVS     R2,#+1
   \       0x48   0xF44F 0x7100      MOV      R1,#+512
   \       0x4C   0x.... 0x....      LDR.W    R0,??DataTable24_30
   \       0x50   0x.... 0x....      BL       HAL_GPIO_WritePin
    977          		}
    978          	}
    979          
    980          	return (uint8_t) 0;
   \                     ??ProcPktLight_1: (+1)
   \       0x54   0x2000             MOVS     R0,#+0
   \       0x56   0xBD10             POP      {R4,PC}
    981          }
    982          
    983          
    984          //========================================================================

   \                                 In section .text, align 2, keep-with-next
    985          uint8_t	ProcPktCmd			( const RFMPkt *pRFPkt )
    986          //========================================================================
    987          {
   \                     ProcPktCmd: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    988          	if ( GetDbg() )
   \        0x4   0x.... 0x....      BL       GetDbg
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD007             BEQ.N    ??ProcPktCmd_0
    989          	{
    990          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xC   0xF240 0x32DE      MOVW     R2,#+990
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable24_41
   \       0x14   0x.... 0x....      LDR.W    R0,??DataTable24_1
   \       0x18   0x.... 0x....      BL       printf
    991          	}
    992          
    993          	//	RSSI Check
    994          	printf( "%s(%d) - %s\n", __func__, __LINE__, pRFPkt->dat.cmd.sCmd );
   \                     ??ProcPktCmd_0: (+1)
   \       0x1C   0xF114 0x030E      ADDS     R3,R4,#+14
   \       0x20   0xF240 0x32E2      MOVW     R2,#+994
   \       0x24   0x.... 0x....      LDR.W    R1,??DataTable24_41
   \       0x28   0x.... 0x....      LDR.W    R0,??DataTable24_42
   \       0x2C   0x.... 0x....      BL       printf
    995          
    996          	if ( (uint8_t)g_nRSSI >= (uint8_t)(pRFPkt->dat.cmd.nRSSIOver) )
   \       0x30   0x.... 0x....      LDR.W    R0,??DataTable24_26
   \       0x34   0x7800             LDRB     R0,[R0, #+0]
   \       0x36   0xF994 0x100A      LDRSB    R1,[R4, #+10]
   \       0x3A   0xB2C9             UXTB     R1,R1
   \       0x3C   0x4288             CMP      R0,R1
   \       0x3E   0xDB03             BLT.N    ??ProcPktCmd_1
    997          	{
    998          		if ( pRFPkt->dat.cmd.nRsp == 1 )
    999          		{
   1000          			//	명령 처리 동작 결과 응답.
   1001          
   1002          			//	ToDo
   1003          		}
   1004          
   1005          		//	RSSI값 확인 후 해당 범위 내에 있는 경우 명령 동작.
   1006          		ProcessCommand( (char *) pRFPkt->dat.cmd.sCmd );
   \       0x40   0xF114 0x000E      ADDS     R0,R4,#+14
   \       0x44   0x.... 0x....      BL       ProcessCommand
   1007          	}
   1008          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "ProcPktCmd"
   \                     ??ProcPktCmd_1: (+1)
   \       0x48   0xBD10             POP      {R4,PC}
   1009          
   1010          
   1011          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1012          uint8_t	ProcPktCmdRsp		( const RFMPkt *pRFPkt )
   1013          //========================================================================
   1014          {
   \                     ProcPktCmdRsp: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   1015          	if ( GetDbg() )
   \        0x4   0x.... 0x....      BL       GetDbg
   \        0x8   0x2800             CMP      R0,#+0
   \        0xA   0xD006             BEQ.N    ??ProcPktCmdRsp_0
   1016          	{
   1017          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xC   0xF240 0x32F9      MOVW     R2,#+1017
   \       0x10   0x.... 0x....      LDR.W    R1,??DataTable24_43
   \       0x14   0x....             LDR.N    R0,??DataTable24_1
   \       0x16   0x.... 0x....      BL       printf
   1018          	}
   1019          
   1020          	//	Command 처리결과 응답.
   1021          
   1022          	//	ToDo
   1023          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "ProcPktCmdRsp"
   \                     ??ProcPktCmdRsp_0: (+1)
   \       0x1A   0xBD10             POP      {R4,PC}
   1024          
   1025          //========================================================================

   \                                 In section .bss, align 4
   1026          uint8_t	s_bUpgrDataValid[(MaxUpgrDataPacket + 7) / 8];	//	4000];	//	Upgrade Data Valid Check
   \                     s_bUpgrDataValid:
   \        0x0                      DS8 1'024
   1027          //========================================================================
   1028          
   1029          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1030          uint8_t	ProcPktUpgr			( const RFMPkt *pRFPkt )
   1031          //========================================================================
   1032          {
   \                     ProcPktUpgr: (+1)
   \        0x0   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \        0x4   0xB088             SUB      SP,SP,#+32
   1033          	//========================================================================
   1034          	//	Upgrade Flash Image
   1035          	//========================================================================
   1036          
   1037          	if ( GetDbg() )
   \        0x6   0x.... 0x....      BL       GetDbg
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD006             BEQ.N    ??ProcPktUpgr_0
   1038          	{
   1039          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xE   0xF240 0x420F      MOVW     R2,#+1039
   \       0x12   0x.... 0x....      LDR.W    R1,??DataTable24_44
   \       0x16   0x....             LDR.N    R0,??DataTable24_1
   \       0x18   0x.... 0x....      BL       printf
   1040          	}
   1041          
   1042          	//========================================================================
   1043          	//	Data Flash영역에 Write
   1044          	const RFMPktUpgr	*pUpgr = &pRFPkt->dat.upgr;
   \                     ??ProcPktUpgr_0: (+1)
   \       0x1C   0x9808             LDR      R0,[SP, #+32]
   \       0x1E   0xF110 0x040A      ADDS     R4,R0,#+10
   1045          
   1046          	if ( pUpgr->baseAddr < 0x08080000 || 0x080FFFFF < pUpgr->baseAddr )
   \       0x22   0x6820             LDR      R0,[R4, #+0]
   \       0x24   0x.... 0x....      LDR.W    R5,??DataTable24_45
   \       0x28   0x42A8             CMP      R0,R5
   \       0x2A   0xD303             BCC.N    ??ProcPktUpgr_1
   \       0x2C   0x6820             LDR      R0,[R4, #+0]
   \       0x2E   0xF1B0 0x6F01      CMP      R0,#+135266304
   \       0x32   0xD30A             BCC.N    ??ProcPktUpgr_2
   1047          	{
   1048          		printf("%s(%d) - Out Of Range - baseAddr(0x%08X)\n", __func__, __LINE__, pUpgr->baseAddr );
   \                     ??ProcPktUpgr_1: (+1)
   \       0x34   0x6823             LDR      R3,[R4, #+0]
   \       0x36   0xF44F 0x6283      MOV      R2,#+1048
   \       0x3A   0x.... 0x....      LDR.W    R1,??DataTable24_44
   \       0x3E   0x.... 0x....      LDR.W    R0,??DataTable24_46
   \       0x42   0x.... 0x....      BL       printf
   1049          		return 0;
   \       0x46   0x2000             MOVS     R0,#+0
   \       0x48   0xE136             B.N      ??ProcPktUpgr_3
   1050          	}
   1051          
   1052          	//========================================================================
   1053          	//	RFM Packet
   1054          //	RFMPktUpgr	*pUpgr = (RFMPktUpgr *)pRFPkt->dat.upgr;
   1055          //	pUpgr->baseAddr		=	nAddrTarget;
   1056          //	pUpgr->totPkt		=	nPktTot;
   1057          //	pUpgr->idxPkt		=	nPktIdx;
   1058          //	pUpgr->nSize		=	nSize;
   1059          //	memcpy( pUpgr->data, sBuf, nSize );
   1060          
   1061          	//========================================================================
   1062          	static int	s_rxPkt;
   1063          
   1064          	if ( pUpgr->idxPkt == 0 )
   \                     ??ProcPktUpgr_2: (+1)
   \       0x4A   0x88E0             LDRH     R0,[R4, #+6]
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD130             BNE.N    ??ProcPktUpgr_4
   1065          	{
   1066          		//	Start Uprade
   1067          		printf("%s(%d) - Start Upgrade\n", __func__, __LINE__ );
   \       0x50   0xF240 0x422B      MOVW     R2,#+1067
   \       0x54   0x....             LDR.N    R1,??DataTable24_44
   \       0x56   0x.... 0x....      LDR.W    R0,??DataTable24_47
   \       0x5A   0x.... 0x....      BL       printf
   1068          
   1069          		if( pUpgr->bFlag & PktUpgrFlagRetry )
   \       0x5E   0x7A60             LDRB     R0,[R4, #+9]
   \       0x60   0x07C0             LSLS     R0,R0,#+31
   \       0x62   0xD506             BPL.N    ??ProcPktUpgr_5
   1070          		{
   1071          			//	No Erase
   1072          			printf( "[%08d] Flash Erase - Skip ( Retry - Upgrade )\n", HAL_GetTick() );
   \       0x64   0x.... 0x....      BL       HAL_GetTick
   \       0x68   0x0001             MOVS     R1,R0
   \       0x6A   0x....             LDR.N    R0,??DataTable24_48
   \       0x6C   0x.... 0x....      BL       printf
   \       0x70   0xE01C             B.N      ??ProcPktUpgr_6
   1073          		}
   1074          		else
   1075          		{
   1076          			//========================================================================
   1077          			//	Flash Erase
   1078          	//		 __HAL_RCC_DBGMCU_CLK_ENABLE();
   1079          			 __HAL_DBGMCU_FREEZE_IWDG();
   \                     ??ProcPktUpgr_5: (+1)
   \       0x72   0x....             LDR.N    R0,??DataTable24_49
   \       0x74   0x6801             LDR      R1,[R0, #+0]
   \       0x76   0xF451 0x5180      ORRS     R1,R1,#0x1000
   \       0x7A   0x6001             STR      R1,[R0, #+0]
   1080          	//		MX_IWDG_Disable();		//	Disable Watchdog
   1081          			printf( "[%08d] Flash Erase - Start\n", HAL_GetTick() );
   \       0x7C   0x.... 0x....      BL       HAL_GetTick
   \       0x80   0x0001             MOVS     R1,R0
   \       0x82   0x....             LDR.N    R0,??DataTable24_50
   \       0x84   0x.... 0x....      BL       printf
   1082          	//        FLASH_If_Erase( ADDR_FLASH_IMGAPP );
   1083          			FLASH_If_Erase( ADDR_FLASH_IMGBOOT );		//	0x08080000
   \       0x88   0x0028             MOVS     R0,R5
   \       0x8A   0x.... 0x....      BL       FLASH_If_Erase
   1084          			printf( "[%08d] Flash Erase - End\n", HAL_GetTick() );
   \       0x8E   0x.... 0x....      BL       HAL_GetTick
   \       0x92   0x0001             MOVS     R1,R0
   \       0x94   0x....             LDR.N    R0,??DataTable24_51
   \       0x96   0x.... 0x....      BL       printf
   1085          	    	//========================================================================
   1086          
   1087          			memset( s_bUpgrDataValid, 0, sizeof(s_bUpgrDataValid) );
   \       0x9A   0xF44F 0x6580      MOV      R5,#+1024
   \       0x9E   0x2600             MOVS     R6,#+0
   \       0xA0   0x....             LDR.N    R7,??DataTable24_52
   \       0xA2   0x0032             MOVS     R2,R6
   \       0xA4   0x0029             MOVS     R1,R5
   \       0xA6   0x0038             MOVS     R0,R7
   \       0xA8   0x.... 0x....      BL       __aeabi_memset
   1088          		}
   1089          
   1090          		s_rxPkt = 0;
   \                     ??ProcPktUpgr_6: (+1)
   \       0xAC   0x2000             MOVS     R0,#+0
   \       0xAE   0x....             LDR.N    R1,??DataTable24_53
   \       0xB0   0x6008             STR      R0,[R1, #+0]
   1091          	}
   1092          
   1093          	s_rxPkt++;
   \                     ??ProcPktUpgr_4: (+1)
   \       0xB2   0x....             LDR.N    R6,??DataTable24_53
   \       0xB4   0x6830             LDR      R0,[R6, #+0]
   \       0xB6   0x1C40             ADDS     R0,R0,#+1
   \       0xB8   0x6030             STR      R0,[R6, #+0]
   1094          
   1095          	//========================================================================
   1096          	//	Write Upgrade Image Data
   1097          
   1098          	if ( FLASH_If_Write( pUpgr->baseAddr + (pUpgr->idxPkt * PktUpgrDataSize),
   1099          						(uint32_t *)pUpgr->data,
   1100          						pUpgr->nSize / 4 ) == FLASHIF_OK )
   \       0xBA   0x6820             LDR      R0,[R4, #+0]
   \       0xBC   0x2730             MOVS     R7,#+48
   \       0xBE   0x7A21             LDRB     R1,[R4, #+8]
   \       0xC0   0x2204             MOVS     R2,#+4
   \       0xC2   0xFB91 0xF2F2      SDIV     R2,R1,R2
   \       0xC6   0xF114 0x010A      ADDS     R1,R4,#+10
   \       0xCA   0x88E3             LDRH     R3,[R4, #+6]
   \       0xCC   0xFB07 0x0003      MLA      R0,R7,R3,R0
   \       0xD0   0x.... 0x....      BL       FLASH_If_Write
   \       0xD4   0x2800             CMP      R0,#+0
   \       0xD6   0xD117             BNE.N    ??ProcPktUpgr_7
   1101          	{
   1102          		//	Valid Check Data
   1103          		SET_BIT( s_bUpgrDataValid[pUpgr->idxPkt/8], (0x1 << (pUpgr->idxPkt % 8)) );
   \       0xD8   0x88E0             LDRH     R0,[R4, #+6]
   \       0xDA   0x2108             MOVS     R1,#+8
   \       0xDC   0x....             LDR.N    R2,??DataTable24_52
   \       0xDE   0x88E3             LDRH     R3,[R4, #+6]
   \       0xE0   0x2508             MOVS     R5,#+8
   \       0xE2   0xFB93 0xF3F5      SDIV     R3,R3,R5
   \       0xE6   0x88E5             LDRH     R5,[R4, #+6]
   \       0xE8   0xF05F 0x0C08      MOVS     R12,#+8
   \       0xEC   0xFB95 0xF5FC      SDIV     R5,R5,R12
   \       0xF0   0x5D55             LDRB     R5,[R2, R5]
   \       0xF2   0xF05F 0x0C01      MOVS     R12,#+1
   \       0xF6   0xFB90 0xFEF1      SDIV     LR,R0,R1
   \       0xFA   0xFB01 0x001E      MLS      R0,R1,LR,R0
   \       0xFE   0xFA1C 0xF000      LSLS     R0,R12,R0
   \      0x102   0x4328             ORRS     R0,R0,R5
   \      0x104   0x54D0             STRB     R0,[R2, R3]
   \      0x106   0xE01E             B.N      ??ProcPktUpgr_8
   1104          	}
   1105          	else /* An error occurred while writing to Flash memory */
   1106          	{
   1107          		/* End session */
   1108          		printf("%s(%d) - Error idx(%d)\n", __func__, __LINE__, pUpgr->idxPkt );
   \                     ??ProcPktUpgr_7: (+1)
   \      0x108   0x88E3             LDRH     R3,[R4, #+6]
   \      0x10A   0xF240 0x4254      MOVW     R2,#+1108
   \      0x10E   0x....             LDR.N    R1,??DataTable24_44
   \      0x110   0x....             LDR.N    R0,??DataTable24_54
   \      0x112   0x.... 0x....      BL       printf
   1109          		CLEAR_BIT( s_bUpgrDataValid[pUpgr->idxPkt/8], (0x1 << (pUpgr->idxPkt % 8)) );	//	Clear
   \      0x116   0x88E0             LDRH     R0,[R4, #+6]
   \      0x118   0x2108             MOVS     R1,#+8
   \      0x11A   0x....             LDR.N    R2,??DataTable24_52
   \      0x11C   0x88E3             LDRH     R3,[R4, #+6]
   \      0x11E   0x2508             MOVS     R5,#+8
   \      0x120   0xFB93 0xF3F5      SDIV     R3,R3,R5
   \      0x124   0x88E5             LDRH     R5,[R4, #+6]
   \      0x126   0xF05F 0x0C08      MOVS     R12,#+8
   \      0x12A   0xFB95 0xF5FC      SDIV     R5,R5,R12
   \      0x12E   0x5D55             LDRB     R5,[R2, R5]
   \      0x130   0xF05F 0x0C01      MOVS     R12,#+1
   \      0x134   0xFB90 0xFEF1      SDIV     LR,R0,R1
   \      0x138   0xFB01 0x001E      MLS      R0,R1,LR,R0
   \      0x13C   0xFA1C 0xF000      LSLS     R0,R12,R0
   \      0x140   0xEA35 0x0000      BICS     R0,R5,R0
   \      0x144   0x54D0             STRB     R0,[R2, R3]
   1110          	}
   1111          
   1112          	g_nStampRxPkt = HAL_GetTick();		//	Rx Pkt Stamp
   \                     ??ProcPktUpgr_8: (+1)
   \      0x146   0x.... 0x....      BL       HAL_GetTick
   \      0x14A   0x....             LDR.N    R1,??DataTable24_34
   \      0x14C   0x7008             STRB     R0,[R1, #+0]
   1113          	//========================================================================
   1114          
   1115          	//========================================================================
   1116          	if ( pUpgr->idxPkt == (pUpgr->totPkt - 1) )
   \      0x14E   0x88E0             LDRH     R0,[R4, #+6]
   \      0x150   0x88A1             LDRH     R1,[R4, #+4]
   \      0x152   0x1E49             SUBS     R1,R1,#+1
   \      0x154   0x4288             CMP      R0,R1
   \      0x156   0xF040 0x80AF      BNE.W    ??ProcPktUpgr_9
   1117          	{
   1118          		//	End Upgrade
   1119          //		s_rxPkt++;
   1120          
   1121          		printf("%s(%d) - End Upgrade ( rxPkt : %d / totPkt : %d )\n", __func__, __LINE__,
   1122          					s_rxPkt, pUpgr->totPkt );
   \      0x15A   0x....             LDR.N    R5,??DataTable24_44
   \      0x15C   0x88A0             LDRH     R0,[R4, #+4]
   \      0x15E   0x9000             STR      R0,[SP, #+0]
   \      0x160   0x6833             LDR      R3,[R6, #+0]
   \      0x162   0xF240 0x4261      MOVW     R2,#+1121
   \      0x166   0x0029             MOVS     R1,R5
   \      0x168   0x....             LDR.N    R0,??DataTable24_55
   \      0x16A   0x.... 0x....      BL       printf
   1123          
   1124          		int result = UpgrStatSuccess;
   \      0x16E   0x2601             MOVS     R6,#+1
   1125          		for( int i = 0; i < pUpgr->totPkt; i++ )
   \      0x170   0x2000             MOVS     R0,#+0
   \                     ??ProcPktUpgr_10: (+1)
   \      0x172   0x88A1             LDRH     R1,[R4, #+4]
   \      0x174   0x4288             CMP      R0,R1
   \      0x176   0xDA13             BGE.N    ??ProcPktUpgr_11
   1126          		{
   1127          			if( READ_BIT( s_bUpgrDataValid[i / 8], (0x1 << (i % 8)) ) == 0 )
   \      0x178   0x2108             MOVS     R1,#+8
   \      0x17A   0x2208             MOVS     R2,#+8
   \      0x17C   0xFB90 0xF2F2      SDIV     R2,R0,R2
   \      0x180   0x....             LDR.N    R3,??DataTable24_52
   \      0x182   0x5C9A             LDRB     R2,[R3, R2]
   \      0x184   0x2301             MOVS     R3,#+1
   \      0x186   0xFB90 0xFCF1      SDIV     R12,R0,R1
   \      0x18A   0xFB01 0x011C      MLS      R1,R1,R12,R0
   \      0x18E   0xFA13 0xF101      LSLS     R1,R3,R1
   \      0x192   0x420A             TST      R2,R1
   \      0x194   0xD102             BNE.N    ??ProcPktUpgr_12
   1128          			{
   1129          				result = UpgrStatFailed;
   \      0x196   0x2100             MOVS     R1,#+0
   \      0x198   0x000E             MOVS     R6,R1
   1130          				break;
   \      0x19A   0xE001             B.N      ??ProcPktUpgr_11
   1131          			}
   1132          		}
   \                     ??ProcPktUpgr_12: (+1)
   \      0x19C   0x1C40             ADDS     R0,R0,#+1
   \      0x19E   0xE7E8             B.N      ??ProcPktUpgr_10
   1133          
   1134          		//========================================================================
   1135          		if ( result == UpgrStatSuccess )//( s_rxPkt == pUpgr->totPkt )
   \                     ??ProcPktUpgr_11: (+1)
   \      0x1A0   0x2E01             CMP      R6,#+1
   \      0x1A2   0xD16D             BNE.N    ??ProcPktUpgr_13
   1136          		{
   1137          			//	Upgrade Success
   1138          
   1139          			char buf[10];
   1140          			int filesize = pUpgr->totPkt * PktUpgrDataSize;
   \      0x1A4   0x88A0             LDRH     R0,[R4, #+4]
   \      0x1A6   0xFB07 0xF700      MUL      R7,R7,R0
   \      0x1AA   0x9701             STR      R7,[SP, #+4]
   1141          
   1142          			printf("%s(%d) - Upgrade Success ( Size : %d )\n", __func__, __LINE__, filesize );
   \      0x1AC   0x9B01             LDR      R3,[SP, #+4]
   \      0x1AE   0xF240 0x4276      MOVW     R2,#+1142
   \      0x1B2   0x0029             MOVS     R1,R5
   \      0x1B4   0x....             LDR.N    R0,??DataTable24_56
   \      0x1B6   0x.... 0x....      BL       printf
   1143          
   1144          			memset( buf, 0, sizeof( buf ) );
   \      0x1BA   0x200A             MOVS     R0,#+10
   \      0x1BC   0x9006             STR      R0,[SP, #+24]
   \      0x1BE   0x2000             MOVS     R0,#+0
   \      0x1C0   0x9005             STR      R0,[SP, #+20]
   \      0x1C2   0xAF02             ADD      R7,SP,#+8
   \      0x1C4   0x9A05             LDR      R2,[SP, #+20]
   \      0x1C6   0x9906             LDR      R1,[SP, #+24]
   \      0x1C8   0x0038             MOVS     R0,R7
   \      0x1CA   0x.... 0x....      BL       __aeabi_memset
   1145          
   1146          			buf[0] = 0xaa;
   \      0x1CE   0x20AA             MOVS     R0,#+170
   \      0x1D0   0xF88D 0x0008      STRB     R0,[SP, #+8]
   1147          			buf[1] = 0x55;
   \      0x1D4   0xAF02             ADD      R7,SP,#+8
   \      0x1D6   0x2055             MOVS     R0,#+85
   \      0x1D8   0x7078             STRB     R0,[R7, #+1]
   1148          			buf[2] = ( filesize >> 16 ) & 0xFF;
   \      0x1DA   0x9801             LDR      R0,[SP, #+4]
   \      0x1DC   0x1400             ASRS     R0,R0,#+16
   \      0x1DE   0x70B8             STRB     R0,[R7, #+2]
   1149          			buf[3] = ( filesize >> 8 ) & 0xFF;
   \      0x1E0   0x9801             LDR      R0,[SP, #+4]
   \      0x1E2   0x1200             ASRS     R0,R0,#+8
   \      0x1E4   0x70F8             STRB     R0,[R7, #+3]
   1150          			buf[4] = ( filesize >> 0 ) & 0xFF;
   \      0x1E6   0x9801             LDR      R0,[SP, #+4]
   \      0x1E8   0x7138             STRB     R0,[R7, #+4]
   1151          
   1152          		    M24_HAL_WriteBytes( &hi2c1, (uint16_t)0xA0, (uint16_t)AddrEEPUpgrMGN1, (uint8_t *)buf,(uint16_t) 5 );
   \      0x1EA   0x.... 0x....      LDR.W    R10,??DataTable24_57
   \      0x1EE   0x2005             MOVS     R0,#+5
   \      0x1F0   0x9000             STR      R0,[SP, #+0]
   \      0x1F2   0xAB02             ADD      R3,SP,#+8
   \      0x1F4   0x2220             MOVS     R2,#+32
   \      0x1F6   0x21A0             MOVS     R1,#+160
   \      0x1F8   0x4650             MOV      R0,R10
   \      0x1FA   0x.... 0x....      BL       M24_HAL_WriteBytes
   1153          
   1154          			memset( buf, 0, sizeof( buf ) );
   \      0x1FE   0xF05F 0x080A      MOVS     R8,#+10
   \      0x202   0xF05F 0x0900      MOVS     R9,#+0
   \      0x206   0xF10D 0x0B08      ADD      R11,SP,#+8
   \      0x20A   0x464A             MOV      R2,R9
   \      0x20C   0x4641             MOV      R1,R8
   \      0x20E   0x4658             MOV      R0,R11
   \      0x210   0x.... 0x....      BL       __aeabi_memset
   1155          
   1156          		    M24_HAL_ReadBytes( &hi2c1,(uint16_t) 0xA0, (uint16_t)AddrEEPUpgrMGN1, (uint8_t *)buf, (uint16_t)5 );
   \      0x214   0x2005             MOVS     R0,#+5
   \      0x216   0x9000             STR      R0,[SP, #+0]
   \      0x218   0xAB02             ADD      R3,SP,#+8
   \      0x21A   0x2220             MOVS     R2,#+32
   \      0x21C   0x21A0             MOVS     R1,#+160
   \      0x21E   0x4650             MOV      R0,R10
   \      0x220   0x.... 0x....      BL       M24_HAL_ReadBytes
   1157          
   1158          		    filesize = ( buf[2] << 16 ) | ( buf[3] << 8 ) | ( buf[4] );
   \      0x224   0x78B8             LDRB     R0,[R7, #+2]
   \      0x226   0xF897 0xA003      LDRB     R10,[R7, #+3]
   \      0x22A   0xEA5F 0x2A0A      LSLS     R10,R10,#+8
   \      0x22E   0xEA5A 0x4A00      ORRS     R10,R10,R0, LSL #+16
   \      0x232   0x7938             LDRB     R0,[R7, #+4]
   \      0x234   0xEA50 0x0A0A      ORRS     R10,R0,R10
   1159          
   1160          			printf( "%s(%d) - EEPROM [0,1] : 0x%02X 0x%02X / ( bin size : %d )\n", __func__, __LINE__, buf[0], buf[1], filesize );
   \      0x238   0xF8CD 0xA004      STR      R10,[SP, #+4]
   \      0x23C   0x7878             LDRB     R0,[R7, #+1]
   \      0x23E   0x9000             STR      R0,[SP, #+0]
   \      0x240   0xF89D 0x3008      LDRB     R3,[SP, #+8]
   \      0x244   0xF44F 0x6291      MOV      R2,#+1160
   \      0x248   0x0029             MOVS     R1,R5
   \      0x24A   0x....             LDR.N    R0,??DataTable24_58
   \      0x24C   0x.... 0x....      BL       printf
   1161          
   1162          			HAL_Delay( (uint32_t)2000 );	//	Upgrade 결과전송 전 Delay
   \      0x250   0xF44F 0x60FA      MOV      R0,#+2000
   \      0x254   0x.... 0x....      BL       HAL_Delay
   1163          
   1164          			//===========================================================================
   1165          			//	Send Upgrade Result
   1166          			SendUpgrStat( (uint8_t)UpgrStatSuccess );	//	Upgrade 결과전송.
   \      0x258   0x2001             MOVS     R0,#+1
   \      0x25A   0x.... 0x....      BL       SendUpgrStat
   1167          			HAL_Delay((uint32_t) 100 );	//	Upgrade 결과전송 전 Delay
   \      0x25E   0x2064             MOVS     R0,#+100
   \      0x260   0x.... 0x....      BL       HAL_Delay
   1168          			SendUpgrStat( (uint8_t)UpgrStatSuccess );	//	Upgrade 결과전송.
   \      0x264   0x2001             MOVS     R0,#+1
   \      0x266   0x.... 0x....      BL       SendUpgrStat
   1169          			HAL_Delay( (uint32_t)100 );	//	Upgrade 결과전송 전 Delay
   \      0x26A   0x2064             MOVS     R0,#+100
   \      0x26C   0x.... 0x....      BL       HAL_Delay
   1170          			SendUpgrStat((uint8_t) UpgrStatSuccess );	//	Upgrade 결과전송.
   \      0x270   0x2001             MOVS     R0,#+1
   \      0x272   0x.... 0x....      BL       SendUpgrStat
   1171          
   1172          			//===========================================================================
   1173          			//	Reset
   1174          			cmd_reset(0, 0);
   \      0x276   0x2100             MOVS     R1,#+0
   \      0x278   0x2000             MOVS     R0,#+0
   \      0x27A   0x.... 0x....      BL       cmd_reset
   \      0x27E   0xE018             B.N      ??ProcPktUpgr_14
   1175          			//===========================================================================
   1176          		}
   1177          		else
   1178          		{
   1179          			HAL_Delay( (uint32_t)2000 );	//	Upgrade 결과전송 전 Delay
   \                     ??ProcPktUpgr_13: (+1)
   \      0x280   0xF44F 0x60FA      MOV      R0,#+2000
   \      0x284   0x.... 0x....      BL       HAL_Delay
   1180          
   1181          			//===========================================================================
   1182          			//	Send Upgrade Result
   1183          			SendUpgrStat( UpgrStatFailed );		//	Upgrade 결과전송.
   \      0x288   0x2000             MOVS     R0,#+0
   \      0x28A   0x.... 0x....      BL       SendUpgrStat
   1184          			HAL_Delay( (uint32_t)100 );	//	Upgrade 결과전송 전 Delay
   \      0x28E   0x2064             MOVS     R0,#+100
   \      0x290   0x.... 0x....      BL       HAL_Delay
   1185          			SendUpgrStat( (uint8_t)UpgrStatFailed );	//	Upgrade 결과전송.
   \      0x294   0x2000             MOVS     R0,#+0
   \      0x296   0x.... 0x....      BL       SendUpgrStat
   1186          			HAL_Delay((uint32_t) 100 );	//	Upgrade 결과전송 전 Delay
   \      0x29A   0x2064             MOVS     R0,#+100
   \      0x29C   0x.... 0x....      BL       HAL_Delay
   1187          			SendUpgrStat( (uint8_t)UpgrStatFailed );	//	Upgrade 결과전송.
   \      0x2A0   0x2000             MOVS     R0,#+0
   \      0x2A2   0x.... 0x....      BL       SendUpgrStat
   1188          
   1189          			//	Upgrade Failed
   1190          			printf("%s(%d) - Upgrade Failed\n", __func__, __LINE__ );
   \      0x2A6   0xF240 0x42A6      MOVW     R2,#+1190
   \      0x2AA   0x0029             MOVS     R1,R5
   \      0x2AC   0x....             LDR.N    R0,??DataTable24_59
   \      0x2AE   0x.... 0x....      BL       printf
   1191          		}
   1192          		//========================================================================
   1193          
   1194          		//========================================================================
   1195          		SetRFMMode( (uint8_t)RFMModeNormal );	//	Normal 모드로 설정.
   \                     ??ProcPktUpgr_14: (+1)
   \      0x2B2   0x2000             MOVS     R0,#+0
   \      0x2B4   0x.... 0x....      BL       SetRFMMode
   1196          		//========================================================================
   1197          	}
   1198          }
                 ^
Warning[Pe940]: missing return statement at end of non-void function
          "ProcPktUpgr"
   \                     ??ProcPktUpgr_9: (+1)
   \                     ??ProcPktUpgr_3: (+1)
   \      0x2B8   0xB009             ADD      SP,SP,#+36
   \      0x2BA   0xE8BD 0x8FF0      POP      {R4-R11,PC}

   \                                 In section .bss, align 4
   \                     `ProcPktUpgr::s_rxPkt`:
   \        0x0                      DS8 4
   1199          
   1200          
   1201          //========================================================================

   \                                 In section .text, align 2, keep-with-next
   1202          uint8_t	ProcPktUpgrStat			( const RFMPkt *pRFPkt )
   1203          //========================================================================
   1204          {
   \                     ProcPktUpgrStat: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB08D             SUB      SP,SP,#+52
   \        0x4   0x0004             MOVS     R4,R0
   1205          	//========================================================================
   1206          	//	Upgrade Status
   1207          	//========================================================================
   1208          
   1209          	//	Upgrade 결과 수신후 수신기 LCD창에 표시.
   1210          	if ( GetDbg() )
   \        0x6   0x.... 0x....      BL       GetDbg
   \        0xA   0x2800             CMP      R0,#+0
   \        0xC   0xD005             BEQ.N    ??ProcPktUpgrStat_0
   1211          	{
   1212          		printf( "%s(%d)\n", __func__, __LINE__ );
   \        0xE   0xF240 0x42BC      MOVW     R2,#+1212
   \       0x12   0x....             LDR.N    R1,??DataTable24_60
   \       0x14   0x....             LDR.N    R0,??DataTable24_1
   \       0x16   0x.... 0x....      BL       printf
   1213          	}
   1214          
   1215          	char sBuf[50];
   1216          
   1217          	//========================================================================
   1218          	//	Data Flash영역에 Write
   1219          	RFMPktUpgrStat	*pUpgrStat = (RFMPktUpgrStat *)&pRFPkt->dat.upgrStat;
   \                     ??ProcPktUpgrStat_0: (+1)
   \       0x1A   0xF114 0x050A      ADDS     R5,R4,#+10
   1220          
   1221          	printf( "%s(%d) - %d\n", __func__, __LINE__, pUpgrStat->nResult );
   \       0x1E   0x782B             LDRB     R3,[R5, #+0]
   \       0x20   0xF240 0x42C5      MOVW     R2,#+1221
   \       0x24   0x....             LDR.N    R1,??DataTable24_60
   \       0x26   0x....             LDR.N    R0,??DataTable24_19
   \       0x28   0x.... 0x....      BL       printf
   1222          
   1223          	if ( pUpgrStat->nResult == UpgrStatSuccess )
   \       0x2C   0x7828             LDRB     R0,[R5, #+0]
   \       0x2E   0x2801             CMP      R0,#+1
   \       0x30   0xD10B             BNE.N    ??ProcPktUpgrStat_1
   1224          	{
   1225          		//	송신기 : Upgr Success
   1226          
   1227          		sprintf(sBuf, "Success(%d/%d)", pUpgrStat->nTrainSet, pUpgrStat->nCarNo);
   \       0x32   0x796B             LDRB     R3,[R5, #+5]
   \       0x34   0x792A             LDRB     R2,[R5, #+4]
   \       0x36   0x....             LDR.N    R1,??DataTable24_61
   \       0x38   0x4668             MOV      R0,SP
   \       0x3A   0x.... 0x....      BL       sprintf
   1228          		LCDPrintfXY( 0, 13, sBuf );
   \       0x3E   0x466A             MOV      R2,SP
   \       0x40   0x210D             MOVS     R1,#+13
   \       0x42   0x2000             MOVS     R0,#+0
   \       0x44   0x.... 0x....      BL       LCDPrintfXY
   \       0x48   0xE00D             B.N      ??ProcPktUpgrStat_2
   1229          
   1230          //		HAL_Delay(2000);
   1231          	}
   1232          	else if( pUpgrStat->nResult == UpgrStatFailed )
   \                     ??ProcPktUpgrStat_1: (+1)
   \       0x4A   0x7828             LDRB     R0,[R5, #+0]
   \       0x4C   0x2800             CMP      R0,#+0
   \       0x4E   0xD10A             BNE.N    ??ProcPktUpgrStat_2
   1233          	{
   1234          		//	송신기 : Upgr Failed
   1235          
   1236          		sprintf(sBuf, "Failed(%d/%d)", pUpgrStat->nTrainSet, pUpgrStat->nCarNo);
   \       0x50   0x796B             LDRB     R3,[R5, #+5]
   \       0x52   0x792A             LDRB     R2,[R5, #+4]
   \       0x54   0x....             LDR.N    R1,??DataTable24_62
   \       0x56   0x4668             MOV      R0,SP
   \       0x58   0x.... 0x....      BL       sprintf
   1237          		LCDPrintfXY( 0, 13, sBuf );
   \       0x5C   0x466A             MOV      R2,SP
   \       0x5E   0x210D             MOVS     R1,#+13
   \       0x60   0x2000             MOVS     R0,#+0
   \       0x62   0x.... 0x....      BL       LCDPrintfXY
   1238          
   1239          //		HAL_Delay(2000);
   1240          	}
   1241          
   1242          	return 1;
   \                     ??ProcPktUpgrStat_2: (+1)
   \       0x66   0x2001             MOVS     R0,#+1
   \       0x68   0xB00D             ADD      SP,SP,#+52
   \       0x6A   0xBD30             POP      {R4,R5,PC}
   1243          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22:
   \        0x0   0x0A 0x00          DC8      "\n",0x0,0x0   

   \              0x00 0x00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable22_1:
   \        0x0   0x....'....        DC32     g_nPktSeq

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable23:
   \        0x0   0x....'....        DC32     `_MakeRFCmd::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24:
   \        0x0   0x....'....        DC32     g_flagRspID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_1:
   \        0x0   0x....'....        DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_2:
   \        0x0   0x....'....        DC32     `SendStatReq::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_3:
   \        0x0   0x....'....        DC32     `SendStat::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_4:
   \        0x0   0x....'....        DC32     g_nManHopping

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_5:
   \        0x0   0x....'....        DC32     g_nDevFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_6:
   \        0x0   0x....'....        DC32     `SendPA::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_7:
   \        0x0   0x....'....        DC32     `SendCall::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_8:
   \        0x0   0x....'....        DC32     `SendOCCPA::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_9:
   \        0x0   0x....'....        DC32     `SendLight::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_10:
   \        0x0   0x....'....        DC32     `SendRFCmdCh::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_11:
   \        0x0   0x....'....        DC32     `SendRFCmd::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_12:
   \        0x0   0x....'....        DC32     `SendRFCmdReset::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_13:
   \        0x0   0x....'....        DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_14:
   \        0x0   0x....'....        DC32     `SendRFCmdDFUMode::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_15:
   \        0x0   0x....'....        DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_16:
   \        0x0   0x....'....        DC32     `SendRFCmdUpgrade::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_17:
   \        0x0   0x....'....        DC32     ?_3

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_18:
   \        0x0   0x....'....        DC32     `SendUpgrStat::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_19:
   \        0x0   0x....'....        DC32     ?_4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_20:
   \        0x0   0x....'....        DC32     g_idxTrainSet

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_21:
   \        0x0   0x....'....        DC32     g_nCarNo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_22:
   \        0x0   0x....'....        DC32     `ProcPktStat::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_23:
   \        0x0   0x....'....        DC32     g_bSetRspIDManual

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_24:
   \        0x0   0x....'....        DC32     `ProcPktStatReq::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_25:
   \        0x0   0x....'....        DC32     g_devStat

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_26:
   \        0x0   0x....'....        DC32     g_nRSSI

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_27:
   \        0x0   0x....'....        DC32     `ProcPktCtrlPaCall::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_28:
   \        0x0   0x....'....        DC32     ?_5

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_29:
   \        0x0   0x....'....        DC32     ?_6

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_30:
   \        0x0   0x4002'1000        DC32     0x40021000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_31:
   \        0x0   0x....'....        DC32     ?_7

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_32:
   \        0x0   0x....'....        DC32     ?_8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_33:
   \        0x0   0x....'....        DC32     ?_9

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_34:
   \        0x0   0x....'....        DC32     g_nStampRxPkt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_35:
   \        0x0   0x....'....        DC32     `ProcPktPA::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_36:
   \        0x0   0x....'....        DC32     g_qBufAudioRx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_37:
   \        0x0   0x4002'0400        DC32     0x40020400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_38:
   \        0x0   0x....'....        DC32     `ProcPktCall::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_39:
   \        0x0   0x....'....        DC32     `ProcPktDevConn::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_40:
   \        0x0   0x....'....        DC32     `ProcPktLight::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_41:
   \        0x0   0x....'....        DC32     `ProcPktCmd::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_42:
   \        0x0   0x....'....        DC32     ?_11

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_43:
   \        0x0   0x....'....        DC32     `ProcPktCmdRsp::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_44:
   \        0x0   0x....'....        DC32     `ProcPktUpgr::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_45:
   \        0x0   0x0808'0000        DC32     0x8080000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_46:
   \        0x0   0x....'....        DC32     ?_12

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_47:
   \        0x0   0x....'....        DC32     ?_13

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_48:
   \        0x0   0x....'....        DC32     ?_14

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_49:
   \        0x0   0xE004'2008        DC32     0xe0042008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_50:
   \        0x0   0x....'....        DC32     ?_15

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_51:
   \        0x0   0x....'....        DC32     ?_16

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_52:
   \        0x0   0x....'....        DC32     s_bUpgrDataValid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_53:
   \        0x0   0x....'....        DC32     `ProcPktUpgr::s_rxPkt`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_54:
   \        0x0   0x....'....        DC32     ?_17

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_55:
   \        0x0   0x....'....        DC32     ?_18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_56:
   \        0x0   0x....'....        DC32     ?_19

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_57:
   \        0x0   0x....'....        DC32     hi2c1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_58:
   \        0x0   0x....'....        DC32     ?_20

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_59:
   \        0x0   0x....'....        DC32     ?_21

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_60:
   \        0x0   0x....'....        DC32     `ProcPktUpgrStat::__func__`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_61:
   \        0x0   0x....'....        DC32     ?_22

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable24_62:
   \        0x0   0x....'....        DC32     ?_23

   \                                 In section .rodata, align 4
   \                     ?_0:
   \        0x0   0x25 0x73          DC8 "%s(%d)\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_1:
   \        0x0   0x72 0x65          DC8 "reset"

   \              0x73 0x65    

   \              0x74 0x00
   \        0x6                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_2:
   \        0x0   0x73 0x74          DC8 "stboot"

   \              0x62 0x6F    

   \              0x6F 0x74    

   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_3:
   \        0x0   0x75 0x70          DC8 "upgrade 1"

   \              0x67 0x72    

   \              0x61 0x64    

   \              0x65 0x20    

   \              0x31 0x00
   \        0xA                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_4:
   \        0x0   0x25 0x73          DC8 "%s(%d) - %d\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x25    

   \              0x64 0x0A    

   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_5:
   \        0x0   0x5B 0x53          DC8 "[Start]"

   \              0x74 0x61    

   \              0x72 0x74    

   \              0x5D 0x00

   \                                 In section .rodata, align 4
   \                     ?_6:
   \        0x0   0x5B 0x53          DC8 "[Stop]"

   \              0x74 0x6F    

   \              0x70 0x5D    

   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_7:
   \        0x0   0x5B 0x50          DC8 "[PA]"

   \              0x41 0x5D    

   \              0x00
   \        0x5                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_8:
   \        0x0   0x5B 0x43          DC8 "[Call]"

   \              0x61 0x6C    

   \              0x6C 0x5D    

   \              0x00
   \        0x7                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_9:
   \        0x0   0x5B 0x4F          DC8 "[OccPa]"

   \              0x63 0x63    

   \              0x50 0x61    

   \              0x5D 0x00

   \                                 In section .rodata, align 2
   \        0x0   0x0A 0x00          DC8 "\012"

   \                                 In section .rodata, align 4
   \                     ?_11:
   \        0x0   0x25 0x73          DC8 "%s(%d) - %s\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x25    

   \              0x73 0x0A    

   \              0x00
   \        0xD                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_12:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Out Of Range - baseAddr(0x%08X)\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x4F    

   \              0x75 0x74    

   \              0x20 0x4F    

   \              0x66 0x20    

   \              0x52 0x61    

   \              0x6E 0x67    

   \              0x65 0x20    

   \              0x2D 0x20    

   \              0x62 0x61    

   \              0x73 0x65    

   \              0x41 0x64    

   \              0x64 0x72    

   \              0x28 0x30    

   \              0x78 0x25    

   \              0x30 0x38    

   \              0x58 0x29    

   \              0x0A 0x00
   \       0x2A                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_13:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Start Upgrade\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x53    

   \              0x74 0x61    

   \              0x72 0x74    

   \              0x20 0x55    

   \              0x70 0x67    

   \              0x72 0x61    

   \              0x64 0x65    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_14:
   \        0x0   0x5B 0x25          DC8 "[%08d] Flash Erase - Skip ( Retry - Upgrade )\012"

   \              0x30 0x38    

   \              0x64 0x5D    

   \              0x20 0x46    

   \              0x6C 0x61    

   \              0x73 0x68    

   \              0x20 0x45    

   \              0x72 0x61    

   \              0x73 0x65    

   \              0x20 0x2D    

   \              0x20 0x53    

   \              0x6B 0x69    

   \              0x70 0x20    

   \              0x28 0x20    

   \              0x52 0x65    

   \              0x74 0x72    

   \              0x79 0x20    

   \              0x2D 0x20    

   \              0x55 0x70    

   \              0x67 0x72    

   \              0x61 0x64    

   \              0x65 0x20    

   \              0x29 0x0A    

   \              0x00
   \       0x2F                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_15:
   \        0x0   0x5B 0x25          DC8 "[%08d] Flash Erase - Start\012"

   \              0x30 0x38    

   \              0x64 0x5D    

   \              0x20 0x46    

   \              0x6C 0x61    

   \              0x73 0x68    

   \              0x20 0x45    

   \              0x72 0x61    

   \              0x73 0x65    

   \              0x20 0x2D    

   \              0x20 0x53    

   \              0x74 0x61    

   \              0x72 0x74    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_16:
   \        0x0   0x5B 0x25          DC8 "[%08d] Flash Erase - End\012"

   \              0x30 0x38    

   \              0x64 0x5D    

   \              0x20 0x46    

   \              0x6C 0x61    

   \              0x73 0x68    

   \              0x20 0x45    

   \              0x72 0x61    

   \              0x73 0x65    

   \              0x20 0x2D    

   \              0x20 0x45    

   \              0x6E 0x64    

   \              0x0A 0x00
   \       0x1A                      DS8 2

   \                                 In section .rodata, align 4
   \                     ?_17:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Error idx(%d)\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x45    

   \              0x72 0x72    

   \              0x6F 0x72    

   \              0x20 0x69    

   \              0x64 0x78    

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_18:
   \        0x0   0x25 0x73          DC8 0x25, 0x73, 0x28, 0x25, 0x64, 0x29, 0x20, 0x2D

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D
   \        0x8   0x20 0x45          DC8 0x20, 0x45, 0x6E, 0x64, 0x20, 0x55, 0x70, 0x67

   \              0x6E 0x64    

   \              0x20 0x55    

   \              0x70 0x67
   \       0x10   0x72 0x61          DC8 0x72, 0x61, 0x64, 0x65, 0x20, 0x28, 0x20, 0x72

   \              0x64 0x65    

   \              0x20 0x28    

   \              0x20 0x72
   \       0x18   0x78 0x50          DC8 0x78, 0x50, 0x6B, 0x74, 0x20, 0x3A, 0x20, 0x25

   \              0x6B 0x74    

   \              0x20 0x3A    

   \              0x20 0x25
   \       0x20   0x64 0x20          DC8 0x64, 0x20, 0x2F, 0x20, 0x74, 0x6F, 0x74, 0x50

   \              0x2F 0x20    

   \              0x74 0x6F    

   \              0x74 0x50
   \       0x28   0x6B 0x74          DC8 0x6B, 0x74, 0x20, 0x3A, 0x20, 0x25, 0x64, 0x20

   \              0x20 0x3A    

   \              0x20 0x25    

   \              0x64 0x20
   \       0x30   0x29 0x0A          DC8 0x29, 0x0A, 0

   \              0x00
   \       0x33                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_19:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Upgrade Success ( Size : %d )\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x55    

   \              0x70 0x67    

   \              0x72 0x61    

   \              0x64 0x65    

   \              0x20 0x53    

   \              0x75 0x63    

   \              0x63 0x65    

   \              0x73 0x73    

   \              0x20 0x28    

   \              0x20 0x53    

   \              0x69 0x7A    

   \              0x65 0x20    

   \              0x3A 0x20    

   \              0x25 0x64    

   \              0x20 0x29    

   \              0x0A 0x00

   \                                 In section .rodata, align 4
   \                     ?_20:
   \        0x0   0x25 0x73          DC8 0x25, 0x73, 0x28, 0x25, 0x64, 0x29, 0x20, 0x2D

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D
   \        0x8   0x20 0x45          DC8 0x20, 0x45, 0x45, 0x50, 0x52, 0x4F, 0x4D, 0x20

   \              0x45 0x50    

   \              0x52 0x4F    

   \              0x4D 0x20
   \       0x10   0x5B 0x30          DC8 0x5B, 0x30, 0x2C, 0x31, 0x5D, 0x20, 0x3A, 0x20

   \              0x2C 0x31    

   \              0x5D 0x20    

   \              0x3A 0x20
   \       0x18   0x30 0x78          DC8 0x30, 0x78, 0x25, 0x30, 0x32, 0x58, 0x20, 0x30

   \              0x25 0x30    

   \              0x32 0x58    

   \              0x20 0x30
   \       0x20   0x78 0x25          DC8 0x78, 0x25, 0x30, 0x32, 0x58, 0x20, 0x2F, 0x20

   \              0x30 0x32    

   \              0x58 0x20    

   \              0x2F 0x20
   \       0x28   0x28 0x20          DC8 0x28, 0x20, 0x62, 0x69, 0x6E, 0x20, 0x73, 0x69

   \              0x62 0x69    

   \              0x6E 0x20    

   \              0x73 0x69
   \       0x30   0x7A 0x65          DC8 0x7A, 0x65, 0x20, 0x3A, 0x20, 0x25, 0x64, 0x20

   \              0x20 0x3A    

   \              0x20 0x25    

   \              0x64 0x20
   \       0x38   0x29 0x0A          DC8 0x29, 0x0A, 0

   \              0x00
   \       0x3B                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_21:
   \        0x0   0x25 0x73          DC8 "%s(%d) - Upgrade Failed\012"

   \              0x28 0x25    

   \              0x64 0x29    

   \              0x20 0x2D    

   \              0x20 0x55    

   \              0x70 0x67    

   \              0x72 0x61    

   \              0x64 0x65    

   \              0x20 0x46    

   \              0x61 0x69    

   \              0x6C 0x65    

   \              0x64 0x0A    

   \              0x00
   \       0x19                      DS8 3

   \                                 In section .rodata, align 4
   \                     ?_22:
   \        0x0   0x53 0x75          DC8 "Success(%d/%d)"

   \              0x63 0x63    

   \              0x65 0x73    

   \              0x73 0x28    

   \              0x25 0x64    

   \              0x2F 0x25    

   \              0x64 0x29    

   \              0x00
   \        0xF                      DS8 1

   \                                 In section .rodata, align 4
   \                     ?_23:
   \        0x0   0x46 0x61          DC8 "Failed(%d/%d)"

   \              0x69 0x6C    

   \              0x65 0x64    

   \              0x28 0x25    

   \              0x64 0x2F    

   \              0x25 0x64    

   \              0x29 0x00
   \        0xE                      DS8 2
   1244          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   ProcPktCall
        16   -> GetDbg
        16   -> GetDevID
        16   -> HAL_GPIO_WritePin
        16   -> HAL_GetTick
        16   -> RFM_Spk
        16   -> SetRFMMode
        16   -> printf
        16   -> qBufPut
       8   ProcPktCmd
         8   -> GetDbg
         8   -> ProcessCommand
         8   -> printf
       8   ProcPktCmdRsp
         8   -> GetDbg
         8   -> printf
      16   ProcPktCtrlPaCall
        16   -> GetChNearRFT
        16   -> GetDbg
        16   -> GetDevID
        16   -> HAL_GPIO_WritePin
        16   -> HAL_GetTick
        16   -> SetChPARFT
        16   -> SetRFMMode
        16   -> printf
      16   ProcPktDevConn
        16   -> GetDbg
        16   -> GetDevID
        16   -> printf
       8   ProcPktLight
         8   -> GetDbg
         8   -> GetDevID
         8   -> HAL_GPIO_WritePin
         8   -> printf
      16   ProcPktPA
        16   -> GetDbg
        16   -> GetDevID
        16   -> HAL_GPIO_WritePin
        16   -> HAL_GetTick
        16   -> RFM_Spk
        16   -> SetRFMMode
        16   -> printf
        16   -> qBufPut
      16   ProcPktStat
        16   -> GetDbg
        16   -> SetStat
        16   -> UpdateStat
        16   -> printf
      16   ProcPktStatReq
        16   -> GetDbg
        16   -> GetDevID
        16   -> SendStat
        16   -> SetStat
        16   -> printf
      72   ProcPktUpgr
        72   -> FLASH_If_Erase
        72   -> FLASH_If_Write
        72   -> GetDbg
        72   -> HAL_Delay
        72   -> HAL_GetTick
        72   -> M24_HAL_ReadBytes
        72   -> M24_HAL_WriteBytes
        72   -> SendUpgrStat
        72   -> SetRFMMode
        72   -> __aeabi_memset
        72   -> cmd_reset
        72   -> printf
      64   ProcPktUpgrStat
        64   -> GetDbg
        64   -> LCDPrintfXY
        64   -> printf
        64   -> sprintf
      96   SendCall
        96   -> GetChPA
        96   -> GetChPARFT
        96   -> SendPktCh
        96   -> _MakePktHdr2
        96   -> __aeabi_memset
        96   -> printf
      96   SendLight
        96   -> GetChPA
        96   -> SendPktCh
        96   -> _MakePktHdr2
        96   -> __aeabi_memset
        96   -> printf
       8   SendLightOff
         8   -> SendLight
       8   SendLightOn
         8   -> SendLight
      96   SendOCCPA
        96   -> GetChPA
        96   -> GetChPARFT
        96   -> SendPktCh
        96   -> _MakePktHdr2
        96   -> __aeabi_memset
        96   -> printf
      96   SendPA
        96   -> GetChPA
        96   -> GetChPARFT
        96   -> SendPktCh
        96   -> _MakePktHdr2
        96   -> __aeabi_memset
        96   -> printf
      88   SendRFCmd
        88   -> HAL_Delay
        88   -> SendPktCh
        88   -> _MakeRFCmd
        88   -> printf
      88   SendRFCmdCh
        88   -> SendPktCh
        88   -> _MakeRFCmd
        88   -> printf
       8   SendRFCmdDFUMode
         8   -> SendRFCmd
         8   -> printf
      80   SendRFCmdReset
        80   -> SendPktCh
        80   -> SendRFCmd
        80   -> _MakeRFCmd
        80   -> printf
       8   SendRFCmdUpgrade
         8   -> HAL_Delay
         8   -> SendRFCmd
         8   -> SendRFCmdCh
         8   -> SetUpgrReTry
         8   -> UpgrSendImageApp
         8   -> printf
      96   SendStat
        96   -> GetCarNo
        96   -> GetChRx
        96   -> GetDbg
        96   -> GetDevID
        96   -> GetTrainSetIdx
        96   -> HAL_GetTick
        96   -> SendPktCh
        96   -> _MakePktHdr
        96   -> __aeabi_memset
        96   -> printf
      96   SendStatReq
        96   -> GetCarNo
        96   -> GetChRx
        96   -> GetDbg
        96   -> GetDevID
        96   -> GetTrainSetIdx
        96   -> SendPktCh
        96   -> _MakePktHdr
        96   -> __aeabi_memset
        96   -> printf
     112   SendUpgrData
       112   -> GetDevID
       112   -> GetUpgrReTry
       112   -> SendPktCh
       112   -> _MakePktHdr
       112   -> __aeabi_memcpy
       112   -> __aeabi_memset
      96   SendUpgrStat
        96   -> GetDevID
        96   -> HAL_Delay
        96   -> SendPktCh
        96   -> _MakePktHdr
        96   -> __aeabi_memset
        96   -> printf
      24   _MakePktHdr
        24   -> GetCarNo
        24   -> GetDevID
      16   _MakePktHdr2
        16   -> GetChPARFT
        16   -> GetChRx
        16   -> GetRFTID
        16   -> GetTrainSetIdx
      32   _MakeRFCmd
        32   -> GetDevID
        32   -> _MakePktHdr
        32   -> __aeabi_memset
        32   -> printf
        32   -> strcpy


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable22
       4  ??DataTable22_1
       4  ??DataTable23
       4  ??DataTable24
       4  ??DataTable24_1
       4  ??DataTable24_10
       4  ??DataTable24_11
       4  ??DataTable24_12
       4  ??DataTable24_13
       4  ??DataTable24_14
       4  ??DataTable24_15
       4  ??DataTable24_16
       4  ??DataTable24_17
       4  ??DataTable24_18
       4  ??DataTable24_19
       4  ??DataTable24_2
       4  ??DataTable24_20
       4  ??DataTable24_21
       4  ??DataTable24_22
       4  ??DataTable24_23
       4  ??DataTable24_24
       4  ??DataTable24_25
       4  ??DataTable24_26
       4  ??DataTable24_27
       4  ??DataTable24_28
       4  ??DataTable24_29
       4  ??DataTable24_3
       4  ??DataTable24_30
       4  ??DataTable24_31
       4  ??DataTable24_32
       4  ??DataTable24_33
       4  ??DataTable24_34
       4  ??DataTable24_35
       4  ??DataTable24_36
       4  ??DataTable24_37
       4  ??DataTable24_38
       4  ??DataTable24_39
       4  ??DataTable24_4
       4  ??DataTable24_40
       4  ??DataTable24_41
       4  ??DataTable24_42
       4  ??DataTable24_43
       4  ??DataTable24_44
       4  ??DataTable24_45
       4  ??DataTable24_46
       4  ??DataTable24_47
       4  ??DataTable24_48
       4  ??DataTable24_49
       4  ??DataTable24_5
       4  ??DataTable24_50
       4  ??DataTable24_51
       4  ??DataTable24_52
       4  ??DataTable24_53
       4  ??DataTable24_54
       4  ??DataTable24_55
       4  ??DataTable24_56
       4  ??DataTable24_57
       4  ??DataTable24_58
       4  ??DataTable24_59
       4  ??DataTable24_6
       4  ??DataTable24_60
       4  ??DataTable24_61
       4  ??DataTable24_62
       4  ??DataTable24_7
       4  ??DataTable24_8
       4  ??DataTable24_9
       8  ?_0
       8  ?_1
       2  ?_10
      16  ?_11
      44  ?_12
      24  ?_13
      48  ?_14
      28  ?_15
      28  ?_16
      24  ?_17
      52  ?_18
      40  ?_19
       8  ?_2
      60  ?_20
      28  ?_21
      16  ?_22
      16  ?_23
      12  ?_3
      16  ?_4
       8  ?_5
       8  ?_6
       8  ?_7
       8  ?_8
       8  ?_9
     108  ProcPktCall
      74  ProcPktCmd
      28  ProcPktCmdRsp
     168  ProcPktCtrlPaCall
      48  ProcPktDevConn
      88  ProcPktLight
     150  ProcPktPA
      92  ProcPktStat
      94  ProcPktStatReq
     702  ProcPktUpgr
     108  ProcPktUpgrStat
      98  SendCall
      70  SendLight
      10  SendLightOff
      10  SendLightOn
      96  SendOCCPA
      96  SendPA
      72  SendRFCmd
      54  SendRFCmdCh
      30  SendRFCmdDFUMode
      56  SendRFCmdReset
      74  SendRFCmdUpgrade
     178  SendStat
     104  SendStatReq
     140  SendUpgrData
     116  SendUpgrStat
     158  _MakePktHdr
     150  _MakePktHdr2
      80  _MakeRFCmd
   1'024  s_bUpgrDataValid
       4  s_rxPkt
     336  -- Other

 
 1'028 bytes in section .bss
   854 bytes in section .rodata
 3'516 bytes in section .text
 
 3'516 bytes of CODE  memory
   854 bytes of CONST memory
 1'028 bytes of DATA  memory

Errors: none
Warnings: 23
