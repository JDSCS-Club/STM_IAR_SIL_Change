
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002560  0800c004  0800c004  0001c004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e564  0800e564  0002030c  2**0
                  CONTENTS
  4 .ARM          00000008  0800e564  0800e564  0001e564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e56c  0800e56c  0002030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e56c  0800e56c  0001e56c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e574  0800e574  0001e574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000030c  20000000  0800e578  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e0c  2000030c  0800e884  0002030c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001118  0800e884  00021118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c1d3  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005703  00000000  00000000  0004c50f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b10  00000000  00000000  00051c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001988  00000000  00000000  00053728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a5f2  00000000  00000000  000550b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000218af  00000000  00000000  0007f6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddb85  00000000  00000000  000a0f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017ead6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007cd0  00000000  00000000  0017eb2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000030c 	.word	0x2000030c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bfec 	.word	0x0800bfec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000310 	.word	0x20000310
 80001cc:	0800bfec 	.word	0x0800bfec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_IWDG_Disable>:
#endif

//========================================================================
void MX_IWDG_Disable( void )
//========================================================================
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
	//	iWdg : iWatchdog의 경우 처음 시작 이후에 Stop 불가.
	//			-> Reset이후에만 종료됨.
//	IWDG_DISABLE_WRITE_ACCESS( &hiwdg );
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f001 f98e 	bl	800189c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f846 	bl	8000610 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

#if	defined(USE_BOOTLOADER)

  MX_GPIO_Init();
 8000584:	f000 fab0 	bl	8000ae8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000588:	f000 fa68 	bl	8000a5c <MX_DMA_Init>
  MX_I2C1_Init();
 800058c:	f000 f8c2 	bl	8000714 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000590:	f000 f94a 	bl	8000828 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000594:	f000 f97e 	bl	8000894 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000598:	f000 fa0c 	bl	80009b4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800059c:	f000 fa34 	bl	8000a08 <MX_USART2_UART_Init>
  MX_I2S3_Init();
 80005a0:	f000 f914 	bl	80007cc <MX_I2S3_Init>
  MX_TIM3_Init();
 80005a4:	f000 f9ae 	bl	8000904 <MX_TIM3_Init>
//  MX_ADC1_Init();
  MX_I2C3_Init();
 80005a8:	f000 f8e2 	bl	8000770 <MX_I2C3_Init>
	//========================================================================
	//    Start PWM

	//    I2S MCLK - 12 MHz
  	//		72000000 / 3 / 2 = 12000000 ( 12MHz ) - MCLK ( MAX9860+ )
	HAL_TIM_PWM_Start( &htim3, TIM_CHANNEL_2 );       //      12 MHz
 80005ac:	2104      	movs	r1, #4
 80005ae:	4812      	ldr	r0, [pc, #72]	; (80005f8 <main+0x80>)
 80005b0:	f005 fdd6 	bl	8006160 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start( &htim3, TIM_CHANNEL_2 );
 80005b4:	2104      	movs	r1, #4
 80005b6:	4810      	ldr	r0, [pc, #64]	; (80005f8 <main+0x80>)
 80005b8:	f006 fa7b 	bl	8006ab2 <HAL_TIMEx_PWMN_Start>

	//========================================================================
	//    Initial

	//	Serial
	SerialInit( &huart1, &huart2 );   //  Init Serial Handle
 80005bc:	490f      	ldr	r1, [pc, #60]	; (80005fc <main+0x84>)
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <main+0x88>)
 80005c0:	f009 fdac 	bl	800a11c <SerialInit>
	//SerialInit( NULL, &huart2 );   //  Init Serial Handle
	setbuf ( stdout, NULL );		            //	1024 byte buffer clear
 80005c4:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <main+0x8c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f00a faa9 	bl	800ab24 <setbuf>
	//  setvbuf ( stdout, NULL, _IOLBF, NULL );	//	Line Buffer
	setvbuf ( stdout, NULL, _IONBF, NULL );	//	No Buffer
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <main+0x8c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	6898      	ldr	r0, [r3, #8]
 80005d8:	2300      	movs	r3, #0
 80005da:	2202      	movs	r2, #2
 80005dc:	2100      	movs	r1, #0
 80005de:	f00a faa9 	bl	800ab34 <setvbuf>

	printf( "%s(%d) - Start\n", __func__, __LINE__ );
 80005e2:	22f9      	movs	r2, #249	; 0xf9
 80005e4:	4908      	ldr	r1, [pc, #32]	; (8000608 <main+0x90>)
 80005e6:	4809      	ldr	r0, [pc, #36]	; (800060c <main+0x94>)
 80005e8:	f00a f9f8 	bl	800a9dc <iprintf>

#if	defined(USE_BOOTLOADER)

	BootLoaderTask();
 80005ec:	f008 ff18 	bl	8009420 <BootLoaderTask>
 80005f0:	2300      	movs	r3, #0

#endif


  /* USER CODE END 3 */
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000700 	.word	0x20000700
 80005fc:	20000880 	.word	0x20000880
 8000600:	200007e8 	.word	0x200007e8
 8000604:	200002a8 	.word	0x200002a8
 8000608:	0800cbc4 	.word	0x0800cbc4
 800060c:	0800c004 	.word	0x0800c004

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b098      	sub	sp, #96	; 0x60
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800061a:	2230      	movs	r2, #48	; 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00a f9d4 	bl	800a9cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 031c 	add.w	r3, r7, #28
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	4b31      	ldr	r3, [pc, #196]	; (800070c <SystemClock_Config+0xfc>)
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	4a30      	ldr	r2, [pc, #192]	; (800070c <SystemClock_Config+0xfc>)
 800064c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000650:	6413      	str	r3, [r2, #64]	; 0x40
 8000652:	4b2e      	ldr	r3, [pc, #184]	; (800070c <SystemClock_Config+0xfc>)
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065e:	2300      	movs	r3, #0
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4b2b      	ldr	r3, [pc, #172]	; (8000710 <SystemClock_Config+0x100>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a2a      	ldr	r2, [pc, #168]	; (8000710 <SystemClock_Config+0x100>)
 8000668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066c:	6013      	str	r3, [r2, #0]
 800066e:	4b28      	ldr	r3, [pc, #160]	; (8000710 <SystemClock_Config+0x100>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800067a:	2309      	movs	r3, #9
 800067c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800067e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000682:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000690:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000692:	230f      	movs	r3, #15
 8000694:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000696:	2348      	movs	r3, #72	; 0x48
 8000698:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069a:	2302      	movs	r3, #2
 800069c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800069e:	2303      	movs	r3, #3
 80006a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006a6:	4618      	mov	r0, r3
 80006a8:	f004 fdf2 	bl	8005290 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006b2:	f000 fb5d 	bl	8000d70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 f84c 	bl	8005770 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006de:	f000 fb47 	bl	8000d70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80006e2:	2301      	movs	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 128;
 80006e6:	2380      	movs	r3, #128	; 0x80
 80006e8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 80006ea:	2305      	movs	r3, #5
 80006ec:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ee:	f107 030c 	add.w	r3, r7, #12
 80006f2:	4618      	mov	r0, r3
 80006f4:	f005 fa3e 	bl	8005b74 <HAL_RCCEx_PeriphCLKConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80006fe:	f000 fb37 	bl	8000d70 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3760      	adds	r7, #96	; 0x60
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <MX_I2C1_Init+0x50>)
 800071a:	4a13      	ldr	r2, [pc, #76]	; (8000768 <MX_I2C1_Init+0x54>)
 800071c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800071e:	4b11      	ldr	r3, [pc, #68]	; (8000764 <MX_I2C1_Init+0x50>)
 8000720:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_I2C1_Init+0x58>)
 8000722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <MX_I2C1_Init+0x50>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <MX_I2C1_Init+0x50>)
 800072c:	2200      	movs	r2, #0
 800072e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <MX_I2C1_Init+0x50>)
 8000732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000738:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <MX_I2C1_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <MX_I2C1_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000750:	4804      	ldr	r0, [pc, #16]	; (8000764 <MX_I2C1_Init+0x50>)
 8000752:	f002 fc1f 	bl	8002f94 <HAL_I2C_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800075c:	f000 fb08 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	200006a0 	.word	0x200006a0
 8000768:	40005400 	.word	0x40005400
 800076c:	000186a0 	.word	0x000186a0

08000770 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_I2C3_Init+0x50>)
 8000776:	4a13      	ldr	r2, [pc, #76]	; (80007c4 <MX_I2C3_Init+0x54>)
 8000778:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_I2C3_Init+0x50>)
 800077c:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <MX_I2C3_Init+0x58>)
 800077e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_I2C3_Init+0x50>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_I2C3_Init+0x50>)
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_I2C3_Init+0x50>)
 800078e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000792:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_I2C3_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_I2C3_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	; (80007c0 <MX_I2C3_Init+0x50>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007a6:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_I2C3_Init+0x50>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_I2C3_Init+0x50>)
 80007ae:	f002 fbf1 	bl	8002f94 <HAL_I2C_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007b8:	f000 fada 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200005f4 	.word	0x200005f4
 80007c4:	40005c00 	.word	0x40005c00
 80007c8:	00061a80 	.word	0x00061a80

080007cc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007d0:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_I2S3_Init+0x54>)
 80007d2:	4a14      	ldr	r2, [pc, #80]	; (8000824 <MX_I2S3_Init+0x58>)
 80007d4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2S3_Init+0x54>)
 80007d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007dc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PCM_SHORT;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_I2S3_Init+0x54>)
 80007e0:	2230      	movs	r2, #48	; 0x30
 80007e2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B_EXTENDED;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_I2S3_Init+0x54>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_I2S3_Init+0x54>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_I2S3_Init+0x54>)
 80007f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80007f6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_I2S3_Init+0x54>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_I2S3_Init+0x54>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_I2S3_Init+0x54>)
 8000806:	2201      	movs	r2, #1
 8000808:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_I2S3_Init+0x54>)
 800080c:	f003 fe30 	bl	8004470 <HAL_I2S_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000816:	f000 faab 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	200009e0 	.word	0x200009e0
 8000824:	40003c00 	.word	0x40003c00

08000828 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_SPI1_Init+0x64>)
 800082e:	4a18      	ldr	r2, [pc, #96]	; (8000890 <MX_SPI1_Init+0x68>)
 8000830:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000832:	4b16      	ldr	r3, [pc, #88]	; (800088c <MX_SPI1_Init+0x64>)
 8000834:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000838:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800083a:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_SPI1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_SPI1_Init+0x64>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_SPI1_Init+0x64>)
 800085c:	2210      	movs	r2, #16
 800085e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <MX_SPI1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_SPI1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <MX_SPI1_Init+0x64>)
 800086e:	2200      	movs	r2, #0
 8000870:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_SPI1_Init+0x64>)
 8000874:	220a      	movs	r2, #10
 8000876:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <MX_SPI1_Init+0x64>)
 800087a:	f005 fb89 	bl	8005f90 <HAL_SPI_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000884:	f000 fa74 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000828 	.word	0x20000828
 8000890:	40013000 	.word	0x40013000

08000894 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_SPI2_Init+0x68>)
 800089a:	4a19      	ldr	r2, [pc, #100]	; (8000900 <MX_SPI2_Init+0x6c>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_SPI2_Init+0x68>)
 80008a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_SPI2_Init+0x68>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <MX_SPI2_Init+0x68>)
 80008ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_SPI2_Init+0x68>)
 80008b6:	2202      	movs	r2, #2
 80008b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_SPI2_Init+0x68>)
 80008bc:	2201      	movs	r2, #1
 80008be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_SPI2_Init+0x68>)
 80008c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_SPI2_Init+0x68>)
 80008ca:	2228      	movs	r2, #40	; 0x28
 80008cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_SPI2_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_SPI2_Init+0x68>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_SPI2_Init+0x68>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_SPI2_Init+0x68>)
 80008e2:	220a      	movs	r2, #10
 80008e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_SPI2_Init+0x68>)
 80008e8:	f005 fb52 	bl	8005f90 <HAL_SPI_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80008f2:	f000 fa3d 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000648 	.word	0x20000648
 8000900:	40003800 	.word	0x40003800

08000904 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
    //  72000000 / 18 / 2 = 2000000 ( 2MHz )
    //  72000000 / 3 / 2 = 12000000 ( 12MHz ) - MCLK ( MAX9860+ )

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090a:	f107 0320 	add.w	r3, r7, #32
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
 8000920:	611a      	str	r2, [r3, #16]
 8000922:	615a      	str	r2, [r3, #20]
 8000924:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <MX_TIM3_Init+0xa8>)
 8000928:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <MX_TIM3_Init+0xac>)
 800092a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3-1;
 800092c:	4b1f      	ldr	r3, [pc, #124]	; (80009ac <MX_TIM3_Init+0xa8>)
 800092e:	2202      	movs	r2, #2
 8000930:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000932:	4b1e      	ldr	r3, [pc, #120]	; (80009ac <MX_TIM3_Init+0xa8>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2-1;
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <MX_TIM3_Init+0xa8>)
 800093a:	2201      	movs	r2, #1
 800093c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800093e:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <MX_TIM3_Init+0xa8>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000944:	4b19      	ldr	r3, [pc, #100]	; (80009ac <MX_TIM3_Init+0xa8>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800094a:	4818      	ldr	r0, [pc, #96]	; (80009ac <MX_TIM3_Init+0xa8>)
 800094c:	f005 fbdd 	bl	800610a <HAL_TIM_PWM_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8000956:	f000 fa0b 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095a:	2300      	movs	r3, #0
 800095c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000962:	f107 0320 	add.w	r3, r7, #32
 8000966:	4619      	mov	r1, r3
 8000968:	4810      	ldr	r0, [pc, #64]	; (80009ac <MX_TIM3_Init+0xa8>)
 800096a:	f006 f8cd 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8000974:	f000 f9fc 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000978:	2360      	movs	r3, #96	; 0x60
 800097a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 800097c:	2301      	movs	r3, #1
 800097e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000980:	2300      	movs	r3, #0
 8000982:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000988:	1d3b      	adds	r3, r7, #4
 800098a:	2204      	movs	r2, #4
 800098c:	4619      	mov	r1, r3
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <MX_TIM3_Init+0xa8>)
 8000990:	f005 fd2c 	bl	80063ec <HAL_TIM_PWM_ConfigChannel>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800099a:	f000 f9e9 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800099e:	4803      	ldr	r0, [pc, #12]	; (80009ac <MX_TIM3_Init+0xa8>)
 80009a0:	f000 fce6 	bl	8001370 <HAL_TIM_MspPostInit>

}
 80009a4:	bf00      	nop
 80009a6:	3728      	adds	r7, #40	; 0x28
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20000700 	.word	0x20000700
 80009b0:	40000400 	.word	0x40000400

080009b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_USART1_UART_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009ec:	f006 f941 	bl	8006c72 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 f9bb 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200007e8 	.word	0x200007e8
 8000a04:	40011000 	.word	0x40011000

08000a08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_USART2_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART2_UART_Init+0x4c>)
 8000a40:	f006 f917 	bl	8006c72 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 f991 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000880 	.word	0x20000880
 8000a58:	40004400 	.word	0x40004400

08000a5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	607b      	str	r3, [r7, #4]
 8000a66:	4b1f      	ldr	r3, [pc, #124]	; (8000ae4 <MX_DMA_Init+0x88>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a1e      	ldr	r2, [pc, #120]	; (8000ae4 <MX_DMA_Init+0x88>)
 8000a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <MX_DMA_Init+0x88>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	603b      	str	r3, [r7, #0]
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_DMA_Init+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <MX_DMA_Init+0x88>)
 8000a88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_DMA_Init+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	200b      	movs	r0, #11
 8000aa0:	f001 f84e 	bl	8001b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000aa4:	200b      	movs	r0, #11
 8000aa6:	f001 f867 	bl	8001b78 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	2010      	movs	r0, #16
 8000ab0:	f001 f846 	bl	8001b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ab4:	2010      	movs	r0, #16
 8000ab6:	f001 f85f 	bl	8001b78 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2100      	movs	r1, #0
 8000abe:	2038      	movs	r0, #56	; 0x38
 8000ac0:	f001 f83e 	bl	8001b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ac4:	2038      	movs	r0, #56	; 0x38
 8000ac6:	f001 f857 	bl	8001b78 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	203b      	movs	r0, #59	; 0x3b
 8000ad0:	f001 f836 	bl	8001b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000ad4:	203b      	movs	r0, #59	; 0x3b
 8000ad6:	f001 f84f 	bl	8001b78 <HAL_NVIC_EnableIRQ>

}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08c      	sub	sp, #48	; 0x30
 8000aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	2200      	movs	r2, #0
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	605a      	str	r2, [r3, #4]
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	60da      	str	r2, [r3, #12]
 8000afc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	61bb      	str	r3, [r7, #24]
 8000b02:	4b8b      	ldr	r3, [pc, #556]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a8a      	ldr	r2, [pc, #552]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b08:	f043 0310 	orr.w	r3, r3, #16
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b88      	ldr	r3, [pc, #544]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	61bb      	str	r3, [r7, #24]
 8000b18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	4b84      	ldr	r3, [pc, #528]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a83      	ldr	r2, [pc, #524]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b81      	ldr	r3, [pc, #516]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	4b7d      	ldr	r3, [pc, #500]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a7c      	ldr	r2, [pc, #496]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b7a      	ldr	r3, [pc, #488]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b76      	ldr	r3, [pc, #472]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a75      	ldr	r2, [pc, #468]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b73      	ldr	r3, [pc, #460]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	4b6f      	ldr	r3, [pc, #444]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a6e      	ldr	r2, [pc, #440]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b6c      	ldr	r3, [pc, #432]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b68      	ldr	r3, [pc, #416]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a67      	ldr	r2, [pc, #412]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b94:	f043 0308 	orr.w	r3, r3, #8
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b65      	ldr	r3, [pc, #404]	; (8000d30 <MX_GPIO_Init+0x248>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0308 	and.w	r3, r3, #8
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PWR_RF_Pin|PWR_AUDIO_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	210c      	movs	r1, #12
 8000baa:	4862      	ldr	r0, [pc, #392]	; (8000d34 <MX_GPIO_Init+0x24c>)
 8000bac:	f002 f9b4 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPK_ON_Pin|STANDBY_Pin|AUDIO_ON_Pin|LIGHT_ON_Pin
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f647 31a0 	movw	r1, #31648	; 0x7ba0
 8000bb6:	485f      	ldr	r0, [pc, #380]	; (8000d34 <MX_GPIO_Init+0x24c>)
 8000bb8:	f002 f9ae 	bl	8002f18 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_ID_Pin|TRN_RST_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f248 0120 	movw	r1, #32800	; 0x8020
 8000bc2:	485d      	ldr	r0, [pc, #372]	; (8000d38 <MX_GPIO_Init+0x250>)
 8000bc4:	f002 f9a8 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CSN_GPIO_Port, SPI_CSN_Pin, GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2110      	movs	r1, #16
 8000bcc:	485b      	ldr	r0, [pc, #364]	; (8000d3c <MX_GPIO_Init+0x254>)
 8000bce:	f002 f9a3 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RX_EN_Pin|RF_TX_Pin|RF_RX_Pin|LED_ON_A_Pin
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f246 1107 	movw	r1, #24839	; 0x6107
 8000bd8:	4859      	ldr	r0, [pc, #356]	; (8000d40 <MX_GPIO_Init+0x258>)
 8000bda:	f002 f99d 	bl	8002f18 <HAL_GPIO_WritePin>
                          |LED_ON_B_Pin|FLASH_ON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS_GPIO_Port, SS_Pin, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000be4:	4856      	ldr	r0, [pc, #344]	; (8000d40 <MX_GPIO_Init+0x258>)
 8000be6:	f002 f997 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ON_OFF_EN_GPIO_Port, ON_OFF_EN_Pin, GPIO_PIN_SET);
 8000bea:	2201      	movs	r2, #1
 8000bec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf0:	4854      	ldr	r0, [pc, #336]	; (8000d44 <MX_GPIO_Init+0x25c>)
 8000bf2:	f002 f991 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_ST_GPIO_Port, LED_ST_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfc:	4851      	ldr	r0, [pc, #324]	; (8000d44 <MX_GPIO_Init+0x25c>)
 8000bfe:	f002 f98b 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWR_RF_Pin PWR_AUDIO_Pin SPK_ON_Pin STANDBY_Pin
                           AUDIO_ON_Pin LIGHT_ON_Pin PE11 PE12
                           PE13 PE14 */
  GPIO_InitStruct.Pin = PWR_RF_Pin|PWR_AUDIO_Pin|SPK_ON_Pin|STANDBY_Pin
 8000c02:	f647 33ac 	movw	r3, #31660	; 0x7bac
 8000c06:	61fb      	str	r3, [r7, #28]
                          |AUDIO_ON_Pin|LIGHT_ON_Pin|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4846      	ldr	r0, [pc, #280]	; (8000d34 <MX_GPIO_Init+0x24c>)
 8000c1c:	f001 ffc8 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO1_Pin OVERRIDE_ON_Pin VDD_3_3V_RF_Pin */
  GPIO_InitStruct.Pin = GPIO1_Pin|OVERRIDE_ON_Pin|VDD_3_3V_RF_Pin;
 8000c20:	f240 4341 	movw	r3, #1089	; 0x441
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	483f      	ldr	r0, [pc, #252]	; (8000d34 <MX_GPIO_Init+0x24c>)
 8000c36:	f001 ffbb 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_ID_Pin TRN_RST_Pin */
  GPIO_InitStruct.Pin = USB_ID_Pin|TRN_RST_Pin;
 8000c3a:	f248 0320 	movw	r3, #32800	; 0x8020
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4839      	ldr	r0, [pc, #228]	; (8000d38 <MX_GPIO_Init+0x250>)
 8000c54:	f001 ffac 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_CHRG_Pin */
  GPIO_InitStruct.Pin = BAT_CHRG_Pin;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BAT_CHRG_GPIO_Port, &GPIO_InitStruct);
 8000c64:	f107 031c 	add.w	r3, r7, #28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4833      	ldr	r0, [pc, #204]	; (8000d38 <MX_GPIO_Init+0x250>)
 8000c6c:	f001 ffa0 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CSN_Pin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin;
 8000c70:	2310      	movs	r3, #16
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	482d      	ldr	r0, [pc, #180]	; (8000d3c <MX_GPIO_Init+0x254>)
 8000c88:	f001 ff92 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_INT_Pin */
  GPIO_InitStruct.Pin = RF_INT_Pin;
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <MX_GPIO_Init+0x260>)
 8000c92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(RF_INT_GPIO_Port, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4826      	ldr	r0, [pc, #152]	; (8000d38 <MX_GPIO_Init+0x250>)
 8000ca0:	f001 ff86 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RX_EN_Pin RF_TX_Pin RF_RX_Pin LED_ON_A_Pin
                           LED_ON_B_Pin FLASH_ON_Pin */
  GPIO_InitStruct.Pin = RX_EN_Pin|RF_TX_Pin|RF_RX_Pin|LED_ON_A_Pin
 8000ca4:	f246 1307 	movw	r3, #24839	; 0x6107
 8000ca8:	61fb      	str	r3, [r7, #28]
                          |LED_ON_B_Pin|FLASH_ON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000caa:	2301      	movs	r3, #1
 8000cac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 031c 	add.w	r3, r7, #28
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4820      	ldr	r0, [pc, #128]	; (8000d40 <MX_GPIO_Init+0x258>)
 8000cbe:	f001 ff77 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS_Pin */
  GPIO_InitStruct.Pin = SS_Pin;
 8000cc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SS_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4819      	ldr	r0, [pc, #100]	; (8000d40 <MX_GPIO_Init+0x258>)
 8000cdc:	f001 ff68 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_OFF_KEY_Pin DOME1_Pin DOME2_Pin DOME3_Pin
                           DOME4_Pin DOME5_Pin DOME6_Pin SOS_KEY_Pin
                           PTT_KEY_Pin */
  GPIO_InitStruct.Pin = ON_OFF_KEY_Pin|DOME1_Pin|DOME2_Pin|DOME3_Pin
 8000ce0:	f240 23ff 	movw	r3, #767	; 0x2ff
 8000ce4:	61fb      	str	r3, [r7, #28]
                          |DOME4_Pin|DOME5_Pin|DOME6_Pin|SOS_KEY_Pin
                          |PTT_KEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4813      	ldr	r0, [pc, #76]	; (8000d44 <MX_GPIO_Init+0x25c>)
 8000cf6:	f001 ff5b 	bl	8002bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ON_OFF_EN_Pin LED_ST_Pin */
  GPIO_InitStruct.Pin = ON_OFF_EN_Pin|LED_ST_Pin;
 8000cfa:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	2301      	movs	r3, #1
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d0c:	f107 031c 	add.w	r3, r7, #28
 8000d10:	4619      	mov	r1, r3
 8000d12:	480c      	ldr	r0, [pc, #48]	; (8000d44 <MX_GPIO_Init+0x25c>)
 8000d14:	f001 ff4c 	bl	8002bb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	200a      	movs	r0, #10
 8000d1e:	f000 ff0f 	bl	8001b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000d22:	200a      	movs	r0, #10
 8000d24:	f000 ff28 	bl	8001b78 <HAL_NVIC_EnableIRQ>

}
 8000d28:	bf00      	nop
 8000d2a:	3730      	adds	r7, #48	; 0x30
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40020800 	.word	0x40020800
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40020400 	.word	0x40020400
 8000d44:	40020c00 	.word	0x40020c00
 8000d48:	10310000 	.word	0x10310000

08000d4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d101      	bne.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d5e:	f000 fdf3 	bl	8001948 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40010000 	.word	0x40010000

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
	...

08000d80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <HAL_MspInit+0x4c>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a08      	ldr	r2, [pc, #32]	; (8000dcc <HAL_MspInit+0x4c>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_MspInit+0x4c>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08c      	sub	sp, #48	; 0x30
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a42      	ldr	r2, [pc, #264]	; (8000ef8 <HAL_I2C_MspInit+0x128>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d12c      	bne.n	8000e4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	4b41      	ldr	r3, [pc, #260]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a40      	ldr	r2, [pc, #256]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e0e:	23c0      	movs	r3, #192	; 0xc0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e12:	2312      	movs	r3, #18
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e16:	2301      	movs	r3, #1
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4835      	ldr	r0, [pc, #212]	; (8000f00 <HAL_I2C_MspInit+0x130>)
 8000e2a:	f001 fec1 	bl	8002bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
 8000e32:	4b32      	ldr	r3, [pc, #200]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e36:	4a31      	ldr	r2, [pc, #196]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e46:	617b      	str	r3, [r7, #20]
 8000e48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e4a:	e050      	b.n	8000eee <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a2c      	ldr	r2, [pc, #176]	; (8000f04 <HAL_I2C_MspInit+0x134>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d14b      	bne.n	8000eee <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a27      	ldr	r2, [pc, #156]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e60:	f043 0304 	orr.w	r3, r3, #4
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0304 	and.w	r3, r3, #4
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a20      	ldr	r2, [pc, #128]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e94:	2312      	movs	r3, #18
 8000e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ea0:	2304      	movs	r3, #4
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea4:	f107 031c 	add.w	r3, r7, #28
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4817      	ldr	r0, [pc, #92]	; (8000f08 <HAL_I2C_MspInit+0x138>)
 8000eac:	f001 fe80 	bl	8002bb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000eb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eb6:	2312      	movs	r3, #18
 8000eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ec2:	2304      	movs	r3, #4
 8000ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480f      	ldr	r0, [pc, #60]	; (8000f0c <HAL_I2C_MspInit+0x13c>)
 8000ece:	f001 fe6f 	bl	8002bb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a08      	ldr	r2, [pc, #32]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000edc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
}
 8000eee:	bf00      	nop
 8000ef0:	3730      	adds	r7, #48	; 0x30
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40005c00 	.word	0x40005c00
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a6b      	ldr	r2, [pc, #428]	; (80010dc <HAL_I2S_MspInit+0x1cc>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	f040 80d0 	bne.w	80010d4 <HAL_I2S_MspInit+0x1c4>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
 8000f38:	4b69      	ldr	r3, [pc, #420]	; (80010e0 <HAL_I2S_MspInit+0x1d0>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3c:	4a68      	ldr	r2, [pc, #416]	; (80010e0 <HAL_I2S_MspInit+0x1d0>)
 8000f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f42:	6413      	str	r3, [r2, #64]	; 0x40
 8000f44:	4b66      	ldr	r3, [pc, #408]	; (80010e0 <HAL_I2S_MspInit+0x1d0>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	4b62      	ldr	r3, [pc, #392]	; (80010e0 <HAL_I2S_MspInit+0x1d0>)
 8000f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f58:	4a61      	ldr	r2, [pc, #388]	; (80010e0 <HAL_I2S_MspInit+0x1d0>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6313      	str	r3, [r2, #48]	; 0x30
 8000f60:	4b5f      	ldr	r3, [pc, #380]	; (80010e0 <HAL_I2S_MspInit+0x1d0>)
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	4b5b      	ldr	r3, [pc, #364]	; (80010e0 <HAL_I2S_MspInit+0x1d0>)
 8000f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f74:	4a5a      	ldr	r2, [pc, #360]	; (80010e0 <HAL_I2S_MspInit+0x1d0>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7c:	4b58      	ldr	r3, [pc, #352]	; (80010e0 <HAL_I2S_MspInit+0x1d0>)
 8000f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC11     ------> I2S3_ext_SD
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000f88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f96:	2302      	movs	r3, #2
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	484f      	ldr	r0, [pc, #316]	; (80010e4 <HAL_I2S_MspInit+0x1d4>)
 8000fa6:	f001 fe03 	bl	8002bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000faa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fbc:	2306      	movs	r3, #6
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4848      	ldr	r0, [pc, #288]	; (80010e8 <HAL_I2S_MspInit+0x1d8>)
 8000fc8:	f001 fdf2 	bl	8002bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2S3ext;
 8000fde:	2305      	movs	r3, #5
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	483f      	ldr	r0, [pc, #252]	; (80010e8 <HAL_I2S_MspInit+0x1d8>)
 8000fea:	f001 fde1 	bl	8002bb0 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8000fee:	4b3f      	ldr	r3, [pc, #252]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 8000ff0:	4a3f      	ldr	r2, [pc, #252]	; (80010f0 <HAL_I2S_MspInit+0x1e0>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000ff4:	4b3d      	ldr	r3, [pc, #244]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 8000ff6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000ffa:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ffc:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001002:	4b3a      	ldr	r3, [pc, #232]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001008:	4b38      	ldr	r3, [pc, #224]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 800100a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800100e:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001010:	4b36      	ldr	r3, [pc, #216]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 8001012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001016:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001018:	4b34      	ldr	r3, [pc, #208]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 800101a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800101e:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_NORMAL;
 8001020:	4b32      	ldr	r3, [pc, #200]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001026:	4b31      	ldr	r3, [pc, #196]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 8001028:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800102c:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800102e:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 8001030:	2204      	movs	r2, #4
 8001032:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_i2s3_ext_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 8001036:	2203      	movs	r2, #3
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_i2s3_ext_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800103a:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 800103c:	2200      	movs	r2, #0
 800103e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_i2s3_ext_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 8001042:	2200      	movs	r2, #0
 8001044:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 8001046:	4829      	ldr	r0, [pc, #164]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 8001048:	f000 fda4 	bl	8001b94 <HAL_DMA_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <HAL_I2S_MspInit+0x146>
    {
      Error_Handler();
 8001052:	f7ff fe8d 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a24      	ldr	r2, [pc, #144]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 800105a:	63da      	str	r2, [r3, #60]	; 0x3c
 800105c:	4a23      	ldr	r2, [pc, #140]	; (80010ec <HAL_I2S_MspInit+0x1dc>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8001062:	4b24      	ldr	r3, [pc, #144]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 8001064:	4a24      	ldr	r2, [pc, #144]	; (80010f8 <HAL_I2S_MspInit+0x1e8>)
 8001066:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 800106a:	2200      	movs	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800106e:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 8001070:	2240      	movs	r2, #64	; 0x40
 8001072:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800107a:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 800107c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001080:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 8001084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001088:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 800108c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001090:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 8001094:	2200      	movs	r2, #0
 8001096:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001098:	4b16      	ldr	r3, [pc, #88]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 800109a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800109e:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 80010a2:	2204      	movs	r2, #4
 80010a4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80010a6:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 80010a8:	2203      	movs	r2, #3
 80010aa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80010b8:	480e      	ldr	r0, [pc, #56]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 80010ba:	f000 fd6b 	bl	8001b94 <HAL_DMA_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_I2S_MspInit+0x1b8>
    {
      Error_Handler();
 80010c4:	f7ff fe54 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
 80010ce:	4a09      	ldr	r2, [pc, #36]	; (80010f4 <HAL_I2S_MspInit+0x1e4>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010d4:	bf00      	nop
 80010d6:	3728      	adds	r7, #40	; 0x28
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40003c00 	.word	0x40003c00
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000
 80010e8:	40020800 	.word	0x40020800
 80010ec:	20000980 	.word	0x20000980
 80010f0:	40026010 	.word	0x40026010
 80010f4:	20000740 	.word	0x20000740
 80010f8:	40026088 	.word	0x40026088

080010fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08c      	sub	sp, #48	; 0x30
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a7a      	ldr	r2, [pc, #488]	; (8001304 <HAL_SPI_MspInit+0x208>)
 800111a:	4293      	cmp	r3, r2
 800111c:	f040 809d 	bne.w	800125a <HAL_SPI_MspInit+0x15e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
 8001124:	4b78      	ldr	r3, [pc, #480]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 8001126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001128:	4a77      	ldr	r2, [pc, #476]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 800112a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800112e:	6453      	str	r3, [r2, #68]	; 0x44
 8001130:	4b75      	ldr	r3, [pc, #468]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001138:	61bb      	str	r3, [r7, #24]
 800113a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	4b71      	ldr	r3, [pc, #452]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001144:	4a70      	ldr	r2, [pc, #448]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6313      	str	r3, [r2, #48]	; 0x30
 800114c:	4b6e      	ldr	r3, [pc, #440]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MISO_Pin|SPI_MOSI_Pin;
 8001158:	23e0      	movs	r3, #224	; 0xe0
 800115a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001164:	2303      	movs	r3, #3
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001168:	2305      	movs	r3, #5
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 031c 	add.w	r3, r7, #28
 8001170:	4619      	mov	r1, r3
 8001172:	4866      	ldr	r0, [pc, #408]	; (800130c <HAL_SPI_MspInit+0x210>)
 8001174:	f001 fd1c 	bl	8002bb0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001178:	4b65      	ldr	r3, [pc, #404]	; (8001310 <HAL_SPI_MspInit+0x214>)
 800117a:	4a66      	ldr	r2, [pc, #408]	; (8001314 <HAL_SPI_MspInit+0x218>)
 800117c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800117e:	4b64      	ldr	r3, [pc, #400]	; (8001310 <HAL_SPI_MspInit+0x214>)
 8001180:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001184:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001186:	4b62      	ldr	r3, [pc, #392]	; (8001310 <HAL_SPI_MspInit+0x214>)
 8001188:	2240      	movs	r2, #64	; 0x40
 800118a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118c:	4b60      	ldr	r3, [pc, #384]	; (8001310 <HAL_SPI_MspInit+0x214>)
 800118e:	2200      	movs	r2, #0
 8001190:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001192:	4b5f      	ldr	r3, [pc, #380]	; (8001310 <HAL_SPI_MspInit+0x214>)
 8001194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001198:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800119a:	4b5d      	ldr	r3, [pc, #372]	; (8001310 <HAL_SPI_MspInit+0x214>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011a0:	4b5b      	ldr	r3, [pc, #364]	; (8001310 <HAL_SPI_MspInit+0x214>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80011a6:	4b5a      	ldr	r3, [pc, #360]	; (8001310 <HAL_SPI_MspInit+0x214>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80011ac:	4b58      	ldr	r3, [pc, #352]	; (8001310 <HAL_SPI_MspInit+0x214>)
 80011ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011b2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80011b4:	4b56      	ldr	r3, [pc, #344]	; (8001310 <HAL_SPI_MspInit+0x214>)
 80011b6:	2204      	movs	r2, #4
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80011ba:	4b55      	ldr	r3, [pc, #340]	; (8001310 <HAL_SPI_MspInit+0x214>)
 80011bc:	2203      	movs	r2, #3
 80011be:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80011c0:	4b53      	ldr	r3, [pc, #332]	; (8001310 <HAL_SPI_MspInit+0x214>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80011c6:	4b52      	ldr	r3, [pc, #328]	; (8001310 <HAL_SPI_MspInit+0x214>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80011cc:	4850      	ldr	r0, [pc, #320]	; (8001310 <HAL_SPI_MspInit+0x214>)
 80011ce:	f000 fce1 	bl	8001b94 <HAL_DMA_Init>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <HAL_SPI_MspInit+0xe0>
    {
      Error_Handler();
 80011d8:	f7ff fdca 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a4c      	ldr	r2, [pc, #304]	; (8001310 <HAL_SPI_MspInit+0x214>)
 80011e0:	649a      	str	r2, [r3, #72]	; 0x48
 80011e2:	4a4b      	ldr	r2, [pc, #300]	; (8001310 <HAL_SPI_MspInit+0x214>)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80011e8:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 80011ea:	4a4c      	ldr	r2, [pc, #304]	; (800131c <HAL_SPI_MspInit+0x220>)
 80011ec:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80011ee:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 80011f0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80011f4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011f6:	4b48      	ldr	r3, [pc, #288]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011fc:	4b46      	ldr	r3, [pc, #280]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001202:	4b45      	ldr	r3, [pc, #276]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 8001204:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001208:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800120a:	4b43      	ldr	r3, [pc, #268]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001210:	4b41      	ldr	r3, [pc, #260]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001216:	4b40      	ldr	r3, [pc, #256]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 8001218:	2200      	movs	r2, #0
 800121a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800121c:	4b3e      	ldr	r3, [pc, #248]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 800121e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001222:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001224:	4b3c      	ldr	r3, [pc, #240]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 8001226:	2204      	movs	r2, #4
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800122a:	4b3b      	ldr	r3, [pc, #236]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 800122c:	2203      	movs	r2, #3
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001230:	4b39      	ldr	r3, [pc, #228]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 8001232:	2200      	movs	r2, #0
 8001234:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001236:	4b38      	ldr	r3, [pc, #224]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 8001238:	2200      	movs	r2, #0
 800123a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800123c:	4836      	ldr	r0, [pc, #216]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 800123e:	f000 fca9 	bl	8001b94 <HAL_DMA_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_SPI_MspInit+0x150>
    {
      Error_Handler();
 8001248:	f7ff fd92 	bl	8000d70 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a32      	ldr	r2, [pc, #200]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 8001250:	64da      	str	r2, [r3, #76]	; 0x4c
 8001252:	4a31      	ldr	r2, [pc, #196]	; (8001318 <HAL_SPI_MspInit+0x21c>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001258:	e04f      	b.n	80012fa <HAL_SPI_MspInit+0x1fe>
  else if(hspi->Instance==SPI2)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a30      	ldr	r2, [pc, #192]	; (8001320 <HAL_SPI_MspInit+0x224>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d14a      	bne.n	80012fa <HAL_SPI_MspInit+0x1fe>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	4b27      	ldr	r3, [pc, #156]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a26      	ldr	r2, [pc, #152]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 800126e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001288:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6313      	str	r3, [r2, #48]	; 0x30
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 8001292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a18      	ldr	r2, [pc, #96]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_SPI_MspInit+0x20c>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOSI_Pin;
 80012b8:	2308      	movs	r3, #8
 80012ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012c8:	2305      	movs	r3, #5
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MOSI_GPIO_Port, &GPIO_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4619      	mov	r1, r3
 80012d2:	4814      	ldr	r0, [pc, #80]	; (8001324 <HAL_SPI_MspInit+0x228>)
 80012d4:	f001 fc6c 	bl	8002bb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCK_Pin;
 80012d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012ea:	2305      	movs	r3, #5
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SCK_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	480c      	ldr	r0, [pc, #48]	; (8001328 <HAL_SPI_MspInit+0x22c>)
 80012f6:	f001 fc5b 	bl	8002bb0 <HAL_GPIO_Init>
}
 80012fa:	bf00      	nop
 80012fc:	3730      	adds	r7, #48	; 0x30
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40013000 	.word	0x40013000
 8001308:	40023800 	.word	0x40023800
 800130c:	40020000 	.word	0x40020000
 8001310:	20000920 	.word	0x20000920
 8001314:	40026458 	.word	0x40026458
 8001318:	200008c0 	.word	0x200008c0
 800131c:	40026410 	.word	0x40026410
 8001320:	40003800 	.word	0x40003800
 8001324:	40020800 	.word	0x40020800
 8001328:	40020400 	.word	0x40020400

0800132c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0b      	ldr	r2, [pc, #44]	; (8001368 <HAL_TIM_PWM_MspInit+0x3c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10d      	bne.n	800135a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_TIM_PWM_MspInit+0x40>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	4a09      	ldr	r2, [pc, #36]	; (800136c <HAL_TIM_PWM_MspInit+0x40>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_TIM_PWM_MspInit+0x40>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40000400 	.word	0x40000400
 800136c:	40023800 	.word	0x40023800

08001370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b088      	sub	sp, #32
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 030c 	add.w	r3, r7, #12
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a12      	ldr	r2, [pc, #72]	; (80013d8 <HAL_TIM_MspPostInit+0x68>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d11d      	bne.n	80013ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_TIM_MspPostInit+0x6c>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <HAL_TIM_MspPostInit+0x6c>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_TIM_MspPostInit+0x6c>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013ae:	2380      	movs	r3, #128	; 0x80
 80013b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013be:	2302      	movs	r3, #2
 80013c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	4619      	mov	r1, r3
 80013c8:	4805      	ldr	r0, [pc, #20]	; (80013e0 <HAL_TIM_MspPostInit+0x70>)
 80013ca:	f001 fbf1 	bl	8002bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40000400 	.word	0x40000400
 80013dc:	40023800 	.word	0x40023800
 80013e0:	40020800 	.word	0x40020800

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 031c 	add.w	r3, r7, #28
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a3a      	ldr	r2, [pc, #232]	; (80014ec <HAL_UART_MspInit+0x108>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d135      	bne.n	8001472 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	61bb      	str	r3, [r7, #24]
 800140a:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <HAL_UART_MspInit+0x10c>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a38      	ldr	r2, [pc, #224]	; (80014f0 <HAL_UART_MspInit+0x10c>)
 8001410:	f043 0310 	orr.w	r3, r3, #16
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <HAL_UART_MspInit+0x10c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	61bb      	str	r3, [r7, #24]
 8001420:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]
 8001426:	4b32      	ldr	r3, [pc, #200]	; (80014f0 <HAL_UART_MspInit+0x10c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a31      	ldr	r2, [pc, #196]	; (80014f0 <HAL_UART_MspInit+0x10c>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b2f      	ldr	r3, [pc, #188]	; (80014f0 <HAL_UART_MspInit+0x10c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800143e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001450:	2307      	movs	r3, #7
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001454:	f107 031c 	add.w	r3, r7, #28
 8001458:	4619      	mov	r1, r3
 800145a:	4826      	ldr	r0, [pc, #152]	; (80014f4 <HAL_UART_MspInit+0x110>)
 800145c:	f001 fba8 	bl	8002bb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2100      	movs	r1, #0
 8001464:	2025      	movs	r0, #37	; 0x25
 8001466:	f000 fb6b 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800146a:	2025      	movs	r0, #37	; 0x25
 800146c:	f000 fb84 	bl	8001b78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001470:	e038      	b.n	80014e4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a20      	ldr	r2, [pc, #128]	; (80014f8 <HAL_UART_MspInit+0x114>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d133      	bne.n	80014e4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <HAL_UART_MspInit+0x10c>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	4a1a      	ldr	r2, [pc, #104]	; (80014f0 <HAL_UART_MspInit+0x10c>)
 8001486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800148a:	6413      	str	r3, [r2, #64]	; 0x40
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <HAL_UART_MspInit+0x10c>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <HAL_UART_MspInit+0x10c>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a13      	ldr	r2, [pc, #76]	; (80014f0 <HAL_UART_MspInit+0x10c>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <HAL_UART_MspInit+0x10c>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b4:	230c      	movs	r3, #12
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c4:	2307      	movs	r3, #7
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4809      	ldr	r0, [pc, #36]	; (80014f4 <HAL_UART_MspInit+0x110>)
 80014d0:	f001 fb6e 	bl	8002bb0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2100      	movs	r1, #0
 80014d8:	2026      	movs	r0, #38	; 0x26
 80014da:	f000 fb31 	bl	8001b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014de:	2026      	movs	r0, #38	; 0x26
 80014e0:	f000 fb4a 	bl	8001b78 <HAL_NVIC_EnableIRQ>
}
 80014e4:	bf00      	nop
 80014e6:	3730      	adds	r7, #48	; 0x30
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40011000 	.word	0x40011000
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40004400 	.word	0x40004400

080014fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08c      	sub	sp, #48	; 0x30
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 800150c:	2200      	movs	r2, #0
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	2019      	movs	r0, #25
 8001512:	f000 fb15 	bl	8001b40 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001516:	2019      	movs	r0, #25
 8001518:	f000 fb2e 	bl	8001b78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_InitTick+0xa0>)
 8001522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <HAL_InitTick+0xa0>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6453      	str	r3, [r2, #68]	; 0x44
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <HAL_InitTick+0xa0>)
 800152e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001538:	f107 0210 	add.w	r2, r7, #16
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4611      	mov	r1, r2
 8001542:	4618      	mov	r0, r3
 8001544:	f004 fae4 	bl	8005b10 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001548:	f004 face 	bl	8005ae8 <HAL_RCC_GetPCLK2Freq>
 800154c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001550:	4a13      	ldr	r2, [pc, #76]	; (80015a0 <HAL_InitTick+0xa4>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	3b01      	subs	r3, #1
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_InitTick+0xa8>)
 800155e:	4a12      	ldr	r2, [pc, #72]	; (80015a8 <HAL_InitTick+0xac>)
 8001560:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001562:	4b10      	ldr	r3, [pc, #64]	; (80015a4 <HAL_InitTick+0xa8>)
 8001564:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001568:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800156a:	4a0e      	ldr	r2, [pc, #56]	; (80015a4 <HAL_InitTick+0xa8>)
 800156c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800156e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <HAL_InitTick+0xa8>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_InitTick+0xa8>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <HAL_InitTick+0xa8>)
 800157e:	f004 fd6b 	bl	8006058 <HAL_TIM_Base_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d104      	bne.n	8001592 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001588:	4806      	ldr	r0, [pc, #24]	; (80015a4 <HAL_InitTick+0xa8>)
 800158a:	f004 fd9a 	bl	80060c2 <HAL_TIM_Base_Start_IT>
 800158e:	4603      	mov	r3, r0
 8001590:	e000      	b.n	8001594 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	3730      	adds	r7, #48	; 0x30
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	431bde83 	.word	0x431bde83
 80015a4:	20000a28 	.word	0x20000a28
 80015a8:	40010000 	.word	0x40010000

080015ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001600:	2010      	movs	r0, #16
 8001602:	f001 fca3 	bl	8002f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <DMA1_Stream0_IRQHandler+0x10>)
 8001612:	f000 fbe7 	bl	8001de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000980 	.word	0x20000980

08001620 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <DMA1_Stream5_IRQHandler+0x10>)
 8001626:	f000 fbdd 	bl	8001de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000740 	.word	0x20000740

08001634 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800163a:	f004 fdcf 	bl	80061dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000a28 	.word	0x20000a28

08001648 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <USART1_IRQHandler+0x10>)
 800164e:	f005 fcf1 	bl	8007034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001652:	bf00      	nop
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200007e8 	.word	0x200007e8

0800165c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <USART2_IRQHandler+0x10>)
 8001662:	f005 fce7 	bl	8007034 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000880 	.word	0x20000880

08001670 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <DMA2_Stream0_IRQHandler+0x10>)
 8001676:	f000 fbb5 	bl	8001de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200008c0 	.word	0x200008c0

08001684 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <DMA2_Stream3_IRQHandler+0x10>)
 800168a:	f000 fbab 	bl	8001de4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000920 	.word	0x20000920

08001698 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

#endif	//	Application

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0
	return 1;
 80016aa:	2301      	movs	r3, #1
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr

080016b6 <_kill>:

int _kill(int pid, int sig)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016c0:	f009 f94c 	bl	800a95c <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2216      	movs	r2, #22
 80016c8:	601a      	str	r2, [r3, #0]
	return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_exit>:

void _exit (int status)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016de:	f04f 31ff 	mov.w	r1, #4294967295
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffe7 	bl	80016b6 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016e8:	e7fe      	b.n	80016e8 <_exit+0x12>

080016ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e00a      	b.n	8001712 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016fc:	f008 fcb4 	bl	800a068 <__io_getchar>
 8001700:	4601      	mov	r1, r0
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	1c5a      	adds	r2, r3, #1
 8001706:	60ba      	str	r2, [r7, #8]
 8001708:	b2ca      	uxtb	r2, r1
 800170a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	429a      	cmp	r2, r3
 8001718:	dbf0      	blt.n	80016fc <_read+0x12>
	}

return len;
 800171a:	687b      	ldr	r3, [r7, #4]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	e009      	b.n	800174a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	60ba      	str	r2, [r7, #8]
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f008 fc54 	bl	8009fec <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	3301      	adds	r3, #1
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	dbf1      	blt.n	8001736 <_write+0x12>
	}
	return len;
 8001752:	687b      	ldr	r3, [r7, #4]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <_close>:

int _close(int file)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001768:	4618      	mov	r0, r3
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001784:	605a      	str	r2, [r3, #4]
	return 0;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_isatty>:

int _isatty(int file)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	return 1;
 800179c:	2301      	movs	r3, #1
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
	return 0;
 80017b6:	2300      	movs	r3, #0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017cc:	4b11      	ldr	r3, [pc, #68]	; (8001814 <_sbrk+0x50>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <_sbrk+0x16>
		heap_end = &end;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <_sbrk+0x50>)
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <_sbrk+0x54>)
 80017d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017da:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <_sbrk+0x50>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <_sbrk+0x50>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4413      	add	r3, r2
 80017e8:	466a      	mov	r2, sp
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d907      	bls.n	80017fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017ee:	f009 f8b5 	bl	800a95c <__errno>
 80017f2:	4603      	mov	r3, r0
 80017f4:	220c      	movs	r2, #12
 80017f6:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80017f8:	f04f 33ff 	mov.w	r3, #4294967295
 80017fc:	e006      	b.n	800180c <_sbrk+0x48>
	}

	heap_end += incr;
 80017fe:	4b05      	ldr	r3, [pc, #20]	; (8001814 <_sbrk+0x50>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	4a03      	ldr	r2, [pc, #12]	; (8001814 <_sbrk+0x50>)
 8001808:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800180a:	68fb      	ldr	r3, [r7, #12]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000328 	.word	0x20000328
 8001818:	20001118 	.word	0x20001118

0800181c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001820:	4b08      	ldr	r3, [pc, #32]	; (8001844 <SystemInit+0x28>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001826:	4a07      	ldr	r2, [pc, #28]	; (8001844 <SystemInit+0x28>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else

//  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#if		defined(USE_BOOTLOADER)	//	Bootloader	memory Address : 0x08000000
 SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001830:	4b04      	ldr	r3, [pc, #16]	; (8001844 <SystemInit+0x28>)
 8001832:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001836:	609a      	str	r2, [r3, #8]
#else							//	Application	memory Address : 0x08020000
 SCB->VTOR = (FLASH_BASE | VECT_TAB_OFFSET) + 0x00020000;//VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001880 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800184c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800184e:	e003      	b.n	8001858 <LoopCopyDataInit>

08001850 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001852:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001854:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001856:	3104      	adds	r1, #4

08001858 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001858:	480b      	ldr	r0, [pc, #44]	; (8001888 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800185a:	4b0c      	ldr	r3, [pc, #48]	; (800188c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800185c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800185e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001860:	d3f6      	bcc.n	8001850 <CopyDataInit>
  ldr  r2, =_sbss
 8001862:	4a0b      	ldr	r2, [pc, #44]	; (8001890 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001864:	e002      	b.n	800186c <LoopFillZerobss>

08001866 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001866:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001868:	f842 3b04 	str.w	r3, [r2], #4

0800186c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800186e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001870:	d3f9      	bcc.n	8001866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001872:	f7ff ffd3 	bl	800181c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001876:	f009 f877 	bl	800a968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800187a:	f7fe fe7d 	bl	8000578 <main>
  bx  lr    
 800187e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001880:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001884:	0800e578 	.word	0x0800e578
  ldr  r0, =_sdata
 8001888:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800188c:	2000030c 	.word	0x2000030c
  ldr  r2, =_sbss
 8001890:	2000030c 	.word	0x2000030c
  ldr  r3, = _ebss
 8001894:	20001118 	.word	0x20001118

08001898 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001898:	e7fe      	b.n	8001898 <ADC_IRQHandler>
	...

0800189c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a0:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0d      	ldr	r2, [pc, #52]	; (80018dc <HAL_Init+0x40>)
 80018a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a0a      	ldr	r2, [pc, #40]	; (80018dc <HAL_Init+0x40>)
 80018b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_Init+0x40>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_Init+0x40>)
 80018be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c4:	2003      	movs	r0, #3
 80018c6:	f000 f930 	bl	8001b2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ca:	2000      	movs	r0, #0
 80018cc:	f7ff fe16 	bl	80014fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d0:	f7ff fa56 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00

080018e0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <HAL_DeInit+0x54>)
 80018e6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ea:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_DeInit+0x54>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <HAL_DeInit+0x54>)
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_DeInit+0x54>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8001900:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_DeInit+0x54>)
 8001902:	f04f 32ff 	mov.w	r2, #4294967295
 8001906:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8001908:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <HAL_DeInit+0x54>)
 800190a:	2200      	movs	r2, #0
 800190c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_DeInit+0x54>)
 8001910:	f04f 32ff 	mov.w	r2, #4294967295
 8001914:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <HAL_DeInit+0x54>)
 8001918:	2200      	movs	r2, #0
 800191a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_DeInit+0x54>)
 800191e:	f04f 32ff 	mov.w	r2, #4294967295
 8001922:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8001924:	4b03      	ldr	r3, [pc, #12]	; (8001934 <HAL_DeInit+0x54>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800192a:	f000 f805 	bl	8001938 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	bd80      	pop	{r7, pc}
 8001934:	40023800 	.word	0x40023800

08001938 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	; (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008
 800196c:	20000a68 	.word	0x20000a68

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	; (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000a68 	.word	0x20000a68

08001988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001990:	f7ff ffee 	bl	8001970 <HAL_GetTick>
 8001994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a0:	d005      	beq.n	80019ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <HAL_Delay+0x44>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ae:	bf00      	nop
 80019b0:	f7ff ffde 	bl	8001970 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d8f7      	bhi.n	80019b0 <HAL_Delay+0x28>
  {
  }
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008

080019d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019ec:	4013      	ands	r3, r2
 80019ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a02:	4a04      	ldr	r2, [pc, #16]	; (8001a14 <__NVIC_SetPriorityGrouping+0x44>)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	60d3      	str	r3, [r2, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a1c:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <__NVIC_GetPriorityGrouping+0x18>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 0307 	and.w	r3, r3, #7
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	db0b      	blt.n	8001a5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a46:	79fb      	ldrb	r3, [r7, #7]
 8001a48:	f003 021f 	and.w	r2, r3, #31
 8001a4c:	4907      	ldr	r1, [pc, #28]	; (8001a6c <__NVIC_EnableIRQ+0x38>)
 8001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a52:	095b      	lsrs	r3, r3, #5
 8001a54:	2001      	movs	r0, #1
 8001a56:	fa00 f202 	lsl.w	r2, r0, r2
 8001a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100

08001a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	6039      	str	r1, [r7, #0]
 8001a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db0a      	blt.n	8001a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	490c      	ldr	r1, [pc, #48]	; (8001abc <__NVIC_SetPriority+0x4c>)
 8001a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8e:	0112      	lsls	r2, r2, #4
 8001a90:	b2d2      	uxtb	r2, r2
 8001a92:	440b      	add	r3, r1
 8001a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a98:	e00a      	b.n	8001ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	b2da      	uxtb	r2, r3
 8001a9e:	4908      	ldr	r1, [pc, #32]	; (8001ac0 <__NVIC_SetPriority+0x50>)
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	3b04      	subs	r3, #4
 8001aa8:	0112      	lsls	r2, r2, #4
 8001aaa:	b2d2      	uxtb	r2, r2
 8001aac:	440b      	add	r3, r1
 8001aae:	761a      	strb	r2, [r3, #24]
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b089      	sub	sp, #36	; 0x24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f1c3 0307 	rsb	r3, r3, #7
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	bf28      	it	cs
 8001ae2:	2304      	movcs	r3, #4
 8001ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	2b06      	cmp	r3, #6
 8001aec:	d902      	bls.n	8001af4 <NVIC_EncodePriority+0x30>
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	3b03      	subs	r3, #3
 8001af2:	e000      	b.n	8001af6 <NVIC_EncodePriority+0x32>
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	f04f 32ff 	mov.w	r2, #4294967295
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	401a      	ands	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	fa01 f303 	lsl.w	r3, r1, r3
 8001b16:	43d9      	mvns	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	4313      	orrs	r3, r2
         );
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3724      	adds	r7, #36	; 0x24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7ff ff4c 	bl	80019d0 <__NVIC_SetPriorityGrouping>
}
 8001b38:	bf00      	nop
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
 8001b4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b52:	f7ff ff61 	bl	8001a18 <__NVIC_GetPriorityGrouping>
 8001b56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	6978      	ldr	r0, [r7, #20]
 8001b5e:	f7ff ffb1 	bl	8001ac4 <NVIC_EncodePriority>
 8001b62:	4602      	mov	r2, r0
 8001b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b68:	4611      	mov	r1, r2
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff ff80 	bl	8001a70 <__NVIC_SetPriority>
}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff ff54 	bl	8001a34 <__NVIC_EnableIRQ>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff fee6 	bl	8001970 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e099      	b.n	8001ce4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bd0:	e00f      	b.n	8001bf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bd2:	f7ff fecd 	bl	8001970 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d908      	bls.n	8001bf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2220      	movs	r2, #32
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2203      	movs	r2, #3
 8001bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e078      	b.n	8001ce4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d1e8      	bne.n	8001bd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	4b38      	ldr	r3, [pc, #224]	; (8001cec <HAL_DMA_Init+0x158>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	2b04      	cmp	r3, #4
 8001c4a:	d107      	bne.n	8001c5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	4313      	orrs	r3, r2
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	695b      	ldr	r3, [r3, #20]
 8001c6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f023 0307 	bic.w	r3, r3, #7
 8001c72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d117      	bne.n	8001cb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00e      	beq.n	8001cb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 fa91 	bl	80021c0 <DMA_CheckFifoParam>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2240      	movs	r2, #64	; 0x40
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e016      	b.n	8001ce4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	697a      	ldr	r2, [r7, #20]
 8001cbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fa48 	bl	8002154 <DMA_CalcBaseAndBitshift>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ccc:	223f      	movs	r2, #63	; 0x3f
 8001cce:	409a      	lsls	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ce2:	2300      	movs	r3, #0
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3718      	adds	r7, #24
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	f010803f 	.word	0xf010803f

08001cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_DMA_Start_IT+0x26>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e040      	b.n	8001d98 <HAL_DMA_Start_IT+0xa8>
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d12f      	bne.n	8001d8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	68b9      	ldr	r1, [r7, #8]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 f9da 	bl	80020f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d48:	223f      	movs	r2, #63	; 0x3f
 8001d4a:	409a      	lsls	r2, r3
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0216 	orr.w	r2, r2, #22
 8001d5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0208 	orr.w	r2, r2, #8
 8001d76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	e005      	b.n	8001d96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d92:	2302      	movs	r3, #2
 8001d94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d004      	beq.n	8001dbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2280      	movs	r2, #128	; 0x80
 8001db8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00c      	b.n	8001dd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2205      	movs	r2, #5
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f022 0201 	bic.w	r2, r2, #1
 8001dd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001df0:	4b92      	ldr	r3, [pc, #584]	; (800203c <HAL_DMA_IRQHandler+0x258>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a92      	ldr	r2, [pc, #584]	; (8002040 <HAL_DMA_IRQHandler+0x25c>)
 8001df6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfa:	0a9b      	lsrs	r3, r3, #10
 8001dfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0e:	2208      	movs	r2, #8
 8001e10:	409a      	lsls	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d01a      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d013      	beq.n	8001e50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0204 	bic.w	r2, r2, #4
 8001e36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e48:	f043 0201 	orr.w	r2, r3, #1
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	2201      	movs	r2, #1
 8001e56:	409a      	lsls	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d012      	beq.n	8001e86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00b      	beq.n	8001e86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	2201      	movs	r2, #1
 8001e74:	409a      	lsls	r2, r3
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	f043 0202 	orr.w	r2, r3, #2
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d012      	beq.n	8001ebc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00b      	beq.n	8001ebc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb4:	f043 0204 	orr.w	r2, r3, #4
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	409a      	lsls	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d043      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d03c      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ede:	2210      	movs	r2, #16
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d018      	beq.n	8001f26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d108      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d024      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
 8001f12:	e01f      	b.n	8001f54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01b      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
 8001f24:	e016      	b.n	8001f54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d107      	bne.n	8001f44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 0208 	bic.w	r2, r2, #8
 8001f42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f58:	2220      	movs	r2, #32
 8001f5a:	409a      	lsls	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f000 808e 	beq.w	8002082 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8086 	beq.w	8002082 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b05      	cmp	r3, #5
 8001f8c:	d136      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0216 	bic.w	r2, r2, #22
 8001f9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d103      	bne.n	8001fbe <HAL_DMA_IRQHandler+0x1da>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d007      	beq.n	8001fce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0208 	bic.w	r2, r2, #8
 8001fcc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd2:	223f      	movs	r2, #63	; 0x3f
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d07d      	beq.n	80020ee <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	4798      	blx	r3
        }
        return;
 8001ffa:	e078      	b.n	80020ee <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d01c      	beq.n	8002044 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d108      	bne.n	800202a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201c:	2b00      	cmp	r3, #0
 800201e:	d030      	beq.n	8002082 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	4798      	blx	r3
 8002028:	e02b      	b.n	8002082 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202e:	2b00      	cmp	r3, #0
 8002030:	d027      	beq.n	8002082 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	4798      	blx	r3
 800203a:	e022      	b.n	8002082 <HAL_DMA_IRQHandler+0x29e>
 800203c:	20000000 	.word	0x20000000
 8002040:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10f      	bne.n	8002072 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0210 	bic.w	r2, r2, #16
 8002060:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	2b00      	cmp	r3, #0
 8002088:	d032      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208e:	f003 0301 	and.w	r3, r3, #1
 8002092:	2b00      	cmp	r3, #0
 8002094:	d022      	beq.n	80020dc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2205      	movs	r2, #5
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	3301      	adds	r3, #1
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d307      	bcc.n	80020ca <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f2      	bne.n	80020ae <HAL_DMA_IRQHandler+0x2ca>
 80020c8:	e000      	b.n	80020cc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020ca:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	4798      	blx	r3
 80020ec:	e000      	b.n	80020f0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020ee:	bf00      	nop
    }
  }
}
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop

080020f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002114:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b40      	cmp	r3, #64	; 0x40
 8002124:	d108      	bne.n	8002138 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68ba      	ldr	r2, [r7, #8]
 8002134:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002136:	e007      	b.n	8002148 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68ba      	ldr	r2, [r7, #8]
 800213e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	60da      	str	r2, [r3, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	3b10      	subs	r3, #16
 8002164:	4a14      	ldr	r2, [pc, #80]	; (80021b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800216e:	4a13      	ldr	r2, [pc, #76]	; (80021bc <DMA_CalcBaseAndBitshift+0x68>)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	4413      	add	r3, r2
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2b03      	cmp	r3, #3
 8002180:	d909      	bls.n	8002196 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800218a:	f023 0303 	bic.w	r3, r3, #3
 800218e:	1d1a      	adds	r2, r3, #4
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	659a      	str	r2, [r3, #88]	; 0x58
 8002194:	e007      	b.n	80021a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800219e:	f023 0303 	bic.w	r3, r3, #3
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	aaaaaaab 	.word	0xaaaaaaab
 80021bc:	0800cbe4 	.word	0x0800cbe4

080021c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021c8:	2300      	movs	r3, #0
 80021ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d11f      	bne.n	800221a <DMA_CheckFifoParam+0x5a>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d856      	bhi.n	800228e <DMA_CheckFifoParam+0xce>
 80021e0:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <DMA_CheckFifoParam+0x28>)
 80021e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e6:	bf00      	nop
 80021e8:	080021f9 	.word	0x080021f9
 80021ec:	0800220b 	.word	0x0800220b
 80021f0:	080021f9 	.word	0x080021f9
 80021f4:	0800228f 	.word	0x0800228f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d046      	beq.n	8002292 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002208:	e043      	b.n	8002292 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002212:	d140      	bne.n	8002296 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002218:	e03d      	b.n	8002296 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002222:	d121      	bne.n	8002268 <DMA_CheckFifoParam+0xa8>
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d837      	bhi.n	800229a <DMA_CheckFifoParam+0xda>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <DMA_CheckFifoParam+0x70>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	08002241 	.word	0x08002241
 8002234:	08002247 	.word	0x08002247
 8002238:	08002241 	.word	0x08002241
 800223c:	08002259 	.word	0x08002259
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
      break;
 8002244:	e030      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d025      	beq.n	800229e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002256:	e022      	b.n	800229e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002260:	d11f      	bne.n	80022a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002266:	e01c      	b.n	80022a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d903      	bls.n	8002276 <DMA_CheckFifoParam+0xb6>
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d003      	beq.n	800227c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002274:	e018      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
      break;
 800227a:	e015      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00e      	beq.n	80022a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
      break;
 800228c:	e00b      	b.n	80022a6 <DMA_CheckFifoParam+0xe6>
      break;
 800228e:	bf00      	nop
 8002290:	e00a      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002292:	bf00      	nop
 8002294:	e008      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002296:	bf00      	nop
 8002298:	e006      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 800229a:	bf00      	nop
 800229c:	e004      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 800229e:	bf00      	nop
 80022a0:	e002      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80022a2:	bf00      	nop
 80022a4:	e000      	b.n	80022a8 <DMA_CheckFifoParam+0xe8>
      break;
 80022a6:	bf00      	nop
    }
  } 
  
  return status; 
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop

080022b8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80022ca:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_FLASH_Program+0xa0>)
 80022cc:	7e1b      	ldrb	r3, [r3, #24]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_FLASH_Program+0x1e>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e03b      	b.n	800234e <HAL_FLASH_Program+0x96>
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_FLASH_Program+0xa0>)
 80022d8:	2201      	movs	r2, #1
 80022da:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022e0:	f000 f88c 	bl	80023fc <FLASH_WaitForLastOperation>
 80022e4:	4603      	mov	r3, r0
 80022e6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d12b      	bne.n	8002346 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d105      	bne.n	8002300 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80022f4:	783b      	ldrb	r3, [r7, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	68b8      	ldr	r0, [r7, #8]
 80022fa:	f000 f937 	bl	800256c <FLASH_Program_Byte>
 80022fe:	e016      	b.n	800232e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d105      	bne.n	8002312 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8002306:	883b      	ldrh	r3, [r7, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	68b8      	ldr	r0, [r7, #8]
 800230c:	f000 f90a 	bl	8002524 <FLASH_Program_HalfWord>
 8002310:	e00d      	b.n	800232e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d105      	bne.n	8002324 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4619      	mov	r1, r3
 800231c:	68b8      	ldr	r0, [r7, #8]
 800231e:	f000 f8df 	bl	80024e0 <FLASH_Program_Word>
 8002322:	e004      	b.n	800232e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002328:	68b8      	ldr	r0, [r7, #8]
 800232a:	f000 f8a7 	bl	800247c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800232e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002332:	f000 f863 	bl	80023fc <FLASH_WaitForLastOperation>
 8002336:	4603      	mov	r3, r0
 8002338:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_FLASH_Program+0xa4>)
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	4a07      	ldr	r2, [pc, #28]	; (800235c <HAL_FLASH_Program+0xa4>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002346:	4b04      	ldr	r3, [pc, #16]	; (8002358 <HAL_FLASH_Program+0xa0>)
 8002348:	2200      	movs	r2, #0
 800234a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800234c:	7dfb      	ldrb	r3, [r7, #23]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000a6c 	.word	0x20000a6c
 800235c:	40023c00 	.word	0x40023c00

08002360 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002366:	2300      	movs	r3, #0
 8002368:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800236a:	4b0b      	ldr	r3, [pc, #44]	; (8002398 <HAL_FLASH_Unlock+0x38>)
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b00      	cmp	r3, #0
 8002370:	da0b      	bge.n	800238a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_FLASH_Unlock+0x38>)
 8002374:	4a09      	ldr	r2, [pc, #36]	; (800239c <HAL_FLASH_Unlock+0x3c>)
 8002376:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_FLASH_Unlock+0x38>)
 800237a:	4a09      	ldr	r2, [pc, #36]	; (80023a0 <HAL_FLASH_Unlock+0x40>)
 800237c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800237e:	4b06      	ldr	r3, [pc, #24]	; (8002398 <HAL_FLASH_Unlock+0x38>)
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b00      	cmp	r3, #0
 8002384:	da01      	bge.n	800238a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800238a:	79fb      	ldrb	r3, [r7, #7]
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40023c00 	.word	0x40023c00
 800239c:	45670123 	.word	0x45670123
 80023a0:	cdef89ab 	.word	0xcdef89ab

080023a4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80023a8:	4b05      	ldr	r3, [pc, #20]	; (80023c0 <HAL_FLASH_Lock+0x1c>)
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	4a04      	ldr	r2, [pc, #16]	; (80023c0 <HAL_FLASH_Lock+0x1c>)
 80023ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023b2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	40023c00 	.word	0x40023c00

080023c4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_FLASH_OB_Unlock+0x2c>)
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d007      	beq.n	80023e4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_FLASH_OB_Unlock+0x2c>)
 80023d6:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <HAL_FLASH_OB_Unlock+0x30>)
 80023d8:	609a      	str	r2, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 80023da:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <HAL_FLASH_OB_Unlock+0x2c>)
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <HAL_FLASH_OB_Unlock+0x34>)
 80023de:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	40023c00 	.word	0x40023c00
 80023f4:	08192a3b 	.word	0x08192a3b
 80023f8:	4c5d6e7f 	.word	0x4c5d6e7f

080023fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <FLASH_WaitForLastOperation+0x78>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800240e:	f7ff faaf 	bl	8001970 <HAL_GetTick>
 8002412:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002414:	e010      	b.n	8002438 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800241c:	d00c      	beq.n	8002438 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d007      	beq.n	8002434 <FLASH_WaitForLastOperation+0x38>
 8002424:	f7ff faa4 	bl	8001970 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	429a      	cmp	r2, r3
 8002432:	d201      	bcs.n	8002438 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e019      	b.n	800246c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <FLASH_WaitForLastOperation+0x7c>)
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1e8      	bne.n	8002416 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <FLASH_WaitForLastOperation+0x7c>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002450:	4b09      	ldr	r3, [pc, #36]	; (8002478 <FLASH_WaitForLastOperation+0x7c>)
 8002452:	2201      	movs	r2, #1
 8002454:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002456:	4b08      	ldr	r3, [pc, #32]	; (8002478 <FLASH_WaitForLastOperation+0x7c>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8002462:	f000 f8a5 	bl	80025b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800246a:	2300      	movs	r3, #0
  
}  
 800246c:	4618      	mov	r0, r3
 800246e:	3710      	adds	r7, #16
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000a6c 	.word	0x20000a6c
 8002478:	40023c00 	.word	0x40023c00

0800247c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <FLASH_Program_DoubleWord+0x60>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	4a13      	ldr	r2, [pc, #76]	; (80024dc <FLASH_Program_DoubleWord+0x60>)
 800248e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002492:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002494:	4b11      	ldr	r3, [pc, #68]	; (80024dc <FLASH_Program_DoubleWord+0x60>)
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	4a10      	ldr	r2, [pc, #64]	; (80024dc <FLASH_Program_DoubleWord+0x60>)
 800249a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800249e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80024a0:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <FLASH_Program_DoubleWord+0x60>)
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <FLASH_Program_DoubleWord+0x60>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80024b2:	f3bf 8f6f 	isb	sy
}
 80024b6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80024b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	000a      	movs	r2, r1
 80024c6:	2300      	movs	r3, #0
 80024c8:	68f9      	ldr	r1, [r7, #12]
 80024ca:	3104      	adds	r1, #4
 80024cc:	4613      	mov	r3, r2
 80024ce:	600b      	str	r3, [r1, #0]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40023c00 	.word	0x40023c00

080024e0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <FLASH_Program_Word+0x40>)
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	4a0c      	ldr	r2, [pc, #48]	; (8002520 <FLASH_Program_Word+0x40>)
 80024f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <FLASH_Program_Word+0x40>)
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <FLASH_Program_Word+0x40>)
 80024fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002500:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <FLASH_Program_Word+0x40>)
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	4a06      	ldr	r2, [pc, #24]	; (8002520 <FLASH_Program_Word+0x40>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	601a      	str	r2, [r3, #0]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	40023c00 	.word	0x40023c00

08002524 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002530:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <FLASH_Program_HalfWord+0x44>)
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	4a0c      	ldr	r2, [pc, #48]	; (8002568 <FLASH_Program_HalfWord+0x44>)
 8002536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800253a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800253c:	4b0a      	ldr	r3, [pc, #40]	; (8002568 <FLASH_Program_HalfWord+0x44>)
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	4a09      	ldr	r2, [pc, #36]	; (8002568 <FLASH_Program_HalfWord+0x44>)
 8002542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002546:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <FLASH_Program_HalfWord+0x44>)
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <FLASH_Program_HalfWord+0x44>)
 800254e:	f043 0301 	orr.w	r3, r3, #1
 8002552:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	887a      	ldrh	r2, [r7, #2]
 8002558:	801a      	strh	r2, [r3, #0]
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00

0800256c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <FLASH_Program_Byte+0x40>)
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	4a0b      	ldr	r2, [pc, #44]	; (80025ac <FLASH_Program_Byte+0x40>)
 800257e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002582:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <FLASH_Program_Byte+0x40>)
 8002586:	4a09      	ldr	r2, [pc, #36]	; (80025ac <FLASH_Program_Byte+0x40>)
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800258c:	4b07      	ldr	r3, [pc, #28]	; (80025ac <FLASH_Program_Byte+0x40>)
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	4a06      	ldr	r2, [pc, #24]	; (80025ac <FLASH_Program_Byte+0x40>)
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	78fa      	ldrb	r2, [r7, #3]
 800259c:	701a      	strb	r2, [r3, #0]
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40023c00 	.word	0x40023c00

080025b0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80025b4:	4b27      	ldr	r3, [pc, #156]	; (8002654 <FLASH_SetErrorCode+0xa4>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f003 0310 	and.w	r3, r3, #16
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d008      	beq.n	80025d2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <FLASH_SetErrorCode+0xa8>)
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	f043 0310 	orr.w	r3, r3, #16
 80025c8:	4a23      	ldr	r2, [pc, #140]	; (8002658 <FLASH_SetErrorCode+0xa8>)
 80025ca:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80025cc:	4b21      	ldr	r3, [pc, #132]	; (8002654 <FLASH_SetErrorCode+0xa4>)
 80025ce:	2210      	movs	r2, #16
 80025d0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <FLASH_SetErrorCode+0xa4>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <FLASH_SetErrorCode+0xa8>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f043 0308 	orr.w	r3, r3, #8
 80025e6:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <FLASH_SetErrorCode+0xa8>)
 80025e8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80025ea:	4b1a      	ldr	r3, [pc, #104]	; (8002654 <FLASH_SetErrorCode+0xa4>)
 80025ec:	2220      	movs	r2, #32
 80025ee:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80025f0:	4b18      	ldr	r3, [pc, #96]	; (8002654 <FLASH_SetErrorCode+0xa4>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <FLASH_SetErrorCode+0xa8>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	4a14      	ldr	r2, [pc, #80]	; (8002658 <FLASH_SetErrorCode+0xa8>)
 8002606:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002608:	4b12      	ldr	r3, [pc, #72]	; (8002654 <FLASH_SetErrorCode+0xa4>)
 800260a:	2240      	movs	r2, #64	; 0x40
 800260c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <FLASH_SetErrorCode+0xa4>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800261a:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <FLASH_SetErrorCode+0xa8>)
 800261c:	69db      	ldr	r3, [r3, #28]
 800261e:	f043 0302 	orr.w	r3, r3, #2
 8002622:	4a0d      	ldr	r2, [pc, #52]	; (8002658 <FLASH_SetErrorCode+0xa8>)
 8002624:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002626:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <FLASH_SetErrorCode+0xa4>)
 8002628:	2280      	movs	r2, #128	; 0x80
 800262a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <FLASH_SetErrorCode+0xa4>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <FLASH_SetErrorCode+0xa8>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f043 0320 	orr.w	r3, r3, #32
 8002640:	4a05      	ldr	r2, [pc, #20]	; (8002658 <FLASH_SetErrorCode+0xa8>)
 8002642:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002644:	4b03      	ldr	r3, [pc, #12]	; (8002654 <FLASH_SetErrorCode+0xa4>)
 8002646:	2202      	movs	r2, #2
 8002648:	60da      	str	r2, [r3, #12]
  }
}
 800264a:	bf00      	nop
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	40023c00 	.word	0x40023c00
 8002658:	20000a6c 	.word	0x20000a6c

0800265c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_FLASHEx_Erase+0xd8>)
 8002670:	7e1b      	ldrb	r3, [r3, #24]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_FLASHEx_Erase+0x1e>
 8002676:	2302      	movs	r3, #2
 8002678:	e058      	b.n	800272c <HAL_FLASHEx_Erase+0xd0>
 800267a:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <HAL_FLASHEx_Erase+0xd8>)
 800267c:	2201      	movs	r2, #1
 800267e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002680:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002684:	f7ff feba 	bl	80023fc <FLASH_WaitForLastOperation>
 8002688:	4603      	mov	r3, r0
 800268a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d148      	bne.n	8002724 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	f04f 32ff 	mov.w	r2, #4294967295
 8002698:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d115      	bne.n	80026ce <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	4619      	mov	r1, r3
 80026ae:	4610      	mov	r0, r2
 80026b0:	f000 f8d6 	bl	8002860 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026b4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026b8:	f7ff fea0 	bl	80023fc <FLASH_WaitForLastOperation>
 80026bc:	4603      	mov	r3, r0
 80026be:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80026c0:	4b1d      	ldr	r3, [pc, #116]	; (8002738 <HAL_FLASHEx_Erase+0xdc>)
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_FLASHEx_Erase+0xdc>)
 80026c6:	f023 0304 	bic.w	r3, r3, #4
 80026ca:	6113      	str	r3, [r2, #16]
 80026cc:	e028      	b.n	8002720 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	e01c      	b.n	8002710 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	68b8      	ldr	r0, [r7, #8]
 80026e0:	f000 f8e2 	bl	80028a8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80026e4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80026e8:	f7ff fe88 	bl	80023fc <FLASH_WaitForLastOperation>
 80026ec:	4603      	mov	r3, r0
 80026ee:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80026f0:	4b11      	ldr	r3, [pc, #68]	; (8002738 <HAL_FLASHEx_Erase+0xdc>)
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	4a10      	ldr	r2, [pc, #64]	; (8002738 <HAL_FLASHEx_Erase+0xdc>)
 80026f6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80026fa:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	601a      	str	r2, [r3, #0]
          break;
 8002708:	e00a      	b.n	8002720 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	3301      	adds	r3, #1
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	4413      	add	r3, r2
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	429a      	cmp	r2, r3
 800271e:	d3da      	bcc.n	80026d6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8002720:	f000 fa00 	bl	8002b24 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002724:	4b03      	ldr	r3, [pc, #12]	; (8002734 <HAL_FLASHEx_Erase+0xd8>)
 8002726:	2200      	movs	r2, #0
 8002728:	761a      	strb	r2, [r3, #24]

  return status;
 800272a:	7bfb      	ldrb	r3, [r7, #15]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	20000a6c 	.word	0x20000a6c
 8002738:	40023c00 	.word	0x40023c00

0800273c <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002748:	4b32      	ldr	r3, [pc, #200]	; (8002814 <HAL_FLASHEx_OBProgram+0xd8>)
 800274a:	7e1b      	ldrb	r3, [r3, #24]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_FLASHEx_OBProgram+0x18>
 8002750:	2302      	movs	r3, #2
 8002752:	e05b      	b.n	800280c <HAL_FLASHEx_OBProgram+0xd0>
 8002754:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <HAL_FLASHEx_OBProgram+0xd8>)
 8002756:	2201      	movs	r2, #1
 8002758:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /*Write protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d018      	beq.n	8002798 <HAL_FLASHEx_OBProgram+0x5c>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d10a      	bne.n	8002784 <HAL_FLASHEx_OBProgram+0x48>
    {
      /*Enable of Write protection on the selected Sector*/
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector, pOBInit->Banks);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689a      	ldr	r2, [r3, #8]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	4619      	mov	r1, r3
 8002778:	4610      	mov	r0, r2
 800277a:	f000 f8dd 	bl	8002938 <FLASH_OB_EnableWRP>
 800277e:	4603      	mov	r3, r0
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	e009      	b.n	8002798 <HAL_FLASHEx_OBProgram+0x5c>
    }
    else
    {
      /*Disable of Write protection on the selected Sector*/
      status = FLASH_OB_DisableWRP(pOBInit->WRPSector, pOBInit->Banks);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f000 f8f4 	bl	800297c <FLASH_OB_DisableWRP>
 8002794:	4603      	mov	r3, r0
 8002796:	73fb      	strb	r3, [r7, #15]
    }
  }

  /*Read protection configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0302 	and.w	r3, r3, #2
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HAL_FLASHEx_OBProgram+0x78>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	691b      	ldr	r3, [r3, #16]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 f906 	bl	80029bc <FLASH_OB_RDP_LevelConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	73fb      	strb	r3, [r7, #15]
  }

  /*USER  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_FLASHEx_OBProgram+0xac>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	7e1b      	ldrb	r3, [r3, #24]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	b2d8      	uxtb	r0, r3
                                     pOBInit->USERConfig&OB_STOP_NO_RST,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80027ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027d2:	b2d9      	uxtb	r1, r3
                                     pOBInit->USERConfig&OB_STDBY_NO_RST);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7e1b      	ldrb	r3, [r3, #24]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig&OB_IWDG_SW, 
 80027d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	f000 f906 	bl	80029f0 <FLASH_OB_UserConfig>
 80027e4:	4603      	mov	r3, r0
 80027e6:	73fb      	strb	r3, [r7, #15]
  }

  /*BOR Level  configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d007      	beq.n	8002804 <HAL_FLASHEx_OBProgram+0xc8>
  {
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f928 	bl	8002a50 <FLASH_OB_BOR_LevelConfig>
 8002800:	4603      	mov	r3, r0
 8002802:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_FLASHEx_OBProgram+0xd8>)
 8002806:	2200      	movs	r2, #0
 8002808:	761a      	strb	r2, [r3, #24]

  return status;
 800280a:	7bfb      	ldrb	r3, [r7, #15]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	20000a6c 	.word	0x20000a6c

08002818 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  * 
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER | OPTIONBYTE_BOR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	220f      	movs	r2, #15
 8002824:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPSector = (uint32_t)FLASH_OB_GetWRP();
 8002826:	f000 f941 	bl	8002aac <FLASH_OB_GetWRP>
 800282a:	4603      	mov	r3, r0
 800282c:	461a      	mov	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = (uint32_t)FLASH_OB_GetRDP();
 8002832:	f000 f947 	bl	8002ac4 <FLASH_OB_GetRDP>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	611a      	str	r2, [r3, #16]

  /*Get USER*/
  pOBInit->USERConfig = (uint8_t)FLASH_OB_GetUser();
 800283e:	f000 f925 	bl	8002a8c <FLASH_OB_GetUser>
 8002842:	4603      	mov	r3, r0
 8002844:	461a      	mov	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	761a      	strb	r2, [r3, #24]

  /*Get BOR Level*/
  pOBInit->BORLevel = (uint32_t)FLASH_OB_GetBOR();
 800284a:	f000 f95b 	bl	8002b04 <FLASH_OB_GetBOR>
 800284e:	4603      	mov	r3, r0
 8002850:	461a      	mov	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	615a      	str	r2, [r3, #20]
}
 8002856:	bf00      	nop
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	6039      	str	r1, [r7, #0]
 800286a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800286c:	4b0d      	ldr	r3, [pc, #52]	; (80028a4 <FLASH_MassErase+0x44>)
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <FLASH_MassErase+0x44>)
 8002872:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002876:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002878:	4b0a      	ldr	r3, [pc, #40]	; (80028a4 <FLASH_MassErase+0x44>)
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	4a09      	ldr	r2, [pc, #36]	; (80028a4 <FLASH_MassErase+0x44>)
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <FLASH_MassErase+0x44>)
 8002886:	691a      	ldr	r2, [r3, #16]
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	4313      	orrs	r3, r2
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <FLASH_MassErase+0x44>)
 8002890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002894:	6113      	str	r3, [r2, #16]
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	40023c00 	.word	0x40023c00

080028a8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d102      	bne.n	80028c4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	e010      	b.n	80028e6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80028c4:	78fb      	ldrb	r3, [r7, #3]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d103      	bne.n	80028d2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80028ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	e009      	b.n	80028e6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d103      	bne.n	80028e0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80028d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028dc:	60fb      	str	r3, [r7, #12]
 80028de:	e002      	b.n	80028e6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80028e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028e4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80028e6:	4b13      	ldr	r3, [pc, #76]	; (8002934 <FLASH_Erase_Sector+0x8c>)
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <FLASH_Erase_Sector+0x8c>)
 80028ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80028f2:	4b10      	ldr	r3, [pc, #64]	; (8002934 <FLASH_Erase_Sector+0x8c>)
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	490f      	ldr	r1, [pc, #60]	; (8002934 <FLASH_Erase_Sector+0x8c>)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80028fe:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <FLASH_Erase_Sector+0x8c>)
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <FLASH_Erase_Sector+0x8c>)
 8002904:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002908:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800290a:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <FLASH_Erase_Sector+0x8c>)
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4313      	orrs	r3, r2
 8002914:	4a07      	ldr	r2, [pc, #28]	; (8002934 <FLASH_Erase_Sector+0x8c>)
 8002916:	f043 0302 	orr.w	r3, r3, #2
 800291a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <FLASH_Erase_Sector+0x8c>)
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	4a04      	ldr	r2, [pc, #16]	; (8002934 <FLASH_Erase_Sector+0x8c>)
 8002922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002926:	6113      	str	r3, [r2, #16]
}
 8002928:	bf00      	nop
 800292a:	3714      	adds	r7, #20
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	40023c00 	.word	0x40023c00

08002938 <FLASH_OB_EnableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector, uint32_t Banks)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002946:	f24c 3050 	movw	r0, #50000	; 0xc350
 800294a:	f7ff fd57 	bl	80023fc <FLASH_WaitForLastOperation>
 800294e:	4603      	mov	r3, r0
 8002950:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10a      	bne.n	800296e <FLASH_OB_EnableWRP+0x36>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~WRPSector);  
 8002958:	4b07      	ldr	r3, [pc, #28]	; (8002978 <FLASH_OB_EnableWRP+0x40>)
 800295a:	881b      	ldrh	r3, [r3, #0]
 800295c:	b29a      	uxth	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	b29b      	uxth	r3, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	b29b      	uxth	r3, r3
 8002966:	4904      	ldr	r1, [pc, #16]	; (8002978 <FLASH_OB_EnableWRP+0x40>)
 8002968:	4013      	ands	r3, r2
 800296a:	b29b      	uxth	r3, r3
 800296c:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 800296e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40023c16 	.word	0x40023c16

0800297c <FLASH_OB_DisableWRP>:
  *            @arg FLASH_BANK_1: WRP on all sectors of bank1
  *
  * @retval HAL Status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector, uint32_t Banks)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
  assert_param(IS_FLASH_BANK(Banks));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800298a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800298e:	f7ff fd35 	bl	80023fc <FLASH_WaitForLastOperation>
 8002992:	4603      	mov	r3, r0
 8002994:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002996:	7bfb      	ldrb	r3, [r7, #15]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d108      	bne.n	80029ae <FLASH_OB_DisableWRP+0x32>
  { 
    *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)WRPSector; 
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <FLASH_OB_DisableWRP+0x3c>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	4904      	ldr	r1, [pc, #16]	; (80029b8 <FLASH_OB_DisableWRP+0x3c>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	800b      	strh	r3, [r1, #0]
  }
  
  return status;
 80029ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40023c16 	.word	0x40023c16

080029bc <FLASH_OB_RDP_LevelConfig>:
  * @note WARNING: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  *    
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80029ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80029ce:	f7ff fd15 	bl	80023fc <FLASH_WaitForLastOperation>
 80029d2:	4603      	mov	r3, r0
 80029d4:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80029d6:	7bfb      	ldrb	r3, [r7, #15]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <FLASH_OB_RDP_LevelConfig+0x26>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 80029dc:	4a03      	ldr	r2, [pc, #12]	; (80029ec <FLASH_OB_RDP_LevelConfig+0x30>)
 80029de:	79fb      	ldrb	r3, [r7, #7]
 80029e0:	7013      	strb	r3, [r2, #0]
  }
  
  return status;
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	40023c15 	.word	0x40023c15

080029f0 <FLASH_OB_UserConfig>:
  *            @arg OB_STDBY_NO_RST: No reset generated when entering in STANDBY
  *            @arg OB_STDBY_RST: Reset generated when entering in STANDBY
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t Iwdg, uint8_t Stop, uint8_t Stdby)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	4603      	mov	r3, r0
 80029f8:	71fb      	strb	r3, [r7, #7]
 80029fa:	460b      	mov	r3, r1
 80029fc:	71bb      	strb	r3, [r7, #6]
 80029fe:	4613      	mov	r3, r2
 8002a00:	717b      	strb	r3, [r7, #5]
  uint8_t optiontmp = 0xFF;
 8002a02:	23ff      	movs	r3, #255	; 0xff
 8002a04:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73bb      	strb	r3, [r7, #14]
  assert_param(IS_OB_IWDG_SOURCE(Iwdg));
  assert_param(IS_OB_STOP_SOURCE(Stop));
  assert_param(IS_OB_STDBY_SOURCE(Stdby));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002a0a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002a0e:	f7ff fcf5 	bl	80023fc <FLASH_WaitForLastOperation>
 8002a12:	4603      	mov	r3, r0
 8002a14:	73bb      	strb	r3, [r7, #14]
  
  if(status == HAL_OK)
 8002a16:	7bbb      	ldrb	r3, [r7, #14]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d111      	bne.n	8002a40 <FLASH_OB_UserConfig+0x50>
  {     
    /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
    optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <FLASH_OB_UserConfig+0x5c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f003 031f 	and.w	r3, r3, #31
 8002a26:	73fb      	strb	r3, [r7, #15]

    /* Update User Option Byte */
    *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = Iwdg | (uint8_t)(Stdby | (uint8_t)(Stop | ((uint8_t)optiontmp))); 
 8002a28:	79ba      	ldrb	r2, [r7, #6]
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	797b      	ldrb	r3, [r7, #5]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	4905      	ldr	r1, [pc, #20]	; (8002a4c <FLASH_OB_UserConfig+0x5c>)
 8002a38:	79fb      	ldrb	r3, [r7, #7]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	700b      	strb	r3, [r1, #0]
  }
  
  return status; 
 8002a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023c14 	.word	0x40023c14

08002a50 <FLASH_OB_BOR_LevelConfig>:
  *            @arg OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *            @arg OB_BOR_OFF: Supply voltage ranges from 1.62 to 2.1 V
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));

  /* Set the BOR Level */
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
 8002a5a:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002a62:	f023 030c 	bic.w	r3, r3, #12
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	7013      	strb	r3, [r2, #0]
  *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= Level;
 8002a6a:	4b07      	ldr	r3, [pc, #28]	; (8002a88 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	4905      	ldr	r1, [pc, #20]	; (8002a88 <FLASH_OB_BOR_LevelConfig+0x38>)
 8002a72:	79fb      	ldrb	r3, [r7, #7]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	700b      	strb	r3, [r1, #0]
  
  return HAL_OK;
 8002a7a:	2300      	movs	r3, #0
  
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	40023c14 	.word	0x40023c14

08002a8c <FLASH_OB_GetUser>:
  * @brief  Return the FLASH User Option Byte value.
  * @retval uint8_t FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1)
  *         and RST_STDBY(Bit2).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return ((uint8_t)(FLASH->OPTCR & 0xE0));
 8002a90:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <FLASH_OB_GetUser+0x1c>)
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f023 031f 	bic.w	r3, r3, #31
 8002a9a:	b2db      	uxtb	r3, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00

08002aac <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval uint16_t FLASH Write Protection Option Bytes value
  */
static uint16_t FLASH_OB_GetWRP(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
 8002ab0:	4b03      	ldr	r3, [pc, #12]	; (8002ac0 <FLASH_OB_GetWRP+0x14>)
 8002ab2:	881b      	ldrh	r3, [r3, #0]
 8002ab4:	b29b      	uxth	r3, r3
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	40023c16 	.word	0x40023c16

08002ac4 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint8_t FLASH_OB_GetRDP(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
  uint8_t readstatus = OB_RDP_LEVEL_0;
 8002aca:	23aa      	movs	r3, #170	; 0xaa
 8002acc:	71fb      	strb	r3, [r7, #7]

  if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_2))
 8002ace:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <FLASH_OB_GetRDP+0x3c>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	2bcc      	cmp	r3, #204	; 0xcc
 8002ad6:	d102      	bne.n	8002ade <FLASH_OB_GetRDP+0x1a>
  {
    readstatus = OB_RDP_LEVEL_2;
 8002ad8:	23cc      	movs	r3, #204	; 0xcc
 8002ada:	71fb      	strb	r3, [r7, #7]
 8002adc:	e009      	b.n	8002af2 <FLASH_OB_GetRDP+0x2e>
  }
  else if((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) == (uint8_t)OB_RDP_LEVEL_0))
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <FLASH_OB_GetRDP+0x3c>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2baa      	cmp	r3, #170	; 0xaa
 8002ae6:	d102      	bne.n	8002aee <FLASH_OB_GetRDP+0x2a>
  {
    readstatus = OB_RDP_LEVEL_0;
 8002ae8:	23aa      	movs	r3, #170	; 0xaa
 8002aea:	71fb      	strb	r3, [r7, #7]
 8002aec:	e001      	b.n	8002af2 <FLASH_OB_GetRDP+0x2e>
  }
  else 
  {
    readstatus = OB_RDP_LEVEL_1;
 8002aee:	2355      	movs	r3, #85	; 0x55
 8002af0:	71fb      	strb	r3, [r7, #7]
  }

  return readstatus;
 8002af2:	79fb      	ldrb	r3, [r7, #7]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	40023c15 	.word	0x40023c15

08002b04 <FLASH_OB_GetBOR>:
  *           - OB_BOR_LEVEL2: Supply voltage ranges from 2.4 to 2.7 V
  *           - OB_BOR_LEVEL1: Supply voltage ranges from 2.1 to 2.4 V
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint8_t FLASH_OB_GetBOR(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* Return the FLASH BOR level */
  return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <FLASH_OB_GetBOR+0x1c>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	b2db      	uxtb	r3, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40023c14 	.word	0x40023c14

08002b24 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8002b28:	4b20      	ldr	r3, [pc, #128]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d017      	beq.n	8002b64 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b3e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002b40:	4b1a      	ldr	r3, [pc, #104]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a19      	ldr	r2, [pc, #100]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	4b17      	ldr	r3, [pc, #92]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a16      	ldr	r2, [pc, #88]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b56:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a13      	ldr	r2, [pc, #76]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b62:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002b64:	4b11      	ldr	r3, [pc, #68]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d017      	beq.n	8002ba0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002b70:	4b0e      	ldr	r3, [pc, #56]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0d      	ldr	r2, [pc, #52]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b7a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0a      	ldr	r2, [pc, #40]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b08      	ldr	r3, [pc, #32]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a07      	ldr	r2, [pc, #28]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b92:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b94:	4b05      	ldr	r3, [pc, #20]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a04      	ldr	r2, [pc, #16]	; (8002bac <FLASH_FlushCaches+0x88>)
 8002b9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b9e:	6013      	str	r3, [r2, #0]
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40023c00 	.word	0x40023c00

08002bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b089      	sub	sp, #36	; 0x24
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
 8002bca:	e16b      	b.n	8002ea4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bcc:	2201      	movs	r2, #1
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	f040 815a 	bne.w	8002e9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d00b      	beq.n	8002c0a <HAL_GPIO_Init+0x5a>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d007      	beq.n	8002c0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bfe:	2b11      	cmp	r3, #17
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b12      	cmp	r3, #18
 8002c08:	d130      	bne.n	8002c6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	2203      	movs	r2, #3
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68da      	ldr	r2, [r3, #12]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c40:	2201      	movs	r2, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 0201 	and.w	r2, r3, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	2203      	movs	r2, #3
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43db      	mvns	r3, r3
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0xfc>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b12      	cmp	r3, #18
 8002caa:	d123      	bne.n	8002cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	08da      	lsrs	r2, r3, #3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3208      	adds	r2, #8
 8002cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	220f      	movs	r2, #15
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	08da      	lsrs	r2, r3, #3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3208      	adds	r2, #8
 8002cee:	69b9      	ldr	r1, [r7, #24]
 8002cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f003 0203 	and.w	r2, r3, #3
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 80b4 	beq.w	8002e9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b60      	ldr	r3, [pc, #384]	; (8002ebc <HAL_GPIO_Init+0x30c>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3e:	4a5f      	ldr	r2, [pc, #380]	; (8002ebc <HAL_GPIO_Init+0x30c>)
 8002d40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d44:	6453      	str	r3, [r2, #68]	; 0x44
 8002d46:	4b5d      	ldr	r3, [pc, #372]	; (8002ebc <HAL_GPIO_Init+0x30c>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d52:	4a5b      	ldr	r2, [pc, #364]	; (8002ec0 <HAL_GPIO_Init+0x310>)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	3302      	adds	r3, #2
 8002d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	220f      	movs	r2, #15
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43db      	mvns	r3, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4013      	ands	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a52      	ldr	r2, [pc, #328]	; (8002ec4 <HAL_GPIO_Init+0x314>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d02b      	beq.n	8002dd6 <HAL_GPIO_Init+0x226>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a51      	ldr	r2, [pc, #324]	; (8002ec8 <HAL_GPIO_Init+0x318>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d025      	beq.n	8002dd2 <HAL_GPIO_Init+0x222>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a50      	ldr	r2, [pc, #320]	; (8002ecc <HAL_GPIO_Init+0x31c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d01f      	beq.n	8002dce <HAL_GPIO_Init+0x21e>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4f      	ldr	r2, [pc, #316]	; (8002ed0 <HAL_GPIO_Init+0x320>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d019      	beq.n	8002dca <HAL_GPIO_Init+0x21a>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4e      	ldr	r2, [pc, #312]	; (8002ed4 <HAL_GPIO_Init+0x324>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d013      	beq.n	8002dc6 <HAL_GPIO_Init+0x216>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4d      	ldr	r2, [pc, #308]	; (8002ed8 <HAL_GPIO_Init+0x328>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d00d      	beq.n	8002dc2 <HAL_GPIO_Init+0x212>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4c      	ldr	r2, [pc, #304]	; (8002edc <HAL_GPIO_Init+0x32c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_Init+0x20e>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4b      	ldr	r2, [pc, #300]	; (8002ee0 <HAL_GPIO_Init+0x330>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_GPIO_Init+0x20a>
 8002db6:	2307      	movs	r3, #7
 8002db8:	e00e      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dba:	2308      	movs	r3, #8
 8002dbc:	e00c      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dbe:	2306      	movs	r3, #6
 8002dc0:	e00a      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dc2:	2305      	movs	r3, #5
 8002dc4:	e008      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dc6:	2304      	movs	r3, #4
 8002dc8:	e006      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e004      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e002      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <HAL_GPIO_Init+0x228>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	f002 0203 	and.w	r2, r2, #3
 8002dde:	0092      	lsls	r2, r2, #2
 8002de0:	4093      	lsls	r3, r2
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002de8:	4935      	ldr	r1, [pc, #212]	; (8002ec0 <HAL_GPIO_Init+0x310>)
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	089b      	lsrs	r3, r3, #2
 8002dee:	3302      	adds	r3, #2
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002df6:	4b3b      	ldr	r3, [pc, #236]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e1a:	4a32      	ldr	r2, [pc, #200]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e20:	4b30      	ldr	r3, [pc, #192]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d003      	beq.n	8002e44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e44:	4a27      	ldr	r2, [pc, #156]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4a:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e98:	4a12      	ldr	r2, [pc, #72]	; (8002ee4 <HAL_GPIO_Init+0x334>)
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b0f      	cmp	r3, #15
 8002ea8:	f67f ae90 	bls.w	8002bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eac:	bf00      	nop
 8002eae:	bf00      	nop
 8002eb0:	3724      	adds	r7, #36	; 0x24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	40020000 	.word	0x40020000
 8002ec8:	40020400 	.word	0x40020400
 8002ecc:	40020800 	.word	0x40020800
 8002ed0:	40020c00 	.word	0x40020c00
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40021400 	.word	0x40021400
 8002edc:	40021800 	.word	0x40021800
 8002ee0:	40021c00 	.word	0x40021c00
 8002ee4:	40013c00 	.word	0x40013c00

08002ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e001      	b.n	8002f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f34:	e003      	b.n	8002f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	041a      	lsls	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	619a      	str	r2, [r3, #24]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d006      	beq.n	8002f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f62:	4a05      	ldr	r2, [pc, #20]	; (8002f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f64:	88fb      	ldrh	r3, [r7, #6]
 8002f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f68:	88fb      	ldrh	r3, [r7, #6]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 f806 	bl	8002f7c <HAL_GPIO_EXTI_Callback>
  }
}
 8002f70:	bf00      	nop
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40013c00 	.word	0x40013c00

08002f7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e12b      	b.n	80031fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7fd ff08 	bl	8000dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2224      	movs	r2, #36	; 0x24
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 0201 	bic.w	r2, r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fe6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ff6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ff8:	f002 fd62 	bl	8005ac0 <HAL_RCC_GetPCLK1Freq>
 8002ffc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	4a81      	ldr	r2, [pc, #516]	; (8003208 <HAL_I2C_Init+0x274>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d807      	bhi.n	8003018 <HAL_I2C_Init+0x84>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4a80      	ldr	r2, [pc, #512]	; (800320c <HAL_I2C_Init+0x278>)
 800300c:	4293      	cmp	r3, r2
 800300e:	bf94      	ite	ls
 8003010:	2301      	movls	r3, #1
 8003012:	2300      	movhi	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e006      	b.n	8003026 <HAL_I2C_Init+0x92>
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	4a7d      	ldr	r2, [pc, #500]	; (8003210 <HAL_I2C_Init+0x27c>)
 800301c:	4293      	cmp	r3, r2
 800301e:	bf94      	ite	ls
 8003020:	2301      	movls	r3, #1
 8003022:	2300      	movhi	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e0e7      	b.n	80031fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a78      	ldr	r2, [pc, #480]	; (8003214 <HAL_I2C_Init+0x280>)
 8003032:	fba2 2303 	umull	r2, r3, r2, r3
 8003036:	0c9b      	lsrs	r3, r3, #18
 8003038:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4a6a      	ldr	r2, [pc, #424]	; (8003208 <HAL_I2C_Init+0x274>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d802      	bhi.n	8003068 <HAL_I2C_Init+0xd4>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	3301      	adds	r3, #1
 8003066:	e009      	b.n	800307c <HAL_I2C_Init+0xe8>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	4a69      	ldr	r2, [pc, #420]	; (8003218 <HAL_I2C_Init+0x284>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	099b      	lsrs	r3, r3, #6
 800307a:	3301      	adds	r3, #1
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	6812      	ldr	r2, [r2, #0]
 8003080:	430b      	orrs	r3, r1
 8003082:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800308e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	495c      	ldr	r1, [pc, #368]	; (8003208 <HAL_I2C_Init+0x274>)
 8003098:	428b      	cmp	r3, r1
 800309a:	d819      	bhi.n	80030d0 <HAL_I2C_Init+0x13c>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	1e59      	subs	r1, r3, #1
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80030aa:	1c59      	adds	r1, r3, #1
 80030ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030b0:	400b      	ands	r3, r1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_I2C_Init+0x138>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1e59      	subs	r1, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c4:	3301      	adds	r3, #1
 80030c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ca:	e051      	b.n	8003170 <HAL_I2C_Init+0x1dc>
 80030cc:	2304      	movs	r3, #4
 80030ce:	e04f      	b.n	8003170 <HAL_I2C_Init+0x1dc>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d111      	bne.n	80030fc <HAL_I2C_Init+0x168>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	1e58      	subs	r0, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6859      	ldr	r1, [r3, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	440b      	add	r3, r1
 80030e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	e012      	b.n	8003122 <HAL_I2C_Init+0x18e>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1e58      	subs	r0, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	0099      	lsls	r1, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003112:	3301      	adds	r3, #1
 8003114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Init+0x196>
 8003126:	2301      	movs	r3, #1
 8003128:	e022      	b.n	8003170 <HAL_I2C_Init+0x1dc>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10e      	bne.n	8003150 <HAL_I2C_Init+0x1bc>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	1e58      	subs	r0, r3, #1
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6859      	ldr	r1, [r3, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	440b      	add	r3, r1
 8003140:	fbb0 f3f3 	udiv	r3, r0, r3
 8003144:	3301      	adds	r3, #1
 8003146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800314e:	e00f      	b.n	8003170 <HAL_I2C_Init+0x1dc>
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1e58      	subs	r0, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	440b      	add	r3, r1
 800315e:	0099      	lsls	r1, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	fbb0 f3f3 	udiv	r3, r0, r3
 8003166:	3301      	adds	r3, #1
 8003168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	6809      	ldr	r1, [r1, #0]
 8003174:	4313      	orrs	r3, r2
 8003176:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800319e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6911      	ldr	r1, [r2, #16]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	68d2      	ldr	r2, [r2, #12]
 80031aa:	4311      	orrs	r1, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	6812      	ldr	r2, [r2, #0]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695a      	ldr	r2, [r3, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	430a      	orrs	r2, r1
 80031ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2220      	movs	r2, #32
 80031ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	000186a0 	.word	0x000186a0
 800320c:	001e847f 	.word	0x001e847f
 8003210:	003d08ff 	.word	0x003d08ff
 8003214:	431bde83 	.word	0x431bde83
 8003218:	10624dd3 	.word	0x10624dd3

0800321c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af02      	add	r7, sp, #8
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	607a      	str	r2, [r7, #4]
 8003226:	461a      	mov	r2, r3
 8003228:	460b      	mov	r3, r1
 800322a:	817b      	strh	r3, [r7, #10]
 800322c:	4613      	mov	r3, r2
 800322e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003230:	f7fe fb9e 	bl	8001970 <HAL_GetTick>
 8003234:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b20      	cmp	r3, #32
 8003240:	f040 80e0 	bne.w	8003404 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2319      	movs	r3, #25
 800324a:	2201      	movs	r2, #1
 800324c:	4970      	ldr	r1, [pc, #448]	; (8003410 <HAL_I2C_Master_Transmit+0x1f4>)
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 ff30 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800325a:	2302      	movs	r3, #2
 800325c:	e0d3      	b.n	8003406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_I2C_Master_Transmit+0x50>
 8003268:	2302      	movs	r3, #2
 800326a:	e0cc      	b.n	8003406 <HAL_I2C_Master_Transmit+0x1ea>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d007      	beq.n	8003292 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2221      	movs	r2, #33	; 0x21
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2210      	movs	r2, #16
 80032ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	893a      	ldrh	r2, [r7, #8]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a50      	ldr	r2, [pc, #320]	; (8003414 <HAL_I2C_Master_Transmit+0x1f8>)
 80032d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032d4:	8979      	ldrh	r1, [r7, #10]
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fcea 	bl	8003cb4 <I2C_MasterRequestWrite>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e08d      	b.n	8003406 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003300:	e066      	b.n	80033d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	6a39      	ldr	r1, [r7, #32]
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 ffaa 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00d      	beq.n	800332e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003316:	2b04      	cmp	r3, #4
 8003318:	d107      	bne.n	800332a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003328:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e06b      	b.n	8003406 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	781a      	ldrb	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	1c5a      	adds	r2, r3, #1
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b01      	subs	r3, #1
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b04      	cmp	r3, #4
 800336a:	d11b      	bne.n	80033a4 <HAL_I2C_Master_Transmit+0x188>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	d017      	beq.n	80033a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	1c5a      	adds	r2, r3, #1
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	6a39      	ldr	r1, [r7, #32]
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 ff9a 	bl	80042e2 <I2C_WaitOnBTFFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d00d      	beq.n	80033d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d107      	bne.n	80033cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e01a      	b.n	8003406 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d194      	bne.n	8003302 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	e000      	b.n	8003406 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003404:	2302      	movs	r3, #2
  }
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	00100002 	.word	0x00100002
 8003414:	ffff0000 	.word	0xffff0000

08003418 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b088      	sub	sp, #32
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	4608      	mov	r0, r1
 8003422:	4611      	mov	r1, r2
 8003424:	461a      	mov	r2, r3
 8003426:	4603      	mov	r3, r0
 8003428:	817b      	strh	r3, [r7, #10]
 800342a:	460b      	mov	r3, r1
 800342c:	813b      	strh	r3, [r7, #8]
 800342e:	4613      	mov	r3, r2
 8003430:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003432:	f7fe fa9d 	bl	8001970 <HAL_GetTick>
 8003436:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b20      	cmp	r3, #32
 8003442:	f040 80d9 	bne.w	80035f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	9300      	str	r3, [sp, #0]
 800344a:	2319      	movs	r3, #25
 800344c:	2201      	movs	r2, #1
 800344e:	496d      	ldr	r1, [pc, #436]	; (8003604 <HAL_I2C_Mem_Write+0x1ec>)
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f000 fe2f 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003456:	4603      	mov	r3, r0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d001      	beq.n	8003460 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800345c:	2302      	movs	r3, #2
 800345e:	e0cc      	b.n	80035fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <HAL_I2C_Mem_Write+0x56>
 800346a:	2302      	movs	r3, #2
 800346c:	e0c5      	b.n	80035fa <HAL_I2C_Mem_Write+0x1e2>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	2b01      	cmp	r3, #1
 8003482:	d007      	beq.n	8003494 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2221      	movs	r2, #33	; 0x21
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2240      	movs	r2, #64	; 0x40
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a3a      	ldr	r2, [r7, #32]
 80034be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a4d      	ldr	r2, [pc, #308]	; (8003608 <HAL_I2C_Mem_Write+0x1f0>)
 80034d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034d6:	88f8      	ldrh	r0, [r7, #6]
 80034d8:	893a      	ldrh	r2, [r7, #8]
 80034da:	8979      	ldrh	r1, [r7, #10]
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	9301      	str	r3, [sp, #4]
 80034e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	4603      	mov	r3, r0
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fc66 	bl	8003db8 <I2C_RequestMemoryWrite>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d052      	beq.n	8003598 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e081      	b.n	80035fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 feb0 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00d      	beq.n	8003522 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b04      	cmp	r3, #4
 800350c:	d107      	bne.n	800351e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e06b      	b.n	80035fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353c:	3b01      	subs	r3, #1
 800353e:	b29a      	uxth	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b04      	cmp	r3, #4
 800355e:	d11b      	bne.n	8003598 <HAL_I2C_Mem_Write+0x180>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	d017      	beq.n	8003598 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003582:	3b01      	subs	r3, #1
 8003584:	b29a      	uxth	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1aa      	bne.n	80034f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f000 fe9c 	bl	80042e2 <I2C_WaitOnBTFFlagUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00d      	beq.n	80035cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d107      	bne.n	80035c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e016      	b.n	80035fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	00100002 	.word	0x00100002
 8003608:	ffff0000 	.word	0xffff0000

0800360c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	; 0x30
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	4608      	mov	r0, r1
 8003616:	4611      	mov	r1, r2
 8003618:	461a      	mov	r2, r3
 800361a:	4603      	mov	r3, r0
 800361c:	817b      	strh	r3, [r7, #10]
 800361e:	460b      	mov	r3, r1
 8003620:	813b      	strh	r3, [r7, #8]
 8003622:	4613      	mov	r3, r2
 8003624:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003626:	f7fe f9a3 	bl	8001970 <HAL_GetTick>
 800362a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003632:	b2db      	uxtb	r3, r3
 8003634:	2b20      	cmp	r3, #32
 8003636:	f040 8208 	bne.w	8003a4a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2319      	movs	r3, #25
 8003640:	2201      	movs	r2, #1
 8003642:	497b      	ldr	r1, [pc, #492]	; (8003830 <HAL_I2C_Mem_Read+0x224>)
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fd35 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003650:	2302      	movs	r3, #2
 8003652:	e1fb      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_I2C_Mem_Read+0x56>
 800365e:	2302      	movs	r3, #2
 8003660:	e1f4      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b01      	cmp	r3, #1
 8003676:	d007      	beq.n	8003688 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f042 0201 	orr.w	r2, r2, #1
 8003686:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003696:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2222      	movs	r2, #34	; 0x22
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2240      	movs	r2, #64	; 0x40
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80036b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4a5b      	ldr	r2, [pc, #364]	; (8003834 <HAL_I2C_Mem_Read+0x228>)
 80036c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036ca:	88f8      	ldrh	r0, [r7, #6]
 80036cc:	893a      	ldrh	r2, [r7, #8]
 80036ce:	8979      	ldrh	r1, [r7, #10]
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	9301      	str	r3, [sp, #4]
 80036d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	4603      	mov	r3, r0
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fc02 	bl	8003ee4 <I2C_RequestMemoryRead>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e1b0      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d113      	bne.n	800371a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	623b      	str	r3, [r7, #32]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	623b      	str	r3, [r7, #32]
 8003706:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e184      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371e:	2b01      	cmp	r3, #1
 8003720:	d11b      	bne.n	800375a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003730:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	e164      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375e:	2b02      	cmp	r3, #2
 8003760:	d11b      	bne.n	800379a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003770:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003780:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	61bb      	str	r3, [r7, #24]
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	e144      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800379a:	2300      	movs	r3, #0
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80037b0:	e138      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	f200 80f1 	bhi.w	800399e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d123      	bne.n	800380c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fdcb 	bl	8004364 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e139      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691a      	ldr	r2, [r3, #16]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	1c5a      	adds	r2, r3, #1
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	855a      	strh	r2, [r3, #42]	; 0x2a
 800380a:	e10b      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003810:	2b02      	cmp	r3, #2
 8003812:	d14e      	bne.n	80038b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800381a:	2200      	movs	r2, #0
 800381c:	4906      	ldr	r1, [pc, #24]	; (8003838 <HAL_I2C_Mem_Read+0x22c>)
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fc48 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e10e      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
 800382e:	bf00      	nop
 8003830:	00100002 	.word	0x00100002
 8003834:	ffff0000 	.word	0xffff0000
 8003838:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800384a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	691a      	ldr	r2, [r3, #16]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003868:	3b01      	subs	r3, #1
 800386a:	b29a      	uxth	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003874:	b29b      	uxth	r3, r3
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038b0:	e0b8      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b8:	2200      	movs	r2, #0
 80038ba:	4966      	ldr	r1, [pc, #408]	; (8003a54 <HAL_I2C_Mem_Read+0x448>)
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fbf9 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0bf      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29a      	uxth	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003904:	b29b      	uxth	r3, r3
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003914:	2200      	movs	r2, #0
 8003916:	494f      	ldr	r1, [pc, #316]	; (8003a54 <HAL_I2C_Mem_Read+0x448>)
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fbcb 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e091      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	1c5a      	adds	r2, r3, #1
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800399c:	e042      	b.n	8003a24 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800399e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 fcde 	bl	8004364 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e04c      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691a      	ldr	r2, [r3, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	b2d2      	uxtb	r2, r2
 80039be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	f003 0304 	and.w	r3, r3, #4
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d118      	bne.n	8003a24 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f47f aec2 	bne.w	80037b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e000      	b.n	8003a4c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003a4a:	2302      	movs	r3, #2
  }
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3728      	adds	r7, #40	; 0x28
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	00010004 	.word	0x00010004

08003a58 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	460b      	mov	r3, r1
 8003a66:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003a68:	f7fd ff82 	bl	8001970 <HAL_GetTick>
 8003a6c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	2b20      	cmp	r3, #32
 8003a7c:	f040 8111 	bne.w	8003ca2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	2319      	movs	r3, #25
 8003a86:	2201      	movs	r2, #1
 8003a88:	4988      	ldr	r1, [pc, #544]	; (8003cac <HAL_I2C_IsDeviceReady+0x254>)
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 fb12 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003a96:	2302      	movs	r3, #2
 8003a98:	e104      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_I2C_IsDeviceReady+0x50>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e0fd      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d007      	beq.n	8003ace <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f042 0201 	orr.w	r2, r2, #1
 8003acc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003adc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2224      	movs	r2, #36	; 0x24
 8003ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a70      	ldr	r2, [pc, #448]	; (8003cb0 <HAL_I2C_IsDeviceReady+0x258>)
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fad0 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00d      	beq.n	8003b36 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b28:	d103      	bne.n	8003b32 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b30:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e0b6      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b36:	897b      	ldrh	r3, [r7, #10]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b44:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003b46:	f7fd ff13 	bl	8001970 <HAL_GetTick>
 8003b4a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	bf0c      	ite	eq
 8003b5a:	2301      	moveq	r3, #1
 8003b5c:	2300      	movne	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b70:	bf0c      	ite	eq
 8003b72:	2301      	moveq	r3, #1
 8003b74:	2300      	movne	r3, #0
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003b7a:	e025      	b.n	8003bc8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003b7c:	f7fd fef8 	bl	8001970 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <HAL_I2C_IsDeviceReady+0x13a>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	22a0      	movs	r2, #160	; 0xa0
 8003b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	bf0c      	ite	eq
 8003ba8:	2301      	moveq	r3, #1
 8003baa:	2300      	movne	r3, #0
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbe:	bf0c      	ite	eq
 8003bc0:	2301      	moveq	r3, #1
 8003bc2:	2300      	movne	r3, #0
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	2ba0      	cmp	r3, #160	; 0xa0
 8003bd2:	d005      	beq.n	8003be0 <HAL_I2C_IsDeviceReady+0x188>
 8003bd4:	7dfb      	ldrb	r3, [r7, #23]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d102      	bne.n	8003be0 <HAL_I2C_IsDeviceReady+0x188>
 8003bda:	7dbb      	ldrb	r3, [r7, #22]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0cd      	beq.n	8003b7c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b02      	cmp	r3, #2
 8003bf4:	d129      	bne.n	8003c4a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c04:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695b      	ldr	r3, [r3, #20]
 8003c10:	613b      	str	r3, [r7, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	2319      	movs	r3, #25
 8003c22:	2201      	movs	r2, #1
 8003c24:	4921      	ldr	r1, [pc, #132]	; (8003cac <HAL_I2C_IsDeviceReady+0x254>)
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 fa44 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e036      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2220      	movs	r2, #32
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e02c      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c58:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c62:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	2319      	movs	r3, #25
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	490f      	ldr	r1, [pc, #60]	; (8003cac <HAL_I2C_IsDeviceReady+0x254>)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fa20 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e012      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	3301      	adds	r3, #1
 8003c82:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	f4ff af32 	bcc.w	8003af2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3720      	adds	r7, #32
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	00100002 	.word	0x00100002
 8003cb0:	ffff0000 	.word	0xffff0000

08003cb4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	607a      	str	r2, [r7, #4]
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d006      	beq.n	8003cde <I2C_MasterRequestWrite+0x2a>
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d003      	beq.n	8003cde <I2C_MasterRequestWrite+0x2a>
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cdc:	d108      	bne.n	8003cf0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cec:	601a      	str	r2, [r3, #0]
 8003cee:	e00b      	b.n	8003d08 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	2b12      	cmp	r3, #18
 8003cf6:	d107      	bne.n	8003d08 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f000 f9cd 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00d      	beq.n	8003d3c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2e:	d103      	bne.n	8003d38 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e035      	b.n	8003da8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d44:	d108      	bne.n	8003d58 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d46:	897b      	ldrh	r3, [r7, #10]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d54:	611a      	str	r2, [r3, #16]
 8003d56:	e01b      	b.n	8003d90 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d58:	897b      	ldrh	r3, [r7, #10]
 8003d5a:	11db      	asrs	r3, r3, #7
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f003 0306 	and.w	r3, r3, #6
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f063 030f 	orn	r3, r3, #15
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <I2C_MasterRequestWrite+0xfc>)
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f9f3 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e010      	b.n	8003da8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d86:	897b      	ldrh	r3, [r7, #10]
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4907      	ldr	r1, [pc, #28]	; (8003db4 <I2C_MasterRequestWrite+0x100>)
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 f9e3 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3718      	adds	r7, #24
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	00010008 	.word	0x00010008
 8003db4:	00010002 	.word	0x00010002

08003db8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af02      	add	r7, sp, #8
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	817b      	strh	r3, [r7, #10]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	813b      	strh	r3, [r7, #8]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003de0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f960 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00d      	beq.n	8003e16 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e08:	d103      	bne.n	8003e12 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e10:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e05f      	b.n	8003ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e16:	897b      	ldrh	r3, [r7, #10]
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e24:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	6a3a      	ldr	r2, [r7, #32]
 8003e2a:	492d      	ldr	r1, [pc, #180]	; (8003ee0 <I2C_RequestMemoryWrite+0x128>)
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f998 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e04c      	b.n	8003ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	617b      	str	r3, [r7, #20]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	6a39      	ldr	r1, [r7, #32]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fa02 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d107      	bne.n	8003e7a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e78:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e02b      	b.n	8003ed6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e7e:	88fb      	ldrh	r3, [r7, #6]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d105      	bne.n	8003e90 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e84:	893b      	ldrh	r3, [r7, #8]
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	611a      	str	r2, [r3, #16]
 8003e8e:	e021      	b.n	8003ed4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e90:	893b      	ldrh	r3, [r7, #8]
 8003e92:	0a1b      	lsrs	r3, r3, #8
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea0:	6a39      	ldr	r1, [r7, #32]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 f9dc 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00d      	beq.n	8003eca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d107      	bne.n	8003ec6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e005      	b.n	8003ed6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eca:	893b      	ldrh	r3, [r7, #8]
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	00010002 	.word	0x00010002

08003ee4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	813b      	strh	r3, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f0c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f1c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f8c2 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f44:	d103      	bne.n	8003f4e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0aa      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f52:	897b      	ldrh	r3, [r7, #10]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f60:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	4952      	ldr	r1, [pc, #328]	; (80040b0 <I2C_RequestMemoryRead+0x1cc>)
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f8fa 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e097      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	617b      	str	r3, [r7, #20]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	6a39      	ldr	r1, [r7, #32]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f964 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d107      	bne.n	8003fb6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e076      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d105      	bne.n	8003fcc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fc0:	893b      	ldrh	r3, [r7, #8]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	611a      	str	r2, [r3, #16]
 8003fca:	e021      	b.n	8004010 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003fcc:	893b      	ldrh	r3, [r7, #8]
 8003fce:	0a1b      	lsrs	r3, r3, #8
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fdc:	6a39      	ldr	r1, [r7, #32]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f93e 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d107      	bne.n	8004002 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004000:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e050      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004006:	893b      	ldrh	r3, [r7, #8]
 8004008:	b2da      	uxtb	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004012:	6a39      	ldr	r1, [r7, #32]
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f923 	bl	8004260 <I2C_WaitOnTXEFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00d      	beq.n	800403c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	2b04      	cmp	r3, #4
 8004026:	d107      	bne.n	8004038 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004036:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e035      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800404a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	2200      	movs	r2, #0
 8004054:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f82b 	bl	80040b4 <I2C_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00d      	beq.n	8004080 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004072:	d103      	bne.n	800407c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f44f 7200 	mov.w	r2, #512	; 0x200
 800407a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e013      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004080:	897b      	ldrh	r3, [r7, #10]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	f043 0301 	orr.w	r3, r3, #1
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	6a3a      	ldr	r2, [r7, #32]
 8004094:	4906      	ldr	r1, [pc, #24]	; (80040b0 <I2C_RequestMemoryRead+0x1cc>)
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 f863 	bl	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040a6:	2300      	movs	r3, #0
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	00010002 	.word	0x00010002

080040b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	603b      	str	r3, [r7, #0]
 80040c0:	4613      	mov	r3, r2
 80040c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040c4:	e025      	b.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d021      	beq.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fd fc4f 	bl	8001970 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d116      	bne.n	8004112 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e023      	b.n	800415a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	0c1b      	lsrs	r3, r3, #16
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10d      	bne.n	8004138 <I2C_WaitOnFlagUntilTimeout+0x84>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	43da      	mvns	r2, r3
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	4013      	ands	r3, r2
 8004128:	b29b      	uxth	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	bf0c      	ite	eq
 800412e:	2301      	moveq	r3, #1
 8004130:	2300      	movne	r3, #0
 8004132:	b2db      	uxtb	r3, r3
 8004134:	461a      	mov	r2, r3
 8004136:	e00c      	b.n	8004152 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	43da      	mvns	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4013      	ands	r3, r2
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	bf0c      	ite	eq
 800414a:	2301      	moveq	r3, #1
 800414c:	2300      	movne	r3, #0
 800414e:	b2db      	uxtb	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	429a      	cmp	r2, r3
 8004156:	d0b6      	beq.n	80040c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004170:	e051      	b.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800417c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004180:	d123      	bne.n	80041ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004190:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800419a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f043 0204 	orr.w	r2, r3, #4
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e046      	b.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d021      	beq.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041d2:	f7fd fbcd 	bl	8001970 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d302      	bcc.n	80041e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d116      	bne.n	8004216 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004202:	f043 0220 	orr.w	r2, r3, #32
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e020      	b.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b01      	cmp	r3, #1
 800421e:	d10c      	bne.n	800423a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	43da      	mvns	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4013      	ands	r3, r2
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	bf14      	ite	ne
 8004232:	2301      	movne	r3, #1
 8004234:	2300      	moveq	r3, #0
 8004236:	b2db      	uxtb	r3, r3
 8004238:	e00b      	b.n	8004252 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	43da      	mvns	r2, r3
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4013      	ands	r3, r2
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	bf14      	ite	ne
 800424c:	2301      	movne	r3, #1
 800424e:	2300      	moveq	r3, #0
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d18d      	bne.n	8004172 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800426c:	e02d      	b.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f8ce 	bl	8004410 <I2C_IsAcknowledgeFailed>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e02d      	b.n	80042da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d021      	beq.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7fd fb73 	bl	8001970 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d116      	bne.n	80042ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e007      	b.n	80042da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	695b      	ldr	r3, [r3, #20]
 80042d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d4:	2b80      	cmp	r3, #128	; 0x80
 80042d6:	d1ca      	bne.n	800426e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3710      	adds	r7, #16
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b084      	sub	sp, #16
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	60f8      	str	r0, [r7, #12]
 80042ea:	60b9      	str	r1, [r7, #8]
 80042ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ee:	e02d      	b.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f88d 	bl	8004410 <I2C_IsAcknowledgeFailed>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e02d      	b.n	800435c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d021      	beq.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004308:	f7fd fb32 	bl	8001970 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	429a      	cmp	r2, r3
 8004316:	d302      	bcc.n	800431e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d116      	bne.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e007      	b.n	800435c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b04      	cmp	r3, #4
 8004358:	d1ca      	bne.n	80042f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004370:	e042      	b.n	80043f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	695b      	ldr	r3, [r3, #20]
 8004378:	f003 0310 	and.w	r3, r3, #16
 800437c:	2b10      	cmp	r3, #16
 800437e:	d119      	bne.n	80043b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0210 	mvn.w	r2, #16
 8004388:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e029      	b.n	8004408 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b4:	f7fd fadc 	bl	8001970 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d302      	bcc.n	80043ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d116      	bne.n	80043f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	f043 0220 	orr.w	r2, r3, #32
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e007      	b.n	8004408 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004402:	2b40      	cmp	r3, #64	; 0x40
 8004404:	d1b5      	bne.n	8004372 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004426:	d11b      	bne.n	8004460 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004430:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	f043 0204 	orr.w	r2, r3, #4
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e128      	b.n	80046d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d109      	bne.n	80044a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a90      	ldr	r2, [pc, #576]	; (80046dc <HAL_I2S_Init+0x26c>)
 800449a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7fc fd37 	bl	8000f10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6812      	ldr	r2, [r2, #0]
 80044b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80044b8:	f023 030f 	bic.w	r3, r3, #15
 80044bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2202      	movs	r2, #2
 80044c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d060      	beq.n	8004590 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d102      	bne.n	80044dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80044d6:	2310      	movs	r3, #16
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	e001      	b.n	80044e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80044dc:	2320      	movs	r3, #32
 80044de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	2b20      	cmp	r3, #32
 80044e6:	d802      	bhi.n	80044ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80044ee:	2001      	movs	r0, #1
 80044f0:	f001 fc22 	bl	8005d38 <HAL_RCCEx_GetPeriphCLKFreq>
 80044f4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044fe:	d125      	bne.n	800454c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d010      	beq.n	800452a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	005b      	lsls	r3, r3, #1
 800451a:	461a      	mov	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	3305      	adds	r3, #5
 8004526:	613b      	str	r3, [r7, #16]
 8004528:	e01f      	b.n	800456a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	fbb2 f2f3 	udiv	r2, r2, r3
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	461a      	mov	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	fbb2 f3f3 	udiv	r3, r2, r3
 8004546:	3305      	adds	r3, #5
 8004548:	613b      	str	r3, [r7, #16]
 800454a:	e00e      	b.n	800456a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	fbb2 f2f3 	udiv	r2, r2, r3
 8004554:	4613      	mov	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	461a      	mov	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695b      	ldr	r3, [r3, #20]
 8004562:	fbb2 f3f3 	udiv	r3, r2, r3
 8004566:	3305      	adds	r3, #5
 8004568:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	4a5c      	ldr	r2, [pc, #368]	; (80046e0 <HAL_I2S_Init+0x270>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	08db      	lsrs	r3, r3, #3
 8004574:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	085b      	lsrs	r3, r3, #1
 8004586:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	021b      	lsls	r3, r3, #8
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	e003      	b.n	8004598 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004590:	2302      	movs	r3, #2
 8004592:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d902      	bls.n	80045a4 <HAL_I2S_Init+0x134>
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	2bff      	cmp	r3, #255	; 0xff
 80045a2:	d907      	bls.n	80045b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a8:	f043 0210 	orr.w	r2, r3, #16
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e08f      	b.n	80046d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	ea42 0103 	orr.w	r1, r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	69db      	ldr	r3, [r3, #28]
 80045ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80045d2:	f023 030f 	bic.w	r3, r3, #15
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6851      	ldr	r1, [r2, #4]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6892      	ldr	r2, [r2, #8]
 80045de:	4311      	orrs	r1, r2
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	68d2      	ldr	r2, [r2, #12]
 80045e4:	4311      	orrs	r1, r2
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6992      	ldr	r2, [r2, #24]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	431a      	orrs	r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d161      	bne.n	80046c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a38      	ldr	r2, [pc, #224]	; (80046e4 <HAL_I2S_Init+0x274>)
 8004604:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a37      	ldr	r2, [pc, #220]	; (80046e8 <HAL_I2S_Init+0x278>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d101      	bne.n	8004614 <HAL_I2S_Init+0x1a4>
 8004610:	4b36      	ldr	r3, [pc, #216]	; (80046ec <HAL_I2S_Init+0x27c>)
 8004612:	e001      	b.n	8004618 <HAL_I2S_Init+0x1a8>
 8004614:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6812      	ldr	r2, [r2, #0]
 800461e:	4932      	ldr	r1, [pc, #200]	; (80046e8 <HAL_I2S_Init+0x278>)
 8004620:	428a      	cmp	r2, r1
 8004622:	d101      	bne.n	8004628 <HAL_I2S_Init+0x1b8>
 8004624:	4a31      	ldr	r2, [pc, #196]	; (80046ec <HAL_I2S_Init+0x27c>)
 8004626:	e001      	b.n	800462c <HAL_I2S_Init+0x1bc>
 8004628:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800462c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004630:	f023 030f 	bic.w	r3, r3, #15
 8004634:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a2b      	ldr	r2, [pc, #172]	; (80046e8 <HAL_I2S_Init+0x278>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d101      	bne.n	8004644 <HAL_I2S_Init+0x1d4>
 8004640:	4b2a      	ldr	r3, [pc, #168]	; (80046ec <HAL_I2S_Init+0x27c>)
 8004642:	e001      	b.n	8004648 <HAL_I2S_Init+0x1d8>
 8004644:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004648:	2202      	movs	r2, #2
 800464a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a25      	ldr	r2, [pc, #148]	; (80046e8 <HAL_I2S_Init+0x278>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <HAL_I2S_Init+0x1ea>
 8004656:	4b25      	ldr	r3, [pc, #148]	; (80046ec <HAL_I2S_Init+0x27c>)
 8004658:	e001      	b.n	800465e <HAL_I2S_Init+0x1ee>
 800465a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466a:	d003      	beq.n	8004674 <HAL_I2S_Init+0x204>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d103      	bne.n	800467c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	e001      	b.n	8004680 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800467c:	2300      	movs	r3, #0
 800467e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	b299      	uxth	r1, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004696:	4303      	orrs	r3, r0
 8004698:	b29b      	uxth	r3, r3
 800469a:	430b      	orrs	r3, r1
 800469c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800469e:	4313      	orrs	r3, r2
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	897b      	ldrh	r3, [r7, #10]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a0d      	ldr	r2, [pc, #52]	; (80046e8 <HAL_I2S_Init+0x278>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d101      	bne.n	80046bc <HAL_I2S_Init+0x24c>
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <HAL_I2S_Init+0x27c>)
 80046ba:	e001      	b.n	80046c0 <HAL_I2S_Init+0x250>
 80046bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046c0:	897a      	ldrh	r2, [r7, #10]
 80046c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3720      	adds	r7, #32
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	080047e7 	.word	0x080047e7
 80046e0:	cccccccd 	.word	0xcccccccd
 80046e4:	08004c11 	.word	0x08004c11
 80046e8:	40003800 	.word	0x40003800
 80046ec:	40003400 	.word	0x40003400

080046f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80046f8:	bf00      	nop
 80046fa:	370c      	adds	r7, #12
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr

08004704 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004704:	b480      	push	{r7}
 8004706:	b083      	sub	sp, #12
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	881a      	ldrh	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	1c9a      	adds	r2, r3, #2
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	3b01      	subs	r3, #1
 8004752:	b29a      	uxth	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10e      	bne.n	8004780 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004770:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff ffb8 	bl	80046f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}

08004788 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479a:	b292      	uxth	r2, r2
 800479c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a2:	1c9a      	adds	r2, r3, #2
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10e      	bne.n	80047de <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7ff ff93 	bl	8004704 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047de:	bf00      	nop
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b04      	cmp	r3, #4
 8004800:	d13a      	bne.n	8004878 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d109      	bne.n	8004820 <I2S_IRQHandler+0x3a>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004816:	2b40      	cmp	r3, #64	; 0x40
 8004818:	d102      	bne.n	8004820 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff ffb4 	bl	8004788 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004826:	2b40      	cmp	r3, #64	; 0x40
 8004828:	d126      	bne.n	8004878 <I2S_IRQHandler+0x92>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b20      	cmp	r3, #32
 8004836:	d11f      	bne.n	8004878 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004846:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486a:	f043 0202 	orr.w	r2, r3, #2
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ff50 	bl	8004718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b03      	cmp	r3, #3
 8004882:	d136      	bne.n	80048f2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b02      	cmp	r3, #2
 800488c:	d109      	bne.n	80048a2 <I2S_IRQHandler+0xbc>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004898:	2b80      	cmp	r3, #128	; 0x80
 800489a:	d102      	bne.n	80048a2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ff45 	bl	800472c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f003 0308 	and.w	r3, r3, #8
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d122      	bne.n	80048f2 <I2S_IRQHandler+0x10c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d11b      	bne.n	80048f2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80048c8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	f043 0204 	orr.w	r2, r3, #4
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff ff13 	bl	8004718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048f2:	bf00      	nop
 80048f4:	3718      	adds	r7, #24
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
	...

080048fc <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b01      	cmp	r3, #1
 8004920:	d002      	beq.n	8004928 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8004922:	2302      	movs	r3, #2
 8004924:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004926:	e160      	b.n	8004bea <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8004934:	887b      	ldrh	r3, [r7, #2]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e15a      	b.n	8004bf4 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b01      	cmp	r3, #1
 8004948:	d101      	bne.n	800494e <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800494a:	2302      	movs	r3, #2
 800494c:	e152      	b.n	8004bf4 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b03      	cmp	r3, #3
 8004972:	d002      	beq.n	800497a <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	2b05      	cmp	r3, #5
 8004978:	d114      	bne.n	80049a4 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 800497a:	887b      	ldrh	r3, [r7, #2]
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8004984:	887b      	ldrh	r3, [r7, #2]
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	b29a      	uxth	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 800498e:	887b      	ldrh	r3, [r7, #2]
 8004990:	005b      	lsls	r3, r3, #1
 8004992:	b29a      	uxth	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8004998:	887b      	ldrh	r3, [r7, #2]
 800499a:	005b      	lsls	r3, r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	865a      	strh	r2, [r3, #50]	; 0x32
 80049a2:	e00b      	b.n	80049bc <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	887a      	ldrh	r2, [r7, #2]
 80049a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	887a      	ldrh	r2, [r7, #2]
 80049ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	887a      	ldrh	r2, [r7, #2]
 80049b4:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	887a      	ldrh	r2, [r7, #2]
 80049ba:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2205      	movs	r2, #5
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ce:	4a8b      	ldr	r2, [pc, #556]	; (8004bfc <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d6:	4a8a      	ldr	r2, [pc, #552]	; (8004c00 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80049d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049de:	4a89      	ldr	r2, [pc, #548]	; (8004c04 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80049e0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	4a85      	ldr	r2, [pc, #532]	; (8004bfc <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 80049e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ee:	4a84      	ldr	r2, [pc, #528]	; (8004c00 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 80049f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	4a83      	ldr	r2, [pc, #524]	; (8004c04 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 80049f8:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a04:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a0c:	d002      	beq.n	8004a14 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d16b      	bne.n	8004aec <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8004a14:	1d3b      	adds	r3, r7, #4
 8004a16:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a79      	ldr	r2, [pc, #484]	; (8004c08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d101      	bne.n	8004a2a <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8004a26:	4b79      	ldr	r3, [pc, #484]	; (8004c0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004a28:	e001      	b.n	8004a2e <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8004a2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a2e:	330c      	adds	r3, #12
 8004a30:	4619      	mov	r1, r3
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	f7fd f958 	bl	8001cf0 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a70      	ldr	r2, [pc, #448]	; (8004c08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d101      	bne.n	8004a4e <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8004a4a:	4b70      	ldr	r3, [pc, #448]	; (8004c0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004a4c:	e001      	b.n	8004a52 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8004a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	496b      	ldr	r1, [pc, #428]	; (8004c08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004a5a:	428b      	cmp	r3, r1
 8004a5c:	d101      	bne.n	8004a62 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8004a5e:	4b6b      	ldr	r3, [pc, #428]	; (8004c0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004a60:	e001      	b.n	8004a66 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8004a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a66:	f042 0201 	orr.w	r2, r2, #1
 8004a6a:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8004a6c:	f107 0308 	add.w	r3, r7, #8
 8004a70:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	6819      	ldr	r1, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	461a      	mov	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	f7fd f932 	bl	8001cf0 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0202 	orr.w	r2, r2, #2
 8004a9a:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aaa:	f000 809e 	beq.w	8004bea <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a55      	ldr	r2, [pc, #340]	; (8004c08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d101      	bne.n	8004abc <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8004ab8:	4b54      	ldr	r3, [pc, #336]	; (8004c0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004aba:	e001      	b.n	8004ac0 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8004abc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac0:	69da      	ldr	r2, [r3, #28]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4950      	ldr	r1, [pc, #320]	; (8004c08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004ac8:	428b      	cmp	r3, r1
 8004aca:	d101      	bne.n	8004ad0 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8004acc:	4b4f      	ldr	r3, [pc, #316]	; (8004c0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004ace:	e001      	b.n	8004ad4 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8004ad0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ad8:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ae8:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004aea:	e07e      	b.n	8004bea <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004afa:	d10a      	bne.n	8004b12 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	613b      	str	r3, [r7, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	613b      	str	r3, [r7, #16]
 8004b10:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8004b12:	f107 0308 	add.w	r3, r7, #8
 8004b16:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	6819      	ldr	r1, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a38      	ldr	r2, [pc, #224]	; (8004c08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d101      	bne.n	8004b2e <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8004b2a:	4b38      	ldr	r3, [pc, #224]	; (8004c0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004b2c:	e001      	b.n	8004b32 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8004b2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b32:	330c      	adds	r3, #12
 8004b34:	461a      	mov	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	f7fd f8d8 	bl	8001cf0 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a30      	ldr	r2, [pc, #192]	; (8004c08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d101      	bne.n	8004b4e <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8004b4a:	4b30      	ldr	r3, [pc, #192]	; (8004c0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004b4c:	e001      	b.n	8004b52 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8004b4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	492b      	ldr	r1, [pc, #172]	; (8004c08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004b5a:	428b      	cmp	r3, r1
 8004b5c:	d101      	bne.n	8004b62 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8004b5e:	4b2b      	ldr	r3, [pc, #172]	; (8004c0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004b60:	e001      	b.n	8004b66 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8004b62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b66:	f042 0202 	orr.w	r2, r2, #2
 8004b6a:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8004b6c:	1d3b      	adds	r3, r7, #4
 8004b6e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	330c      	adds	r3, #12
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f7fd f8b3 	bl	8001cf0 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f042 0201 	orr.w	r2, r2, #1
 8004b98:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	69db      	ldr	r3, [r3, #28]
 8004ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba8:	d01e      	beq.n	8004be8 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a16      	ldr	r2, [pc, #88]	; (8004c08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d101      	bne.n	8004bb8 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8004bb4:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004bb6:	e001      	b.n	8004bbc <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8004bb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bbc:	69da      	ldr	r2, [r3, #28]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4911      	ldr	r1, [pc, #68]	; (8004c08 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004bc4:	428b      	cmp	r3, r1
 8004bc6:	d101      	bne.n	8004bcc <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8004bc8:	4b10      	ldr	r3, [pc, #64]	; (8004c0c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004bca:	e001      	b.n	8004bd0 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8004bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bd4:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004be4:	61da      	str	r2, [r3, #28]
 8004be6:	e000      	b.n	8004bea <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8004be8:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8004bf2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3720      	adds	r7, #32
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	08004ecd 	.word	0x08004ecd
 8004c00:	08004ee9 	.word	0x08004ee9
 8004c04:	08005019 	.word	0x08005019
 8004c08:	40003800 	.word	0x40003800
 8004c0c:	40003400 	.word	0x40003400

08004c10 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4aa2      	ldr	r2, [pc, #648]	; (8004eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d101      	bne.n	8004c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c2a:	4ba2      	ldr	r3, [pc, #648]	; (8004eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c2c:	e001      	b.n	8004c32 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a9b      	ldr	r2, [pc, #620]	; (8004eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d101      	bne.n	8004c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004c48:	4b9a      	ldr	r3, [pc, #616]	; (8004eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004c4a:	e001      	b.n	8004c50 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5c:	d004      	beq.n	8004c68 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f040 8099 	bne.w	8004d9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d107      	bne.n	8004c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d002      	beq.n	8004c82 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 fa0b 	bl	8005098 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d107      	bne.n	8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 faae 	bl	80051f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ca2:	2b40      	cmp	r3, #64	; 0x40
 8004ca4:	d13a      	bne.n	8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	f003 0320 	and.w	r3, r3, #32
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d035      	beq.n	8004d1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a7e      	ldr	r2, [pc, #504]	; (8004eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d101      	bne.n	8004cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004cba:	4b7e      	ldr	r3, [pc, #504]	; (8004eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cbc:	e001      	b.n	8004cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004cbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4979      	ldr	r1, [pc, #484]	; (8004eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004cca:	428b      	cmp	r3, r1
 8004ccc:	d101      	bne.n	8004cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004cce:	4b79      	ldr	r3, [pc, #484]	; (8004eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004cd0:	e001      	b.n	8004cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004cd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cda:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004cec:	2300      	movs	r3, #0
 8004cee:	60fb      	str	r3, [r7, #12]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	f043 0202 	orr.w	r2, r3, #2
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7ff fcfe 	bl	8004718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	f040 80be 	bne.w	8004ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 80b8 	beq.w	8004ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a59      	ldr	r2, [pc, #356]	; (8004eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d101      	bne.n	8004d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d4e:	4b59      	ldr	r3, [pc, #356]	; (8004eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d50:	e001      	b.n	8004d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4954      	ldr	r1, [pc, #336]	; (8004eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d5e:	428b      	cmp	r3, r1
 8004d60:	d101      	bne.n	8004d66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d62:	4b54      	ldr	r3, [pc, #336]	; (8004eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d64:	e001      	b.n	8004d6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d70:	2300      	movs	r3, #0
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	60bb      	str	r3, [r7, #8]
 8004d7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8a:	f043 0204 	orr.w	r2, r3, #4
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fcc0 	bl	8004718 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d98:	e084      	b.n	8004ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d107      	bne.n	8004db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f9a4 	bl	80050fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d107      	bne.n	8004dce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d002      	beq.n	8004dce <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f9e3 	bl	8005194 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d12f      	bne.n	8004e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d02a      	beq.n	8004e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004df0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a2e      	ldr	r2, [pc, #184]	; (8004eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d101      	bne.n	8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004dfc:	4b2d      	ldr	r3, [pc, #180]	; (8004eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004dfe:	e001      	b.n	8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004e00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4929      	ldr	r1, [pc, #164]	; (8004eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e0c:	428b      	cmp	r3, r1
 8004e0e:	d101      	bne.n	8004e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004e10:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e12:	e001      	b.n	8004e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004e14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2a:	f043 0202 	orr.w	r2, r3, #2
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff fc70 	bl	8004718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b08      	cmp	r3, #8
 8004e40:	d131      	bne.n	8004ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02c      	beq.n	8004ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d101      	bne.n	8004e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e56:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e58:	e001      	b.n	8004e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4912      	ldr	r1, [pc, #72]	; (8004eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e66:	428b      	cmp	r3, r1
 8004e68:	d101      	bne.n	8004e6e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e6c:	e001      	b.n	8004e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004e6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e72:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e76:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e86:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e94:	f043 0204 	orr.w	r2, r3, #4
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff fc3b 	bl	8004718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ea2:	e000      	b.n	8004ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ea4:	bf00      	nop
}
 8004ea6:	bf00      	nop
 8004ea8:	3720      	adds	r7, #32
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40003800 	.word	0x40003800
 8004eb4:	40003400 	.word	0x40003400

08004eb8 <HAL_I2SEx_TxRxHalfCpltCallback>:
  * @brief  Tx and Rx Transfer half completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxHalfCpltCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff ffec 	bl	8004eb8 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f040 8084 	bne.w	8005008 <I2SEx_TxRxDMACplt+0x120>
  {
    if (hi2s->hdmarx == hdma)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d13c      	bne.n	8004f84 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f18:	d006      	beq.n	8004f28 <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d116      	bne.n	8004f56 <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a38      	ldr	r2, [pc, #224]	; (8005010 <I2SEx_TxRxDMACplt+0x128>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d101      	bne.n	8004f36 <I2SEx_TxRxDMACplt+0x4e>
 8004f32:	4b38      	ldr	r3, [pc, #224]	; (8005014 <I2SEx_TxRxDMACplt+0x12c>)
 8004f34:	e001      	b.n	8004f3a <I2SEx_TxRxDMACplt+0x52>
 8004f36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4933      	ldr	r1, [pc, #204]	; (8005010 <I2SEx_TxRxDMACplt+0x128>)
 8004f42:	428b      	cmp	r3, r1
 8004f44:	d101      	bne.n	8004f4a <I2SEx_TxRxDMACplt+0x62>
 8004f46:	4b33      	ldr	r3, [pc, #204]	; (8005014 <I2SEx_TxRxDMACplt+0x12c>)
 8004f48:	e001      	b.n	8004f4e <I2SEx_TxRxDMACplt+0x66>
 8004f4a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f4e:	f022 0201 	bic.w	r2, r2, #1
 8004f52:	605a      	str	r2, [r3, #4]
 8004f54:	e007      	b.n	8004f66 <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f004 f98c 	bl	800929c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d13c      	bne.n	8005008 <I2SEx_TxRxDMACplt+0x120>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f9c:	d006      	beq.n	8004fac <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d108      	bne.n	8004fbe <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0202 	bic.w	r2, r2, #2
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	e015      	b.n	8004fea <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a13      	ldr	r2, [pc, #76]	; (8005010 <I2SEx_TxRxDMACplt+0x128>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d101      	bne.n	8004fcc <I2SEx_TxRxDMACplt+0xe4>
 8004fc8:	4b12      	ldr	r3, [pc, #72]	; (8005014 <I2SEx_TxRxDMACplt+0x12c>)
 8004fca:	e001      	b.n	8004fd0 <I2SEx_TxRxDMACplt+0xe8>
 8004fcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	490e      	ldr	r1, [pc, #56]	; (8005010 <I2SEx_TxRxDMACplt+0x128>)
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	d101      	bne.n	8004fe0 <I2SEx_TxRxDMACplt+0xf8>
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <I2SEx_TxRxDMACplt+0x12c>)
 8004fde:	e001      	b.n	8004fe4 <I2SEx_TxRxDMACplt+0xfc>
 8004fe0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fe4:	f022 0202 	bic.w	r2, r2, #2
 8004fe8:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2200      	movs	r2, #0
 8004fee:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d106      	bne.n	8005008 <I2SEx_TxRxDMACplt+0x120>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f004 f94a 	bl	800929c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005008:	bf00      	nop
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40003800 	.word	0x40003800
 8005014:	40003400 	.word	0x40003400

08005018 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005024:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0203 	bic.w	r2, r2, #3
 8005034:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a15      	ldr	r2, [pc, #84]	; (8005090 <I2SEx_TxRxDMAError+0x78>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d101      	bne.n	8005044 <I2SEx_TxRxDMAError+0x2c>
 8005040:	4b14      	ldr	r3, [pc, #80]	; (8005094 <I2SEx_TxRxDMAError+0x7c>)
 8005042:	e001      	b.n	8005048 <I2SEx_TxRxDMAError+0x30>
 8005044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4910      	ldr	r1, [pc, #64]	; (8005090 <I2SEx_TxRxDMAError+0x78>)
 8005050:	428b      	cmp	r3, r1
 8005052:	d101      	bne.n	8005058 <I2SEx_TxRxDMAError+0x40>
 8005054:	4b0f      	ldr	r3, [pc, #60]	; (8005094 <I2SEx_TxRxDMAError+0x7c>)
 8005056:	e001      	b.n	800505c <I2SEx_TxRxDMAError+0x44>
 8005058:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800505c:	f022 0203 	bic.w	r2, r2, #3
 8005060:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2201      	movs	r2, #1
 8005072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800507a:	f043 0208 	orr.w	r2, r3, #8
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff fb48 	bl	8004718 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005088:	bf00      	nop
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}
 8005090:	40003800 	.word	0x40003800
 8005094:	40003400 	.word	0x40003400

08005098 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	1c99      	adds	r1, r3, #2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	6251      	str	r1, [r2, #36]	; 0x24
 80050aa:	881a      	ldrh	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d113      	bne.n	80050f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f004 f8d5 	bl	800929c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	1c99      	adds	r1, r3, #2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6251      	str	r1, [r2, #36]	; 0x24
 800510e:	8819      	ldrh	r1, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1d      	ldr	r2, [pc, #116]	; (800518c <I2SEx_TxISR_I2SExt+0x90>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d101      	bne.n	800511e <I2SEx_TxISR_I2SExt+0x22>
 800511a:	4b1d      	ldr	r3, [pc, #116]	; (8005190 <I2SEx_TxISR_I2SExt+0x94>)
 800511c:	e001      	b.n	8005122 <I2SEx_TxISR_I2SExt+0x26>
 800511e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005122:	460a      	mov	r2, r1
 8005124:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512a:	b29b      	uxth	r3, r3
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d121      	bne.n	8005182 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <I2SEx_TxISR_I2SExt+0x90>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d101      	bne.n	800514c <I2SEx_TxISR_I2SExt+0x50>
 8005148:	4b11      	ldr	r3, [pc, #68]	; (8005190 <I2SEx_TxISR_I2SExt+0x94>)
 800514a:	e001      	b.n	8005150 <I2SEx_TxISR_I2SExt+0x54>
 800514c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005150:	685a      	ldr	r2, [r3, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	490d      	ldr	r1, [pc, #52]	; (800518c <I2SEx_TxISR_I2SExt+0x90>)
 8005158:	428b      	cmp	r3, r1
 800515a:	d101      	bne.n	8005160 <I2SEx_TxISR_I2SExt+0x64>
 800515c:	4b0c      	ldr	r3, [pc, #48]	; (8005190 <I2SEx_TxISR_I2SExt+0x94>)
 800515e:	e001      	b.n	8005164 <I2SEx_TxISR_I2SExt+0x68>
 8005160:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005164:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005168:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	d106      	bne.n	8005182 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f004 f88d 	bl	800929c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	40003800 	.word	0x40003800
 8005190:	40003400 	.word	0x40003400

08005194 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	68d8      	ldr	r0, [r3, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	1c99      	adds	r1, r3, #2
 80051a8:	687a      	ldr	r2, [r7, #4]
 80051aa:	62d1      	str	r1, [r2, #44]	; 0x2c
 80051ac:	b282      	uxth	r2, r0
 80051ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d113      	bne.n	80051f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051dc:	b29b      	uxth	r3, r3
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f004 f856 	bl	800929c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051f0:	bf00      	nop
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a20      	ldr	r2, [pc, #128]	; (8005288 <I2SEx_RxISR_I2SExt+0x90>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d101      	bne.n	800520e <I2SEx_RxISR_I2SExt+0x16>
 800520a:	4b20      	ldr	r3, [pc, #128]	; (800528c <I2SEx_RxISR_I2SExt+0x94>)
 800520c:	e001      	b.n	8005212 <I2SEx_RxISR_I2SExt+0x1a>
 800520e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005212:	68d8      	ldr	r0, [r3, #12]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	1c99      	adds	r1, r3, #2
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800521e:	b282      	uxth	r2, r0
 8005220:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d121      	bne.n	800527e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a12      	ldr	r2, [pc, #72]	; (8005288 <I2SEx_RxISR_I2SExt+0x90>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d101      	bne.n	8005248 <I2SEx_RxISR_I2SExt+0x50>
 8005244:	4b11      	ldr	r3, [pc, #68]	; (800528c <I2SEx_RxISR_I2SExt+0x94>)
 8005246:	e001      	b.n	800524c <I2SEx_RxISR_I2SExt+0x54>
 8005248:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	490d      	ldr	r1, [pc, #52]	; (8005288 <I2SEx_RxISR_I2SExt+0x90>)
 8005254:	428b      	cmp	r3, r1
 8005256:	d101      	bne.n	800525c <I2SEx_RxISR_I2SExt+0x64>
 8005258:	4b0c      	ldr	r3, [pc, #48]	; (800528c <I2SEx_RxISR_I2SExt+0x94>)
 800525a:	e001      	b.n	8005260 <I2SEx_RxISR_I2SExt+0x68>
 800525c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005260:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005264:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f004 f80f 	bl	800929c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	40003800 	.word	0x40003800
 800528c:	40003400 	.word	0x40003400

08005290 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e25b      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d075      	beq.n	800539a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052ae:	4ba3      	ldr	r3, [pc, #652]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f003 030c 	and.w	r3, r3, #12
 80052b6:	2b04      	cmp	r3, #4
 80052b8:	d00c      	beq.n	80052d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052ba:	4ba0      	ldr	r3, [pc, #640]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80052c2:	2b08      	cmp	r3, #8
 80052c4:	d112      	bne.n	80052ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052c6:	4b9d      	ldr	r3, [pc, #628]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052d2:	d10b      	bne.n	80052ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052d4:	4b99      	ldr	r3, [pc, #612]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d05b      	beq.n	8005398 <HAL_RCC_OscConfig+0x108>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d157      	bne.n	8005398 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e236      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052f4:	d106      	bne.n	8005304 <HAL_RCC_OscConfig+0x74>
 80052f6:	4b91      	ldr	r3, [pc, #580]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a90      	ldr	r2, [pc, #576]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80052fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	e01d      	b.n	8005340 <HAL_RCC_OscConfig+0xb0>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800530c:	d10c      	bne.n	8005328 <HAL_RCC_OscConfig+0x98>
 800530e:	4b8b      	ldr	r3, [pc, #556]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a8a      	ldr	r2, [pc, #552]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 8005314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	4b88      	ldr	r3, [pc, #544]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a87      	ldr	r2, [pc, #540]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 8005320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e00b      	b.n	8005340 <HAL_RCC_OscConfig+0xb0>
 8005328:	4b84      	ldr	r3, [pc, #528]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a83      	ldr	r2, [pc, #524]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 800532e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	4b81      	ldr	r3, [pc, #516]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a80      	ldr	r2, [pc, #512]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 800533a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800533e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d013      	beq.n	8005370 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005348:	f7fc fb12 	bl	8001970 <HAL_GetTick>
 800534c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800534e:	e008      	b.n	8005362 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005350:	f7fc fb0e 	bl	8001970 <HAL_GetTick>
 8005354:	4602      	mov	r2, r0
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	2b64      	cmp	r3, #100	; 0x64
 800535c:	d901      	bls.n	8005362 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800535e:	2303      	movs	r3, #3
 8005360:	e1fb      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005362:	4b76      	ldr	r3, [pc, #472]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d0f0      	beq.n	8005350 <HAL_RCC_OscConfig+0xc0>
 800536e:	e014      	b.n	800539a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005370:	f7fc fafe 	bl	8001970 <HAL_GetTick>
 8005374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005376:	e008      	b.n	800538a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005378:	f7fc fafa 	bl	8001970 <HAL_GetTick>
 800537c:	4602      	mov	r2, r0
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d901      	bls.n	800538a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e1e7      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800538a:	4b6c      	ldr	r3, [pc, #432]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f0      	bne.n	8005378 <HAL_RCC_OscConfig+0xe8>
 8005396:	e000      	b.n	800539a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d063      	beq.n	800546e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053a6:	4b65      	ldr	r3, [pc, #404]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 030c 	and.w	r3, r3, #12
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053b2:	4b62      	ldr	r3, [pc, #392]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053ba:	2b08      	cmp	r3, #8
 80053bc:	d11c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053be:	4b5f      	ldr	r3, [pc, #380]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d116      	bne.n	80053f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053ca:	4b5c      	ldr	r3, [pc, #368]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0302 	and.w	r3, r3, #2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d005      	beq.n	80053e2 <HAL_RCC_OscConfig+0x152>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d001      	beq.n	80053e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e1bb      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053e2:	4b56      	ldr	r3, [pc, #344]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4952      	ldr	r1, [pc, #328]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053f6:	e03a      	b.n	800546e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d020      	beq.n	8005442 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005400:	4b4f      	ldr	r3, [pc, #316]	; (8005540 <HAL_RCC_OscConfig+0x2b0>)
 8005402:	2201      	movs	r2, #1
 8005404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005406:	f7fc fab3 	bl	8001970 <HAL_GetTick>
 800540a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540c:	e008      	b.n	8005420 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800540e:	f7fc faaf 	bl	8001970 <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	2b02      	cmp	r3, #2
 800541a:	d901      	bls.n	8005420 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e19c      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005420:	4b46      	ldr	r3, [pc, #280]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0302 	and.w	r3, r3, #2
 8005428:	2b00      	cmp	r3, #0
 800542a:	d0f0      	beq.n	800540e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800542c:	4b43      	ldr	r3, [pc, #268]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	4940      	ldr	r1, [pc, #256]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 800543c:	4313      	orrs	r3, r2
 800543e:	600b      	str	r3, [r1, #0]
 8005440:	e015      	b.n	800546e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005442:	4b3f      	ldr	r3, [pc, #252]	; (8005540 <HAL_RCC_OscConfig+0x2b0>)
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005448:	f7fc fa92 	bl	8001970 <HAL_GetTick>
 800544c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005450:	f7fc fa8e 	bl	8001970 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e17b      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005462:	4b36      	ldr	r3, [pc, #216]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1f0      	bne.n	8005450 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b00      	cmp	r3, #0
 8005478:	d030      	beq.n	80054dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d016      	beq.n	80054b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005482:	4b30      	ldr	r3, [pc, #192]	; (8005544 <HAL_RCC_OscConfig+0x2b4>)
 8005484:	2201      	movs	r2, #1
 8005486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005488:	f7fc fa72 	bl	8001970 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005490:	f7fc fa6e 	bl	8001970 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b02      	cmp	r3, #2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e15b      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054a2:	4b26      	ldr	r3, [pc, #152]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80054a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0f0      	beq.n	8005490 <HAL_RCC_OscConfig+0x200>
 80054ae:	e015      	b.n	80054dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054b0:	4b24      	ldr	r3, [pc, #144]	; (8005544 <HAL_RCC_OscConfig+0x2b4>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054b6:	f7fc fa5b 	bl	8001970 <HAL_GetTick>
 80054ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054bc:	e008      	b.n	80054d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054be:	f7fc fa57 	bl	8001970 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e144      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054d0:	4b1a      	ldr	r3, [pc, #104]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80054d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1f0      	bne.n	80054be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80a0 	beq.w	800562a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ea:	2300      	movs	r3, #0
 80054ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054ee:	4b13      	ldr	r3, [pc, #76]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10f      	bne.n	800551a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054fa:	2300      	movs	r3, #0
 80054fc:	60bb      	str	r3, [r7, #8]
 80054fe:	4b0f      	ldr	r3, [pc, #60]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	4a0e      	ldr	r2, [pc, #56]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 8005504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005508:	6413      	str	r3, [r2, #64]	; 0x40
 800550a:	4b0c      	ldr	r3, [pc, #48]	; (800553c <HAL_RCC_OscConfig+0x2ac>)
 800550c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005512:	60bb      	str	r3, [r7, #8]
 8005514:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800551a:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <HAL_RCC_OscConfig+0x2b8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005522:	2b00      	cmp	r3, #0
 8005524:	d121      	bne.n	800556a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005526:	4b08      	ldr	r3, [pc, #32]	; (8005548 <HAL_RCC_OscConfig+0x2b8>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a07      	ldr	r2, [pc, #28]	; (8005548 <HAL_RCC_OscConfig+0x2b8>)
 800552c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005530:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005532:	f7fc fa1d 	bl	8001970 <HAL_GetTick>
 8005536:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005538:	e011      	b.n	800555e <HAL_RCC_OscConfig+0x2ce>
 800553a:	bf00      	nop
 800553c:	40023800 	.word	0x40023800
 8005540:	42470000 	.word	0x42470000
 8005544:	42470e80 	.word	0x42470e80
 8005548:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800554c:	f7fc fa10 	bl	8001970 <HAL_GetTick>
 8005550:	4602      	mov	r2, r0
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	1ad3      	subs	r3, r2, r3
 8005556:	2b02      	cmp	r3, #2
 8005558:	d901      	bls.n	800555e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800555a:	2303      	movs	r3, #3
 800555c:	e0fd      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800555e:	4b81      	ldr	r3, [pc, #516]	; (8005764 <HAL_RCC_OscConfig+0x4d4>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0f0      	beq.n	800554c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d106      	bne.n	8005580 <HAL_RCC_OscConfig+0x2f0>
 8005572:	4b7d      	ldr	r3, [pc, #500]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 8005574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005576:	4a7c      	ldr	r2, [pc, #496]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 8005578:	f043 0301 	orr.w	r3, r3, #1
 800557c:	6713      	str	r3, [r2, #112]	; 0x70
 800557e:	e01c      	b.n	80055ba <HAL_RCC_OscConfig+0x32a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b05      	cmp	r3, #5
 8005586:	d10c      	bne.n	80055a2 <HAL_RCC_OscConfig+0x312>
 8005588:	4b77      	ldr	r3, [pc, #476]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 800558a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558c:	4a76      	ldr	r2, [pc, #472]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 800558e:	f043 0304 	orr.w	r3, r3, #4
 8005592:	6713      	str	r3, [r2, #112]	; 0x70
 8005594:	4b74      	ldr	r3, [pc, #464]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 8005596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005598:	4a73      	ldr	r2, [pc, #460]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6713      	str	r3, [r2, #112]	; 0x70
 80055a0:	e00b      	b.n	80055ba <HAL_RCC_OscConfig+0x32a>
 80055a2:	4b71      	ldr	r3, [pc, #452]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	4a70      	ldr	r2, [pc, #448]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 80055a8:	f023 0301 	bic.w	r3, r3, #1
 80055ac:	6713      	str	r3, [r2, #112]	; 0x70
 80055ae:	4b6e      	ldr	r3, [pc, #440]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	4a6d      	ldr	r2, [pc, #436]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 80055b4:	f023 0304 	bic.w	r3, r3, #4
 80055b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d015      	beq.n	80055ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055c2:	f7fc f9d5 	bl	8001970 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c8:	e00a      	b.n	80055e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055ca:	f7fc f9d1 	bl	8001970 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055d8:	4293      	cmp	r3, r2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e0bc      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055e0:	4b61      	ldr	r3, [pc, #388]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 80055e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d0ee      	beq.n	80055ca <HAL_RCC_OscConfig+0x33a>
 80055ec:	e014      	b.n	8005618 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ee:	f7fc f9bf 	bl	8001970 <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055f4:	e00a      	b.n	800560c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f6:	f7fc f9bb 	bl	8001970 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	f241 3288 	movw	r2, #5000	; 0x1388
 8005604:	4293      	cmp	r3, r2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e0a6      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800560c:	4b56      	ldr	r3, [pc, #344]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 800560e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005610:	f003 0302 	and.w	r3, r3, #2
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1ee      	bne.n	80055f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005618:	7dfb      	ldrb	r3, [r7, #23]
 800561a:	2b01      	cmp	r3, #1
 800561c:	d105      	bne.n	800562a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800561e:	4b52      	ldr	r3, [pc, #328]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	4a51      	ldr	r2, [pc, #324]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 8005624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005628:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 8092 	beq.w	8005758 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005634:	4b4c      	ldr	r3, [pc, #304]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 030c 	and.w	r3, r3, #12
 800563c:	2b08      	cmp	r3, #8
 800563e:	d05c      	beq.n	80056fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	2b02      	cmp	r3, #2
 8005646:	d141      	bne.n	80056cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005648:	4b48      	ldr	r3, [pc, #288]	; (800576c <HAL_RCC_OscConfig+0x4dc>)
 800564a:	2200      	movs	r2, #0
 800564c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800564e:	f7fc f98f 	bl	8001970 <HAL_GetTick>
 8005652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005654:	e008      	b.n	8005668 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005656:	f7fc f98b 	bl	8001970 <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	2b02      	cmp	r3, #2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e078      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005668:	4b3f      	ldr	r3, [pc, #252]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1f0      	bne.n	8005656 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	431a      	orrs	r2, r3
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	019b      	lsls	r3, r3, #6
 8005684:	431a      	orrs	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800568a:	085b      	lsrs	r3, r3, #1
 800568c:	3b01      	subs	r3, #1
 800568e:	041b      	lsls	r3, r3, #16
 8005690:	431a      	orrs	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005696:	061b      	lsls	r3, r3, #24
 8005698:	4933      	ldr	r1, [pc, #204]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 800569a:	4313      	orrs	r3, r2
 800569c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800569e:	4b33      	ldr	r3, [pc, #204]	; (800576c <HAL_RCC_OscConfig+0x4dc>)
 80056a0:	2201      	movs	r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056a4:	f7fc f964 	bl	8001970 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056ac:	f7fc f960 	bl	8001970 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e04d      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80056be:	4b2a      	ldr	r3, [pc, #168]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0x41c>
 80056ca:	e045      	b.n	8005758 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056cc:	4b27      	ldr	r3, [pc, #156]	; (800576c <HAL_RCC_OscConfig+0x4dc>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056d2:	f7fc f94d 	bl	8001970 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056da:	f7fc f949 	bl	8001970 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e036      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056ec:	4b1e      	ldr	r3, [pc, #120]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f0      	bne.n	80056da <HAL_RCC_OscConfig+0x44a>
 80056f8:	e02e      	b.n	8005758 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	699b      	ldr	r3, [r3, #24]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d101      	bne.n	8005706 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e029      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005706:	4b18      	ldr	r3, [pc, #96]	; (8005768 <HAL_RCC_OscConfig+0x4d8>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	429a      	cmp	r2, r3
 8005718:	d11c      	bne.n	8005754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005724:	429a      	cmp	r2, r3
 8005726:	d115      	bne.n	8005754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800572e:	4013      	ands	r3, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005734:	4293      	cmp	r3, r2
 8005736:	d10d      	bne.n	8005754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005742:	429a      	cmp	r2, r3
 8005744:	d106      	bne.n	8005754 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005750:	429a      	cmp	r2, r3
 8005752:	d001      	beq.n	8005758 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40007000 	.word	0x40007000
 8005768:	40023800 	.word	0x40023800
 800576c:	42470060 	.word	0x42470060

08005770 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e0cc      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005784:	4b68      	ldr	r3, [pc, #416]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 030f 	and.w	r3, r3, #15
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	429a      	cmp	r2, r3
 8005790:	d90c      	bls.n	80057ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005792:	4b65      	ldr	r3, [pc, #404]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 8005794:	683a      	ldr	r2, [r7, #0]
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800579a:	4b63      	ldr	r3, [pc, #396]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f003 030f 	and.w	r3, r3, #15
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d001      	beq.n	80057ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e0b8      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d020      	beq.n	80057fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0304 	and.w	r3, r3, #4
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d005      	beq.n	80057d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80057c4:	4b59      	ldr	r3, [pc, #356]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	4a58      	ldr	r2, [pc, #352]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80057ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0308 	and.w	r3, r3, #8
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80057dc:	4b53      	ldr	r3, [pc, #332]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	4a52      	ldr	r2, [pc, #328]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80057e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80057e8:	4b50      	ldr	r3, [pc, #320]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	494d      	ldr	r1, [pc, #308]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d044      	beq.n	8005890 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d107      	bne.n	800581e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800580e:	4b47      	ldr	r3, [pc, #284]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d119      	bne.n	800584e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e07f      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d003      	beq.n	800582e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800582a:	2b03      	cmp	r3, #3
 800582c:	d107      	bne.n	800583e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800582e:	4b3f      	ldr	r3, [pc, #252]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d109      	bne.n	800584e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e06f      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800583e:	4b3b      	ldr	r3, [pc, #236]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e067      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800584e:	4b37      	ldr	r3, [pc, #220]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f023 0203 	bic.w	r2, r3, #3
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4934      	ldr	r1, [pc, #208]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 800585c:	4313      	orrs	r3, r2
 800585e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005860:	f7fc f886 	bl	8001970 <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005866:	e00a      	b.n	800587e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005868:	f7fc f882 	bl	8001970 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f241 3288 	movw	r2, #5000	; 0x1388
 8005876:	4293      	cmp	r3, r2
 8005878:	d901      	bls.n	800587e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e04f      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800587e:	4b2b      	ldr	r3, [pc, #172]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	f003 020c 	and.w	r2, r3, #12
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	429a      	cmp	r2, r3
 800588e:	d1eb      	bne.n	8005868 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005890:	4b25      	ldr	r3, [pc, #148]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	683a      	ldr	r2, [r7, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d20c      	bcs.n	80058b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589e:	4b22      	ldr	r3, [pc, #136]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	4b20      	ldr	r3, [pc, #128]	; (8005928 <HAL_RCC_ClockConfig+0x1b8>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e032      	b.n	800591e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d008      	beq.n	80058d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80058c4:	4b19      	ldr	r3, [pc, #100]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	4916      	ldr	r1, [pc, #88]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d009      	beq.n	80058f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80058e2:	4b12      	ldr	r3, [pc, #72]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	490e      	ldr	r1, [pc, #56]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80058f6:	f000 f821 	bl	800593c <HAL_RCC_GetSysClockFreq>
 80058fa:	4602      	mov	r2, r0
 80058fc:	4b0b      	ldr	r3, [pc, #44]	; (800592c <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	091b      	lsrs	r3, r3, #4
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	490a      	ldr	r1, [pc, #40]	; (8005930 <HAL_RCC_ClockConfig+0x1c0>)
 8005908:	5ccb      	ldrb	r3, [r1, r3]
 800590a:	fa22 f303 	lsr.w	r3, r2, r3
 800590e:	4a09      	ldr	r2, [pc, #36]	; (8005934 <HAL_RCC_ClockConfig+0x1c4>)
 8005910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <HAL_RCC_ClockConfig+0x1c8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4618      	mov	r0, r3
 8005918:	f7fb fdf0 	bl	80014fc <HAL_InitTick>

  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40023c00 	.word	0x40023c00
 800592c:	40023800 	.word	0x40023800
 8005930:	0800cbcc 	.word	0x0800cbcc
 8005934:	20000000 	.word	0x20000000
 8005938:	20000004 	.word	0x20000004

0800593c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800593c:	b5b0      	push	{r4, r5, r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005942:	2100      	movs	r1, #0
 8005944:	6079      	str	r1, [r7, #4]
 8005946:	2100      	movs	r1, #0
 8005948:	60f9      	str	r1, [r7, #12]
 800594a:	2100      	movs	r1, #0
 800594c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800594e:	2100      	movs	r1, #0
 8005950:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005952:	4952      	ldr	r1, [pc, #328]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005954:	6889      	ldr	r1, [r1, #8]
 8005956:	f001 010c 	and.w	r1, r1, #12
 800595a:	2908      	cmp	r1, #8
 800595c:	d00d      	beq.n	800597a <HAL_RCC_GetSysClockFreq+0x3e>
 800595e:	2908      	cmp	r1, #8
 8005960:	f200 8094 	bhi.w	8005a8c <HAL_RCC_GetSysClockFreq+0x150>
 8005964:	2900      	cmp	r1, #0
 8005966:	d002      	beq.n	800596e <HAL_RCC_GetSysClockFreq+0x32>
 8005968:	2904      	cmp	r1, #4
 800596a:	d003      	beq.n	8005974 <HAL_RCC_GetSysClockFreq+0x38>
 800596c:	e08e      	b.n	8005a8c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800596e:	4b4c      	ldr	r3, [pc, #304]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005970:	60bb      	str	r3, [r7, #8]
       break;
 8005972:	e08e      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005974:	4b4b      	ldr	r3, [pc, #300]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x168>)
 8005976:	60bb      	str	r3, [r7, #8]
      break;
 8005978:	e08b      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800597a:	4948      	ldr	r1, [pc, #288]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x160>)
 800597c:	6849      	ldr	r1, [r1, #4]
 800597e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005982:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005984:	4945      	ldr	r1, [pc, #276]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005986:	6849      	ldr	r1, [r1, #4]
 8005988:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800598c:	2900      	cmp	r1, #0
 800598e:	d024      	beq.n	80059da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005990:	4942      	ldr	r1, [pc, #264]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005992:	6849      	ldr	r1, [r1, #4]
 8005994:	0989      	lsrs	r1, r1, #6
 8005996:	4608      	mov	r0, r1
 8005998:	f04f 0100 	mov.w	r1, #0
 800599c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80059a0:	f04f 0500 	mov.w	r5, #0
 80059a4:	ea00 0204 	and.w	r2, r0, r4
 80059a8:	ea01 0305 	and.w	r3, r1, r5
 80059ac:	493d      	ldr	r1, [pc, #244]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x168>)
 80059ae:	fb01 f003 	mul.w	r0, r1, r3
 80059b2:	2100      	movs	r1, #0
 80059b4:	fb01 f102 	mul.w	r1, r1, r2
 80059b8:	1844      	adds	r4, r0, r1
 80059ba:	493a      	ldr	r1, [pc, #232]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x168>)
 80059bc:	fba2 0101 	umull	r0, r1, r2, r1
 80059c0:	1863      	adds	r3, r4, r1
 80059c2:	4619      	mov	r1, r3
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	461a      	mov	r2, r3
 80059c8:	f04f 0300 	mov.w	r3, #0
 80059cc:	f7fa fc50 	bl	8000270 <__aeabi_uldivmod>
 80059d0:	4602      	mov	r2, r0
 80059d2:	460b      	mov	r3, r1
 80059d4:	4613      	mov	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e04a      	b.n	8005a70 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80059da:	4b30      	ldr	r3, [pc, #192]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x160>)
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	099b      	lsrs	r3, r3, #6
 80059e0:	461a      	mov	r2, r3
 80059e2:	f04f 0300 	mov.w	r3, #0
 80059e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80059ea:	f04f 0100 	mov.w	r1, #0
 80059ee:	ea02 0400 	and.w	r4, r2, r0
 80059f2:	ea03 0501 	and.w	r5, r3, r1
 80059f6:	4620      	mov	r0, r4
 80059f8:	4629      	mov	r1, r5
 80059fa:	f04f 0200 	mov.w	r2, #0
 80059fe:	f04f 0300 	mov.w	r3, #0
 8005a02:	014b      	lsls	r3, r1, #5
 8005a04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005a08:	0142      	lsls	r2, r0, #5
 8005a0a:	4610      	mov	r0, r2
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	1b00      	subs	r0, r0, r4
 8005a10:	eb61 0105 	sbc.w	r1, r1, r5
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	018b      	lsls	r3, r1, #6
 8005a1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005a22:	0182      	lsls	r2, r0, #6
 8005a24:	1a12      	subs	r2, r2, r0
 8005a26:	eb63 0301 	sbc.w	r3, r3, r1
 8005a2a:	f04f 0000 	mov.w	r0, #0
 8005a2e:	f04f 0100 	mov.w	r1, #0
 8005a32:	00d9      	lsls	r1, r3, #3
 8005a34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a38:	00d0      	lsls	r0, r2, #3
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	1912      	adds	r2, r2, r4
 8005a40:	eb45 0303 	adc.w	r3, r5, r3
 8005a44:	f04f 0000 	mov.w	r0, #0
 8005a48:	f04f 0100 	mov.w	r1, #0
 8005a4c:	0299      	lsls	r1, r3, #10
 8005a4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005a52:	0290      	lsls	r0, r2, #10
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4610      	mov	r0, r2
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	f7fa fc04 	bl	8000270 <__aeabi_uldivmod>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a70:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <HAL_RCC_GetSysClockFreq+0x160>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	0c1b      	lsrs	r3, r3, #16
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a88:	60bb      	str	r3, [r7, #8]
      break;
 8005a8a:	e002      	b.n	8005a92 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a8c:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x164>)
 8005a8e:	60bb      	str	r3, [r7, #8]
      break;
 8005a90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a92:	68bb      	ldr	r3, [r7, #8]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	00f42400 	.word	0x00f42400
 8005aa4:	01c9c380 	.word	0x01c9c380

08005aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aac:	4b03      	ldr	r3, [pc, #12]	; (8005abc <HAL_RCC_GetHCLKFreq+0x14>)
 8005aae:	681b      	ldr	r3, [r3, #0]
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	20000000 	.word	0x20000000

08005ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ac4:	f7ff fff0 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4b05      	ldr	r3, [pc, #20]	; (8005ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	0a9b      	lsrs	r3, r3, #10
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	4903      	ldr	r1, [pc, #12]	; (8005ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ad6:	5ccb      	ldrb	r3, [r1, r3]
 8005ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40023800 	.word	0x40023800
 8005ae4:	0800cbdc 	.word	0x0800cbdc

08005ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005aec:	f7ff ffdc 	bl	8005aa8 <HAL_RCC_GetHCLKFreq>
 8005af0:	4602      	mov	r2, r0
 8005af2:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	0b5b      	lsrs	r3, r3, #13
 8005af8:	f003 0307 	and.w	r3, r3, #7
 8005afc:	4903      	ldr	r1, [pc, #12]	; (8005b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005afe:	5ccb      	ldrb	r3, [r1, r3]
 8005b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	40023800 	.word	0x40023800
 8005b0c:	0800cbdc 	.word	0x0800cbdc

08005b10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	220f      	movs	r2, #15
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b20:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <HAL_RCC_GetClockConfig+0x5c>)
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f003 0203 	and.w	r2, r3, #3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <HAL_RCC_GetClockConfig+0x5c>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <HAL_RCC_GetClockConfig+0x5c>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b44:	4b09      	ldr	r3, [pc, #36]	; (8005b6c <HAL_RCC_GetClockConfig+0x5c>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	08db      	lsrs	r3, r3, #3
 8005b4a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b52:	4b07      	ldr	r3, [pc, #28]	; (8005b70 <HAL_RCC_GetClockConfig+0x60>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f003 020f 	and.w	r2, r3, #15
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	601a      	str	r2, [r3, #0]
}
 8005b5e:	bf00      	nop
 8005b60:	370c      	adds	r7, #12
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	40023800 	.word	0x40023800
 8005b70:	40023c00 	.word	0x40023c00

08005b74 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b086      	sub	sp, #24
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d105      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d035      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b9c:	4b62      	ldr	r3, [pc, #392]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ba2:	f7fb fee5 	bl	8001970 <HAL_GetTick>
 8005ba6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005baa:	f7fb fee1 	bl	8001970 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e0b0      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005bbc:	4b5b      	ldr	r3, [pc, #364]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1f0      	bne.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	019a      	lsls	r2, r3, #6
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	071b      	lsls	r3, r3, #28
 8005bd4:	4955      	ldr	r1, [pc, #340]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bdc:	4b52      	ldr	r3, [pc, #328]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005be2:	f7fb fec5 	bl	8001970 <HAL_GetTick>
 8005be6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005be8:	e008      	b.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005bea:	f7fb fec1 	bl	8001970 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e090      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bfc:	4b4b      	ldr	r3, [pc, #300]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f0      	beq.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0302 	and.w	r3, r3, #2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 8083 	beq.w	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c16:	2300      	movs	r3, #0
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	4b44      	ldr	r3, [pc, #272]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	4a43      	ldr	r2, [pc, #268]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c24:	6413      	str	r3, [r2, #64]	; 0x40
 8005c26:	4b41      	ldr	r3, [pc, #260]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005c32:	4b3f      	ldr	r3, [pc, #252]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a3e      	ldr	r2, [pc, #248]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c3e:	f7fb fe97 	bl	8001970 <HAL_GetTick>
 8005c42:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c44:	e008      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c46:	f7fb fe93 	bl	8001970 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e062      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005c58:	4b35      	ldr	r3, [pc, #212]	; (8005d30 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f0      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c64:	4b31      	ldr	r3, [pc, #196]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c6c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d02f      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7c:	693a      	ldr	r2, [r7, #16]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d028      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c82:	4b2a      	ldr	r3, [pc, #168]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c8a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c8c:	4b29      	ldr	r3, [pc, #164]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c92:	4b28      	ldr	r3, [pc, #160]	; (8005d34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005c94:	2200      	movs	r2, #0
 8005c96:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005c98:	4a24      	ldr	r2, [pc, #144]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005c9e:	4b23      	ldr	r3, [pc, #140]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d114      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005caa:	f7fb fe61 	bl	8001970 <HAL_GetTick>
 8005cae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cb0:	e00a      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cb2:	f7fb fe5d 	bl	8001970 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d901      	bls.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e02a      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005cc8:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ccc:	f003 0302 	and.w	r3, r3, #2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0ee      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce0:	d10d      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005ce2:	4b12      	ldr	r3, [pc, #72]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf6:	490d      	ldr	r1, [pc, #52]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	608b      	str	r3, [r1, #8]
 8005cfc:	e005      	b.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005cfe:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	4a0a      	ldr	r2, [pc, #40]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d04:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005d08:	6093      	str	r3, [r2, #8]
 8005d0a:	4b08      	ldr	r3, [pc, #32]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	68db      	ldr	r3, [r3, #12]
 8005d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d16:	4905      	ldr	r1, [pc, #20]	; (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	42470068 	.word	0x42470068
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	40007000 	.word	0x40007000
 8005d34:	42470e40 	.word	0x42470e40

08005d38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005d40:	2300      	movs	r3, #0
 8005d42:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005d44:	2300      	movs	r3, #0
 8005d46:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d13e      	bne.n	8005dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005d56:	4b23      	ldr	r3, [pc, #140]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d12f      	bne.n	8005dcc <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005d6c:	4b1e      	ldr	r3, [pc, #120]	; (8005de8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005d6e:	617b      	str	r3, [r7, #20]
          break;
 8005d70:	e02f      	b.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005d72:	4b1c      	ldr	r3, [pc, #112]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d7e:	d108      	bne.n	8005d92 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d80:	4b18      	ldr	r3, [pc, #96]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d88:	4a18      	ldr	r2, [pc, #96]	; (8005dec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8e:	613b      	str	r3, [r7, #16]
 8005d90:	e007      	b.n	8005da2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005d92:	4b14      	ldr	r3, [pc, #80]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d9a:	4a15      	ldr	r2, [pc, #84]	; (8005df0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005da2:	4b10      	ldr	r3, [pc, #64]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005da4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da8:	099b      	lsrs	r3, r3, #6
 8005daa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005db6:	4b0b      	ldr	r3, [pc, #44]	; (8005de4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005db8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dbc:	0f1b      	lsrs	r3, r3, #28
 8005dbe:	f003 0307 	and.w	r3, r3, #7
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc8:	617b      	str	r3, [r7, #20]
          break;
 8005dca:	e002      	b.n	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	617b      	str	r3, [r7, #20]
          break;
 8005dd0:	bf00      	nop
        }
      }
      break;
 8005dd2:	bf00      	nop
    }
  }
  return frequency;
 8005dd4:	697b      	ldr	r3, [r7, #20]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop
 8005de4:	40023800 	.word	0x40023800
 8005de8:	00bb8000 	.word	0x00bb8000
 8005dec:	01c9c380 	.word	0x01c9c380
 8005df0:	00f42400 	.word	0x00f42400

08005df4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005dfa:	f7fb fdb9 	bl	8001970 <HAL_GetTick>
 8005dfe:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005e00:	4b5d      	ldr	r3, [pc, #372]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a5c      	ldr	r2, [pc, #368]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005e0c:	e008      	b.n	8005e20 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e0e:	f7fb fdaf 	bl	8001970 <HAL_GetTick>
 8005e12:	4602      	mov	r2, r0
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	1ad3      	subs	r3, r2, r3
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d901      	bls.n	8005e20 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	e0a7      	b.n	8005f70 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8005e20:	4b55      	ldr	r3, [pc, #340]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0f0      	beq.n	8005e0e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8005e2c:	4b52      	ldr	r3, [pc, #328]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a51      	ldr	r2, [pc, #324]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e36:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005e38:	f7fb fd9a 	bl	8001970 <HAL_GetTick>
 8005e3c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8005e3e:	4b4e      	ldr	r3, [pc, #312]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005e44:	e00a      	b.n	8005e5c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e46:	f7fb fd93 	bl	8001970 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d901      	bls.n	8005e5c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e089      	b.n	8005f70 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8005e5c:	4b46      	ldr	r3, [pc, #280]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f003 030c 	and.w	r3, r3, #12
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1ee      	bne.n	8005e46 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005e68:	f7fb fd82 	bl	8001970 <HAL_GetTick>
 8005e6c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8005e6e:	4b42      	ldr	r3, [pc, #264]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a41      	ldr	r2, [pc, #260]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005e74:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8005e78:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e7c:	f7fb fd78 	bl	8001970 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b64      	cmp	r3, #100	; 0x64
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e070      	b.n	8005f70 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8005e8e:	4b3a      	ldr	r3, [pc, #232]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f0      	bne.n	8005e7c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005e9a:	f7fb fd69 	bl	8001970 <HAL_GetTick>
 8005e9e:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005ea0:	4b35      	ldr	r3, [pc, #212]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a34      	ldr	r2, [pc, #208]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eaa:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005eac:	e008      	b.n	8005ec0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eae:	f7fb fd5f 	bl	8001970 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	2b02      	cmp	r3, #2
 8005eba:	d901      	bls.n	8005ec0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e057      	b.n	8005f70 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8005ec0:	4b2d      	ldr	r3, [pc, #180]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1f0      	bne.n	8005eae <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8005ecc:	f7fb fd50 	bl	8001970 <HAL_GetTick>
 8005ed0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8005ed2:	4b29      	ldr	r3, [pc, #164]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a28      	ldr	r2, [pc, #160]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005ed8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005edc:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ee0:	f7fb fd46 	bl	8001970 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e03e      	b.n	8005f70 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8005ef2:	4b21      	ldr	r3, [pc, #132]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8005efe:	4b1e      	ldr	r3, [pc, #120]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f00:	4a1e      	ldr	r2, [pc, #120]	; (8005f7c <HAL_RCC_DeInit+0x188>)
 8005f02:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8005f04:	4b1c      	ldr	r3, [pc, #112]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f06:	4a1e      	ldr	r2, [pc, #120]	; (8005f80 <HAL_RCC_DeInit+0x18c>)
 8005f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8005f0c:	4b1a      	ldr	r3, [pc, #104]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	4a19      	ldr	r2, [pc, #100]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f12:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8005f16:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8005f18:	4b17      	ldr	r3, [pc, #92]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	4a16      	ldr	r2, [pc, #88]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f22:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8005f24:	4b14      	ldr	r3, [pc, #80]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	4a13      	ldr	r2, [pc, #76]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f2a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8005f2e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8005f30:	4b11      	ldr	r3, [pc, #68]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005f3a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005f3c:	4b0e      	ldr	r3, [pc, #56]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f40:	4a0d      	ldr	r2, [pc, #52]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f42:	f023 0301 	bic.w	r3, r3, #1
 8005f46:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8005f48:	4b0b      	ldr	r3, [pc, #44]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f4c:	4a0a      	ldr	r2, [pc, #40]	; (8005f78 <HAL_RCC_DeInit+0x184>)
 8005f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f52:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8005f54:	4b0b      	ldr	r3, [pc, #44]	; (8005f84 <HAL_RCC_DeInit+0x190>)
 8005f56:	4a0c      	ldr	r2, [pc, #48]	; (8005f88 <HAL_RCC_DeInit+0x194>)
 8005f58:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f5a:	4b0c      	ldr	r3, [pc, #48]	; (8005f8c <HAL_RCC_DeInit+0x198>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fb facc 	bl	80014fc <HAL_InitTick>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
  }
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	40023800 	.word	0x40023800
 8005f7c:	04003010 	.word	0x04003010
 8005f80:	20003000 	.word	0x20003000
 8005f84:	20000000 	.word	0x20000000
 8005f88:	00f42400 	.word	0x00f42400
 8005f8c:	20000004 	.word	0x20000004

08005f90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e056      	b.n	8006050 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d106      	bne.n	8005fc2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7fb f89d 	bl	80010fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	695b      	ldr	r3, [r3, #20]
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ffe:	431a      	orrs	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	431a      	orrs	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a1b      	ldr	r3, [r3, #32]
 800600a:	ea42 0103 	orr.w	r1, r2, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	430a      	orrs	r2, r1
 8006018:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	699b      	ldr	r3, [r3, #24]
 800601e:	0c1b      	lsrs	r3, r3, #16
 8006020:	f003 0104 	and.w	r1, r3, #4
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	69da      	ldr	r2, [r3, #28]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800603e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e01d      	b.n	80060a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d106      	bne.n	8006084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f815 	bl	80060ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3304      	adds	r3, #4
 8006094:	4619      	mov	r1, r3
 8006096:	4610      	mov	r0, r2
 8006098:	f000 fa96 	bl	80065c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f042 0201 	orr.w	r2, r2, #1
 80060d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b06      	cmp	r3, #6
 80060ea:	d007      	beq.n	80060fc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0201 	orr.w	r2, r2, #1
 80060fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060fc:	2300      	movs	r3, #0
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3714      	adds	r7, #20
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr

0800610a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b082      	sub	sp, #8
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e01d      	b.n	8006158 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006122:	b2db      	uxtb	r3, r3
 8006124:	2b00      	cmp	r3, #0
 8006126:	d106      	bne.n	8006136 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fb f8fb 	bl	800132c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3304      	adds	r3, #4
 8006146:	4619      	mov	r1, r3
 8006148:	4610      	mov	r0, r2
 800614a:	f000 fa3d 	bl	80065c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3708      	adds	r7, #8
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2201      	movs	r2, #1
 8006170:	6839      	ldr	r1, [r7, #0]
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fc78 	bl	8006a68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <HAL_TIM_PWM_Start+0x74>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <HAL_TIM_PWM_Start+0x2c>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a14      	ldr	r2, [pc, #80]	; (80061d8 <HAL_TIM_PWM_Start+0x78>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d101      	bne.n	8006190 <HAL_TIM_PWM_Start+0x30>
 800618c:	2301      	movs	r3, #1
 800618e:	e000      	b.n	8006192 <HAL_TIM_PWM_Start+0x32>
 8006190:	2300      	movs	r3, #0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d007      	beq.n	80061a6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b06      	cmp	r3, #6
 80061b6:	d007      	beq.n	80061c8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f042 0201 	orr.w	r2, r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	40010000 	.word	0x40010000
 80061d8:	40010400 	.word	0x40010400

080061dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	691b      	ldr	r3, [r3, #16]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d122      	bne.n	8006238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d11b      	bne.n	8006238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f06f 0202 	mvn.w	r2, #2
 8006208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 f9b4 	bl	800658c <HAL_TIM_IC_CaptureCallback>
 8006224:	e005      	b.n	8006232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f9a6 	bl	8006578 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f9b7 	bl	80065a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b04      	cmp	r3, #4
 8006244:	d122      	bne.n	800628c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b04      	cmp	r3, #4
 8006252:	d11b      	bne.n	800628c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0204 	mvn.w	r2, #4
 800625c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2202      	movs	r2, #2
 8006262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f98a 	bl	800658c <HAL_TIM_IC_CaptureCallback>
 8006278:	e005      	b.n	8006286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f97c 	bl	8006578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f98d 	bl	80065a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	f003 0308 	and.w	r3, r3, #8
 8006296:	2b08      	cmp	r3, #8
 8006298:	d122      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d11b      	bne.n	80062e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f06f 0208 	mvn.w	r2, #8
 80062b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2204      	movs	r2, #4
 80062b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f960 	bl	800658c <HAL_TIM_IC_CaptureCallback>
 80062cc:	e005      	b.n	80062da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f952 	bl	8006578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f963 	bl	80065a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0310 	and.w	r3, r3, #16
 80062ea:	2b10      	cmp	r3, #16
 80062ec:	d122      	bne.n	8006334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f003 0310 	and.w	r3, r3, #16
 80062f8:	2b10      	cmp	r3, #16
 80062fa:	d11b      	bne.n	8006334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f06f 0210 	mvn.w	r2, #16
 8006304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2208      	movs	r2, #8
 800630a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	69db      	ldr	r3, [r3, #28]
 8006312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f936 	bl	800658c <HAL_TIM_IC_CaptureCallback>
 8006320:	e005      	b.n	800632e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f928 	bl	8006578 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 f939 	bl	80065a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b01      	cmp	r3, #1
 8006340:	d10e      	bne.n	8006360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b01      	cmp	r3, #1
 800634e:	d107      	bne.n	8006360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0201 	mvn.w	r2, #1
 8006358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fa fcf6 	bl	8000d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636a:	2b80      	cmp	r3, #128	; 0x80
 800636c:	d10e      	bne.n	800638c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006378:	2b80      	cmp	r3, #128	; 0x80
 800637a:	d107      	bne.n	800638c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 fc44 	bl	8006c14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006396:	2b40      	cmp	r3, #64	; 0x40
 8006398:	d10e      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b40      	cmp	r3, #64	; 0x40
 80063a6:	d107      	bne.n	80063b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f8fe 	bl	80065b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	d10e      	bne.n	80063e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	f003 0320 	and.w	r3, r3, #32
 80063d0:	2b20      	cmp	r3, #32
 80063d2:	d107      	bne.n	80063e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f06f 0220 	mvn.w	r2, #32
 80063dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f000 fc0e 	bl	8006c00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063e4:	bf00      	nop
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006402:	2302      	movs	r3, #2
 8006404:	e0b4      	b.n	8006570 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2202      	movs	r2, #2
 8006412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b0c      	cmp	r3, #12
 800641a:	f200 809f 	bhi.w	800655c <HAL_TIM_PWM_ConfigChannel+0x170>
 800641e:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006424:	08006459 	.word	0x08006459
 8006428:	0800655d 	.word	0x0800655d
 800642c:	0800655d 	.word	0x0800655d
 8006430:	0800655d 	.word	0x0800655d
 8006434:	08006499 	.word	0x08006499
 8006438:	0800655d 	.word	0x0800655d
 800643c:	0800655d 	.word	0x0800655d
 8006440:	0800655d 	.word	0x0800655d
 8006444:	080064db 	.word	0x080064db
 8006448:	0800655d 	.word	0x0800655d
 800644c:	0800655d 	.word	0x0800655d
 8006450:	0800655d 	.word	0x0800655d
 8006454:	0800651b 	.word	0x0800651b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68b9      	ldr	r1, [r7, #8]
 800645e:	4618      	mov	r0, r3
 8006460:	f000 f952 	bl	8006708 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	699a      	ldr	r2, [r3, #24]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f042 0208 	orr.w	r2, r2, #8
 8006472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699a      	ldr	r2, [r3, #24]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f022 0204 	bic.w	r2, r2, #4
 8006482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6999      	ldr	r1, [r3, #24]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	691a      	ldr	r2, [r3, #16]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	430a      	orrs	r2, r1
 8006494:	619a      	str	r2, [r3, #24]
      break;
 8006496:	e062      	b.n	800655e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68b9      	ldr	r1, [r7, #8]
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 f9a2 	bl	80067e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699a      	ldr	r2, [r3, #24]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	6999      	ldr	r1, [r3, #24]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	021a      	lsls	r2, r3, #8
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	619a      	str	r2, [r3, #24]
      break;
 80064d8:	e041      	b.n	800655e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68b9      	ldr	r1, [r7, #8]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 f9f7 	bl	80068d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	69da      	ldr	r2, [r3, #28]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f042 0208 	orr.w	r2, r2, #8
 80064f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	69da      	ldr	r2, [r3, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0204 	bic.w	r2, r2, #4
 8006504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69d9      	ldr	r1, [r3, #28]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	430a      	orrs	r2, r1
 8006516:	61da      	str	r2, [r3, #28]
      break;
 8006518:	e021      	b.n	800655e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68b9      	ldr	r1, [r7, #8]
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fa4b 	bl	80069bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69da      	ldr	r2, [r3, #28]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006534:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006544:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69d9      	ldr	r1, [r3, #28]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	021a      	lsls	r2, r3, #8
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	430a      	orrs	r2, r1
 8006558:	61da      	str	r2, [r3, #28]
      break;
 800655a:	e000      	b.n	800655e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800655c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800656e:	2300      	movs	r3, #0
}
 8006570:	4618      	mov	r0, r3
 8006572:	3710      	adds	r7, #16
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006594:	bf00      	nop
 8006596:	370c      	adds	r7, #12
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a40      	ldr	r2, [pc, #256]	; (80066dc <TIM_Base_SetConfig+0x114>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d013      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065e6:	d00f      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a3d      	ldr	r2, [pc, #244]	; (80066e0 <TIM_Base_SetConfig+0x118>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00b      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a3c      	ldr	r2, [pc, #240]	; (80066e4 <TIM_Base_SetConfig+0x11c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d007      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4a3b      	ldr	r2, [pc, #236]	; (80066e8 <TIM_Base_SetConfig+0x120>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d003      	beq.n	8006608 <TIM_Base_SetConfig+0x40>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4a3a      	ldr	r2, [pc, #232]	; (80066ec <TIM_Base_SetConfig+0x124>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d108      	bne.n	800661a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800660e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a2f      	ldr	r2, [pc, #188]	; (80066dc <TIM_Base_SetConfig+0x114>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d02b      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006628:	d027      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a2c      	ldr	r2, [pc, #176]	; (80066e0 <TIM_Base_SetConfig+0x118>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d023      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a2b      	ldr	r2, [pc, #172]	; (80066e4 <TIM_Base_SetConfig+0x11c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d01f      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	4a2a      	ldr	r2, [pc, #168]	; (80066e8 <TIM_Base_SetConfig+0x120>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d01b      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a29      	ldr	r2, [pc, #164]	; (80066ec <TIM_Base_SetConfig+0x124>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d017      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a28      	ldr	r2, [pc, #160]	; (80066f0 <TIM_Base_SetConfig+0x128>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d013      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a27      	ldr	r2, [pc, #156]	; (80066f4 <TIM_Base_SetConfig+0x12c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00f      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a26      	ldr	r2, [pc, #152]	; (80066f8 <TIM_Base_SetConfig+0x130>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d00b      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a25      	ldr	r2, [pc, #148]	; (80066fc <TIM_Base_SetConfig+0x134>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d007      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a24      	ldr	r2, [pc, #144]	; (8006700 <TIM_Base_SetConfig+0x138>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d003      	beq.n	800667a <TIM_Base_SetConfig+0xb2>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a23      	ldr	r2, [pc, #140]	; (8006704 <TIM_Base_SetConfig+0x13c>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d108      	bne.n	800668c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	68fa      	ldr	r2, [r7, #12]
 8006688:	4313      	orrs	r3, r2
 800668a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	4313      	orrs	r3, r2
 8006698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	68fa      	ldr	r2, [r7, #12]
 800669e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <TIM_Base_SetConfig+0x114>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d003      	beq.n	80066c0 <TIM_Base_SetConfig+0xf8>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a0c      	ldr	r2, [pc, #48]	; (80066ec <TIM_Base_SetConfig+0x124>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d103      	bne.n	80066c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	615a      	str	r2, [r3, #20]
}
 80066ce:	bf00      	nop
 80066d0:	3714      	adds	r7, #20
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40000400 	.word	0x40000400
 80066e4:	40000800 	.word	0x40000800
 80066e8:	40000c00 	.word	0x40000c00
 80066ec:	40010400 	.word	0x40010400
 80066f0:	40014000 	.word	0x40014000
 80066f4:	40014400 	.word	0x40014400
 80066f8:	40014800 	.word	0x40014800
 80066fc:	40001800 	.word	0x40001800
 8006700:	40001c00 	.word	0x40001c00
 8006704:	40002000 	.word	0x40002000

08006708 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f023 0201 	bic.w	r2, r3, #1
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f023 0302 	bic.w	r3, r3, #2
 8006750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4313      	orrs	r3, r2
 800675a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a20      	ldr	r2, [pc, #128]	; (80067e0 <TIM_OC1_SetConfig+0xd8>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d003      	beq.n	800676c <TIM_OC1_SetConfig+0x64>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a1f      	ldr	r2, [pc, #124]	; (80067e4 <TIM_OC1_SetConfig+0xdc>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d10c      	bne.n	8006786 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f023 0308 	bic.w	r3, r3, #8
 8006772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f023 0304 	bic.w	r3, r3, #4
 8006784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	4a15      	ldr	r2, [pc, #84]	; (80067e0 <TIM_OC1_SetConfig+0xd8>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d003      	beq.n	8006796 <TIM_OC1_SetConfig+0x8e>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a14      	ldr	r2, [pc, #80]	; (80067e4 <TIM_OC1_SetConfig+0xdc>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d111      	bne.n	80067ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800679c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	693a      	ldr	r2, [r7, #16]
 80067b6:	4313      	orrs	r3, r2
 80067b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	685a      	ldr	r2, [r3, #4]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	621a      	str	r2, [r3, #32]
}
 80067d4:	bf00      	nop
 80067d6:	371c      	adds	r7, #28
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	40010000 	.word	0x40010000
 80067e4:	40010400 	.word	0x40010400

080067e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f023 0210 	bic.w	r2, r3, #16
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800681e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	021b      	lsls	r3, r3, #8
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	4313      	orrs	r3, r2
 800682a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0320 	bic.w	r3, r3, #32
 8006832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a22      	ldr	r2, [pc, #136]	; (80068cc <TIM_OC2_SetConfig+0xe4>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d003      	beq.n	8006850 <TIM_OC2_SetConfig+0x68>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a21      	ldr	r2, [pc, #132]	; (80068d0 <TIM_OC2_SetConfig+0xe8>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d10d      	bne.n	800686c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	697a      	ldr	r2, [r7, #20]
 8006860:	4313      	orrs	r3, r2
 8006862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800686a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a17      	ldr	r2, [pc, #92]	; (80068cc <TIM_OC2_SetConfig+0xe4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_OC2_SetConfig+0x94>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a16      	ldr	r2, [pc, #88]	; (80068d0 <TIM_OC2_SetConfig+0xe8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d113      	bne.n	80068a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006882:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800688a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	009b      	lsls	r3, r3, #2
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	693a      	ldr	r2, [r7, #16]
 80068a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	40010000 	.word	0x40010000
 80068d0:	40010400 	.word	0x40010400

080068d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f023 0303 	bic.w	r3, r3, #3
 800690a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	4313      	orrs	r3, r2
 8006914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800691c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	4313      	orrs	r3, r2
 8006928:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a21      	ldr	r2, [pc, #132]	; (80069b4 <TIM_OC3_SetConfig+0xe0>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d003      	beq.n	800693a <TIM_OC3_SetConfig+0x66>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a20      	ldr	r2, [pc, #128]	; (80069b8 <TIM_OC3_SetConfig+0xe4>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d10d      	bne.n	8006956 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	021b      	lsls	r3, r3, #8
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4313      	orrs	r3, r2
 800694c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a16      	ldr	r2, [pc, #88]	; (80069b4 <TIM_OC3_SetConfig+0xe0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d003      	beq.n	8006966 <TIM_OC3_SetConfig+0x92>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <TIM_OC3_SetConfig+0xe4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d113      	bne.n	800698e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800696c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	693a      	ldr	r2, [r7, #16]
 800697e:	4313      	orrs	r3, r2
 8006980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	685a      	ldr	r2, [r3, #4]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	697a      	ldr	r2, [r7, #20]
 80069a6:	621a      	str	r2, [r3, #32]
}
 80069a8:	bf00      	nop
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40010000 	.word	0x40010000
 80069b8:	40010400 	.word	0x40010400

080069bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	031b      	lsls	r3, r3, #12
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a12      	ldr	r2, [pc, #72]	; (8006a60 <TIM_OC4_SetConfig+0xa4>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d003      	beq.n	8006a24 <TIM_OC4_SetConfig+0x68>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a11      	ldr	r2, [pc, #68]	; (8006a64 <TIM_OC4_SetConfig+0xa8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d109      	bne.n	8006a38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	019b      	lsls	r3, r3, #6
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685a      	ldr	r2, [r3, #4]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	621a      	str	r2, [r3, #32]
}
 8006a52:	bf00      	nop
 8006a54:	371c      	adds	r7, #28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr
 8006a5e:	bf00      	nop
 8006a60:	40010000 	.word	0x40010000
 8006a64:	40010400 	.word	0x40010400

08006a68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6a1a      	ldr	r2, [r3, #32]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	43db      	mvns	r3, r3
 8006a8a:	401a      	ands	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a1a      	ldr	r2, [r3, #32]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f003 031f 	and.w	r3, r3, #31
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	621a      	str	r2, [r3, #32]
}
 8006aa6:	bf00      	nop
 8006aa8:	371c      	adds	r7, #28
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2204      	movs	r2, #4
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f000 f8af 	bl	8006c28 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ad8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f003 0307 	and.w	r3, r3, #7
 8006ae4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2b06      	cmp	r3, #6
 8006aea:	d007      	beq.n	8006afc <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f042 0201 	orr.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3710      	adds	r7, #16
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e05a      	b.n	8006bd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a21      	ldr	r2, [pc, #132]	; (8006be4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d022      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6c:	d01d      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a1d      	ldr	r2, [pc, #116]	; (8006be8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d018      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a1b      	ldr	r2, [pc, #108]	; (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d013      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a1a      	ldr	r2, [pc, #104]	; (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d00e      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a18      	ldr	r2, [pc, #96]	; (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d009      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a17      	ldr	r2, [pc, #92]	; (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d004      	beq.n	8006baa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a15      	ldr	r2, [pc, #84]	; (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d10c      	bne.n	8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68ba      	ldr	r2, [r7, #8]
 8006bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	40010000 	.word	0x40010000
 8006be8:	40000400 	.word	0x40000400
 8006bec:	40000800 	.word	0x40000800
 8006bf0:	40000c00 	.word	0x40000c00
 8006bf4:	40010400 	.word	0x40010400
 8006bf8:	40014000 	.word	0x40014000
 8006bfc:	40001800 	.word	0x40001800

08006c00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b083      	sub	sp, #12
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c08:	bf00      	nop
 8006c0a:	370c      	adds	r7, #12
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b083      	sub	sp, #12
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c1c:	bf00      	nop
 8006c1e:	370c      	adds	r7, #12
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b087      	sub	sp, #28
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	60f8      	str	r0, [r7, #12]
 8006c30:	60b9      	str	r1, [r7, #8]
 8006c32:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	2204      	movs	r2, #4
 8006c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6a1a      	ldr	r2, [r3, #32]
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	43db      	mvns	r3, r3
 8006c4a:	401a      	ands	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6a1a      	ldr	r2, [r3, #32]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	f003 031f 	and.w	r3, r3, #31
 8006c5a:	6879      	ldr	r1, [r7, #4]
 8006c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c60:	431a      	orrs	r2, r3
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	621a      	str	r2, [r3, #32]
}
 8006c66:	bf00      	nop
 8006c68:	371c      	adds	r7, #28
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e03f      	b.n	8006d04 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d106      	bne.n	8006c9e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7fa fba3 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2224      	movs	r2, #36	; 0x24
 8006ca2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006cb4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fc3c 	bl	8007534 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	691a      	ldr	r2, [r3, #16]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006cca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695a      	ldr	r2, [r3, #20]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006cda:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68da      	ldr	r2, [r3, #12]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	603b      	str	r3, [r7, #0]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b20      	cmp	r3, #32
 8006d2a:	f040 8083 	bne.w	8006e34 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <HAL_UART_Transmit+0x2e>
 8006d34:	88fb      	ldrh	r3, [r7, #6]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e07b      	b.n	8006e36 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d101      	bne.n	8006d4c <HAL_UART_Transmit+0x40>
 8006d48:	2302      	movs	r3, #2
 8006d4a:	e074      	b.n	8006e36 <HAL_UART_Transmit+0x12a>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2221      	movs	r2, #33	; 0x21
 8006d5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006d62:	f7fa fe05 	bl	8001970 <HAL_GetTick>
 8006d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	88fa      	ldrh	r2, [r7, #6]
 8006d72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8006d7c:	e042      	b.n	8006e04 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	3b01      	subs	r3, #1
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d94:	d122      	bne.n	8006ddc <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2180      	movs	r1, #128	; 0x80
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 fa5b 	bl	800725c <UART_WaitOnFlagUntilTimeout>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e042      	b.n	8006e36 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	881b      	ldrh	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dc2:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d103      	bne.n	8006dd4 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	3302      	adds	r3, #2
 8006dd0:	60bb      	str	r3, [r7, #8]
 8006dd2:	e017      	b.n	8006e04 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	60bb      	str	r3, [r7, #8]
 8006dda:	e013      	b.n	8006e04 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	2200      	movs	r2, #0
 8006de4:	2180      	movs	r1, #128	; 0x80
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 fa38 	bl	800725c <UART_WaitOnFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e01f      	b.n	8006e36 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	60ba      	str	r2, [r7, #8]
 8006dfc:	781a      	ldrb	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1b7      	bne.n	8006d7e <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2200      	movs	r2, #0
 8006e16:	2140      	movs	r1, #64	; 0x40
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fa1f 	bl	800725c <UART_WaitOnFlagUntilTimeout>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d001      	beq.n	8006e28 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e006      	b.n	8006e36 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	e000      	b.n	8006e36 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006e34:	2302      	movs	r3, #2
  }
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b088      	sub	sp, #32
 8006e42:	af02      	add	r7, sp, #8
 8006e44:	60f8      	str	r0, [r7, #12]
 8006e46:	60b9      	str	r1, [r7, #8]
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	4613      	mov	r3, r2
 8006e4c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b20      	cmp	r3, #32
 8006e5c:	f040 8090 	bne.w	8006f80 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <HAL_UART_Receive+0x2e>
 8006e66:	88fb      	ldrh	r3, [r7, #6]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e088      	b.n	8006f82 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d101      	bne.n	8006e7e <HAL_UART_Receive+0x40>
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e081      	b.n	8006f82 <HAL_UART_Receive+0x144>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2201      	movs	r2, #1
 8006e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2222      	movs	r2, #34	; 0x22
 8006e90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006e94:	f7fa fd6c 	bl	8001970 <HAL_GetTick>
 8006e98:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	88fa      	ldrh	r2, [r7, #6]
 8006e9e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	88fa      	ldrh	r2, [r7, #6]
 8006ea4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006eae:	e05c      	b.n	8006f6a <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec6:	d12b      	bne.n	8006f20 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	2120      	movs	r1, #32
 8006ed2:	68f8      	ldr	r0, [r7, #12]
 8006ed4:	f000 f9c2 	bl	800725c <UART_WaitOnFlagUntilTimeout>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e04f      	b.n	8006f82 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10c      	bne.n	8006f08 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	3302      	adds	r3, #2
 8006f04:	60bb      	str	r3, [r7, #8]
 8006f06:	e030      	b.n	8006f6a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	b29b      	uxth	r3, r3
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	60bb      	str	r3, [r7, #8]
 8006f1e:	e024      	b.n	8006f6a <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2200      	movs	r2, #0
 8006f28:	2120      	movs	r1, #32
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 f996 	bl	800725c <UART_WaitOnFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e023      	b.n	8006f82 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d108      	bne.n	8006f54 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	60ba      	str	r2, [r7, #8]
 8006f4e:	b2ca      	uxtb	r2, r1
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	e00a      	b.n	8006f6a <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	b2da      	uxtb	r2, r3
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	1c59      	adds	r1, r3, #1
 8006f60:	60b9      	str	r1, [r7, #8]
 8006f62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d19d      	bne.n	8006eb0 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e000      	b.n	8006f82 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006f80:	2302      	movs	r3, #2
  }
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b085      	sub	sp, #20
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	60b9      	str	r1, [r7, #8]
 8006f94:	4613      	mov	r3, r2
 8006f96:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d140      	bne.n	8007026 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <HAL_UART_Receive_IT+0x26>
 8006faa:	88fb      	ldrh	r3, [r7, #6]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e039      	b.n	8007028 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d101      	bne.n	8006fc2 <HAL_UART_Receive_IT+0x38>
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	e032      	b.n	8007028 <HAL_UART_Receive_IT+0x9e>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	68ba      	ldr	r2, [r7, #8]
 8006fce:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	88fa      	ldrh	r2, [r7, #6]
 8006fd4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	88fa      	ldrh	r2, [r7, #6]
 8006fda:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2222      	movs	r2, #34	; 0x22
 8006fe6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2200      	movs	r2, #0
 8006fee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68da      	ldr	r2, [r3, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007000:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695a      	ldr	r2, [r3, #20]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0201 	orr.w	r2, r2, #1
 8007010:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f042 0220 	orr.w	r2, r2, #32
 8007020:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	e000      	b.n	8007028 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007026:	2302      	movs	r3, #2
  }
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007054:	2300      	movs	r3, #0
 8007056:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007058:	2300      	movs	r3, #0
 800705a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10d      	bne.n	8007086 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800706a:	69fb      	ldr	r3, [r7, #28]
 800706c:	f003 0320 	and.w	r3, r3, #32
 8007070:	2b00      	cmp	r3, #0
 8007072:	d008      	beq.n	8007086 <HAL_UART_IRQHandler+0x52>
 8007074:	69bb      	ldr	r3, [r7, #24]
 8007076:	f003 0320 	and.w	r3, r3, #32
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f9d6 	bl	8007430 <UART_Receive_IT>
      return;
 8007084:	e0d0      	b.n	8007228 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 80b0 	beq.w	80071ee <HAL_UART_IRQHandler+0x1ba>
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	d105      	bne.n	80070a4 <HAL_UART_IRQHandler+0x70>
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f000 80a5 	beq.w	80071ee <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00a      	beq.n	80070c4 <HAL_UART_IRQHandler+0x90>
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d005      	beq.n	80070c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070bc:	f043 0201 	orr.w	r2, r3, #1
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f003 0304 	and.w	r3, r3, #4
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <HAL_UART_IRQHandler+0xb0>
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f003 0301 	and.w	r3, r3, #1
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d005      	beq.n	80070e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070dc:	f043 0202 	orr.w	r2, r3, #2
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00a      	beq.n	8007104 <HAL_UART_IRQHandler+0xd0>
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fc:	f043 0204 	orr.w	r2, r3, #4
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00f      	beq.n	800712e <HAL_UART_IRQHandler+0xfa>
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	f003 0320 	and.w	r3, r3, #32
 8007114:	2b00      	cmp	r3, #0
 8007116:	d104      	bne.n	8007122 <HAL_UART_IRQHandler+0xee>
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007126:	f043 0208 	orr.w	r2, r3, #8
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d077      	beq.n	8007226 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	f003 0320 	and.w	r3, r3, #32
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <HAL_UART_IRQHandler+0x11c>
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d002      	beq.n	8007150 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 f970 	bl	8007430 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	695b      	ldr	r3, [r3, #20]
 8007156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800715a:	2b40      	cmp	r3, #64	; 0x40
 800715c:	bf0c      	ite	eq
 800715e:	2301      	moveq	r3, #1
 8007160:	2300      	movne	r3, #0
 8007162:	b2db      	uxtb	r3, r3
 8007164:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800716a:	f003 0308 	and.w	r3, r3, #8
 800716e:	2b00      	cmp	r3, #0
 8007170:	d102      	bne.n	8007178 <HAL_UART_IRQHandler+0x144>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d031      	beq.n	80071dc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f8b9 	bl	80072f0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007188:	2b40      	cmp	r3, #64	; 0x40
 800718a:	d123      	bne.n	80071d4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	695a      	ldr	r2, [r3, #20]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800719a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d013      	beq.n	80071cc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a8:	4a21      	ldr	r2, [pc, #132]	; (8007230 <HAL_UART_IRQHandler+0x1fc>)
 80071aa:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fa fdf5 	bl	8001da0 <HAL_DMA_Abort_IT>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d016      	beq.n	80071ea <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80071c6:	4610      	mov	r0, r2
 80071c8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ca:	e00e      	b.n	80071ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f83b 	bl	8007248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071d2:	e00a      	b.n	80071ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f837 	bl	8007248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071da:	e006      	b.n	80071ea <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f000 f833 	bl	8007248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80071e8:	e01d      	b.n	8007226 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80071ea:	bf00      	nop
    return;
 80071ec:	e01b      	b.n	8007226 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d008      	beq.n	800720a <HAL_UART_IRQHandler+0x1d6>
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d003      	beq.n	800720a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f8a6 	bl	8007354 <UART_Transmit_IT>
    return;
 8007208:	e00e      	b.n	8007228 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d009      	beq.n	8007228 <HAL_UART_IRQHandler+0x1f4>
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721a:	2b00      	cmp	r3, #0
 800721c:	d004      	beq.n	8007228 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f8ee 	bl	8007400 <UART_EndTransmit_IT>
    return;
 8007224:	e000      	b.n	8007228 <HAL_UART_IRQHandler+0x1f4>
    return;
 8007226:	bf00      	nop
  }
}
 8007228:	3720      	adds	r7, #32
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	0800732d 	.word	0x0800732d

08007234 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800723c:	bf00      	nop
 800723e:	370c      	adds	r7, #12
 8007240:	46bd      	mov	sp, r7
 8007242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007246:	4770      	bx	lr

08007248 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	603b      	str	r3, [r7, #0]
 8007268:	4613      	mov	r3, r2
 800726a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726c:	e02c      	b.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007274:	d028      	beq.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d007      	beq.n	800728c <UART_WaitOnFlagUntilTimeout+0x30>
 800727c:	f7fa fb78 	bl	8001970 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	429a      	cmp	r2, r3
 800728a:	d21d      	bcs.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	68da      	ldr	r2, [r3, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800729a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	695a      	ldr	r2, [r3, #20]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f022 0201 	bic.w	r2, r2, #1
 80072aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e00f      	b.n	80072e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	4013      	ands	r3, r2
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	bf0c      	ite	eq
 80072d8:	2301      	moveq	r3, #1
 80072da:	2300      	movne	r3, #0
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	461a      	mov	r2, r3
 80072e0:	79fb      	ldrb	r3, [r7, #7]
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d0c3      	beq.n	800726e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	68da      	ldr	r2, [r3, #12]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007306:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	695a      	ldr	r2, [r3, #20]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0201 	bic.w	r2, r2, #1
 8007316:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2220      	movs	r2, #32
 800731c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007320:	bf00      	nop
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2200      	movs	r2, #0
 8007344:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007346:	68f8      	ldr	r0, [r7, #12]
 8007348:	f7ff ff7e 	bl	8007248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800734c:	bf00      	nop
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b21      	cmp	r3, #33	; 0x21
 8007366:	d144      	bne.n	80073f2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007370:	d11a      	bne.n	80073a8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	461a      	mov	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007386:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d105      	bne.n	800739c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	1c9a      	adds	r2, r3, #2
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	621a      	str	r2, [r3, #32]
 800739a:	e00e      	b.n	80073ba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	621a      	str	r2, [r3, #32]
 80073a6:	e008      	b.n	80073ba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	1c59      	adds	r1, r3, #1
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	6211      	str	r1, [r2, #32]
 80073b2:	781a      	ldrb	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073be:	b29b      	uxth	r3, r3
 80073c0:	3b01      	subs	r3, #1
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	4619      	mov	r1, r3
 80073c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10f      	bne.n	80073ee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80073ee:	2300      	movs	r3, #0
 80073f0:	e000      	b.n	80073f4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80073f2:	2302      	movs	r3, #2
  }
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68da      	ldr	r2, [r3, #12]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007416:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2220      	movs	r2, #32
 800741c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff ff07 	bl	8007234 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800743e:	b2db      	uxtb	r3, r3
 8007440:	2b22      	cmp	r3, #34	; 0x22
 8007442:	d171      	bne.n	8007528 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800744c:	d123      	bne.n	8007496 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10e      	bne.n	800747a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	b29b      	uxth	r3, r3
 8007464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007468:	b29a      	uxth	r2, r3
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007472:	1c9a      	adds	r2, r3, #2
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	629a      	str	r2, [r3, #40]	; 0x28
 8007478:	e029      	b.n	80074ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	b29b      	uxth	r3, r3
 8007482:	b2db      	uxtb	r3, r3
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	629a      	str	r2, [r3, #40]	; 0x28
 8007494:	e01b      	b.n	80074ce <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6858      	ldr	r0, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a8:	1c59      	adds	r1, r3, #1
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	6291      	str	r1, [r2, #40]	; 0x28
 80074ae:	b2c2      	uxtb	r2, r0
 80074b0:	701a      	strb	r2, [r3, #0]
 80074b2:	e00c      	b.n	80074ce <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c0:	1c58      	adds	r0, r3, #1
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	6288      	str	r0, [r1, #40]	; 0x28
 80074c6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80074ca:	b2d2      	uxtb	r2, r2
 80074cc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	3b01      	subs	r3, #1
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	4619      	mov	r1, r3
 80074dc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d120      	bne.n	8007524 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68da      	ldr	r2, [r3, #12]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0220 	bic.w	r2, r2, #32
 80074f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007500:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	695a      	ldr	r2, [r3, #20]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f022 0201 	bic.w	r2, r2, #1
 8007510:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2220      	movs	r2, #32
 8007516:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f002 fdbe 	bl	800a09c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	e002      	b.n	800752a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	e000      	b.n	800752a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007528:	2302      	movs	r3, #2
  }
}
 800752a:	4618      	mov	r0, r3
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	b0bd      	sub	sp, #244	; 0xf4
 800753a:	af00      	add	r7, sp, #0
 800753c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800754c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007550:	68d9      	ldr	r1, [r3, #12]
 8007552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	ea40 0301 	orr.w	r3, r0, r1
 800755c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800755e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	431a      	orrs	r2, r3
 800756c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	431a      	orrs	r2, r3
 8007574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007578:	69db      	ldr	r3, [r3, #28]
 800757a:	4313      	orrs	r3, r2
 800757c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8007580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800758c:	f021 010c 	bic.w	r1, r1, #12
 8007590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800759a:	430b      	orrs	r3, r1
 800759c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800759e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80075aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ae:	6999      	ldr	r1, [r3, #24]
 80075b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075b4:	681a      	ldr	r2, [r3, #0]
 80075b6:	ea40 0301 	orr.w	r3, r0, r1
 80075ba:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c6:	f040 81a5 	bne.w	8007914 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80075ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	4bcd      	ldr	r3, [pc, #820]	; (8007908 <UART_SetConfig+0x3d4>)
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d006      	beq.n	80075e4 <UART_SetConfig+0xb0>
 80075d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	4bcb      	ldr	r3, [pc, #812]	; (800790c <UART_SetConfig+0x3d8>)
 80075de:	429a      	cmp	r2, r3
 80075e0:	f040 80cb 	bne.w	800777a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80075e4:	f7fe fa80 	bl	8005ae8 <HAL_RCC_GetPCLK2Freq>
 80075e8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80075ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80075f0:	461c      	mov	r4, r3
 80075f2:	f04f 0500 	mov.w	r5, #0
 80075f6:	4622      	mov	r2, r4
 80075f8:	462b      	mov	r3, r5
 80075fa:	1891      	adds	r1, r2, r2
 80075fc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8007600:	415b      	adcs	r3, r3
 8007602:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007606:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800760a:	1912      	adds	r2, r2, r4
 800760c:	eb45 0303 	adc.w	r3, r5, r3
 8007610:	f04f 0000 	mov.w	r0, #0
 8007614:	f04f 0100 	mov.w	r1, #0
 8007618:	00d9      	lsls	r1, r3, #3
 800761a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800761e:	00d0      	lsls	r0, r2, #3
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	1911      	adds	r1, r2, r4
 8007626:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800762a:	416b      	adcs	r3, r5
 800762c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	461a      	mov	r2, r3
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	1891      	adds	r1, r2, r2
 800763e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007642:	415b      	adcs	r3, r3
 8007644:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007648:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800764c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8007650:	f7f8 fe0e 	bl	8000270 <__aeabi_uldivmod>
 8007654:	4602      	mov	r2, r0
 8007656:	460b      	mov	r3, r1
 8007658:	4bad      	ldr	r3, [pc, #692]	; (8007910 <UART_SetConfig+0x3dc>)
 800765a:	fba3 2302 	umull	r2, r3, r3, r2
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	011e      	lsls	r6, r3, #4
 8007662:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007666:	461c      	mov	r4, r3
 8007668:	f04f 0500 	mov.w	r5, #0
 800766c:	4622      	mov	r2, r4
 800766e:	462b      	mov	r3, r5
 8007670:	1891      	adds	r1, r2, r2
 8007672:	67b9      	str	r1, [r7, #120]	; 0x78
 8007674:	415b      	adcs	r3, r3
 8007676:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007678:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800767c:	1912      	adds	r2, r2, r4
 800767e:	eb45 0303 	adc.w	r3, r5, r3
 8007682:	f04f 0000 	mov.w	r0, #0
 8007686:	f04f 0100 	mov.w	r1, #0
 800768a:	00d9      	lsls	r1, r3, #3
 800768c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007690:	00d0      	lsls	r0, r2, #3
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	1911      	adds	r1, r2, r4
 8007698:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800769c:	416b      	adcs	r3, r5
 800769e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80076a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	461a      	mov	r2, r3
 80076aa:	f04f 0300 	mov.w	r3, #0
 80076ae:	1891      	adds	r1, r2, r2
 80076b0:	6739      	str	r1, [r7, #112]	; 0x70
 80076b2:	415b      	adcs	r3, r3
 80076b4:	677b      	str	r3, [r7, #116]	; 0x74
 80076b6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80076ba:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80076be:	f7f8 fdd7 	bl	8000270 <__aeabi_uldivmod>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	4b92      	ldr	r3, [pc, #584]	; (8007910 <UART_SetConfig+0x3dc>)
 80076c8:	fba3 1302 	umull	r1, r3, r3, r2
 80076cc:	095b      	lsrs	r3, r3, #5
 80076ce:	2164      	movs	r1, #100	; 0x64
 80076d0:	fb01 f303 	mul.w	r3, r1, r3
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	3332      	adds	r3, #50	; 0x32
 80076da:	4a8d      	ldr	r2, [pc, #564]	; (8007910 <UART_SetConfig+0x3dc>)
 80076dc:	fba2 2303 	umull	r2, r3, r2, r3
 80076e0:	095b      	lsrs	r3, r3, #5
 80076e2:	005b      	lsls	r3, r3, #1
 80076e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80076e8:	441e      	add	r6, r3
 80076ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80076ee:	4618      	mov	r0, r3
 80076f0:	f04f 0100 	mov.w	r1, #0
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	1894      	adds	r4, r2, r2
 80076fa:	66bc      	str	r4, [r7, #104]	; 0x68
 80076fc:	415b      	adcs	r3, r3
 80076fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007700:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8007704:	1812      	adds	r2, r2, r0
 8007706:	eb41 0303 	adc.w	r3, r1, r3
 800770a:	f04f 0400 	mov.w	r4, #0
 800770e:	f04f 0500 	mov.w	r5, #0
 8007712:	00dd      	lsls	r5, r3, #3
 8007714:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007718:	00d4      	lsls	r4, r2, #3
 800771a:	4622      	mov	r2, r4
 800771c:	462b      	mov	r3, r5
 800771e:	1814      	adds	r4, r2, r0
 8007720:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8007724:	414b      	adcs	r3, r1
 8007726:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800772a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	461a      	mov	r2, r3
 8007732:	f04f 0300 	mov.w	r3, #0
 8007736:	1891      	adds	r1, r2, r2
 8007738:	6639      	str	r1, [r7, #96]	; 0x60
 800773a:	415b      	adcs	r3, r3
 800773c:	667b      	str	r3, [r7, #100]	; 0x64
 800773e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8007742:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007746:	f7f8 fd93 	bl	8000270 <__aeabi_uldivmod>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	4b70      	ldr	r3, [pc, #448]	; (8007910 <UART_SetConfig+0x3dc>)
 8007750:	fba3 1302 	umull	r1, r3, r3, r2
 8007754:	095b      	lsrs	r3, r3, #5
 8007756:	2164      	movs	r1, #100	; 0x64
 8007758:	fb01 f303 	mul.w	r3, r1, r3
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	3332      	adds	r3, #50	; 0x32
 8007762:	4a6b      	ldr	r2, [pc, #428]	; (8007910 <UART_SetConfig+0x3dc>)
 8007764:	fba2 2303 	umull	r2, r3, r2, r3
 8007768:	095b      	lsrs	r3, r3, #5
 800776a:	f003 0207 	and.w	r2, r3, #7
 800776e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4432      	add	r2, r6
 8007776:	609a      	str	r2, [r3, #8]
 8007778:	e26d      	b.n	8007c56 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800777a:	f7fe f9a1 	bl	8005ac0 <HAL_RCC_GetPCLK1Freq>
 800777e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007782:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007786:	461c      	mov	r4, r3
 8007788:	f04f 0500 	mov.w	r5, #0
 800778c:	4622      	mov	r2, r4
 800778e:	462b      	mov	r3, r5
 8007790:	1891      	adds	r1, r2, r2
 8007792:	65b9      	str	r1, [r7, #88]	; 0x58
 8007794:	415b      	adcs	r3, r3
 8007796:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007798:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800779c:	1912      	adds	r2, r2, r4
 800779e:	eb45 0303 	adc.w	r3, r5, r3
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f04f 0100 	mov.w	r1, #0
 80077aa:	00d9      	lsls	r1, r3, #3
 80077ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80077b0:	00d0      	lsls	r0, r2, #3
 80077b2:	4602      	mov	r2, r0
 80077b4:	460b      	mov	r3, r1
 80077b6:	1911      	adds	r1, r2, r4
 80077b8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80077bc:	416b      	adcs	r3, r5
 80077be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80077c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	461a      	mov	r2, r3
 80077ca:	f04f 0300 	mov.w	r3, #0
 80077ce:	1891      	adds	r1, r2, r2
 80077d0:	6539      	str	r1, [r7, #80]	; 0x50
 80077d2:	415b      	adcs	r3, r3
 80077d4:	657b      	str	r3, [r7, #84]	; 0x54
 80077d6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80077da:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80077de:	f7f8 fd47 	bl	8000270 <__aeabi_uldivmod>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	4b4a      	ldr	r3, [pc, #296]	; (8007910 <UART_SetConfig+0x3dc>)
 80077e8:	fba3 2302 	umull	r2, r3, r3, r2
 80077ec:	095b      	lsrs	r3, r3, #5
 80077ee:	011e      	lsls	r6, r3, #4
 80077f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80077f4:	461c      	mov	r4, r3
 80077f6:	f04f 0500 	mov.w	r5, #0
 80077fa:	4622      	mov	r2, r4
 80077fc:	462b      	mov	r3, r5
 80077fe:	1891      	adds	r1, r2, r2
 8007800:	64b9      	str	r1, [r7, #72]	; 0x48
 8007802:	415b      	adcs	r3, r3
 8007804:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007806:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800780a:	1912      	adds	r2, r2, r4
 800780c:	eb45 0303 	adc.w	r3, r5, r3
 8007810:	f04f 0000 	mov.w	r0, #0
 8007814:	f04f 0100 	mov.w	r1, #0
 8007818:	00d9      	lsls	r1, r3, #3
 800781a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800781e:	00d0      	lsls	r0, r2, #3
 8007820:	4602      	mov	r2, r0
 8007822:	460b      	mov	r3, r1
 8007824:	1911      	adds	r1, r2, r4
 8007826:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800782a:	416b      	adcs	r3, r5
 800782c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	461a      	mov	r2, r3
 8007838:	f04f 0300 	mov.w	r3, #0
 800783c:	1891      	adds	r1, r2, r2
 800783e:	6439      	str	r1, [r7, #64]	; 0x40
 8007840:	415b      	adcs	r3, r3
 8007842:	647b      	str	r3, [r7, #68]	; 0x44
 8007844:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007848:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800784c:	f7f8 fd10 	bl	8000270 <__aeabi_uldivmod>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4b2e      	ldr	r3, [pc, #184]	; (8007910 <UART_SetConfig+0x3dc>)
 8007856:	fba3 1302 	umull	r1, r3, r3, r2
 800785a:	095b      	lsrs	r3, r3, #5
 800785c:	2164      	movs	r1, #100	; 0x64
 800785e:	fb01 f303 	mul.w	r3, r1, r3
 8007862:	1ad3      	subs	r3, r2, r3
 8007864:	00db      	lsls	r3, r3, #3
 8007866:	3332      	adds	r3, #50	; 0x32
 8007868:	4a29      	ldr	r2, [pc, #164]	; (8007910 <UART_SetConfig+0x3dc>)
 800786a:	fba2 2303 	umull	r2, r3, r2, r3
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007876:	441e      	add	r6, r3
 8007878:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800787c:	4618      	mov	r0, r3
 800787e:	f04f 0100 	mov.w	r1, #0
 8007882:	4602      	mov	r2, r0
 8007884:	460b      	mov	r3, r1
 8007886:	1894      	adds	r4, r2, r2
 8007888:	63bc      	str	r4, [r7, #56]	; 0x38
 800788a:	415b      	adcs	r3, r3
 800788c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800788e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007892:	1812      	adds	r2, r2, r0
 8007894:	eb41 0303 	adc.w	r3, r1, r3
 8007898:	f04f 0400 	mov.w	r4, #0
 800789c:	f04f 0500 	mov.w	r5, #0
 80078a0:	00dd      	lsls	r5, r3, #3
 80078a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80078a6:	00d4      	lsls	r4, r2, #3
 80078a8:	4622      	mov	r2, r4
 80078aa:	462b      	mov	r3, r5
 80078ac:	1814      	adds	r4, r2, r0
 80078ae:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80078b2:	414b      	adcs	r3, r1
 80078b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80078b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	461a      	mov	r2, r3
 80078c0:	f04f 0300 	mov.w	r3, #0
 80078c4:	1891      	adds	r1, r2, r2
 80078c6:	6339      	str	r1, [r7, #48]	; 0x30
 80078c8:	415b      	adcs	r3, r3
 80078ca:	637b      	str	r3, [r7, #52]	; 0x34
 80078cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80078d0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80078d4:	f7f8 fccc 	bl	8000270 <__aeabi_uldivmod>
 80078d8:	4602      	mov	r2, r0
 80078da:	460b      	mov	r3, r1
 80078dc:	4b0c      	ldr	r3, [pc, #48]	; (8007910 <UART_SetConfig+0x3dc>)
 80078de:	fba3 1302 	umull	r1, r3, r3, r2
 80078e2:	095b      	lsrs	r3, r3, #5
 80078e4:	2164      	movs	r1, #100	; 0x64
 80078e6:	fb01 f303 	mul.w	r3, r1, r3
 80078ea:	1ad3      	subs	r3, r2, r3
 80078ec:	00db      	lsls	r3, r3, #3
 80078ee:	3332      	adds	r3, #50	; 0x32
 80078f0:	4a07      	ldr	r2, [pc, #28]	; (8007910 <UART_SetConfig+0x3dc>)
 80078f2:	fba2 2303 	umull	r2, r3, r2, r3
 80078f6:	095b      	lsrs	r3, r3, #5
 80078f8:	f003 0207 	and.w	r2, r3, #7
 80078fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4432      	add	r2, r6
 8007904:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007906:	e1a6      	b.n	8007c56 <UART_SetConfig+0x722>
 8007908:	40011000 	.word	0x40011000
 800790c:	40011400 	.word	0x40011400
 8007910:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4bd1      	ldr	r3, [pc, #836]	; (8007c60 <UART_SetConfig+0x72c>)
 800791c:	429a      	cmp	r2, r3
 800791e:	d006      	beq.n	800792e <UART_SetConfig+0x3fa>
 8007920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	4bcf      	ldr	r3, [pc, #828]	; (8007c64 <UART_SetConfig+0x730>)
 8007928:	429a      	cmp	r2, r3
 800792a:	f040 80ca 	bne.w	8007ac2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 800792e:	f7fe f8db 	bl	8005ae8 <HAL_RCC_GetPCLK2Freq>
 8007932:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007936:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800793a:	461c      	mov	r4, r3
 800793c:	f04f 0500 	mov.w	r5, #0
 8007940:	4622      	mov	r2, r4
 8007942:	462b      	mov	r3, r5
 8007944:	1891      	adds	r1, r2, r2
 8007946:	62b9      	str	r1, [r7, #40]	; 0x28
 8007948:	415b      	adcs	r3, r3
 800794a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800794c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007950:	1912      	adds	r2, r2, r4
 8007952:	eb45 0303 	adc.w	r3, r5, r3
 8007956:	f04f 0000 	mov.w	r0, #0
 800795a:	f04f 0100 	mov.w	r1, #0
 800795e:	00d9      	lsls	r1, r3, #3
 8007960:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007964:	00d0      	lsls	r0, r2, #3
 8007966:	4602      	mov	r2, r0
 8007968:	460b      	mov	r3, r1
 800796a:	eb12 0a04 	adds.w	sl, r2, r4
 800796e:	eb43 0b05 	adc.w	fp, r3, r5
 8007972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	4618      	mov	r0, r3
 800797a:	f04f 0100 	mov.w	r1, #0
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	f04f 0300 	mov.w	r3, #0
 8007986:	008b      	lsls	r3, r1, #2
 8007988:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800798c:	0082      	lsls	r2, r0, #2
 800798e:	4650      	mov	r0, sl
 8007990:	4659      	mov	r1, fp
 8007992:	f7f8 fc6d 	bl	8000270 <__aeabi_uldivmod>
 8007996:	4602      	mov	r2, r0
 8007998:	460b      	mov	r3, r1
 800799a:	4bb3      	ldr	r3, [pc, #716]	; (8007c68 <UART_SetConfig+0x734>)
 800799c:	fba3 2302 	umull	r2, r3, r3, r2
 80079a0:	095b      	lsrs	r3, r3, #5
 80079a2:	011e      	lsls	r6, r3, #4
 80079a4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80079a8:	4618      	mov	r0, r3
 80079aa:	f04f 0100 	mov.w	r1, #0
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	1894      	adds	r4, r2, r2
 80079b4:	623c      	str	r4, [r7, #32]
 80079b6:	415b      	adcs	r3, r3
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
 80079ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079be:	1812      	adds	r2, r2, r0
 80079c0:	eb41 0303 	adc.w	r3, r1, r3
 80079c4:	f04f 0400 	mov.w	r4, #0
 80079c8:	f04f 0500 	mov.w	r5, #0
 80079cc:	00dd      	lsls	r5, r3, #3
 80079ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80079d2:	00d4      	lsls	r4, r2, #3
 80079d4:	4622      	mov	r2, r4
 80079d6:	462b      	mov	r3, r5
 80079d8:	1814      	adds	r4, r2, r0
 80079da:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80079de:	414b      	adcs	r3, r1
 80079e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80079e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f04f 0100 	mov.w	r1, #0
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	f04f 0300 	mov.w	r3, #0
 80079f8:	008b      	lsls	r3, r1, #2
 80079fa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80079fe:	0082      	lsls	r2, r0, #2
 8007a00:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8007a04:	f7f8 fc34 	bl	8000270 <__aeabi_uldivmod>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4b96      	ldr	r3, [pc, #600]	; (8007c68 <UART_SetConfig+0x734>)
 8007a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8007a12:	095b      	lsrs	r3, r3, #5
 8007a14:	2164      	movs	r1, #100	; 0x64
 8007a16:	fb01 f303 	mul.w	r3, r1, r3
 8007a1a:	1ad3      	subs	r3, r2, r3
 8007a1c:	011b      	lsls	r3, r3, #4
 8007a1e:	3332      	adds	r3, #50	; 0x32
 8007a20:	4a91      	ldr	r2, [pc, #580]	; (8007c68 <UART_SetConfig+0x734>)
 8007a22:	fba2 2303 	umull	r2, r3, r2, r3
 8007a26:	095b      	lsrs	r3, r3, #5
 8007a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007a2c:	441e      	add	r6, r3
 8007a2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007a32:	4618      	mov	r0, r3
 8007a34:	f04f 0100 	mov.w	r1, #0
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	1894      	adds	r4, r2, r2
 8007a3e:	61bc      	str	r4, [r7, #24]
 8007a40:	415b      	adcs	r3, r3
 8007a42:	61fb      	str	r3, [r7, #28]
 8007a44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a48:	1812      	adds	r2, r2, r0
 8007a4a:	eb41 0303 	adc.w	r3, r1, r3
 8007a4e:	f04f 0400 	mov.w	r4, #0
 8007a52:	f04f 0500 	mov.w	r5, #0
 8007a56:	00dd      	lsls	r5, r3, #3
 8007a58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a5c:	00d4      	lsls	r4, r2, #3
 8007a5e:	4622      	mov	r2, r4
 8007a60:	462b      	mov	r3, r5
 8007a62:	1814      	adds	r4, r2, r0
 8007a64:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8007a68:	414b      	adcs	r3, r1
 8007a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	4618      	mov	r0, r3
 8007a76:	f04f 0100 	mov.w	r1, #0
 8007a7a:	f04f 0200 	mov.w	r2, #0
 8007a7e:	f04f 0300 	mov.w	r3, #0
 8007a82:	008b      	lsls	r3, r1, #2
 8007a84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a88:	0082      	lsls	r2, r0, #2
 8007a8a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8007a8e:	f7f8 fbef 	bl	8000270 <__aeabi_uldivmod>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4b74      	ldr	r3, [pc, #464]	; (8007c68 <UART_SetConfig+0x734>)
 8007a98:	fba3 1302 	umull	r1, r3, r3, r2
 8007a9c:	095b      	lsrs	r3, r3, #5
 8007a9e:	2164      	movs	r1, #100	; 0x64
 8007aa0:	fb01 f303 	mul.w	r3, r1, r3
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	011b      	lsls	r3, r3, #4
 8007aa8:	3332      	adds	r3, #50	; 0x32
 8007aaa:	4a6f      	ldr	r2, [pc, #444]	; (8007c68 <UART_SetConfig+0x734>)
 8007aac:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab0:	095b      	lsrs	r3, r3, #5
 8007ab2:	f003 020f 	and.w	r2, r3, #15
 8007ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4432      	add	r2, r6
 8007abe:	609a      	str	r2, [r3, #8]
 8007ac0:	e0c9      	b.n	8007c56 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ac2:	f7fd fffd 	bl	8005ac0 <HAL_RCC_GetPCLK1Freq>
 8007ac6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007ace:	461c      	mov	r4, r3
 8007ad0:	f04f 0500 	mov.w	r5, #0
 8007ad4:	4622      	mov	r2, r4
 8007ad6:	462b      	mov	r3, r5
 8007ad8:	1891      	adds	r1, r2, r2
 8007ada:	6139      	str	r1, [r7, #16]
 8007adc:	415b      	adcs	r3, r3
 8007ade:	617b      	str	r3, [r7, #20]
 8007ae0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ae4:	1912      	adds	r2, r2, r4
 8007ae6:	eb45 0303 	adc.w	r3, r5, r3
 8007aea:	f04f 0000 	mov.w	r0, #0
 8007aee:	f04f 0100 	mov.w	r1, #0
 8007af2:	00d9      	lsls	r1, r3, #3
 8007af4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007af8:	00d0      	lsls	r0, r2, #3
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	eb12 0804 	adds.w	r8, r2, r4
 8007b02:	eb43 0905 	adc.w	r9, r3, r5
 8007b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f04f 0100 	mov.w	r1, #0
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	008b      	lsls	r3, r1, #2
 8007b1c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b20:	0082      	lsls	r2, r0, #2
 8007b22:	4640      	mov	r0, r8
 8007b24:	4649      	mov	r1, r9
 8007b26:	f7f8 fba3 	bl	8000270 <__aeabi_uldivmod>
 8007b2a:	4602      	mov	r2, r0
 8007b2c:	460b      	mov	r3, r1
 8007b2e:	4b4e      	ldr	r3, [pc, #312]	; (8007c68 <UART_SetConfig+0x734>)
 8007b30:	fba3 2302 	umull	r2, r3, r3, r2
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	011e      	lsls	r6, r3, #4
 8007b38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f04f 0100 	mov.w	r1, #0
 8007b42:	4602      	mov	r2, r0
 8007b44:	460b      	mov	r3, r1
 8007b46:	1894      	adds	r4, r2, r2
 8007b48:	60bc      	str	r4, [r7, #8]
 8007b4a:	415b      	adcs	r3, r3
 8007b4c:	60fb      	str	r3, [r7, #12]
 8007b4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b52:	1812      	adds	r2, r2, r0
 8007b54:	eb41 0303 	adc.w	r3, r1, r3
 8007b58:	f04f 0400 	mov.w	r4, #0
 8007b5c:	f04f 0500 	mov.w	r5, #0
 8007b60:	00dd      	lsls	r5, r3, #3
 8007b62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b66:	00d4      	lsls	r4, r2, #3
 8007b68:	4622      	mov	r2, r4
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	1814      	adds	r4, r2, r0
 8007b6e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8007b72:	414b      	adcs	r3, r1
 8007b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f04f 0100 	mov.w	r1, #0
 8007b84:	f04f 0200 	mov.w	r2, #0
 8007b88:	f04f 0300 	mov.w	r3, #0
 8007b8c:	008b      	lsls	r3, r1, #2
 8007b8e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007b92:	0082      	lsls	r2, r0, #2
 8007b94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007b98:	f7f8 fb6a 	bl	8000270 <__aeabi_uldivmod>
 8007b9c:	4602      	mov	r2, r0
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	4b31      	ldr	r3, [pc, #196]	; (8007c68 <UART_SetConfig+0x734>)
 8007ba2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba6:	095b      	lsrs	r3, r3, #5
 8007ba8:	2164      	movs	r1, #100	; 0x64
 8007baa:	fb01 f303 	mul.w	r3, r1, r3
 8007bae:	1ad3      	subs	r3, r2, r3
 8007bb0:	011b      	lsls	r3, r3, #4
 8007bb2:	3332      	adds	r3, #50	; 0x32
 8007bb4:	4a2c      	ldr	r2, [pc, #176]	; (8007c68 <UART_SetConfig+0x734>)
 8007bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bba:	095b      	lsrs	r3, r3, #5
 8007bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bc0:	441e      	add	r6, r3
 8007bc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f04f 0100 	mov.w	r1, #0
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	1894      	adds	r4, r2, r2
 8007bd2:	603c      	str	r4, [r7, #0]
 8007bd4:	415b      	adcs	r3, r3
 8007bd6:	607b      	str	r3, [r7, #4]
 8007bd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bdc:	1812      	adds	r2, r2, r0
 8007bde:	eb41 0303 	adc.w	r3, r1, r3
 8007be2:	f04f 0400 	mov.w	r4, #0
 8007be6:	f04f 0500 	mov.w	r5, #0
 8007bea:	00dd      	lsls	r5, r3, #3
 8007bec:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007bf0:	00d4      	lsls	r4, r2, #3
 8007bf2:	4622      	mov	r2, r4
 8007bf4:	462b      	mov	r3, r5
 8007bf6:	1814      	adds	r4, r2, r0
 8007bf8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8007bfc:	414b      	adcs	r3, r1
 8007bfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f04f 0100 	mov.w	r1, #0
 8007c0e:	f04f 0200 	mov.w	r2, #0
 8007c12:	f04f 0300 	mov.w	r3, #0
 8007c16:	008b      	lsls	r3, r1, #2
 8007c18:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c1c:	0082      	lsls	r2, r0, #2
 8007c1e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8007c22:	f7f8 fb25 	bl	8000270 <__aeabi_uldivmod>
 8007c26:	4602      	mov	r2, r0
 8007c28:	460b      	mov	r3, r1
 8007c2a:	4b0f      	ldr	r3, [pc, #60]	; (8007c68 <UART_SetConfig+0x734>)
 8007c2c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c30:	095b      	lsrs	r3, r3, #5
 8007c32:	2164      	movs	r1, #100	; 0x64
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	011b      	lsls	r3, r3, #4
 8007c3c:	3332      	adds	r3, #50	; 0x32
 8007c3e:	4a0a      	ldr	r2, [pc, #40]	; (8007c68 <UART_SetConfig+0x734>)
 8007c40:	fba2 2303 	umull	r2, r3, r2, r3
 8007c44:	095b      	lsrs	r3, r3, #5
 8007c46:	f003 020f 	and.w	r2, r3, #15
 8007c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4432      	add	r2, r6
 8007c52:	609a      	str	r2, [r3, #8]
}
 8007c54:	e7ff      	b.n	8007c56 <UART_SetConfig+0x722>
 8007c56:	bf00      	nop
 8007c58:	37f4      	adds	r7, #244	; 0xf4
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c60:	40011000 	.word	0x40011000
 8007c64:	40011400 	.word	0x40011400
 8007c68:	51eb851f 	.word	0x51eb851f

08007c6c <_ZN12Adafruit_GFXC1Ess>:


 #define pgm_read_byte(addr) (*(const unsigned char *)(addr))


Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	460b      	mov	r3, r1
 8007c76:	807b      	strh	r3, [r7, #2]
 8007c78:	4613      	mov	r3, r2
 8007c7a:	803b      	strh	r3, [r7, #0]
  WIDTH(w), HEIGHT(h)
 8007c7c:	4a19      	ldr	r2, [pc, #100]	; (8007ce4 <_ZN12Adafruit_GFXC1Ess+0x78>)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	601a      	str	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	887a      	ldrh	r2, [r7, #2]
 8007c86:	809a      	strh	r2, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	883a      	ldrh	r2, [r7, #0]
 8007c8c:	80da      	strh	r2, [r3, #6]
{
  _width    = WIDTH;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	811a      	strh	r2, [r3, #8]
  _height   = HEIGHT;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	815a      	strh	r2, [r3, #10]
  rotation  = 0;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	755a      	strb	r2, [r3, #21]
  cursor_y  = cursor_x    = 0;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	819a      	strh	r2, [r3, #12]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	81da      	strh	r2, [r3, #14]
  textsize  = 1;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	751a      	strb	r2, [r3, #20]
  textcolor = textbgcolor = 0xFFFF;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007cc4:	825a      	strh	r2, [r3, #18]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	8a5a      	ldrh	r2, [r3, #18]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	821a      	strh	r2, [r3, #16]
  wrap      = true;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	759a      	strb	r2, [r3, #22]
}
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	0800cbf4 	.word	0x0800cbf4

08007ce8 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 8007ce8:	b590      	push	{r4, r7, lr}
 8007cea:	b08b      	sub	sp, #44	; 0x2c
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	4608      	mov	r0, r1
 8007cf2:	4611      	mov	r1, r2
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	817b      	strh	r3, [r7, #10]
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	813b      	strh	r3, [r7, #8]
 8007cfe:	4613      	mov	r3, r2
 8007d00:	80fb      	strh	r3, [r7, #6]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8007d02:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8007d06:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8007d10:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8007d14:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8007d18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007d1c:	1acb      	subs	r3, r1, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	bfb8      	it	lt
 8007d22:	425b      	neglt	r3, r3
 8007d24:	429a      	cmp	r2, r3
 8007d26:	bfcc      	ite	gt
 8007d28:	2301      	movgt	r3, #1
 8007d2a:	2300      	movle	r3, #0
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	847b      	strh	r3, [r7, #34]	; 0x22
  int16_t dx, dy;
  int16_t err;
  int16_t ystep;

  if (steep) {
 8007d30:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00b      	beq.n	8007d50 <_ZN12Adafruit_GFX8drawLineEsssst+0x68>
    swap(x0, y0);
 8007d38:	897b      	ldrh	r3, [r7, #10]
 8007d3a:	843b      	strh	r3, [r7, #32]
 8007d3c:	893b      	ldrh	r3, [r7, #8]
 8007d3e:	817b      	strh	r3, [r7, #10]
 8007d40:	8c3b      	ldrh	r3, [r7, #32]
 8007d42:	813b      	strh	r3, [r7, #8]
    swap(x1, y1);
 8007d44:	88fb      	ldrh	r3, [r7, #6]
 8007d46:	83fb      	strh	r3, [r7, #30]
 8007d48:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d4a:	80fb      	strh	r3, [r7, #6]
 8007d4c:	8bfb      	ldrh	r3, [r7, #30]
 8007d4e:	873b      	strh	r3, [r7, #56]	; 0x38
  }

  if (x0 > x1) {
 8007d50:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	dd0b      	ble.n	8007d74 <_ZN12Adafruit_GFX8drawLineEsssst+0x8c>
    swap(x0, x1);
 8007d5c:	897b      	ldrh	r3, [r7, #10]
 8007d5e:	83bb      	strh	r3, [r7, #28]
 8007d60:	88fb      	ldrh	r3, [r7, #6]
 8007d62:	817b      	strh	r3, [r7, #10]
 8007d64:	8bbb      	ldrh	r3, [r7, #28]
 8007d66:	80fb      	strh	r3, [r7, #6]
    swap(y0, y1);
 8007d68:	893b      	ldrh	r3, [r7, #8]
 8007d6a:	837b      	strh	r3, [r7, #26]
 8007d6c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d6e:	813b      	strh	r3, [r7, #8]
 8007d70:	8b7b      	ldrh	r3, [r7, #26]
 8007d72:	873b      	strh	r3, [r7, #56]	; 0x38
  }


  dx = x1 - x0;
 8007d74:	88fa      	ldrh	r2, [r7, #6]
 8007d76:	897b      	ldrh	r3, [r7, #10]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	833b      	strh	r3, [r7, #24]
  dy = abs(y1 - y0);
 8007d7e:	f9b7 2038 	ldrsh.w	r2, [r7, #56]	; 0x38
 8007d82:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007d86:	1ad3      	subs	r3, r2, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bfb8      	it	lt
 8007d8c:	425b      	neglt	r3, r3
 8007d8e:	82fb      	strh	r3, [r7, #22]

  err = dx / 2;
 8007d90:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8007d94:	0fda      	lsrs	r2, r3, #31
 8007d96:	4413      	add	r3, r2
 8007d98:	105b      	asrs	r3, r3, #1
 8007d9a:	84fb      	strh	r3, [r7, #38]	; 0x26
  

  if (y0 < y1) {
 8007d9c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007da0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8007da4:	429a      	cmp	r2, r3
 8007da6:	da02      	bge.n	8007dae <_ZN12Adafruit_GFX8drawLineEsssst+0xc6>
    ystep = 1;
 8007da8:	2301      	movs	r3, #1
 8007daa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007dac:	e002      	b.n	8007db4 <_ZN12Adafruit_GFX8drawLineEsssst+0xcc>
  } else {
    ystep = -1;
 8007dae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007db2:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  for (; x0<=x1; x0++) {
 8007db4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	dc32      	bgt.n	8007e26 <_ZN12Adafruit_GFX8drawLineEsssst+0x13e>
    if (steep) {
 8007dc0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <_ZN12Adafruit_GFX8drawLineEsssst+0xf6>
      drawPixel(y0, x0, color);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	681c      	ldr	r4, [r3, #0]
 8007dce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007dd0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8007dd4:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	47a0      	blx	r4
 8007ddc:	e009      	b.n	8007df2 <_ZN12Adafruit_GFX8drawLineEsssst+0x10a>
    } else {
      drawPixel(x0, y0, color);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	681c      	ldr	r4, [r3, #0]
 8007de4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007de6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007dea:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	47a0      	blx	r4
    }
    err -= dy;
 8007df2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007df4:	8afb      	ldrh	r3, [r7, #22]
 8007df6:	1ad3      	subs	r3, r2, r3
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	84fb      	strh	r3, [r7, #38]	; 0x26
    if (err < 0) {
 8007dfc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	da09      	bge.n	8007e18 <_ZN12Adafruit_GFX8drawLineEsssst+0x130>
      y0 += ystep;
 8007e04:	893a      	ldrh	r2, [r7, #8]
 8007e06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e08:	4413      	add	r3, r2
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	813b      	strh	r3, [r7, #8]
      err += dx;
 8007e0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007e10:	8b3b      	ldrh	r3, [r7, #24]
 8007e12:	4413      	add	r3, r2
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	84fb      	strh	r3, [r7, #38]	; 0x26
  for (; x0<=x1; x0++) {
 8007e18:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	3301      	adds	r3, #1
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	817b      	strh	r3, [r7, #10]
 8007e24:	e7c6      	b.n	8007db4 <_ZN12Adafruit_GFX8drawLineEsssst+0xcc>
    }
  }
}
 8007e26:	bf00      	nop
 8007e28:	372c      	adds	r7, #44	; 0x2c
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd90      	pop	{r4, r7, pc}

08007e2e <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 8007e2e:	b590      	push	{r4, r7, lr}
 8007e30:	b087      	sub	sp, #28
 8007e32:	af02      	add	r7, sp, #8
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	4608      	mov	r0, r1
 8007e38:	4611      	mov	r1, r2
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	817b      	strh	r3, [r7, #10]
 8007e40:	460b      	mov	r3, r1
 8007e42:	813b      	strh	r3, [r7, #8]
 8007e44:	4613      	mov	r3, r2
 8007e46:	80fb      	strh	r3, [r7, #6]
  drawFastHLine(x, y, w, color);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	681c      	ldr	r4, [r3, #0]
 8007e50:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007e54:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007e58:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	4603      	mov	r3, r0
 8007e62:	68f8      	ldr	r0, [r7, #12]
 8007e64:	47a0      	blx	r4
  drawFastHLine(x, y+h-1, w, color);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	330c      	adds	r3, #12
 8007e6c:	681c      	ldr	r4, [r3, #0]
 8007e6e:	893a      	ldrh	r2, [r7, #8]
 8007e70:	8c3b      	ldrh	r3, [r7, #32]
 8007e72:	4413      	add	r3, r2
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	3b01      	subs	r3, #1
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	b21a      	sxth	r2, r3
 8007e7c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007e80:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007e84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	4603      	mov	r3, r0
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	47a0      	blx	r4
  drawFastVLine(x, y, h, color);
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	681c      	ldr	r4, [r3, #0]
 8007e96:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8007e9a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007e9e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007ea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	68f8      	ldr	r0, [r7, #12]
 8007eaa:	47a0      	blx	r4
  drawFastVLine(x+w-1, y, h, color);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	681c      	ldr	r4, [r3, #0]
 8007eb4:	897a      	ldrh	r2, [r7, #10]
 8007eb6:	88fb      	ldrh	r3, [r7, #6]
 8007eb8:	4413      	add	r3, r2
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	b219      	sxth	r1, r3
 8007ec2:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8007ec6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ecc:	9300      	str	r3, [sp, #0]
 8007ece:	4603      	mov	r3, r0
 8007ed0:	68f8      	ldr	r0, [r7, #12]
 8007ed2:	47a0      	blx	r4
}
 8007ed4:	bf00      	nop
 8007ed6:	3714      	adds	r7, #20
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd90      	pop	{r4, r7, pc}

08007edc <_ZN12Adafruit_GFX13drawFastVLineEssst>:

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 8007edc:	b5b0      	push	{r4, r5, r7, lr}
 8007ede:	b086      	sub	sp, #24
 8007ee0:	af02      	add	r7, sp, #8
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	4608      	mov	r0, r1
 8007ee6:	4611      	mov	r1, r2
 8007ee8:	461a      	mov	r2, r3
 8007eea:	4603      	mov	r3, r0
 8007eec:	817b      	strh	r3, [r7, #10]
 8007eee:	460b      	mov	r3, r1
 8007ef0:	813b      	strh	r3, [r7, #8]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	3304      	adds	r3, #4
 8007efc:	681c      	ldr	r4, [r3, #0]
 8007efe:	893a      	ldrh	r2, [r7, #8]
 8007f00:	88fb      	ldrh	r3, [r7, #6]
 8007f02:	4413      	add	r3, r2
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	b21b      	sxth	r3, r3
 8007f0c:	f9b7 500a 	ldrsh.w	r5, [r7, #10]
 8007f10:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8007f14:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007f18:	8c3a      	ldrh	r2, [r7, #32]
 8007f1a:	9201      	str	r2, [sp, #4]
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	462b      	mov	r3, r5
 8007f20:	4602      	mov	r2, r0
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	47a0      	blx	r4
}
 8007f26:	bf00      	nop
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bdb0      	pop	{r4, r5, r7, pc}

08007f2e <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 8007f2e:	b590      	push	{r4, r7, lr}
 8007f30:	b087      	sub	sp, #28
 8007f32:	af02      	add	r7, sp, #8
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	4608      	mov	r0, r1
 8007f38:	4611      	mov	r1, r2
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	817b      	strh	r3, [r7, #10]
 8007f40:	460b      	mov	r3, r1
 8007f42:	813b      	strh	r3, [r7, #8]
 8007f44:	4613      	mov	r3, r2
 8007f46:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	681c      	ldr	r4, [r3, #0]
 8007f50:	897a      	ldrh	r2, [r7, #10]
 8007f52:	88fb      	ldrh	r3, [r7, #6]
 8007f54:	4413      	add	r3, r2
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	b218      	sxth	r0, r3
 8007f5e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007f62:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007f66:	8c3b      	ldrh	r3, [r7, #32]
 8007f68:	9301      	str	r3, [sp, #4]
 8007f6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	4603      	mov	r3, r0
 8007f72:	68f8      	ldr	r0, [r7, #12]
 8007f74:	47a0      	blx	r4
}
 8007f76:	bf00      	nop
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd90      	pop	{r4, r7, pc}

08007f7e <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 8007f7e:	b590      	push	{r4, r7, lr}
 8007f80:	b089      	sub	sp, #36	; 0x24
 8007f82:	af02      	add	r7, sp, #8
 8007f84:	60f8      	str	r0, [r7, #12]
 8007f86:	4608      	mov	r0, r1
 8007f88:	4611      	mov	r1, r2
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	817b      	strh	r3, [r7, #10]
 8007f90:	460b      	mov	r3, r1
 8007f92:	813b      	strh	r3, [r7, #8]
 8007f94:	4613      	mov	r3, r2
 8007f96:	80fb      	strh	r3, [r7, #6]
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 8007f98:	897b      	ldrh	r3, [r7, #10]
 8007f9a:	82fb      	strh	r3, [r7, #22]
 8007f9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007fa0:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8007fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fa8:	440b      	add	r3, r1
 8007faa:	429a      	cmp	r2, r3
 8007fac:	da15      	bge.n	8007fda <_ZN12Adafruit_GFX8fillRectEsssst+0x5c>
    drawFastVLine(i, y, h, color);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	681c      	ldr	r4, [r3, #0]
 8007fb6:	f9b7 0028 	ldrsh.w	r0, [r7, #40]	; 0x28
 8007fba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8007fbe:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8007fc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	47a0      	blx	r4
  for (int16_t i=x; i<x+w; i++) {
 8007fcc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	82fb      	strh	r3, [r7, #22]
 8007fd8:	e7e0      	b.n	8007f9c <_ZN12Adafruit_GFX8fillRectEsssst+0x1e>
  }
}
 8007fda:	bf00      	nop
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd90      	pop	{r4, r7, pc}

08007fe2 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 8007fe2:	b590      	push	{r4, r7, lr}
 8007fe4:	b085      	sub	sp, #20
 8007fe6:	af02      	add	r7, sp, #8
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	460b      	mov	r3, r1
 8007fec:	807b      	strh	r3, [r7, #2]
  fillRect(0, 0, _width, _height, color);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	3314      	adds	r3, #20
 8007ff4:	681c      	ldr	r4, [r3, #0]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008002:	887a      	ldrh	r2, [r7, #2]
 8008004:	9201      	str	r2, [sp, #4]
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	460b      	mov	r3, r1
 800800a:	2200      	movs	r2, #0
 800800c:	2100      	movs	r1, #0
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	47a0      	blx	r4
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	bd90      	pop	{r4, r7, pc}

0800801a <_ZN12Adafruit_GFX9setCursorEss>:
//      line >>= 1;
//    }
//  }
//}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
 800801a:	b480      	push	{r7}
 800801c:	b083      	sub	sp, #12
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	460b      	mov	r3, r1
 8008024:	807b      	strh	r3, [r7, #2]
 8008026:	4613      	mov	r3, r2
 8008028:	803b      	strh	r3, [r7, #0]
  cursor_x = x;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	887a      	ldrh	r2, [r7, #2]
 800802e:	819a      	strh	r2, [r3, #12]
  cursor_y = y;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	883a      	ldrh	r2, [r7, #0]
 8008034:	81da      	strh	r2, [r3, #14]
}
 8008036:	bf00      	nop
 8008038:	370c      	adds	r7, #12
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <_ZN12Adafruit_GFX9getCursorEPsS0_>:

void Adafruit_GFX::getCursor( int16_t *pX, int16_t *pY ) {
 8008042:	b480      	push	{r7}
 8008044:	b085      	sub	sp, #20
 8008046:	af00      	add	r7, sp, #0
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	607a      	str	r2, [r7, #4]
    if( pX )     *pX = cursor_x;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d004      	beq.n	800805e <_ZN12Adafruit_GFX9getCursorEPsS0_+0x1c>
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	801a      	strh	r2, [r3, #0]
    if( pY )     *pY = cursor_y;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d004      	beq.n	800806e <_ZN12Adafruit_GFX9getCursorEPsS0_+0x2c>
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	801a      	strh	r2, [r3, #0]
}
 800806e:	bf00      	nop
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <_ZNK12Adafruit_GFX11getRotationEv>:

void Adafruit_GFX::setTextWrap(bool w) {
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) const {
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  return rotation;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	7d5b      	ldrb	r3, [r3, #21]
}
 8008086:	4618      	mov	r0, r3
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <_ZNK12Adafruit_GFX5widthEv>:
    break;
  }
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) const {
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  return _width;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <_ZNK12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) const {
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  return _height;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	370c      	adds	r7, #12
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr
	...

080080c8 <_ZN16Adafruit_SSD13069drawPixelEsst>:

#endif

// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel( int16_t x, int16_t y, uint16_t color )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	4608      	mov	r0, r1
 80080d2:	4611      	mov	r1, r2
 80080d4:	461a      	mov	r2, r3
 80080d6:	4603      	mov	r3, r0
 80080d8:	817b      	strh	r3, [r7, #10]
 80080da:	460b      	mov	r3, r1
 80080dc:	813b      	strh	r3, [r7, #8]
 80080de:	4613      	mov	r3, r2
 80080e0:	80fb      	strh	r3, [r7, #6]
    if ( ( x < 0 ) || ( x >= width() ) || ( y < 0 ) || ( y >= height() ) )
 80080e2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	db17      	blt.n	800811a <_ZN16Adafruit_SSD13069drawPixelEsst+0x52>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	4618      	mov	r0, r3
 80080ee:	f7ff ffd0 	bl	8008092 <_ZNK12Adafruit_GFX5widthEv>
 80080f2:	4603      	mov	r3, r0
 80080f4:	461a      	mov	r2, r3
 80080f6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80080fa:	4293      	cmp	r3, r2
 80080fc:	da0d      	bge.n	800811a <_ZN16Adafruit_SSD13069drawPixelEsst+0x52>
 80080fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008102:	2b00      	cmp	r3, #0
 8008104:	db09      	blt.n	800811a <_ZN16Adafruit_SSD13069drawPixelEsst+0x52>
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4618      	mov	r0, r3
 800810a:	f7ff ffcf 	bl	80080ac <_ZNK12Adafruit_GFX6heightEv>
 800810e:	4603      	mov	r3, r0
 8008110:	461a      	mov	r2, r3
 8008112:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008116:	4293      	cmp	r3, r2
 8008118:	db01      	blt.n	800811e <_ZN16Adafruit_SSD13069drawPixelEsst+0x56>
 800811a:	2301      	movs	r3, #1
 800811c:	e000      	b.n	8008120 <_ZN16Adafruit_SSD13069drawPixelEsst+0x58>
 800811e:	2300      	movs	r3, #0
 8008120:	2b00      	cmp	r3, #0
 8008122:	f040 80b3 	bne.w	800828c <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c4>
        return;

    // check rotation, move pixel around if necessary
    switch ( getRotation() )
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff ffa6 	bl	800807a <_ZNK12Adafruit_GFX11getRotationEv>
 800812e:	4603      	mov	r3, r0
 8008130:	2b03      	cmp	r3, #3
 8008132:	d02c      	beq.n	800818e <_ZN16Adafruit_SSD13069drawPixelEsst+0xc6>
 8008134:	2b03      	cmp	r3, #3
 8008136:	dc3b      	bgt.n	80081b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
 8008138:	2b01      	cmp	r3, #1
 800813a:	d002      	beq.n	8008142 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7a>
 800813c:	2b02      	cmp	r3, #2
 800813e:	d011      	beq.n	8008164 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9c>
 8008140:	e036      	b.n	80081b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
    {
    case 1:
        ssd1306_swap( x, y );
 8008142:	897b      	ldrh	r3, [r7, #10]
 8008144:	82bb      	strh	r3, [r7, #20]
 8008146:	893b      	ldrh	r3, [r7, #8]
 8008148:	817b      	strh	r3, [r7, #10]
 800814a:	8abb      	ldrh	r3, [r7, #20]
 800814c:	813b      	strh	r3, [r7, #8]
        x = WIDTH - x - 1;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008154:	b29a      	uxth	r2, r3
 8008156:	897b      	ldrh	r3, [r7, #10]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	b29b      	uxth	r3, r3
 800815c:	3b01      	subs	r3, #1
 800815e:	b29b      	uxth	r3, r3
 8008160:	817b      	strh	r3, [r7, #10]
        break;
 8008162:	e025      	b.n	80081b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
    case 2:
        x = WIDTH - x - 1;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800816a:	b29a      	uxth	r2, r3
 800816c:	897b      	ldrh	r3, [r7, #10]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	b29b      	uxth	r3, r3
 8008172:	3b01      	subs	r3, #1
 8008174:	b29b      	uxth	r3, r3
 8008176:	817b      	strh	r3, [r7, #10]
        y = HEIGHT - y - 1;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800817e:	b29a      	uxth	r2, r3
 8008180:	893b      	ldrh	r3, [r7, #8]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	b29b      	uxth	r3, r3
 8008186:	3b01      	subs	r3, #1
 8008188:	b29b      	uxth	r3, r3
 800818a:	813b      	strh	r3, [r7, #8]
        break;
 800818c:	e010      	b.n	80081b0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xe8>
    case 3:
        ssd1306_swap( x, y );
 800818e:	897b      	ldrh	r3, [r7, #10]
 8008190:	82fb      	strh	r3, [r7, #22]
 8008192:	893b      	ldrh	r3, [r7, #8]
 8008194:	817b      	strh	r3, [r7, #10]
 8008196:	8afb      	ldrh	r3, [r7, #22]
 8008198:	813b      	strh	r3, [r7, #8]
        y = HEIGHT - y - 1;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	893b      	ldrh	r3, [r7, #8]
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	3b01      	subs	r3, #1
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	813b      	strh	r3, [r7, #8]
        break;
 80081ae:	bf00      	nop
    }

    // x is which column
    switch ( color )
 80081b0:	88fb      	ldrh	r3, [r7, #6]
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d049      	beq.n	800824a <_ZN16Adafruit_SSD13069drawPixelEsst+0x182>
 80081b6:	2b02      	cmp	r3, #2
 80081b8:	dc69      	bgt.n	800828e <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d022      	beq.n	8008204 <_ZN16Adafruit_SSD13069drawPixelEsst+0x13c>
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d165      	bne.n	800828e <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
    {
    case WHITE:   buffer[x + ( y / 8 ) * SSD1306_LCDWIDTH] |= ( 1 << ( y & 7 ) ); break;
 80081c2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80081c6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	da00      	bge.n	80081d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x108>
 80081ce:	3307      	adds	r3, #7
 80081d0:	10db      	asrs	r3, r3, #3
 80081d2:	b218      	sxth	r0, r3
 80081d4:	4603      	mov	r3, r0
 80081d6:	01db      	lsls	r3, r3, #7
 80081d8:	4413      	add	r3, r2
 80081da:	4a2e      	ldr	r2, [pc, #184]	; (8008294 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 80081dc:	5cd3      	ldrb	r3, [r2, r3]
 80081de:	b25a      	sxtb	r2, r3
 80081e0:	893b      	ldrh	r3, [r7, #8]
 80081e2:	f003 0307 	and.w	r3, r3, #7
 80081e6:	2101      	movs	r1, #1
 80081e8:	fa01 f303 	lsl.w	r3, r1, r3
 80081ec:	b25b      	sxtb	r3, r3
 80081ee:	4313      	orrs	r3, r2
 80081f0:	b259      	sxtb	r1, r3
 80081f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80081f6:	4603      	mov	r3, r0
 80081f8:	01db      	lsls	r3, r3, #7
 80081fa:	4413      	add	r3, r2
 80081fc:	b2c9      	uxtb	r1, r1
 80081fe:	4a25      	ldr	r2, [pc, #148]	; (8008294 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 8008200:	54d1      	strb	r1, [r2, r3]
 8008202:	e044      	b.n	800828e <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
    case BLACK:   buffer[x + ( y / 8 ) * SSD1306_LCDWIDTH] &= ~( 1 << ( y & 7 ) ); break;
 8008204:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8008208:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800820c:	2b00      	cmp	r3, #0
 800820e:	da00      	bge.n	8008212 <_ZN16Adafruit_SSD13069drawPixelEsst+0x14a>
 8008210:	3307      	adds	r3, #7
 8008212:	10db      	asrs	r3, r3, #3
 8008214:	b218      	sxth	r0, r3
 8008216:	4603      	mov	r3, r0
 8008218:	01db      	lsls	r3, r3, #7
 800821a:	4413      	add	r3, r2
 800821c:	4a1d      	ldr	r2, [pc, #116]	; (8008294 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 800821e:	5cd3      	ldrb	r3, [r2, r3]
 8008220:	b25a      	sxtb	r2, r3
 8008222:	893b      	ldrh	r3, [r7, #8]
 8008224:	f003 0307 	and.w	r3, r3, #7
 8008228:	2101      	movs	r1, #1
 800822a:	fa01 f303 	lsl.w	r3, r1, r3
 800822e:	b25b      	sxtb	r3, r3
 8008230:	43db      	mvns	r3, r3
 8008232:	b25b      	sxtb	r3, r3
 8008234:	4013      	ands	r3, r2
 8008236:	b259      	sxtb	r1, r3
 8008238:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800823c:	4603      	mov	r3, r0
 800823e:	01db      	lsls	r3, r3, #7
 8008240:	4413      	add	r3, r2
 8008242:	b2c9      	uxtb	r1, r1
 8008244:	4a13      	ldr	r2, [pc, #76]	; (8008294 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 8008246:	54d1      	strb	r1, [r2, r3]
 8008248:	e021      	b.n	800828e <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
    case INVERSE: buffer[x + ( y / 8 ) * SSD1306_LCDWIDTH] ^= ( 1 << ( y & 7 ) ); break;
 800824a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800824e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	da00      	bge.n	8008258 <_ZN16Adafruit_SSD13069drawPixelEsst+0x190>
 8008256:	3307      	adds	r3, #7
 8008258:	10db      	asrs	r3, r3, #3
 800825a:	b218      	sxth	r0, r3
 800825c:	4603      	mov	r3, r0
 800825e:	01db      	lsls	r3, r3, #7
 8008260:	4413      	add	r3, r2
 8008262:	4a0c      	ldr	r2, [pc, #48]	; (8008294 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 8008264:	5cd3      	ldrb	r3, [r2, r3]
 8008266:	b25a      	sxtb	r2, r3
 8008268:	893b      	ldrh	r3, [r7, #8]
 800826a:	f003 0307 	and.w	r3, r3, #7
 800826e:	2101      	movs	r1, #1
 8008270:	fa01 f303 	lsl.w	r3, r1, r3
 8008274:	b25b      	sxtb	r3, r3
 8008276:	4053      	eors	r3, r2
 8008278:	b259      	sxtb	r1, r3
 800827a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800827e:	4603      	mov	r3, r0
 8008280:	01db      	lsls	r3, r3, #7
 8008282:	4413      	add	r3, r2
 8008284:	b2c9      	uxtb	r1, r1
 8008286:	4a03      	ldr	r2, [pc, #12]	; (8008294 <_ZN16Adafruit_SSD13069drawPixelEsst+0x1cc>)
 8008288:	54d1      	strb	r1, [r2, r3]
 800828a:	e000      	b.n	800828e <_ZN16Adafruit_SSD13069drawPixelEsst+0x1c6>
        return;
 800828c:	bf00      	nop
    }
}
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	20000090 	.word	0x20000090

08008298 <_ZN16Adafruit_SSD1306C1Ea>:


// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	70fb      	strb	r3, [r7, #3]
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2220      	movs	r2, #32
 80082a8:	2180      	movs	r1, #128	; 0x80
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff fcde 	bl	8007c6c <_ZN12Adafruit_GFXC1Ess>
 80082b0:	4a0f      	ldr	r2, [pc, #60]	; (80082f0 <_ZN16Adafruit_SSD1306C1Ea+0x58>)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
{
  sclk = dc = cs = sid = -1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	22ff      	movs	r2, #255	; 0xff
 80082ba:	765a      	strb	r2, [r3, #25]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f993 2019 	ldrsb.w	r2, [r3, #25]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	775a      	strb	r2, [r3, #29]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f993 201d 	ldrsb.w	r2, [r3, #29]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	76da      	strb	r2, [r3, #27]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f993 201b 	ldrsb.w	r2, [r3, #27]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	769a      	strb	r2, [r3, #26]
  dbg = 1;		//	Default Enable Debug Print
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	779a      	strb	r2, [r3, #30]
  rst = reset;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	78fa      	ldrb	r2, [r7, #3]
 80082e4:	771a      	strb	r2, [r3, #28]
}
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	0800cc58 	.word	0x0800cc58

080082f4 <_ZN16Adafruit_SSD13065beginEhhb>:


void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr, bool reset)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b082      	sub	sp, #8
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
 80082fc:	4608      	mov	r0, r1
 80082fe:	4611      	mov	r1, r2
 8008300:	461a      	mov	r2, r3
 8008302:	4603      	mov	r3, r0
 8008304:	70fb      	strb	r3, [r7, #3]
 8008306:	460b      	mov	r3, r1
 8008308:	70bb      	strb	r3, [r7, #2]
 800830a:	4613      	mov	r3, r2
 800830c:	707b      	strb	r3, [r7, #1]
  _vccstate = vccstate;
 800830e:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	761a      	strb	r2, [r3, #24]
  _i2caddr = i2caddr;
 8008316:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	75da      	strb	r2, [r3, #23]

  // Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 800831e:	21ae      	movs	r1, #174	; 0xae
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f879 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 8008326:	21d5      	movs	r1, #213	; 0xd5
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f875 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 800832e:	2180      	movs	r1, #128	; 0x80
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 f871 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 8008336:	21a8      	movs	r1, #168	; 0xa8
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f86d 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 800833e:	211f      	movs	r1, #31
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f869 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 8008346:	21d3      	movs	r1, #211	; 0xd3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f865 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x0);                                   // no offset
 800834e:	2100      	movs	r1, #0
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f861 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 8008356:	2140      	movs	r1, #64	; 0x40
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f85d 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 800835e:	218d      	movs	r1, #141	; 0x8d
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f859 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (vccstate == SSD1306_EXTERNALVCC)
 8008366:	78fb      	ldrb	r3, [r7, #3]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d104      	bne.n	8008376 <_ZN16Adafruit_SSD13065beginEhhb+0x82>
    { ssd1306_command(0x10); }
 800836c:	2110      	movs	r1, #16
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f852 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
 8008374:	e003      	b.n	800837e <_ZN16Adafruit_SSD13065beginEhhb+0x8a>
  else
    { ssd1306_command(0x14); }
 8008376:	2114      	movs	r1, #20
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 f84d 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 800837e:	2120      	movs	r1, #32
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 f849 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 8008386:	2100      	movs	r1, #0
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f845 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 800838e:	21a1      	movs	r1, #161	; 0xa1
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f841 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_COMSCANDEC);
 8008396:	21c8      	movs	r1, #200	; 0xc8
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 f83d 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 800839e:	21da      	movs	r1, #218	; 0xda
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f839 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x02);
 80083a6:	2102      	movs	r1, #2
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 f835 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 80083ae:	2181      	movs	r1, #129	; 0x81
 80083b0:	6878      	ldr	r0, [r7, #4]
 80083b2:	f000 f831 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x8F);
 80083b6:	218f      	movs	r1, #143	; 0x8f
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 f82d 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 80083be:	21d9      	movs	r1, #217	; 0xd9
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f829 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  if (vccstate == SSD1306_EXTERNALVCC)
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d104      	bne.n	80083d6 <_ZN16Adafruit_SSD13065beginEhhb+0xe2>
    { ssd1306_command(0x22); }
 80083cc:	2122      	movs	r1, #34	; 0x22
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f822 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
 80083d4:	e003      	b.n	80083de <_ZN16Adafruit_SSD13065beginEhhb+0xea>
  else
    { ssd1306_command(0xF1); }
 80083d6:	21f1      	movs	r1, #241	; 0xf1
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 f81d 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 80083de:	21db      	movs	r1, #219	; 0xdb
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f819 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0x40);
 80083e6:	2140      	movs	r1, #64	; 0x40
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f815 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 80083ee:	21a4      	movs	r1, #164	; 0xa4
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f811 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 80083f6:	21a6      	movs	r1, #166	; 0xa6
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 f80d 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 80083fe:	212e      	movs	r1, #46	; 0x2e
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 f809 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8008406:	21af      	movs	r1, #175	; 0xaf
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 f805 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
}
 800840e:	bf00      	nop
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
	...

08008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af02      	add	r7, sp, #8
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	70fb      	strb	r3, [r7, #3]
  Buffer_CMD[1] = c;
 8008424:	4a0d      	ldr	r2, [pc, #52]	; (800845c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>)
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	7053      	strb	r3, [r2, #1]
#if defined(_WIN32)
#else   //  STM32
  while(HAL_I2C_Master_Transmit(&hi2c3,_i2caddr,Buffer_CMD,0x02,0x10) != HAL_OK)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8008430:	b299      	uxth	r1, r3
 8008432:	2310      	movs	r3, #16
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	2302      	movs	r3, #2
 8008438:	4a08      	ldr	r2, [pc, #32]	; (800845c <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x44>)
 800843a:	4809      	ldr	r0, [pc, #36]	; (8008460 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x48>)
 800843c:	f7fa feee 	bl	800321c <HAL_I2C_Master_Transmit>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	bf14      	ite	ne
 8008446:	2301      	movne	r3, #1
 8008448:	2300      	moveq	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b00      	cmp	r3, #0
 800844e:	d000      	beq.n	8008452 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x3a>
 8008450:	e7eb      	b.n	800842a <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x12>
  {

  }
#endif
}
 8008452:	bf00      	nop
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	2000032c 	.word	0x2000032c
 8008460:	200005f4 	.word	0x200005f4

08008464 <_ZN16Adafruit_SSD130612ssd1306_dataEt>:

void Adafruit_SSD1306::ssd1306_data(uint16_t a)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af02      	add	r7, sp, #8
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	460b      	mov	r3, r1
 800846e:	807b      	strh	r3, [r7, #2]
  uint8_t i;
  
  for(i = 0; i < 128 ; i++)
 8008470:	2300      	movs	r3, #0
 8008472:	73fb      	strb	r3, [r7, #15]
 8008474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008478:	2b00      	cmp	r3, #0
 800847a:	db0c      	blt.n	8008496 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x32>
  {
    Buffer_DATA[i+1] = buffer[a+i];
 800847c:	887a      	ldrh	r2, [r7, #2]
 800847e:	7bfb      	ldrb	r3, [r7, #15]
 8008480:	441a      	add	r2, r3
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	3301      	adds	r3, #1
 8008486:	4910      	ldr	r1, [pc, #64]	; (80084c8 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x64>)
 8008488:	5c89      	ldrb	r1, [r1, r2]
 800848a:	4a10      	ldr	r2, [pc, #64]	; (80084cc <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x68>)
 800848c:	54d1      	strb	r1, [r2, r3]
  for(i = 0; i < 128 ; i++)
 800848e:	7bfb      	ldrb	r3, [r7, #15]
 8008490:	3301      	adds	r3, #1
 8008492:	73fb      	strb	r3, [r7, #15]
 8008494:	e7ee      	b.n	8008474 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x10>
  }

#if defined(_WIN32)
#else   //  STM32
  while(HAL_I2C_Master_Transmit(&hi2c3,_i2caddr,Buffer_DATA,129,0x10) != HAL_OK)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800849c:	b299      	uxth	r1, r3
 800849e:	2310      	movs	r3, #16
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	2381      	movs	r3, #129	; 0x81
 80084a4:	4a09      	ldr	r2, [pc, #36]	; (80084cc <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x68>)
 80084a6:	480a      	ldr	r0, [pc, #40]	; (80084d0 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x6c>)
 80084a8:	f7fa feb8 	bl	800321c <HAL_I2C_Master_Transmit>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	bf14      	ite	ne
 80084b2:	2301      	movne	r3, #1
 80084b4:	2300      	moveq	r3, #0
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d000      	beq.n	80084be <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x5a>
 80084bc:	e7eb      	b.n	8008496 <_ZN16Adafruit_SSD130612ssd1306_dataEt+0x32>
  {

  }
#endif
}
 80084be:	bf00      	nop
 80084c0:	3710      	adds	r7, #16
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20000090 	.word	0x20000090
 80084cc:	2000000c 	.word	0x2000000c
 80084d0:	200005f4 	.word	0x200005f4

080084d4 <_ZN16Adafruit_SSD13067displayEv>:
  ssd1306_command(SSD1306_SETCONTRAST);
  ssd1306_command(contrast);
}

void Adafruit_SSD1306::display(void) 
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  ssd1306_command(SSD1306_COLUMNADDR);
 80084dc:	2121      	movs	r1, #33	; 0x21
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff ff9a 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
 80084e4:	2100      	movs	r1, #0
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f7ff ff96 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 80084ec:	217f      	movs	r1, #127	; 0x7f
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff ff92 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
 80084f4:	2122      	movs	r1, #34	; 0x22
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f7ff ff8e 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
 80084fc:	2100      	movs	r1, #0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff ff8a 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #if SSD1306_LCDHEIGHT == 64
    ssd1306_command(7); // Page end address
  #endif
  #if SSD1306_LCDHEIGHT == 32
    ssd1306_command(3); // Page end address
 8008504:	2103      	movs	r1, #3
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7ff ff86 	bl	8008418 <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  uint8_t twbrbackup = TWBR;
  TWBR = 12; // upgrade to 400KHz!
#endif

//I2C write
  for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i += 128) 
 800850c:	2300      	movs	r3, #0
 800850e:	81fb      	strh	r3, [r7, #14]
 8008510:	89fb      	ldrh	r3, [r7, #14]
 8008512:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008516:	d208      	bcs.n	800852a <_ZN16Adafruit_SSD13067displayEv+0x56>
  {
    
    ssd1306_data(i);
 8008518:	89fb      	ldrh	r3, [r7, #14]
 800851a:	4619      	mov	r1, r3
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff ffa1 	bl	8008464 <_ZN16Adafruit_SSD130612ssd1306_dataEt>
  for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i += 128) 
 8008522:	89fb      	ldrh	r3, [r7, #14]
 8008524:	3380      	adds	r3, #128	; 0x80
 8008526:	81fb      	strh	r3, [r7, #14]
 8008528:	e7f2      	b.n	8008510 <_ZN16Adafruit_SSD13067displayEv+0x3c>

#ifdef TWBR
    TWBR = twbrbackup;
#endif
  
}
 800852a:	bf00      	nop
 800852c:	3710      	adds	r7, #16
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
	...

08008534 <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b082      	sub	sp, #8
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
 800853c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008540:	2200      	movs	r2, #0
 8008542:	4904      	ldr	r1, [pc, #16]	; (8008554 <_ZN16Adafruit_SSD130612clearDisplayEv+0x20>)
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fbe5 	bl	8008d14 <_ZN16Adafruit_SSD13066memsetEPhtt>
}
 800854a:	bf00      	nop
 800854c:	3708      	adds	r7, #8
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	20000090 	.word	0x20000090

08008558 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:


void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8008558:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800855c:	b08d      	sub	sp, #52	; 0x34
 800855e:	af00      	add	r7, sp, #0
 8008560:	60f8      	str	r0, [r7, #12]
 8008562:	4608      	mov	r0, r1
 8008564:	4611      	mov	r1, r2
 8008566:	461a      	mov	r2, r3
 8008568:	4603      	mov	r3, r0
 800856a:	817b      	strh	r3, [r7, #10]
 800856c:	460b      	mov	r3, r1
 800856e:	813b      	strh	r3, [r7, #8]
 8008570:	4613      	mov	r3, r2
 8008572:	80fb      	strh	r3, [r7, #6]
  bool bSwap = false;
 8008574:	2300      	movs	r3, #0
 8008576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  switch(rotation)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	7d5b      	ldrb	r3, [r3, #21]
 800857e:	2b03      	cmp	r3, #3
 8008580:	d855      	bhi.n	800862e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd6>
 8008582:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>)
 8008584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008588:	0800862f 	.word	0x0800862f
 800858c:	08008599 	.word	0x08008599
 8008590:	080085c1 	.word	0x080085c1
 8008594:	080085f9 	.word	0x080085f9
    case 0:
      // 0 degree rotation, do nothing
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
 8008598:	2301      	movs	r3, #1
 800859a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 800859e:	897b      	ldrh	r3, [r7, #10]
 80085a0:	857b      	strh	r3, [r7, #42]	; 0x2a
 80085a2:	893b      	ldrh	r3, [r7, #8]
 80085a4:	817b      	strh	r3, [r7, #10]
 80085a6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80085a8:	813b      	strh	r3, [r7, #8]
      x = WIDTH - x - 1;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80085b0:	b29a      	uxth	r2, r3
 80085b2:	897b      	ldrh	r3, [r7, #10]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	3b01      	subs	r3, #1
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	817b      	strh	r3, [r7, #10]
      break;
 80085be:	e036      	b.n	800862e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd6>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	897b      	ldrh	r3, [r7, #10]
 80085ca:	1ad3      	subs	r3, r2, r3
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	3b01      	subs	r3, #1
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - y - 1;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80085da:	b29a      	uxth	r2, r3
 80085dc:	893b      	ldrh	r3, [r7, #8]
 80085de:	1ad3      	subs	r3, r2, r3
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	3b01      	subs	r3, #1
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	813b      	strh	r3, [r7, #8]
      x -= (w-1);
 80085e8:	897a      	ldrh	r2, [r7, #10]
 80085ea:	88fb      	ldrh	r3, [r7, #6]
 80085ec:	1ad3      	subs	r3, r2, r3
 80085ee:	b29b      	uxth	r3, r3
 80085f0:	3301      	adds	r3, #1
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	817b      	strh	r3, [r7, #10]
      break;
 80085f6:	e01a      	b.n	800862e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xd6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
 80085f8:	2301      	movs	r3, #1
 80085fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 80085fe:	897b      	ldrh	r3, [r7, #10]
 8008600:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008602:	893b      	ldrh	r3, [r7, #8]
 8008604:	817b      	strh	r3, [r7, #10]
 8008606:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008608:	813b      	strh	r3, [r7, #8]
      y = HEIGHT - y - 1;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008610:	b29a      	uxth	r2, r3
 8008612:	893b      	ldrh	r3, [r7, #8]
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	b29b      	uxth	r3, r3
 8008618:	3b01      	subs	r3, #1
 800861a:	b29b      	uxth	r3, r3
 800861c:	813b      	strh	r3, [r7, #8]
      y -= (w-1);
 800861e:	893a      	ldrh	r2, [r7, #8]
 8008620:	88fb      	ldrh	r3, [r7, #6]
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	b29b      	uxth	r3, r3
 8008626:	3301      	adds	r3, #1
 8008628:	b29b      	uxth	r3, r3
 800862a:	813b      	strh	r3, [r7, #8]
      break;
 800862c:	bf00      	nop
  }

  if(bSwap)
 800862e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 80cf 	beq.w	80087d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x27e>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	627b      	str	r3, [r7, #36]	; 0x24
 800863c:	897b      	ldrh	r3, [r7, #10]
 800863e:	847b      	strh	r3, [r7, #34]	; 0x22
 8008640:	893b      	ldrh	r3, [r7, #8]
 8008642:	843b      	strh	r3, [r7, #32]
 8008644:	88fb      	ldrh	r3, [r7, #6]
 8008646:	83fb      	strh	r3, [r7, #30]
 8008648:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800864c:	83bb      	strh	r3, [r7, #28]

void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color)
{

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 800864e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008652:	2b00      	cmp	r3, #0
 8008654:	f2c0 8153 	blt.w	80088fe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a6>
 8008658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800865e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8008662:	429a      	cmp	r2, r3
 8008664:	f280 814b 	bge.w	80088fe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a6>

  // make sure we don't try to draw below 0
  if(__y < 0)
 8008668:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800866c:	2b00      	cmp	r3, #0
 800866e:	da06      	bge.n	800867e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x126>
  {
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 8008670:	8bfa      	ldrh	r2, [r7, #30]
 8008672:	8c3b      	ldrh	r3, [r7, #32]
 8008674:	4413      	add	r3, r2
 8008676:	b29b      	uxth	r3, r3
 8008678:	83fb      	strh	r3, [r7, #30]
    __y = 0;
 800867a:	2300      	movs	r3, #0
 800867c:	843b      	strh	r3, [r7, #32]

  }

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT)
 800867e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008682:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008686:	4413      	add	r3, r2
 8008688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800868e:	4293      	cmp	r3, r2
 8008690:	dd07      	ble.n	80086a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14a>
  {
    __h = (HEIGHT - __y);
 8008692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008694:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008698:	b29a      	uxth	r2, r3
 800869a:	8c3b      	ldrh	r3, [r7, #32]
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	b29b      	uxth	r3, r3
 80086a0:	83fb      	strh	r3, [r7, #30]
  }

  // if our height is now negative, punt
  if(__h <= 0)
 80086a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f340 812b 	ble.w	8008902 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3aa>
  {
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80086ac:	8c3b      	ldrh	r3, [r7, #32]
 80086ae:	b2de      	uxtb	r6, r3
  register uint8_t h = __h;
 80086b0:	8bfb      	ldrh	r3, [r7, #30]
 80086b2:	b2dd      	uxtb	r5, r3


  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
 80086b4:	4c9c      	ldr	r4, [pc, #624]	; (8008928 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d0>)
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 80086b6:	08f3      	lsrs	r3, r6, #3
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	01db      	lsls	r3, r3, #7
 80086bc:	441c      	add	r4, r3
  // and offset x columns in
  pBuf += x;
 80086be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80086c2:	441c      	add	r4, r3

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
 80086c4:	f006 0307 	and.w	r3, r6, #7
 80086c8:	b2de      	uxtb	r6, r3
  if(mod)
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	d03b      	beq.n	8008746 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1ee>
  {
    // mask off the high n bits we want to set
    mod = 8-mod;
 80086ce:	f1c6 0308 	rsb	r3, r6, #8
 80086d2:	b2de      	uxtb	r6, r3

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80086d4:	4632      	mov	r2, r6
 80086d6:	4b95      	ldr	r3, [pc, #596]	; (800892c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d4>)
 80086d8:	f813 8002 	ldrb.w	r8, [r3, r2]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) 
 80086dc:	42b5      	cmp	r5, r6
 80086de:	d20c      	bcs.n	80086fa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1a2>
    {
      mask &= (0XFF >> (mod-h));
 80086e0:	4632      	mov	r2, r6
 80086e2:	462b      	mov	r3, r5
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	22ff      	movs	r2, #255	; 0xff
 80086e8:	fa42 f303 	asr.w	r3, r2, r3
 80086ec:	b25a      	sxtb	r2, r3
 80086ee:	fa4f f388 	sxtb.w	r3, r8
 80086f2:	4013      	ands	r3, r2
 80086f4:	b25b      	sxtb	r3, r3
 80086f6:	fa5f f883 	uxtb.w	r8, r3
    }

  switch (color)
 80086fa:	8bbb      	ldrh	r3, [r7, #28]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d016      	beq.n	800872e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1d6>
 8008700:	2b02      	cmp	r3, #2
 8008702:	dc1a      	bgt.n	800873a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
 8008704:	2b00      	cmp	r3, #0
 8008706:	d007      	beq.n	8008718 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1c0>
 8008708:	2b01      	cmp	r3, #1
 800870a:	d116      	bne.n	800873a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
    {
    case WHITE:   *pBuf |=  mask;  break;
 800870c:	7823      	ldrb	r3, [r4, #0]
 800870e:	ea43 0308 	orr.w	r3, r3, r8
 8008712:	b2db      	uxtb	r3, r3
 8008714:	7023      	strb	r3, [r4, #0]
 8008716:	e010      	b.n	800873a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
    case BLACK:   *pBuf &= ~mask;  break;
 8008718:	7823      	ldrb	r3, [r4, #0]
 800871a:	b25a      	sxtb	r2, r3
 800871c:	fa4f f388 	sxtb.w	r3, r8
 8008720:	43db      	mvns	r3, r3
 8008722:	b25b      	sxtb	r3, r3
 8008724:	4013      	ands	r3, r2
 8008726:	b25b      	sxtb	r3, r3
 8008728:	b2db      	uxtb	r3, r3
 800872a:	7023      	strb	r3, [r4, #0]
 800872c:	e005      	b.n	800873a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e2>
    case INVERSE: *pBuf ^=  mask;  break;
 800872e:	7823      	ldrb	r3, [r4, #0]
 8008730:	ea88 0303 	eor.w	r3, r8, r3
 8008734:	b2db      	uxtb	r3, r3
 8008736:	7023      	strb	r3, [r4, #0]
 8008738:	bf00      	nop
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 800873a:	42b5      	cmp	r5, r6
 800873c:	f0c0 80e3 	bcc.w	8008906 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ae>

    h -= mod;
 8008740:	1bab      	subs	r3, r5, r6
 8008742:	b2dd      	uxtb	r5, r3

    pBuf += SSD1306_LCDWIDTH;
 8008744:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8)
 8008746:	2d07      	cmp	r5, #7
 8008748:	d91d      	bls.n	8008786 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x22e>
  {
    if (color == INVERSE) 
 800874a:	8bbb      	ldrh	r3, [r7, #28]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d10a      	bne.n	8008766 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x20e>
    {          // separate copy of the code so we don't impact performance of the black/white write version with an extra comparison per loop
      do
      {
      *pBuf=~(*pBuf);
 8008750:	7823      	ldrb	r3, [r4, #0]
 8008752:	43db      	mvns	r3, r3
 8008754:	b2db      	uxtb	r3, r3
 8008756:	7023      	strb	r3, [r4, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
 8008758:	3480      	adds	r4, #128	; 0x80

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
 800875a:	f1a5 0308 	sub.w	r3, r5, #8
 800875e:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 8008760:	2d07      	cmp	r5, #7
 8008762:	d910      	bls.n	8008786 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x22e>
      do
 8008764:	e7f4      	b.n	8008750 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1f8>
      }
    else {
      // store a local value to work with
      register uint8_t val = (color == WHITE) ? 255 : 0;
 8008766:	8bbb      	ldrh	r3, [r7, #28]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d101      	bne.n	8008770 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x218>
 800876c:	23ff      	movs	r3, #255	; 0xff
 800876e:	e000      	b.n	8008772 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x21a>
 8008770:	2300      	movs	r3, #0
 8008772:	461e      	mov	r6, r3

      do  {
        // write our value in
      *pBuf = val;
 8008774:	4633      	mov	r3, r6
 8008776:	7023      	strb	r3, [r4, #0]

        // adjust the buffer forward 8 rows worth of data
        pBuf += SSD1306_LCDWIDTH;
 8008778:	3480      	adds	r4, #128	; 0x80

        // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
        h -= 8;
 800877a:	f1a5 0308 	sub.w	r3, r5, #8
 800877e:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 8008780:	2d07      	cmp	r5, #7
 8008782:	d900      	bls.n	8008786 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x22e>
      do  {
 8008784:	e7f6      	b.n	8008774 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x21c>
      }
    }

  // now do the final partial byte, if necessary
  if(h)
 8008786:	2d00      	cmp	r5, #0
 8008788:	f000 80c8 	beq.w	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  {
    mod = h & 7;
 800878c:	f005 0307 	and.w	r3, r5, #7
 8008790:	b2de      	uxtb	r6, r3
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 8008792:	4632      	mov	r2, r6
 8008794:	4b66      	ldr	r3, [pc, #408]	; (8008930 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d8>)
 8008796:	5c9d      	ldrb	r5, [r3, r2]
    switch (color)
 8008798:	8bbb      	ldrh	r3, [r7, #28]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d016      	beq.n	80087cc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x274>
 800879e:	2b02      	cmp	r3, #2
 80087a0:	f300 80bc 	bgt.w	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d007      	beq.n	80087b8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x260>
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	f040 80b7 	bne.w	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    {
      case WHITE:   *pBuf |=  mask;  break;
 80087ae:	7823      	ldrb	r3, [r4, #0]
 80087b0:	432b      	orrs	r3, r5
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	7023      	strb	r3, [r4, #0]
 80087b6:	e0b1      	b.n	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
      case BLACK:   *pBuf &= ~mask;  break;
 80087b8:	7823      	ldrb	r3, [r4, #0]
 80087ba:	b25a      	sxtb	r2, r3
 80087bc:	b26b      	sxtb	r3, r5
 80087be:	43db      	mvns	r3, r3
 80087c0:	b25b      	sxtb	r3, r3
 80087c2:	4013      	ands	r3, r2
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	7023      	strb	r3, [r4, #0]
 80087ca:	e0a7      	b.n	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
      case INVERSE: *pBuf ^=  mask;  break;
 80087cc:	7823      	ldrb	r3, [r4, #0]
 80087ce:	406b      	eors	r3, r5
 80087d0:	b2db      	uxtb	r3, r3
 80087d2:	7023      	strb	r3, [r4, #0]
 80087d4:	e0a2      	b.n	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	61bb      	str	r3, [r7, #24]
 80087da:	897b      	ldrh	r3, [r7, #10]
 80087dc:	82fb      	strh	r3, [r7, #22]
 80087de:	893b      	ldrh	r3, [r7, #8]
 80087e0:	82bb      	strh	r3, [r7, #20]
 80087e2:	88fb      	ldrh	r3, [r7, #6]
 80087e4:	827b      	strh	r3, [r7, #18]
 80087e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80087ea:	823b      	strh	r3, [r7, #16]
  if(y < 0 || y >= HEIGHT) { return; }
 80087ec:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f2c0 808a 	blt.w	800890a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b2>
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80087fc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008800:	429a      	cmp	r2, r3
 8008802:	f280 8082 	bge.w	800890a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b2>
  if(x < 0)
 8008806:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800880a:	2b00      	cmp	r3, #0
 800880c:	da06      	bge.n	800881c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2c4>
    w += x;
 800880e:	8a7a      	ldrh	r2, [r7, #18]
 8008810:	8afb      	ldrh	r3, [r7, #22]
 8008812:	4413      	add	r3, r2
 8008814:	b29b      	uxth	r3, r3
 8008816:	827b      	strh	r3, [r7, #18]
    x = 0;
 8008818:	2300      	movs	r3, #0
 800881a:	82fb      	strh	r3, [r7, #22]
  if( (x + w) > WIDTH)
 800881c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008820:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008824:	4413      	add	r3, r2
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800882c:	4293      	cmp	r3, r2
 800882e:	dd07      	ble.n	8008840 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2e8>
    w = (WIDTH - x);
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008836:	b29a      	uxth	r2, r3
 8008838:	8afb      	ldrh	r3, [r7, #22]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	b29b      	uxth	r3, r3
 800883e:	827b      	strh	r3, [r7, #18]
  if(w <= 0) { return; }
 8008840:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008844:	2b00      	cmp	r3, #0
 8008846:	dd62      	ble.n	800890e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3b6>
  register uint8_t *pBuf = buffer;
 8008848:	4c37      	ldr	r4, [pc, #220]	; (8008928 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3d0>)
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 800884a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800884e:	2b00      	cmp	r3, #0
 8008850:	da00      	bge.n	8008854 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2fc>
 8008852:	3307      	adds	r3, #7
 8008854:	10db      	asrs	r3, r3, #3
 8008856:	b21b      	sxth	r3, r3
 8008858:	01db      	lsls	r3, r3, #7
 800885a:	441c      	add	r4, r3
  pBuf += x;
 800885c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008860:	441c      	add	r4, r3
  register uint8_t mask = 1 << (y&7);
 8008862:	8abb      	ldrh	r3, [r7, #20]
 8008864:	f003 0307 	and.w	r3, r3, #7
 8008868:	2201      	movs	r2, #1
 800886a:	fa02 f303 	lsl.w	r3, r2, r3
 800886e:	b2dd      	uxtb	r5, r3
  switch (color)
 8008870:	8a3b      	ldrh	r3, [r7, #16]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d02f      	beq.n	80088d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x37e>
 8008876:	2b02      	cmp	r3, #2
 8008878:	dc50      	bgt.n	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
 800887a:	2b00      	cmp	r3, #0
 800887c:	d015      	beq.n	80088aa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x352>
 800887e:	2b01      	cmp	r3, #1
 8008880:	d14c      	bne.n	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 8008882:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008886:	b29a      	uxth	r2, r3
 8008888:	3a01      	subs	r2, #1
 800888a:	b292      	uxth	r2, r2
 800888c:	827a      	strh	r2, [r7, #18]
 800888e:	2b00      	cmp	r3, #0
 8008890:	bf14      	ite	ne
 8008892:	2301      	movne	r3, #1
 8008894:	2300      	moveq	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	2b00      	cmp	r3, #0
 800889a:	d03a      	beq.n	8008912 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3ba>
 800889c:	4623      	mov	r3, r4
 800889e:	1c5c      	adds	r4, r3, #1
 80088a0:	781a      	ldrb	r2, [r3, #0]
 80088a2:	432a      	orrs	r2, r5
 80088a4:	b2d2      	uxtb	r2, r2
 80088a6:	701a      	strb	r2, [r3, #0]
 80088a8:	e7eb      	b.n	8008882 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x32a>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 80088aa:	43eb      	mvns	r3, r5
 80088ac:	b2dd      	uxtb	r5, r3
 80088ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088b2:	b29a      	uxth	r2, r3
 80088b4:	3a01      	subs	r2, #1
 80088b6:	b292      	uxth	r2, r2
 80088b8:	827a      	strh	r2, [r7, #18]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	bf14      	ite	ne
 80088be:	2301      	movne	r3, #1
 80088c0:	2300      	moveq	r3, #0
 80088c2:	b2db      	uxtb	r3, r3
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d026      	beq.n	8008916 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3be>
 80088c8:	4623      	mov	r3, r4
 80088ca:	1c5c      	adds	r4, r3, #1
 80088cc:	781a      	ldrb	r2, [r3, #0]
 80088ce:	402a      	ands	r2, r5
 80088d0:	b2d2      	uxtb	r2, r2
 80088d2:	701a      	strb	r2, [r3, #0]
 80088d4:	e7eb      	b.n	80088ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x356>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 80088d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088da:	b29a      	uxth	r2, r3
 80088dc:	3a01      	subs	r2, #1
 80088de:	b292      	uxth	r2, r2
 80088e0:	827a      	strh	r2, [r7, #18]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	bf14      	ite	ne
 80088e6:	2301      	movne	r3, #1
 80088e8:	2300      	moveq	r3, #0
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d014      	beq.n	800891a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c2>
 80088f0:	4623      	mov	r3, r4
 80088f2:	1c5c      	adds	r4, r3, #1
 80088f4:	781a      	ldrb	r2, [r3, #0]
 80088f6:	406a      	eors	r2, r5
 80088f8:	b2d2      	uxtb	r2, r2
 80088fa:	701a      	strb	r2, [r3, #0]
 80088fc:	e7eb      	b.n	80088d6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x37e>
  if(x < 0 || x >= WIDTH) { return; }
 80088fe:	bf00      	nop
 8008900:	e00c      	b.n	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    return;
 8008902:	bf00      	nop
 8008904:	e00a      	b.n	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    if(h<mod) { return; }
 8008906:	bf00      	nop
 8008908:	e008      	b.n	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  if(y < 0 || y >= HEIGHT) { return; }
 800890a:	bf00      	nop
 800890c:	e006      	b.n	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  if(w <= 0) { return; }
 800890e:	bf00      	nop
 8008910:	e004      	b.n	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 8008912:	bf00      	nop
 8008914:	e002      	b.n	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 8008916:	bf00      	nop
 8008918:	e000      	b.n	800891c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3c4>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 800891a:	bf00      	nop
}
 800891c:	bf00      	nop
 800891e:	3734      	adds	r7, #52	; 0x34
 8008920:	46bd      	mov	sp, r7
 8008922:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8008926:	4770      	bx	lr
 8008928:	20000090 	.word	0x20000090
 800892c:	20000290 	.word	0x20000290
 8008930:	20000298 	.word	0x20000298

08008934 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
{
 8008934:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8008938:	b08d      	sub	sp, #52	; 0x34
 800893a:	af00      	add	r7, sp, #0
 800893c:	60f8      	str	r0, [r7, #12]
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	461a      	mov	r2, r3
 8008944:	4603      	mov	r3, r0
 8008946:	817b      	strh	r3, [r7, #10]
 8008948:	460b      	mov	r3, r1
 800894a:	813b      	strh	r3, [r7, #8]
 800894c:	4613      	mov	r3, r2
 800894e:	80fb      	strh	r3, [r7, #6]
  bool bSwap = false;
 8008950:	2300      	movs	r3, #0
 8008952:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  switch(rotation)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	7d5b      	ldrb	r3, [r3, #21]
 800895a:	2b03      	cmp	r3, #3
 800895c:	d855      	bhi.n	8008a0a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
 800895e:	a201      	add	r2, pc, #4	; (adr r2, 8008964 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>)
 8008960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008964:	08008a0b 	.word	0x08008a0b
 8008968:	08008975 	.word	0x08008975
 800896c:	080089ab 	.word	0x080089ab
 8008970:	080089e3 	.word	0x080089e3
      bSwap = true;
 8008974:	2301      	movs	r3, #1
 8008976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 800897a:	897b      	ldrh	r3, [r7, #10]
 800897c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800897e:	893b      	ldrh	r3, [r7, #8]
 8008980:	817b      	strh	r3, [r7, #10]
 8008982:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008984:	813b      	strh	r3, [r7, #8]
      x = WIDTH - x - 1;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800898c:	b29a      	uxth	r2, r3
 800898e:	897b      	ldrh	r3, [r7, #10]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	b29b      	uxth	r3, r3
 8008994:	3b01      	subs	r3, #1
 8008996:	b29b      	uxth	r3, r3
 8008998:	817b      	strh	r3, [r7, #10]
      x -= (h-1);
 800899a:	897a      	ldrh	r2, [r7, #10]
 800899c:	88fb      	ldrh	r3, [r7, #6]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	b29b      	uxth	r3, r3
 80089a2:	3301      	adds	r3, #1
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	817b      	strh	r3, [r7, #10]
      break;
 80089a8:	e02f      	b.n	8008a0a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
      x = WIDTH - x - 1;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	897b      	ldrh	r3, [r7, #10]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	3b01      	subs	r3, #1
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	817b      	strh	r3, [r7, #10]
      y = HEIGHT - y - 1;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	893b      	ldrh	r3, [r7, #8]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	3b01      	subs	r3, #1
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	813b      	strh	r3, [r7, #8]
      y -= (h-1);
 80089d2:	893a      	ldrh	r2, [r7, #8]
 80089d4:	88fb      	ldrh	r3, [r7, #6]
 80089d6:	1ad3      	subs	r3, r2, r3
 80089d8:	b29b      	uxth	r3, r3
 80089da:	3301      	adds	r3, #1
 80089dc:	b29b      	uxth	r3, r3
 80089de:	813b      	strh	r3, [r7, #8]
      break;
 80089e0:	e013      	b.n	8008a0a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xd6>
      bSwap = true;
 80089e2:	2301      	movs	r3, #1
 80089e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      ssd1306_swap(x, y);
 80089e8:	897b      	ldrh	r3, [r7, #10]
 80089ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80089ec:	893b      	ldrh	r3, [r7, #8]
 80089ee:	817b      	strh	r3, [r7, #10]
 80089f0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80089f2:	813b      	strh	r3, [r7, #8]
      y = HEIGHT - y - 1;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80089fa:	b29a      	uxth	r2, r3
 80089fc:	893b      	ldrh	r3, [r7, #8]
 80089fe:	1ad3      	subs	r3, r2, r3
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	3b01      	subs	r3, #1
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	813b      	strh	r3, [r7, #8]
      break;
 8008a08:	bf00      	nop
  if(bSwap)
 8008a0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 809a 	beq.w	8008b48 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x214>
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
 8008a18:	897b      	ldrh	r3, [r7, #10]
 8008a1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8008a1c:	893b      	ldrh	r3, [r7, #8]
 8008a1e:	843b      	strh	r3, [r7, #32]
 8008a20:	88fb      	ldrh	r3, [r7, #6]
 8008a22:	83fb      	strh	r3, [r7, #30]
 8008a24:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008a28:	83bb      	strh	r3, [r7, #28]
  if(y < 0 || y >= HEIGHT) { return; }
 8008a2a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	f2c0 8155 	blt.w	8008cde <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3aa>
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008a3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	f280 814d 	bge.w	8008cde <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3aa>
  if(x < 0)
 8008a44:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	da06      	bge.n	8008a5a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x126>
    w += x;
 8008a4c:	8bfa      	ldrh	r2, [r7, #30]
 8008a4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a50:	4413      	add	r3, r2
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	83fb      	strh	r3, [r7, #30]
    x = 0;
 8008a56:	2300      	movs	r3, #0
 8008a58:	847b      	strh	r3, [r7, #34]	; 0x22
  if( (x + w) > WIDTH)
 8008a5a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8008a5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008a62:	4413      	add	r3, r2
 8008a64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a66:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	dd07      	ble.n	8008a7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x14a>
    w = (WIDTH - x);
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	83fb      	strh	r3, [r7, #30]
  if(w <= 0) { return; }
 8008a7e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f340 812d 	ble.w	8008ce2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3ae>
  register uint8_t *pBuf = buffer;
 8008a88:	4c9f      	ldr	r4, [pc, #636]	; (8008d08 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3d4>)
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 8008a8a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	da00      	bge.n	8008a94 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x160>
 8008a92:	3307      	adds	r3, #7
 8008a94:	10db      	asrs	r3, r3, #3
 8008a96:	b21b      	sxth	r3, r3
 8008a98:	01db      	lsls	r3, r3, #7
 8008a9a:	441c      	add	r4, r3
  pBuf += x;
 8008a9c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008aa0:	441c      	add	r4, r3
  register uint8_t mask = 1 << (y&7);
 8008aa2:	8c3b      	ldrh	r3, [r7, #32]
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	b2dd      	uxtb	r5, r3
  switch (color)
 8008ab0:	8bbb      	ldrh	r3, [r7, #28]
 8008ab2:	2b02      	cmp	r3, #2
 8008ab4:	d033      	beq.n	8008b1e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ea>
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	f300 8120 	bgt.w	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d017      	beq.n	8008af0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1bc>
 8008ac0:	2b01      	cmp	r3, #1
 8008ac2:	f040 811b 	bne.w	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 8008ac6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	3a01      	subs	r2, #1
 8008ace:	b292      	uxth	r2, r2
 8008ad0:	83fa      	strh	r2, [r7, #30]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	bf14      	ite	ne
 8008ad6:	2301      	movne	r3, #1
 8008ad8:	2300      	moveq	r3, #0
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 8102 	beq.w	8008ce6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b2>
 8008ae2:	4623      	mov	r3, r4
 8008ae4:	1c5c      	adds	r4, r3, #1
 8008ae6:	781a      	ldrb	r2, [r3, #0]
 8008ae8:	432a      	orrs	r2, r5
 8008aea:	b2d2      	uxtb	r2, r2
 8008aec:	701a      	strb	r2, [r3, #0]
 8008aee:	e7ea      	b.n	8008ac6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x192>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 8008af0:	43eb      	mvns	r3, r5
 8008af2:	b2dd      	uxtb	r5, r3
 8008af4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	3a01      	subs	r2, #1
 8008afc:	b292      	uxth	r2, r2
 8008afe:	83fa      	strh	r2, [r7, #30]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	bf14      	ite	ne
 8008b04:	2301      	movne	r3, #1
 8008b06:	2300      	moveq	r3, #0
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80ed 	beq.w	8008cea <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3b6>
 8008b10:	4623      	mov	r3, r4
 8008b12:	1c5c      	adds	r4, r3, #1
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	402a      	ands	r2, r5
 8008b18:	b2d2      	uxtb	r2, r2
 8008b1a:	701a      	strb	r2, [r3, #0]
 8008b1c:	e7ea      	b.n	8008af4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1c0>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 8008b1e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008b22:	b29a      	uxth	r2, r3
 8008b24:	3a01      	subs	r2, #1
 8008b26:	b292      	uxth	r2, r2
 8008b28:	83fa      	strh	r2, [r7, #30]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	bf14      	ite	ne
 8008b2e:	2301      	movne	r3, #1
 8008b30:	2300      	moveq	r3, #0
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	f000 80da 	beq.w	8008cee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3ba>
 8008b3a:	4623      	mov	r3, r4
 8008b3c:	1c5c      	adds	r4, r3, #1
 8008b3e:	781a      	ldrb	r2, [r3, #0]
 8008b40:	406a      	eors	r2, r5
 8008b42:	b2d2      	uxtb	r2, r2
 8008b44:	701a      	strb	r2, [r3, #0]
 8008b46:	e7ea      	b.n	8008b1e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1ea>
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	61bb      	str	r3, [r7, #24]
 8008b4c:	897b      	ldrh	r3, [r7, #10]
 8008b4e:	82fb      	strh	r3, [r7, #22]
 8008b50:	893b      	ldrh	r3, [r7, #8]
 8008b52:	82bb      	strh	r3, [r7, #20]
 8008b54:	88fb      	ldrh	r3, [r7, #6]
 8008b56:	827b      	strh	r3, [r7, #18]
 8008b58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008b5c:	823b      	strh	r3, [r7, #16]
  if(x < 0 || x >= WIDTH) { return; }
 8008b5e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f2c0 80c5 	blt.w	8008cf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3be>
 8008b68:	69bb      	ldr	r3, [r7, #24]
 8008b6a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8008b6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	f280 80bd 	bge.w	8008cf2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3be>
  if(__y < 0)
 8008b78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	da06      	bge.n	8008b8e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x25a>
    __h += __y;
 8008b80:	8a7a      	ldrh	r2, [r7, #18]
 8008b82:	8abb      	ldrh	r3, [r7, #20]
 8008b84:	4413      	add	r3, r2
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	827b      	strh	r3, [r7, #18]
    __y = 0;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	82bb      	strh	r3, [r7, #20]
  if( (__y + __h) > HEIGHT)
 8008b8e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8008b92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b96:	4413      	add	r3, r2
 8008b98:	69ba      	ldr	r2, [r7, #24]
 8008b9a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	dd07      	ble.n	8008bb2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x27e>
    __h = (HEIGHT - __y);
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	8abb      	ldrh	r3, [r7, #20]
 8008bac:	1ad3      	subs	r3, r2, r3
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	827b      	strh	r3, [r7, #18]
  if(__h <= 0)
 8008bb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f340 809d 	ble.w	8008cf6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c2>
  register uint8_t y = __y;
 8008bbc:	8abb      	ldrh	r3, [r7, #20]
 8008bbe:	b2de      	uxtb	r6, r3
  register uint8_t h = __h;
 8008bc0:	8a7b      	ldrh	r3, [r7, #18]
 8008bc2:	b2dd      	uxtb	r5, r3
  register uint8_t *pBuf = buffer;
 8008bc4:	4c50      	ldr	r4, [pc, #320]	; (8008d08 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3d4>)
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
 8008bc6:	08f3      	lsrs	r3, r6, #3
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	01db      	lsls	r3, r3, #7
 8008bcc:	441c      	add	r4, r3
  pBuf += x;
 8008bce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008bd2:	441c      	add	r4, r3
  register uint8_t mod = (y&7);
 8008bd4:	f006 0307 	and.w	r3, r6, #7
 8008bd8:	b2de      	uxtb	r6, r3
  if(mod)
 8008bda:	2e00      	cmp	r6, #0
 8008bdc:	d03a      	beq.n	8008c54 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x320>
    mod = 8-mod;
 8008bde:	f1c6 0308 	rsb	r3, r6, #8
 8008be2:	b2de      	uxtb	r6, r3
    register uint8_t mask = premask[mod];
 8008be4:	4632      	mov	r2, r6
 8008be6:	4b49      	ldr	r3, [pc, #292]	; (8008d0c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3d8>)
 8008be8:	f813 8002 	ldrb.w	r8, [r3, r2]
    if( h < mod) 
 8008bec:	42b5      	cmp	r5, r6
 8008bee:	d20c      	bcs.n	8008c0a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2d6>
      mask &= (0XFF >> (mod-h));
 8008bf0:	4632      	mov	r2, r6
 8008bf2:	462b      	mov	r3, r5
 8008bf4:	1ad3      	subs	r3, r2, r3
 8008bf6:	22ff      	movs	r2, #255	; 0xff
 8008bf8:	fa42 f303 	asr.w	r3, r2, r3
 8008bfc:	b25a      	sxtb	r2, r3
 8008bfe:	fa4f f388 	sxtb.w	r3, r8
 8008c02:	4013      	ands	r3, r2
 8008c04:	b25b      	sxtb	r3, r3
 8008c06:	fa5f f883 	uxtb.w	r8, r3
  switch (color)
 8008c0a:	8a3b      	ldrh	r3, [r7, #16]
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d016      	beq.n	8008c3e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30a>
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	dc1a      	bgt.n	8008c4a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x316>
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d007      	beq.n	8008c28 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2f4>
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d116      	bne.n	8008c4a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x316>
    case WHITE:   *pBuf |=  mask;  break;
 8008c1c:	7823      	ldrb	r3, [r4, #0]
 8008c1e:	ea43 0308 	orr.w	r3, r3, r8
 8008c22:	b2db      	uxtb	r3, r3
 8008c24:	7023      	strb	r3, [r4, #0]
 8008c26:	e010      	b.n	8008c4a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x316>
    case BLACK:   *pBuf &= ~mask;  break;
 8008c28:	7823      	ldrb	r3, [r4, #0]
 8008c2a:	b25a      	sxtb	r2, r3
 8008c2c:	fa4f f388 	sxtb.w	r3, r8
 8008c30:	43db      	mvns	r3, r3
 8008c32:	b25b      	sxtb	r3, r3
 8008c34:	4013      	ands	r3, r2
 8008c36:	b25b      	sxtb	r3, r3
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	7023      	strb	r3, [r4, #0]
 8008c3c:	e005      	b.n	8008c4a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x316>
    case INVERSE: *pBuf ^=  mask;  break;
 8008c3e:	7823      	ldrb	r3, [r4, #0]
 8008c40:	ea88 0303 	eor.w	r3, r8, r3
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	7023      	strb	r3, [r4, #0]
 8008c48:	bf00      	nop
    if(h<mod) { return; }
 8008c4a:	42b5      	cmp	r5, r6
 8008c4c:	d355      	bcc.n	8008cfa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c6>
    h -= mod;
 8008c4e:	1bab      	subs	r3, r5, r6
 8008c50:	b2dd      	uxtb	r5, r3
    pBuf += SSD1306_LCDWIDTH;
 8008c52:	3480      	adds	r4, #128	; 0x80
  if(h >= 8)
 8008c54:	2d07      	cmp	r5, #7
 8008c56:	d91d      	bls.n	8008c94 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x360>
    if (color == INVERSE) 
 8008c58:	8a3b      	ldrh	r3, [r7, #16]
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d10a      	bne.n	8008c74 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x340>
      *pBuf=~(*pBuf);
 8008c5e:	7823      	ldrb	r3, [r4, #0]
 8008c60:	43db      	mvns	r3, r3
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	7023      	strb	r3, [r4, #0]
        pBuf += SSD1306_LCDWIDTH;
 8008c66:	3480      	adds	r4, #128	; 0x80
        h -= 8;
 8008c68:	f1a5 0308 	sub.w	r3, r5, #8
 8008c6c:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 8008c6e:	2d07      	cmp	r5, #7
 8008c70:	d910      	bls.n	8008c94 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x360>
      do
 8008c72:	e7f4      	b.n	8008c5e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x32a>
      register uint8_t val = (color == WHITE) ? 255 : 0;
 8008c74:	8a3b      	ldrh	r3, [r7, #16]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d101      	bne.n	8008c7e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x34a>
 8008c7a:	23ff      	movs	r3, #255	; 0xff
 8008c7c:	e000      	b.n	8008c80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x34c>
 8008c7e:	2300      	movs	r3, #0
 8008c80:	461e      	mov	r6, r3
      *pBuf = val;
 8008c82:	4633      	mov	r3, r6
 8008c84:	7023      	strb	r3, [r4, #0]
        pBuf += SSD1306_LCDWIDTH;
 8008c86:	3480      	adds	r4, #128	; 0x80
        h -= 8;
 8008c88:	f1a5 0308 	sub.w	r3, r5, #8
 8008c8c:	b2dd      	uxtb	r5, r3
      } while(h >= 8);
 8008c8e:	2d07      	cmp	r5, #7
 8008c90:	d900      	bls.n	8008c94 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x360>
      do  {
 8008c92:	e7f6      	b.n	8008c82 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x34e>
  if(h)
 8008c94:	2d00      	cmp	r5, #0
 8008c96:	d031      	beq.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
    mod = h & 7;
 8008c98:	f005 0307 	and.w	r3, r5, #7
 8008c9c:	b2de      	uxtb	r6, r3
    register uint8_t mask = postmask[mod];
 8008c9e:	4632      	mov	r2, r6
 8008ca0:	4b1b      	ldr	r3, [pc, #108]	; (8008d10 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3dc>)
 8008ca2:	5c9d      	ldrb	r5, [r3, r2]
    switch (color)
 8008ca4:	8a3b      	ldrh	r3, [r7, #16]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d014      	beq.n	8008cd4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a0>
 8008caa:	2b02      	cmp	r3, #2
 8008cac:	dc26      	bgt.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d006      	beq.n	8008cc0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x38c>
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d122      	bne.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
      case WHITE:   *pBuf |=  mask;  break;
 8008cb6:	7823      	ldrb	r3, [r4, #0]
 8008cb8:	432b      	orrs	r3, r5
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	7023      	strb	r3, [r4, #0]
 8008cbe:	e01d      	b.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
      case BLACK:   *pBuf &= ~mask;  break;
 8008cc0:	7823      	ldrb	r3, [r4, #0]
 8008cc2:	b25a      	sxtb	r2, r3
 8008cc4:	b26b      	sxtb	r3, r5
 8008cc6:	43db      	mvns	r3, r3
 8008cc8:	b25b      	sxtb	r3, r3
 8008cca:	4013      	ands	r3, r2
 8008ccc:	b25b      	sxtb	r3, r3
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	7023      	strb	r3, [r4, #0]
 8008cd2:	e013      	b.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
      case INVERSE: *pBuf ^=  mask;  break;
 8008cd4:	7823      	ldrb	r3, [r4, #0]
 8008cd6:	406b      	eors	r3, r5
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	7023      	strb	r3, [r4, #0]
 8008cdc:	e00e      	b.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  if(y < 0 || y >= HEIGHT) { return; }
 8008cde:	bf00      	nop
 8008ce0:	e00c      	b.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  if(w <= 0) { return; }
 8008ce2:	bf00      	nop
 8008ce4:	e00a      	b.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  case WHITE:         while(w--) { *pBuf++ |= mask; }; break;
 8008ce6:	bf00      	nop
 8008ce8:	e008      	b.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
    case BLACK: mask = ~mask;   while(w--) { *pBuf++ &= mask; }; break;
 8008cea:	bf00      	nop
 8008cec:	e006      	b.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  case INVERSE:         while(w--) { *pBuf++ ^= mask; }; break;
 8008cee:	bf00      	nop
 8008cf0:	e004      	b.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
  if(x < 0 || x >= WIDTH) { return; }
 8008cf2:	bf00      	nop
 8008cf4:	e002      	b.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
    return;
 8008cf6:	bf00      	nop
 8008cf8:	e000      	b.n	8008cfc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3c8>
    if(h<mod) { return; }
 8008cfa:	bf00      	nop
}
 8008cfc:	bf00      	nop
 8008cfe:	3734      	adds	r7, #52	; 0x34
 8008d00:	46bd      	mov	sp, r7
 8008d02:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8008d06:	4770      	bx	lr
 8008d08:	20000090 	.word	0x20000090
 8008d0c:	20000290 	.word	0x20000290
 8008d10:	20000298 	.word	0x20000298

08008d14 <_ZN16Adafruit_SSD13066memsetEPhtt>:
    }
  }
}

void Adafruit_SSD1306::memset(uint8_t buffer[], uint16_t start_address, uint16_t destination_address)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b087      	sub	sp, #28
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	4611      	mov	r1, r2
 8008d20:	461a      	mov	r2, r3
 8008d22:	460b      	mov	r3, r1
 8008d24:	80fb      	strh	r3, [r7, #6]
 8008d26:	4613      	mov	r3, r2
 8008d28:	80bb      	strh	r3, [r7, #4]
  uint16_t x;
  
  for(x = start_address; x < destination_address; x++)
 8008d2a:	88fb      	ldrh	r3, [r7, #6]
 8008d2c:	82fb      	strh	r3, [r7, #22]
 8008d2e:	8afa      	ldrh	r2, [r7, #22]
 8008d30:	88bb      	ldrh	r3, [r7, #4]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d208      	bcs.n	8008d48 <_ZN16Adafruit_SSD13066memsetEPhtt+0x34>
  {
    buffer[x] = 0x00;
 8008d36:	8afb      	ldrh	r3, [r7, #22]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	701a      	strb	r2, [r3, #0]
  for(x = start_address; x < destination_address; x++)
 8008d40:	8afb      	ldrh	r3, [r7, #22]
 8008d42:	3301      	adds	r3, #1
 8008d44:	82fb      	strh	r3, [r7, #22]
 8008d46:	e7f2      	b.n	8008d2e <_ZN16Adafruit_SSD13066memsetEPhtt+0x1a>
  }
}
 8008d48:	bf00      	nop
 8008d4a:	371c      	adds	r7, #28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <_ZN16Adafruit_SSD13066printfEPKc>:


//========================================================================
void Adafruit_SSD1306::printf( const char* _format )
//========================================================================
{
 8008d54:	b590      	push	{r4, r7, lr}
 8008d56:	b093      	sub	sp, #76	; 0x4c
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	6039      	str	r1, [r7, #0]
    uint16_t i, j;
    uint8_t page;

    int bIsCharHan;

    page = cursor_y / 8;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	da00      	bge.n	8008d6a <_ZN16Adafruit_SSD13066printfEPKc+0x16>
 8008d68:	3307      	adds	r3, #7
 8008d6a:	10db      	asrs	r3, r3, #3
 8008d6c:	b21b      	sxth	r3, r3
 8008d6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#if defined(_WIN32) || !defined(PHANFONT_LOCAL)		//	문자코드 변환 사용 X

    const char *format;
    //	Windows에선 Multibyte문자열은 UTF-8파일이라도,
    //		자동으로 CP949로 변환되어 저장됨.
    format = _format;
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	633b      	str	r3, [r7, #48]	; 0x30
    memset( (uint8_t *)format, 0, 128 );
    UTF8ToCP949( _format, format );

#endif

    if ( dbg )
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d004      	beq.n	8008d8a <_ZN16Adafruit_SSD13066printfEPKc+0x36>
    {
    	::printf( "%s - Text:%s\n", __func__, format );
 8008d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d82:	4994      	ldr	r1, [pc, #592]	; (8008fd4 <_ZN16Adafruit_SSD13066printfEPKc+0x280>)
 8008d84:	4894      	ldr	r0, [pc, #592]	; (8008fd8 <_ZN16Adafruit_SSD13066printfEPKc+0x284>)
 8008d86:	f001 fe29 	bl	800a9dc <iprintf>
    }

    for ( i = 0; format[i] != '\0'; i++ )
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008d90:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008d94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d96:	4413      	add	r3, r2
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f000 8115 	beq.w	8008fca <_ZN16Adafruit_SSD13066printfEPKc+0x276>
    {
        //  한글체크
        if ( (uint8_t)format[i] > 0x80 )		//	문자.
 8008da0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008da6:	4413      	add	r3, r2
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b80      	cmp	r3, #128	; 0x80
 8008dac:	f240 8081 	bls.w	8008eb2 <_ZN16Adafruit_SSD13066printfEPKc+0x15e>
        {
            bIsCharHan = 1;
 8008db0:	2301      	movs	r3, #1
 8008db2:	643b      	str	r3, [r7, #64]	; 0x40

            //	한글폰트
            PHan_HanFontLoad( (const uint8_t *)&format[i], &FontPtr );
 8008db4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dba:	4413      	add	r3, r2
 8008dbc:	f107 0208 	add.w	r2, r7, #8
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 f99e 	bl	8009104 <PHan_HanFontLoad>

            for ( j = 0; j < 16; j++ )
 8008dc8:	2300      	movs	r3, #0
 8008dca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008dce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008dd2:	2b0f      	cmp	r3, #15
 8008dd4:	f200 80eb 	bhi.w	8008fae <_ZN16Adafruit_SSD13066printfEPKc+0x25a>
            {
                uint16_t	dotByte;
                int bIdx;

                //	2 Byte - 한글
                dotByte = FontPtr.FontBuffer[j * 2];
 8008dd8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008ddc:	005b      	lsls	r3, r3, #1
 8008dde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008de2:	4413      	add	r3, r2
 8008de4:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8008de8:	85bb      	strh	r3, [r7, #44]	; 0x2c
                dotByte |= ( FontPtr.FontBuffer[( j * 2 ) + 1] ) << 8;
 8008dea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008dee:	005b      	lsls	r3, r3, #1
 8008df0:	3301      	adds	r3, #1
 8008df2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008df6:	4413      	add	r3, r2
 8008df8:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8008dfc:	021b      	lsls	r3, r3, #8
 8008dfe:	b21a      	sxth	r2, r3
 8008e00:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008e04:	4313      	orrs	r3, r2
 8008e06:	b21b      	sxth	r3, r3
 8008e08:	85bb      	strh	r3, [r7, #44]	; 0x2c

                //  16 X 16 Font ( 한글 )
                for ( bIdx = 0; bIdx < 16; bIdx++ )
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e10:	2b0f      	cmp	r3, #15
 8008e12:	dc48      	bgt.n	8008ea6 <_ZN16Adafruit_SSD13066printfEPKc+0x152>
                {
                    if ( dotByte & bitval_r[bIdx] )
 8008e14:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8008e16:	4971      	ldr	r1, [pc, #452]	; (8008fdc <_ZN16Adafruit_SSD13066printfEPKc+0x288>)
 8008e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e1e:	4013      	ands	r3, r2
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d01e      	beq.n	8008e62 <_ZN16Adafruit_SSD13066printfEPKc+0x10e>
                    {
                        drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 1 );
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681c      	ldr	r4, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008e30:	b29a      	uxth	r2, r3
 8008e32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	b29a      	uxth	r2, r3
 8008e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	4413      	add	r3, r2
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	b219      	sxth	r1, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008e54:	4413      	add	r3, r2
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	b21a      	sxth	r2, r3
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	47a0      	blx	r4
 8008e60:	e01d      	b.n	8008e9e <_ZN16Adafruit_SSD13066printfEPKc+0x14a>
                    }
                    else
                    {
                        drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 0 );
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681c      	ldr	r4, [r3, #0]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008e74:	00db      	lsls	r3, r3, #3
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	4413      	add	r3, r2
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	4413      	add	r3, r2
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	b219      	sxth	r1, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008e92:	4413      	add	r3, r2
 8008e94:	b29b      	uxth	r3, r3
 8008e96:	b21a      	sxth	r2, r3
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	47a0      	blx	r4
                for ( bIdx = 0; bIdx < 16; bIdx++ )
 8008e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea0:	3301      	adds	r3, #1
 8008ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ea4:	e7b3      	b.n	8008e0e <_ZN16Adafruit_SSD13066printfEPKc+0xba>
            for ( j = 0; j < 16; j++ )
 8008ea6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008eaa:	3301      	adds	r3, #1
 8008eac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008eb0:	e78d      	b.n	8008dce <_ZN16Adafruit_SSD13066printfEPKc+0x7a>
                }
            }
        }
        else
        {
            bIsCharHan = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	643b      	str	r3, [r7, #64]	; 0x40

            //	영문폰트
            //*
            PHan_EngFontLoad( (const uint8_t*)&format[i], &FontPtr );
 8008eb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f107 0208 	add.w	r2, r7, #8
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 f93f 	bl	8009148 <PHan_EngFontLoad>

            for ( j = 0; j < 16; j++ )
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008ed0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008ed4:	2b0f      	cmp	r3, #15
 8008ed6:	d86a      	bhi.n	8008fae <_ZN16Adafruit_SSD13066printfEPKc+0x25a>
            {
                uint16_t	dotByte;
                int bIdx;

                dotByte = FontPtr.FontBuffer[j];
 8008ed8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008edc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8008ee6:	85fb      	strh	r3, [r7, #46]	; 0x2e
                dotByte |= ( FontPtr.FontBuffer[j + 1] ) << 8;
 8008ee8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008eec:	3301      	adds	r3, #1
 8008eee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8008ef8:	021b      	lsls	r3, r3, #8
 8008efa:	b21a      	sxth	r2, r3
 8008efc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008f00:	4313      	orrs	r3, r2
 8008f02:	b21b      	sxth	r3, r3
 8008f04:	85fb      	strh	r3, [r7, #46]	; 0x2e

                //  8 X 16 Font ( 영문 )
                for ( bIdx = 0; bIdx < 8; bIdx++ )
 8008f06:	2300      	movs	r3, #0
 8008f08:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0c:	2b07      	cmp	r3, #7
 8008f0e:	dc48      	bgt.n	8008fa2 <_ZN16Adafruit_SSD13066printfEPKc+0x24e>
                {
                    if ( dotByte & bitval_r[bIdx] )
 8008f10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f12:	4932      	ldr	r1, [pc, #200]	; (8008fdc <_ZN16Adafruit_SSD13066printfEPKc+0x288>)
 8008f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01e      	beq.n	8008f5e <_ZN16Adafruit_SSD13066printfEPKc+0x20a>
                    {
                        drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 1 );
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681c      	ldr	r4, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008f32:	00db      	lsls	r3, r3, #3
 8008f34:	b29b      	uxth	r3, r3
 8008f36:	4413      	add	r3, r2
 8008f38:	b29a      	uxth	r2, r3
 8008f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	4413      	add	r3, r2
 8008f40:	b29b      	uxth	r3, r3
 8008f42:	b219      	sxth	r1, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008f50:	4413      	add	r3, r2
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	b21a      	sxth	r2, r3
 8008f56:	2301      	movs	r3, #1
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	47a0      	blx	r4
 8008f5c:	e01d      	b.n	8008f9a <_ZN16Adafruit_SSD13066printfEPKc+0x246>
                    }
                    else
                    {
                        drawPixel( cursor_x + i * 8 + bIdx, cursor_y + j, 0 );
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681c      	ldr	r4, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008f70:	00db      	lsls	r3, r3, #3
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4413      	add	r3, r2
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	4413      	add	r3, r2
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	b219      	sxth	r1, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008f8e:	4413      	add	r3, r2
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	b21a      	sxth	r2, r3
 8008f94:	2300      	movs	r3, #0
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	47a0      	blx	r4
                for ( bIdx = 0; bIdx < 8; bIdx++ )
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fa0:	e7b3      	b.n	8008f0a <_ZN16Adafruit_SSD13066printfEPKc+0x1b6>
            for ( j = 0; j < 16; j++ )
 8008fa2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008fac:	e790      	b.n	8008ed0 <_ZN16Adafruit_SSD13066printfEPKc+0x17c>
            }
            //  */
        }


        if ( bIsCharHan )
 8008fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d004      	beq.n	8008fbe <_ZN16Adafruit_SSD13066printfEPKc+0x26a>
        {
            //  한글인경우 2 Byte
            i++;
 8008fb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008fb8:	3301      	adds	r3, #1
 8008fba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    for ( i = 0; format[i] != '\0'; i++ )
 8008fbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008fc8:	e6e2      	b.n	8008d90 <_ZN16Adafruit_SSD13066printfEPKc+0x3c>
        }

    }
}
 8008fca:	bf00      	nop
 8008fcc:	374c      	adds	r7, #76	; 0x4c
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd90      	pop	{r4, r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	0800c014 	.word	0x0800c014
 8008fd8:	0800c01c 	.word	0x0800c01c
 8008fdc:	0800cc10 	.word	0x0800cc10

08008fe0 <LCDInit>:
int g_bInitLCD = 0;

//========================================================================
int LCDInit( void )
//========================================================================
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
    display.begin( SSD1306_SWITCHCAPVCC, 0x78 );
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	2278      	movs	r2, #120	; 0x78
 8008fe8:	2102      	movs	r1, #2
 8008fea:	4804      	ldr	r0, [pc, #16]	; (8008ffc <LCDInit+0x1c>)
 8008fec:	f7ff f982 	bl	80082f4 <_ZN16Adafruit_SSD13065beginEhhb>

    g_bInitLCD = 1;
 8008ff0:	4b03      	ldr	r3, [pc, #12]	; (8009000 <LCDInit+0x20>)
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	601a      	str	r2, [r3, #0]

    return 0;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	20000330 	.word	0x20000330
 8009000:	20000350 	.word	0x20000350

08009004 <LCDSetCursor>:


//========================================================================
void LCDSetCursor( int x, int y )
//========================================================================
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b082      	sub	sp, #8
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
    if ( g_bInitLCD == false ) return;
 800900e:	4b08      	ldr	r3, [pc, #32]	; (8009030 <LCDSetCursor+0x2c>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d008      	beq.n	8009028 <LCDSetCursor+0x24>

    display.setCursor( x, y );
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	b21b      	sxth	r3, r3
 800901a:	683a      	ldr	r2, [r7, #0]
 800901c:	b212      	sxth	r2, r2
 800901e:	4619      	mov	r1, r3
 8009020:	4804      	ldr	r0, [pc, #16]	; (8009034 <LCDSetCursor+0x30>)
 8009022:	f7fe fffa 	bl	800801a <_ZN12Adafruit_GFX9setCursorEss>
 8009026:	e000      	b.n	800902a <LCDSetCursor+0x26>
    if ( g_bInitLCD == false ) return;
 8009028:	bf00      	nop
}
 800902a:	3708      	adds	r7, #8
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	20000350 	.word	0x20000350
 8009034:	20000330 	.word	0x20000330

08009038 <LCDPrintf>:
}

//========================================================================
void LCDPrintf( char * str )
//========================================================================
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b086      	sub	sp, #24
 800903c:	af02      	add	r7, sp, #8
 800903e:	6078      	str	r0, [r7, #4]
    if ( g_bInitLCD == false ) return;
 8009040:	4b14      	ldr	r3, [pc, #80]	; (8009094 <LCDPrintf+0x5c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d020      	beq.n	800908a <LCDPrintf+0x52>
//    display.clearDisplay();

    //  (0, 11) ~ (128, 32 )
    int16_t x, y;

    display.getCursor( &x, &y );
 8009048:	f107 020c 	add.w	r2, r7, #12
 800904c:	f107 030e 	add.w	r3, r7, #14
 8009050:	4619      	mov	r1, r3
 8009052:	4811      	ldr	r0, [pc, #68]	; (8009098 <LCDPrintf+0x60>)
 8009054:	f7fe fff5 	bl	8008042 <_ZN12Adafruit_GFX9getCursorEPsS0_>

    //	글씨 출력 영역 Clear
    display.fillRect( x, 11, 128 - x, 21, 0 );    //  Clear
 8009058:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800905c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009060:	b29b      	uxth	r3, r3
 8009062:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009066:	b29b      	uxth	r3, r3
 8009068:	b21b      	sxth	r3, r3
 800906a:	2200      	movs	r2, #0
 800906c:	9201      	str	r2, [sp, #4]
 800906e:	2215      	movs	r2, #21
 8009070:	9200      	str	r2, [sp, #0]
 8009072:	220b      	movs	r2, #11
 8009074:	4808      	ldr	r0, [pc, #32]	; (8009098 <LCDPrintf+0x60>)
 8009076:	f7fe ff82 	bl	8007f7e <_ZN12Adafruit_GFX8fillRectEsssst>

//    display.setCursor( 28, 8 );
    display.printf( str );
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	4806      	ldr	r0, [pc, #24]	; (8009098 <LCDPrintf+0x60>)
 800907e:	f7ff fe69 	bl	8008d54 <_ZN16Adafruit_SSD13066printfEPKc>
    display.display();
 8009082:	4805      	ldr	r0, [pc, #20]	; (8009098 <LCDPrintf+0x60>)
 8009084:	f7ff fa26 	bl	80084d4 <_ZN16Adafruit_SSD13067displayEv>
 8009088:	e000      	b.n	800908c <LCDPrintf+0x54>
    if ( g_bInitLCD == false ) return;
 800908a:	bf00      	nop
}
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20000350 	.word	0x20000350
 8009098:	20000330 	.word	0x20000330

0800909c <LCDClear>:
}

//========================================================================
void LCDClear( void )
//========================================================================
{
 800909c:	b580      	push	{r7, lr}
 800909e:	af00      	add	r7, sp, #0
    if ( g_bInitLCD == false ) return;
 80090a0:	4b06      	ldr	r3, [pc, #24]	; (80090bc <LCDClear+0x20>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d006      	beq.n	80090b6 <LCDClear+0x1a>

    display.clearDisplay();
 80090a8:	4805      	ldr	r0, [pc, #20]	; (80090c0 <LCDClear+0x24>)
 80090aa:	f7ff fa43 	bl	8008534 <_ZN16Adafruit_SSD130612clearDisplayEv>
    display.display();
 80090ae:	4804      	ldr	r0, [pc, #16]	; (80090c0 <LCDClear+0x24>)
 80090b0:	f7ff fa10 	bl	80084d4 <_ZN16Adafruit_SSD13067displayEv>
 80090b4:	e000      	b.n	80090b8 <LCDClear+0x1c>
    if ( g_bInitLCD == false ) return;
 80090b6:	bf00      	nop
}
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20000350 	.word	0x20000350
 80090c0:	20000330 	.word	0x20000330

080090c4 <_Z41__static_initialization_and_destruction_0ii>:
    display.drawBitmap( 30, 16, logo16_glcd_bmp, 16, 16, 1 );
    display.display();
    HAL_Delay( 500 );
#endif

}
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
 80090cc:	6039      	str	r1, [r7, #0]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d108      	bne.n	80090e6 <_Z41__static_initialization_and_destruction_0ii+0x22>
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80090da:	4293      	cmp	r3, r2
 80090dc:	d103      	bne.n	80090e6 <_Z41__static_initialization_and_destruction_0ii+0x22>
Adafruit_SSD1306 display( OLED_RESET );
 80090de:	2100      	movs	r1, #0
 80090e0:	4803      	ldr	r0, [pc, #12]	; (80090f0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80090e2:	f7ff f8d9 	bl	8008298 <_ZN16Adafruit_SSD1306C1Ea>
}
 80090e6:	bf00      	nop
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	20000330 	.word	0x20000330

080090f4 <_GLOBAL__sub_I_Buffer_CMD>:
 80090f4:	b580      	push	{r7, lr}
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80090fc:	2001      	movs	r0, #1
 80090fe:	f7ff ffe1 	bl	80090c4 <_Z41__static_initialization_and_destruction_0ii>
 8009102:	bd80      	pop	{r7, pc}

08009104 <PHan_HanFontLoad>:
//========================================================================

//========================================================================
void PHan_HanFontLoad( const uint8_t *HanCode, PHAN_FONT_OBJ *FontPtr )   /* 한글 일반 폰트 생성 */
//========================================================================
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
	int i;

	FontPtr->Code_Type = PHAN_HANGUL_CODE;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2201      	movs	r2, #1
 8009112:	70da      	strb	r2, [r3, #3]
	FontPtr->Size_Char = 2;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	2202      	movs	r2, #2
 8009118:	709a      	strb	r2, [r3, #2]

	for ( i = 0; i < 32; i++ )
 800911a:	2300      	movs	r3, #0
 800911c:	60fb      	str	r3, [r7, #12]
 800911e:	e008      	b.n	8009132 <PHan_HanFontLoad+0x2e>
	{
		FontPtr->FontBuffer[i] = 0xFF;
 8009120:	683a      	ldr	r2, [r7, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	4413      	add	r3, r2
 8009126:	3304      	adds	r3, #4
 8009128:	22ff      	movs	r2, #255	; 0xff
 800912a:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < 32; i++ )
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	3301      	adds	r3, #1
 8009130:	60fb      	str	r3, [r7, #12]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2b1f      	cmp	r3, #31
 8009136:	ddf3      	ble.n	8009120 <PHan_HanFontLoad+0x1c>
	}
}
 8009138:	bf00      	nop
 800913a:	bf00      	nop
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr
	...

08009148 <PHan_EngFontLoad>:
//========================================================================

//========================================================================
void PHan_EngFontLoad( const uint8_t *HanCode, PHAN_FONT_OBJ *FontPtr ) 
//========================================================================
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
	uint16_t i;
	char EngCode;

	FontPtr->Code_Type = PHAN_ENG_CODE;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2202      	movs	r2, #2
 8009156:	70da      	strb	r2, [r3, #3]
	FontPtr->Size_Char = 1;
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	2201      	movs	r2, #1
 800915c:	709a      	strb	r2, [r3, #2]

	EngCode = *HanCode;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	737b      	strb	r3, [r7, #13]

	EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8009164:	7b7b      	ldrb	r3, [r7, #13]
 8009166:	3b20      	subs	r3, #32
 8009168:	737b      	strb	r3, [r7, #13]

	for ( i = 0 ; i < 16 ; i++ )
 800916a:	2300      	movs	r3, #0
 800916c:	81fb      	strh	r3, [r7, #14]
 800916e:	e00f      	b.n	8009190 <PHan_EngFontLoad+0x48>
	{
		 FontPtr->FontBuffer[ i ] = wEngFon[EngCode][i];		
 8009170:	7b7a      	ldrb	r2, [r7, #13]
 8009172:	89fb      	ldrh	r3, [r7, #14]
 8009174:	490b      	ldr	r1, [pc, #44]	; (80091a4 <PHan_EngFontLoad+0x5c>)
 8009176:	0112      	lsls	r2, r2, #4
 8009178:	4413      	add	r3, r2
 800917a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800917e:	89fb      	ldrh	r3, [r7, #14]
 8009180:	b2d1      	uxtb	r1, r2
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	4413      	add	r3, r2
 8009186:	460a      	mov	r2, r1
 8009188:	711a      	strb	r2, [r3, #4]
	for ( i = 0 ; i < 16 ; i++ )
 800918a:	89fb      	ldrh	r3, [r7, #14]
 800918c:	3301      	adds	r3, #1
 800918e:	81fb      	strh	r3, [r7, #14]
 8009190:	89fb      	ldrh	r3, [r7, #14]
 8009192:	2b0f      	cmp	r3, #15
 8009194:	d9ec      	bls.n	8009170 <PHan_EngFontLoad+0x28>
	}
}
 8009196:	bf00      	nop
 8009198:	bf00      	nop
 800919a:	3714      	adds	r7, #20
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr
 80091a4:	0800cc74 	.word	0x0800cc74

080091a8 <init_queue>:


//===========================================================================
void init_queue( Queue_t *q )
//===========================================================================
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
	q->front = q->rear = 0;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
 80091c4:	bf00      	nop
 80091c6:	370c      	adds	r7, #12
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <qcount>:
}

//===========================================================================
int qcount( Queue_t *q )
//===========================================================================
{
 80091d0:	b480      	push	{r7}
 80091d2:	b083      	sub	sp, #12
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	return (((q->rear+QMAX)-q->front) % QMAX);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80091de:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	425a      	negs	r2, r3
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	b2d2      	uxtb	r2, r2
 80091f0:	bf58      	it	pl
 80091f2:	4253      	negpl	r3, r2
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <qput>:

//===========================================================================
int qput( Queue_t *q, unsigned char k )
//===========================================================================
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
 8009208:	460b      	mov	r3, r1
 800920a:	70fb      	strb	r3, [r7, #3]
	if ( (q->rear + 1) % QMAX == q->front )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009212:	3301      	adds	r3, #1
 8009214:	425a      	negs	r2, r3
 8009216:	b2db      	uxtb	r3, r3
 8009218:	b2d2      	uxtb	r2, r2
 800921a:	bf58      	it	pl
 800921c:	4253      	negpl	r3, r2
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8009224:	4293      	cmp	r3, r2
 8009226:	d102      	bne.n	800922e <qput+0x2e>
	{
//		printf( "\n\tCircular Queue Overflow." );
//		printf( "\n\tQOver" );
		return -1;
 8009228:	f04f 33ff 	mov.w	r3, #4294967295
 800922c:	e012      	b.n	8009254 <qput+0x54>
	}
	q->queue[q->rear] = k;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	78f9      	ldrb	r1, [r7, #3]
 8009238:	54d1      	strb	r1, [r2, r3]
	q->rear = (q->rear + 1) % QMAX;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8009240:	3301      	adds	r3, #1
 8009242:	425a      	negs	r2, r3
 8009244:	b2db      	uxtb	r3, r3
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	bf58      	it	pl
 800924a:	4253      	negpl	r3, r2
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
	return k;
 8009252:	78fb      	ldrb	r3, [r7, #3]
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <qget>:

//===========================================================================
unsigned char qget( Queue_t *q )
//===========================================================================
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
	if(front == rear){
		printf("\n\tCircular Queue Underflow.");
		return -1;
	}
	*/
	i = q->queue[q->front];
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	5cd3      	ldrb	r3, [r2, r3]
 8009272:	73fb      	strb	r3, [r7, #15]
	q->front = (q->front + 1) % QMAX;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800927a:	3301      	adds	r3, #1
 800927c:	425a      	negs	r2, r3
 800927e:	b2db      	uxtb	r3, r3
 8009280:	b2d2      	uxtb	r2, r2
 8009282:	bf58      	it	pl
 8009284:	4253      	negpl	r3, r2
 8009286:	687a      	ldr	r2, [r7, #4]
 8009288:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	return i;
 800928c:	7bfb      	ldrb	r3, [r7, #15]
}
 800928e:	4618      	mov	r0, r3
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
	...

0800929c <HAL_I2SEx_TxRxCpltCallback>:
  * @retval None
  */
//========================================================================
void HAL_I2SEx_TxRxCpltCallback( I2S_HandleTypeDef *hi2s )
//========================================================================
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
			  the HAL_I2S_RxCpltCallback could be implemented in the user file
	 */

//	printf( "%s(%d)\n", __func__, __LINE__ );

	if ( pCallback_I2SEx_TxRxCpltCallback )
 80092a4:	4b0b      	ldr	r3, [pc, #44]	; (80092d4 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d004      	beq.n	80092b6 <HAL_I2SEx_TxRxCpltCallback+0x1a>
	{
		pCallback_I2SEx_TxRxCpltCallback( hi2s );
 80092ac:	4b09      	ldr	r3, [pc, #36]	; (80092d4 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	4798      	blx	r3
		//	Default Loopback
		//	pAudioTable = sine_table;
		memcpy( &bufAudio[0], &bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE * 2 );
		HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE );
	}
}
 80092b4:	e00a      	b.n	80092cc <HAL_I2SEx_TxRxCpltCallback+0x30>
		memcpy( &bufAudio[0], &bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE * 2 );
 80092b6:	223c      	movs	r2, #60	; 0x3c
 80092b8:	4907      	ldr	r1, [pc, #28]	; (80092d8 <HAL_I2SEx_TxRxCpltCallback+0x3c>)
 80092ba:	4808      	ldr	r0, [pc, #32]	; (80092dc <HAL_I2SEx_TxRxCpltCallback+0x40>)
 80092bc:	f001 fb78 	bl	800a9b0 <memcpy>
		HAL_I2SEx_TransmitReceive_DMA( &hi2s3, (uint16_t*)bufAudio, (uint16_t*)&bufAudio[I2S_DMA_LOOP_SIZE], I2S_DMA_LOOP_SIZE );
 80092c0:	231e      	movs	r3, #30
 80092c2:	4a05      	ldr	r2, [pc, #20]	; (80092d8 <HAL_I2SEx_TxRxCpltCallback+0x3c>)
 80092c4:	4905      	ldr	r1, [pc, #20]	; (80092dc <HAL_I2SEx_TxRxCpltCallback+0x40>)
 80092c6:	4806      	ldr	r0, [pc, #24]	; (80092e0 <HAL_I2SEx_TxRxCpltCallback+0x44>)
 80092c8:	f7fb fb18 	bl	80048fc <HAL_I2SEx_TransmitReceive_DMA>
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	200005d4 	.word	0x200005d4
 80092d8:	20000390 	.word	0x20000390
 80092dc:	20000354 	.word	0x20000354
 80092e0:	200009e0 	.word	0x200009e0

080092e4 <GetBootMode>:
}

//========================================================================
int GetBootMode( void )
//========================================================================
{
 80092e4:	b480      	push	{r7}
 80092e6:	af00      	add	r7, sp, #0
	return g_nBootMode;
 80092e8:	4b03      	ldr	r3, [pc, #12]	; (80092f8 <GetBootMode+0x14>)
 80092ea:	681b      	ldr	r3, [r3, #0]
}
 80092ec:	4618      	mov	r0, r3
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	200002a0 	.word	0x200002a0

080092fc <_GetDevID>:
//========================================================================

//========================================================================
int _GetDevID    ( void )
//========================================================================
{
 80092fc:	b480      	push	{r7}
 80092fe:	af00      	add	r7, sp, #0
	return s_nDevID;
 8009300:	4b03      	ldr	r3, [pc, #12]	; (8009310 <_GetDevID+0x14>)
 8009302:	681b      	ldr	r3, [r3, #0]
}
 8009304:	4618      	mov	r0, r3
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr
 800930e:	bf00      	nop
 8009310:	200005d8 	.word	0x200005d8

08009314 <_SetDevID>:

//========================================================================
void _SetDevID    ( int nDevID )
//========================================================================
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	printf( "%s : %s(%d)\n", __func__,
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d101      	bne.n	8009326 <_SetDevID+0x12>
 8009322:	4a07      	ldr	r2, [pc, #28]	; (8009340 <_SetDevID+0x2c>)
 8009324:	e000      	b.n	8009328 <_SetDevID+0x14>
 8009326:	4a07      	ldr	r2, [pc, #28]	; (8009344 <_SetDevID+0x30>)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4907      	ldr	r1, [pc, #28]	; (8009348 <_SetDevID+0x34>)
 800932c:	4807      	ldr	r0, [pc, #28]	; (800934c <_SetDevID+0x38>)
 800932e:	f001 fb55 	bl	800a9dc <iprintf>
							( nDevID == DevRF900M )? "RFM":"RFT",
							nDevID );
	s_nDevID = nDevID;
 8009332:	4a07      	ldr	r2, [pc, #28]	; (8009350 <_SetDevID+0x3c>)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6013      	str	r3, [r2, #0]
}
 8009338:	bf00      	nop
 800933a:	3708      	adds	r7, #8
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}
 8009340:	0800c214 	.word	0x0800c214
 8009344:	0800c218 	.word	0x0800c218
 8009348:	0800e474 	.word	0x0800e474
 800934c:	0800c21c 	.word	0x0800c21c
 8009350:	200005d8 	.word	0x200005d8

08009354 <JumpToSTBootloader>:

//========================================================================
void JumpToSTBootloader(void)
//========================================================================
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b084      	sub	sp, #16
 8009358:	af00      	add	r7, sp, #0
  pFunction JumpToApplication;
  uint32_t JumpAddress;

  //========================================================================
  //	Disable Watchdog
  MX_IWDG_Disable();
 800935a:	f7f7 f905 	bl	8000568 <MX_IWDG_Disable>
  //========================================================================

  /* Disable all interrupts, clocks and PLLs */
  HAL_RCC_DeInit();
 800935e:	f7fc fd49 	bl	8005df4 <HAL_RCC_DeInit>
  __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();

#endif

  /* Jump to system memory */
  JumpAddress = *(__IO uint32_t*) (SYS_MEM_ADDRESS + 4);
 8009362:	4b09      	ldr	r3, [pc, #36]	; (8009388 <JumpToSTBootloader+0x34>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	60fb      	str	r3, [r7, #12]
  JumpToApplication = (pFunction) JumpAddress;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	60bb      	str	r3, [r7, #8]
  /* Initialize user application's Stack Pointer */
  __set_MSP(*(__IO uint32_t*) SYS_MEM_ADDRESS);
 800936c:	4b07      	ldr	r3, [pc, #28]	; (800938c <JumpToSTBootloader+0x38>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f383 8808 	msr	MSP, r3
}
 8009378:	bf00      	nop
  JumpToApplication();
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	4798      	blx	r3
}
 800937e:	bf00      	nop
 8009380:	3710      	adds	r7, #16
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}
 8009386:	bf00      	nop
 8009388:	1fff0004 	.word	0x1fff0004
 800938c:	1fff0000 	.word	0x1fff0000

08009390 <DispDFUMode>:

//========================================================================
void	DispDFUMode( void )
//========================================================================
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c3, (uint16_t)( SSD1306_I2C_ADDRESS ), 2, 2 ) )
 8009394:	2302      	movs	r3, #2
 8009396:	2202      	movs	r2, #2
 8009398:	2178      	movs	r1, #120	; 0x78
 800939a:	4808      	ldr	r0, [pc, #32]	; (80093bc <DispDFUMode+0x2c>)
 800939c:	f7fa fb5c 	bl	8003a58 <HAL_I2C_IsDeviceReady>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d108      	bne.n	80093b8 <DispDFUMode+0x28>
	{
		//  화면 Clear
		LCDClear();
 80093a6:	f7ff fe79 	bl	800909c <LCDClear>

		LCDSetCursor( 0, 13 );
 80093aa:	210d      	movs	r1, #13
 80093ac:	2000      	movs	r0, #0
 80093ae:	f7ff fe29 	bl	8009004 <LCDSetCursor>
//		LCDPrintf( "DFU Mode" );
		LCDPrintf( "USB Upgrade Mode" );
 80093b2:	4803      	ldr	r0, [pc, #12]	; (80093c0 <DispDFUMode+0x30>)
 80093b4:	f7ff fe40 	bl	8009038 <LCDPrintf>
	}
}
 80093b8:	bf00      	nop
 80093ba:	bd80      	pop	{r7, pc}
 80093bc:	200005f4 	.word	0x200005f4
 80093c0:	0800c22c 	.word	0x0800c22c

080093c4 <InitBoot>:

//========================================================================
int InitBoot( void )
//========================================================================
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	af00      	add	r7, sp, #0
	printf("%s(%d)\n", __func__, __LINE__);
 80093c8:	229d      	movs	r2, #157	; 0x9d
 80093ca:	4911      	ldr	r1, [pc, #68]	; (8009410 <InitBoot+0x4c>)
 80093cc:	4811      	ldr	r0, [pc, #68]	; (8009414 <InitBoot+0x50>)
 80093ce:	f001 fb05 	bl	800a9dc <iprintf>

	I2C_BusScan( &hi2c3 );
 80093d2:	4811      	ldr	r0, [pc, #68]	; (8009418 <InitBoot+0x54>)
 80093d4:	f000 fa32 	bl	800983c <I2C_BusScan>

	//========================================================================
	//	OLED
	if ( HAL_OK == HAL_I2C_IsDeviceReady( &hi2c3, (uint16_t)( SSD1306_I2C_ADDRESS ), 2, 2 ) )
 80093d8:	2302      	movs	r3, #2
 80093da:	2202      	movs	r2, #2
 80093dc:	2178      	movs	r1, #120	; 0x78
 80093de:	480e      	ldr	r0, [pc, #56]	; (8009418 <InitBoot+0x54>)
 80093e0:	f7fa fb3a 	bl	8003a58 <HAL_I2C_IsDeviceReady>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10c      	bne.n	8009404 <InitBoot+0x40>
	{
		//========================================================================
		//	OLED가 연결되어있음.
		_SetDevID( DevRF900T );	 //  송신기.
 80093ea:	2002      	movs	r0, #2
 80093ec:	f7ff ff92 	bl	8009314 <_SetDevID>

		printf("%s(%d) - Init OLED\n", __func__, __LINE__);
 80093f0:	22a9      	movs	r2, #169	; 0xa9
 80093f2:	4907      	ldr	r1, [pc, #28]	; (8009410 <InitBoot+0x4c>)
 80093f4:	4809      	ldr	r0, [pc, #36]	; (800941c <InitBoot+0x58>)
 80093f6:	f001 faf1 	bl	800a9dc <iprintf>

		//	LCD Init
		LCDInit();
 80093fa:	f7ff fdf1 	bl	8008fe0 <LCDInit>
		LCDClear();
 80093fe:	f7ff fe4d 	bl	800909c <LCDClear>
 8009402:	e002      	b.n	800940a <InitBoot+0x46>
	}
	else
	{
		//========================================================================
		//	OLED가 없으면 -> 수신기
		_SetDevID( DevRF900M );	 //  수신기.
 8009404:	2001      	movs	r0, #1
 8009406:	f7ff ff85 	bl	8009314 <_SetDevID>
	}
	//========================================================================
}
 800940a:	bf00      	nop
 800940c:	4618      	mov	r0, r3
 800940e:	bd80      	pop	{r7, pc}
 8009410:	0800e480 	.word	0x0800e480
 8009414:	0800c240 	.word	0x0800c240
 8009418:	200005f4 	.word	0x200005f4
 800941c:	0800c248 	.word	0x0800c248

08009420 <BootLoaderTask>:

//========================================================================
void BootLoaderTask(void)
//========================================================================
{
 8009420:	b580      	push	{r7, lr}
 8009422:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 8009426:	af02      	add	r7, sp, #8
	/* The parameters are not used. */
	int		i, j, k;
	int		fsize = 0;
 8009428:	2300      	movs	r3, #0
 800942a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

	int		readnum = 0, rremain = 0;
 800942e:	2300      	movs	r3, #0
 8009430:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8009434:	2300      	movs	r3, #0
 8009436:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
	uint8_t	adata[512];
//#else
//	uint8_t	*adata;
//#endif

	uint32_t		flashAddr = ADDR_FLASH_APP;	//	0x08020000;
 800943a:	4bb9      	ldr	r3, [pc, #740]	; (8009720 <BootLoaderTask+0x300>)
 800943c:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

	FLASH_EraseInitTypeDef flash1;

	//========================================================================
	InitBoot();
 8009440:	f7ff ffc0 	bl	80093c4 <InitBoot>
	//========================================================================

	HAL_Delay( 500 );
 8009444:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009448:	f7f8 fa9e 	bl	8001988 <HAL_Delay>

	printf( "BootLoader\n" );
 800944c:	48b5      	ldr	r0, [pc, #724]	; (8009724 <BootLoaderTask+0x304>)
 800944e:	f001 fb61 	bl	800ab14 <puts>

	//========================================================================
	//	Y-Modem Master 설정.
	SetYModemMaster( 1 );
 8009452:	2001      	movs	r0, #1
 8009454:	f000 feb2 	bl	800a1bc <SetYModemMaster>
	//	IAP ( In-Application Programming )

	//	Dev ID가 0x00인 경우 ">" 전송.
	uint8_t ch;

	if ( IsYModemMaster() )
 8009458:	f000 fec8 	bl	800a1ec <IsYModemMaster>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00b      	beq.n	800947a <BootLoaderTask+0x5a>
	{
		ch = '>';
 8009462:	f107 030f 	add.w	r3, r7, #15
 8009466:	223e      	movs	r2, #62	; 0x3e
 8009468:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit( &huart2, &ch, 1, TX_TIMEOUT );
 800946a:	f107 010f 	add.w	r1, r7, #15
 800946e:	2364      	movs	r3, #100	; 0x64
 8009470:	2201      	movs	r2, #1
 8009472:	48ad      	ldr	r0, [pc, #692]	; (8009728 <BootLoaderTask+0x308>)
 8009474:	f7fd fc4a 	bl	8006d0c <HAL_UART_Transmit>
 8009478:	e000      	b.n	800947c <BootLoaderTask+0x5c>
	}

	HAL_StatusTypeDef ret;

	CHECK_ENTER:
 800947a:	bf00      	nop
	
	ret = HAL_UART_Receive( &huart2, &ch, 1, 3000 );		//	3 초 Timeout
 800947c:	f107 010f 	add.w	r1, r7, #15
 8009480:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8009484:	2201      	movs	r2, #1
 8009486:	48a8      	ldr	r0, [pc, #672]	; (8009728 <BootLoaderTask+0x308>)
 8009488:	f7fd fcd9 	bl	8006e3e <HAL_UART_Receive>
 800948c:	4603      	mov	r3, r0
 800948e:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f

	if ( ret == HAL_OK )
 8009492:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8009496:	2b00      	cmp	r3, #0
 8009498:	d114      	bne.n	80094c4 <BootLoaderTask+0xa4>
	{
		//	'\r' 엔터 키 수신시. - Y-Modem Upgrade 수행.

		printf( "%s(%d) - RS485 Input : 0x%02X\n", __func__, __LINE__, ch );
 800949a:	f107 030f 	add.w	r3, r7, #15
 800949e:	781b      	ldrb	r3, [r3, #0]
 80094a0:	22f2      	movs	r2, #242	; 0xf2
 80094a2:	49a2      	ldr	r1, [pc, #648]	; (800972c <BootLoaderTask+0x30c>)
 80094a4:	48a2      	ldr	r0, [pc, #648]	; (8009730 <BootLoaderTask+0x310>)
 80094a6:	f001 fa99 	bl	800a9dc <iprintf>

		if ( ch == '>' )
 80094aa:	f107 030f 	add.w	r3, r7, #15
 80094ae:	781b      	ldrb	r3, [r3, #0]
 80094b0:	2b3e      	cmp	r3, #62	; 0x3e
 80094b2:	d100      	bne.n	80094b6 <BootLoaderTask+0x96>
		{
			goto CHECK_ENTER;
 80094b4:	e7e2      	b.n	800947c <BootLoaderTask+0x5c>
		}

		if ( ch == '\r' )
 80094b6:	f107 030f 	add.w	r3, r7, #15
 80094ba:	781b      	ldrb	r3, [r3, #0]
 80094bc:	2b0d      	cmp	r3, #13
 80094be:	d101      	bne.n	80094c4 <BootLoaderTask+0xa4>
		{
			//IAP_Menu();
			SerialDownload();	//	Y-Modem Serial Download
 80094c0:	f000 fd30 	bl	8009f24 <SerialDownload>
		buf[0], buf[1], buf[2], buf[3], buf[4] );

#else

	char buf[10];
    M24_HAL_ReadBytes( &hi2c1, 0xA0, AddrEEPUpgrMGN1, (uint8_t *)buf, 5 );
 80094c4:	1d3b      	adds	r3, r7, #4
 80094c6:	2205      	movs	r2, #5
 80094c8:	9200      	str	r2, [sp, #0]
 80094ca:	2220      	movs	r2, #32
 80094cc:	21a0      	movs	r1, #160	; 0xa0
 80094ce:	4899      	ldr	r0, [pc, #612]	; (8009734 <BootLoaderTask+0x314>)
 80094d0:	f000 fa0e 	bl	80098f0 <M24_HAL_ReadBytes>

#endif

	//========================================================================
	if	(	//	DFU Mode ( Menu + OK + SOS 버튼을 누른상태에서 전원 On )
			(_GetDevID() == DevRF900T) &&
 80094d4:	f7ff ff12 	bl	80092fc <_GetDevID>
 80094d8:	4603      	mov	r3, r0
	if	(	//	DFU Mode ( Menu + OK + SOS 버튼을 누른상태에서 전원 On )
 80094da:	2b02      	cmp	r3, #2
 80094dc:	d11c      	bne.n	8009518 <BootLoaderTask+0xf8>
				( 	HAL_GPIO_ReadPin( DOME1_GPIO_Port, DOME1_Pin ) == 0			//	Menu
 80094de:	2101      	movs	r1, #1
 80094e0:	4895      	ldr	r0, [pc, #596]	; (8009738 <BootLoaderTask+0x318>)
 80094e2:	f7f9 fd01 	bl	8002ee8 <HAL_GPIO_ReadPin>
 80094e6:	4603      	mov	r3, r0
			(_GetDevID() == DevRF900T) &&
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d115      	bne.n	8009518 <BootLoaderTask+0xf8>
					&& HAL_GPIO_ReadPin( DOME3_GPIO_Port, DOME3_Pin ) == 0		//	OK
 80094ec:	2104      	movs	r1, #4
 80094ee:	4892      	ldr	r0, [pc, #584]	; (8009738 <BootLoaderTask+0x318>)
 80094f0:	f7f9 fcfa 	bl	8002ee8 <HAL_GPIO_ReadPin>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d10e      	bne.n	8009518 <BootLoaderTask+0xf8>
					&& HAL_GPIO_ReadPin( SOS_KEY_GPIO_Port, SOS_KEY_Pin ) == 0	//	SOS
 80094fa:	2140      	movs	r1, #64	; 0x40
 80094fc:	488e      	ldr	r0, [pc, #568]	; (8009738 <BootLoaderTask+0x318>)
 80094fe:	f7f9 fcf3 	bl	8002ee8 <HAL_GPIO_ReadPin>
 8009502:	4603      	mov	r3, r0
 8009504:	2b00      	cmp	r3, #0
 8009506:	d107      	bne.n	8009518 <BootLoaderTask+0xf8>
		)
	{
		//========================================================================
		//	Jump to Embedded Bootloader
		//	DFU Mode
		printf("STBootLoader Mode ( DFU Mode )\n");
 8009508:	488c      	ldr	r0, [pc, #560]	; (800973c <BootLoaderTask+0x31c>)
 800950a:	f001 fb03 	bl	800ab14 <puts>

		DispDFUMode();
 800950e:	f7ff ff3f 	bl	8009390 <DispDFUMode>

		JumpToSTBootloader();
 8009512:	f7ff ff1f 	bl	8009354 <JumpToSTBootloader>
 8009516:	e177      	b.n	8009808 <BootLoaderTask+0x3e8>
		//========================================================================
	}
	else if	(	GetBootMode() == BModeBoot				//	Boot Mode로 진입 시.
 8009518:	f7ff fee4 	bl	80092e4 <GetBootMode>
 800951c:	4603      	mov	r3, r0
 800951e:	2b01      	cmp	r3, #1
 8009520:	d106      	bne.n	8009530 <BootLoaderTask+0x110>
			//|| HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11) == 0	//	Test버튼 누른상태에서 Booting 시.
		)
	{
		//	reset 할 때 test 버튼 누를 시
		printf("BootLoader Mode\n");
 8009522:	4887      	ldr	r0, [pc, #540]	; (8009740 <BootLoaderTask+0x320>)
 8009524:	f001 faf6 	bl	800ab14 <puts>
		HAL_Delay(1);
 8009528:	2001      	movs	r0, #1
 800952a:	f7f8 fa2d 	bl	8001988 <HAL_Delay>
 800952e:	e16b      	b.n	8009808 <BootLoaderTask+0x3e8>
	}
#if defined( USE_YMODEM_EXT_FLASH )
	else if ( ( buf[0] == 0xaa ) && ( buf[1] == 0x55 ) )
#else
//	else if ( (*(char*)(0x0801F020) == 0xaa) && (*(char*)(0x0801F021) == 0x55) )
	else if ( ( buf[0] == 0xaa ) && ( buf[1] == 0x55 )
 8009530:	1d3b      	adds	r3, r7, #4
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	2baa      	cmp	r3, #170	; 0xaa
 8009536:	f040 8129 	bne.w	800978c <BootLoaderTask+0x36c>
 800953a:	1d3b      	adds	r3, r7, #4
 800953c:	785b      	ldrb	r3, [r3, #1]
 800953e:	2b55      	cmp	r3, #85	; 0x55
 8009540:	f040 8124 	bne.w	800978c <BootLoaderTask+0x36c>
			 &&	( ( ( *( __IO uint32_t* )ADDR_FLASH_IMGAPP ) & 0x2FF00000 ) == 0x20000000 )		//	Downlaod Image Correct
 8009544:	4b7f      	ldr	r3, [pc, #508]	; (8009744 <BootLoaderTask+0x324>)
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	4b7f      	ldr	r3, [pc, #508]	; (8009748 <BootLoaderTask+0x328>)
 800954a:	4013      	ands	r3, r2
 800954c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009550:	f040 811c 	bne.w	800978c <BootLoaderTask+0x36c>
		)
#endif
	{
		//	Upgrade 할 이미지가 존재하는 경우.
		printf("Find a New Version.\n");
 8009554:	487d      	ldr	r0, [pc, #500]	; (800974c <BootLoaderTask+0x32c>)
 8009556:	f001 fadd 	bl	800ab14 <puts>
		//*
//		FLASH_If_Erase( ADDR_FLASH_APP );

		//========================================================================
		//	FLASH_SECTOR_5 ~ FLASH_SECTOR_7
		FLASH_If_EraseSectors( ADDR_FLASH_APP, 3 );
 800955a:	2103      	movs	r1, #3
 800955c:	4870      	ldr	r0, [pc, #448]	; (8009720 <BootLoaderTask+0x300>)
 800955e:	f000 fa1f 	bl	80099a0 <FLASH_If_EraseSectors>
			printf( "Internal flash erase old app #%d\n", flash1.Sector );
			HAL_FLASHEx_Erase( &flash1, NULL );
			HAL_FLASH_Lock();
		}
		//	*/
		printf( "Internal flash erase done.\n" );
 8009562:	487b      	ldr	r0, [pc, #492]	; (8009750 <BootLoaderTask+0x330>)
 8009564:	f001 fad6 	bl	800ab14 <puts>
		//========================================================================

		//========================================================================
		printf( "Erase Delay\n" );
 8009568:	487a      	ldr	r0, [pc, #488]	; (8009754 <BootLoaderTask+0x334>)
 800956a:	f001 fad3 	bl	800ab14 <puts>
		HAL_Delay(3000);
 800956e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8009572:	f7f8 fa09 	bl	8001988 <HAL_Delay>
#if defined( USE_YMODEM_EXT_FLASH )
		fsize = ( buf[2] << 16 | buf[3] << 8 | buf[4] );		//	S/W Size
#else

//		fsize = (*(char*)0x08010022 << 16 | *(char*)0x08010023 << 8 | *(char*)0x08010024);  // s/w size
		fsize = ( buf[2] << 16 | buf[3] << 8 | buf[4] );		//	S/W Size
 8009576:	1d3b      	adds	r3, r7, #4
 8009578:	789b      	ldrb	r3, [r3, #2]
 800957a:	041a      	lsls	r2, r3, #16
 800957c:	1d3b      	adds	r3, r7, #4
 800957e:	78db      	ldrb	r3, [r3, #3]
 8009580:	021b      	lsls	r3, r3, #8
 8009582:	4313      	orrs	r3, r2
 8009584:	1d3a      	adds	r2, r7, #4
 8009586:	7912      	ldrb	r2, [r2, #4]
 8009588:	4313      	orrs	r3, r2
 800958a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

#endif
		printf("New S/W size = %d\n", fsize);
 800958e:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8009592:	4871      	ldr	r0, [pc, #452]	; (8009758 <BootLoaderTask+0x338>)
 8009594:	f001 fa22 	bl	800a9dc <iprintf>
		memset(buf, 0, sizeof(buf));
	    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPUpgrMGN1, (uint8_t *)buf, 5 );
	    //	*/
		//========================================================================

		readnum = fsize / 512 + 1;
 8009598:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800959c:	2b00      	cmp	r3, #0
 800959e:	da01      	bge.n	80095a4 <BootLoaderTask+0x184>
 80095a0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80095a4:	125b      	asrs	r3, r3, #9
 80095a6:	3301      	adds	r3, #1
 80095a8:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
		rremain = fsize % 512;
 80095ac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80095b0:	425a      	negs	r2, r3
 80095b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095ba:	bf58      	it	pl
 80095bc:	4253      	negpl	r3, r2
 80095be:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
		printf("readnum = %d\n", readnum);
 80095c2:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 80095c6:	4865      	ldr	r0, [pc, #404]	; (800975c <BootLoaderTask+0x33c>)
 80095c8:	f001 fa08 	bl	800a9dc <iprintf>

		printf("%s(%d) - Flash WritePorection( %d )\n", __func__, __LINE__,
				FLASH_If_GetWriteProtectionStatus() );
 80095cc:	f000 fa4c 	bl	8009a68 <FLASH_If_GetWriteProtectionStatus>
 80095d0:	4603      	mov	r3, r0
		printf("%s(%d) - Flash WritePorection( %d )\n", __func__, __LINE__,
 80095d2:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80095d6:	4955      	ldr	r1, [pc, #340]	; (800972c <BootLoaderTask+0x30c>)
 80095d8:	4861      	ldr	r0, [pc, #388]	; (8009760 <BootLoaderTask+0x340>)
 80095da:	f001 f9ff 	bl	800a9dc <iprintf>

		FLASH_If_WriteProtectionConfig( OB_WRPSTATE_DISABLE );
 80095de:	2000      	movs	r0, #0
 80095e0:	f000 fafe 	bl	8009be0 <FLASH_If_WriteProtectionConfig>

#if defined( USE_YMODEM_EXT_FLASH )
		SelectFlash( 0 );		//	MX25L128 ( PA4 - SPI_CS0 )
#endif

		for ( j = 0; j < readnum; j++ )
 80095e4:	2300      	movs	r3, #0
 80095e6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 80095ea:	e044      	b.n	8009676 <BootLoaderTask+0x256>
			FlashRead512( flashAddr, adata );
			FlashWait();
#else
//			memset( adata, 0x00, sizeof(adata) );
//			adata = (uint8_t *)( ADDR_FLASH_IMGAPP + ( 512 * j ) );
			memcpy( adata, (uint8_t *)( ADDR_FLASH_IMGAPP + ( 512 * j ) ), 512 );
 80095ec:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80095f0:	025b      	lsls	r3, r3, #9
 80095f2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80095f6:	f503 2320 	add.w	r3, r3, #655360	; 0xa0000
 80095fa:	461a      	mov	r2, r3
 80095fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009600:	4618      	mov	r0, r3
 8009602:	4611      	mov	r1, r2
 8009604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009608:	461a      	mov	r2, r3
 800960a:	f001 f9d1 	bl	800a9b0 <memcpy>
//			}
//			else
//			{
//				FLASH_If_Write( flashAddr, (uint32_t *)adata, 512 / 4 );
//			}
			HAL_FLASH_Unlock();
 800960e:	f7f8 fea7 	bl	8002360 <HAL_FLASH_Unlock>

			int nCntRetry;

			nCntRetry = 5;	//	5회 Re-Try
 8009612:	2305      	movs	r3, #5
 8009614:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

			while( FLASH_If_Write( flashAddr, (uint32_t *)adata, 512 / 4 ) != FLASHIF_OK && nCntRetry > 0 )
 8009618:	e00e      	b.n	8009638 <BootLoaderTask+0x218>
			{
				printf("%s(%d) - Write Error\n", __func__, __LINE__ );
 800961a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800961e:	4943      	ldr	r1, [pc, #268]	; (800972c <BootLoaderTask+0x30c>)
 8009620:	4850      	ldr	r0, [pc, #320]	; (8009764 <BootLoaderTask+0x344>)
 8009622:	f001 f9db 	bl	800a9dc <iprintf>
				HAL_Delay( 1000 );
 8009626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800962a:	f7f8 f9ad 	bl	8001988 <HAL_Delay>
				nCntRetry--;
 800962e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8009632:	3b01      	subs	r3, #1
 8009634:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
			while( FLASH_If_Write( flashAddr, (uint32_t *)adata, 512 / 4 ) != FLASHIF_OK && nCntRetry > 0 )
 8009638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800963c:	2280      	movs	r2, #128	; 0x80
 800963e:	4619      	mov	r1, r3
 8009640:	f8d7 0240 	ldr.w	r0, [r7, #576]	; 0x240
 8009644:	f000 f9d2 	bl	80099ec <FLASH_If_Write>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d003      	beq.n	8009656 <BootLoaderTask+0x236>
 800964e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8009652:	2b00      	cmp	r3, #0
 8009654:	dce1      	bgt.n	800961a <BootLoaderTask+0x1fa>
			}

			HAL_FLASH_Lock();
 8009656:	f7f8 fea5 	bl	80023a4 <HAL_FLASH_Lock>

			//*
			printf ("#");
 800965a:	2023      	movs	r0, #35	; 0x23
 800965c:	f001 f9d6 	bl	800aa0c <putchar>
				printf("0x%08X\n", flashAddr);
				dump( (unsigned char *)flashAddr, 512, 1 );
			}
			//	*/

			flashAddr = flashAddr + 512;
 8009660:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8009664:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8009668:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
		for ( j = 0; j < readnum; j++ )
 800966c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8009670:	3301      	adds	r3, #1
 8009672:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8009676:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800967a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800967e:	429a      	cmp	r2, r3
 8009680:	dbb4      	blt.n	80095ec <BootLoaderTask+0x1cc>

//			HAL_Delay(5);		//
		}

		printf("\nNew SW Flash Done\n");
 8009682:	4839      	ldr	r0, [pc, #228]	; (8009768 <BootLoaderTask+0x348>)
 8009684:	f001 fa46 	bl	800ab14 <puts>
		Flash32KBErase( 0x0000 );

#else

		//========================================================================
		printf("Erase Upgrade Config\n");
 8009688:	4838      	ldr	r0, [pc, #224]	; (800976c <BootLoaderTask+0x34c>)
 800968a:	f001 fa43 	bl	800ab14 <puts>
		memset(buf, 0, sizeof(buf));
 800968e:	1d3b      	adds	r3, r7, #4
 8009690:	220a      	movs	r2, #10
 8009692:	2100      	movs	r1, #0
 8009694:	4618      	mov	r0, r3
 8009696:	f001 f999 	bl	800a9cc <memset>
	    M24_HAL_WriteBytes( &hi2c1, 0xA0, AddrEEPUpgrMGN1, (uint8_t *)buf, 5 );
 800969a:	1d3b      	adds	r3, r7, #4
 800969c:	2205      	movs	r2, #5
 800969e:	9200      	str	r2, [sp, #0]
 80096a0:	2220      	movs	r2, #32
 80096a2:	21a0      	movs	r1, #160	; 0xa0
 80096a4:	4823      	ldr	r0, [pc, #140]	; (8009734 <BootLoaderTask+0x314>)
 80096a6:	f000 f901 	bl	80098ac <M24_HAL_WriteBytes>

		//========================================================================
		printf("Erase Upgrade Binary Image\n");
 80096aa:	4831      	ldr	r0, [pc, #196]	; (8009770 <BootLoaderTask+0x350>)
 80096ac:	f001 fa32 	bl	800ab14 <puts>
		FLASH_If_Erase( ADDR_FLASH_IMGAPP );		//	0x080A0000
 80096b0:	4824      	ldr	r0, [pc, #144]	; (8009744 <BootLoaderTask+0x324>)
 80096b2:	f000 f951 	bl	8009958 <FLASH_If_Erase>
//		HAL_FLASH_Lock();
//		printf("Internal flash erase command\n");

#endif

		printf("\n");
 80096b6:	200a      	movs	r0, #10
 80096b8:	f001 f9a8 	bl	800aa0c <putchar>
		printf("New S/W Boot\n");
 80096bc:	482d      	ldr	r0, [pc, #180]	; (8009774 <BootLoaderTask+0x354>)
 80096be:	f001 fa29 	bl	800ab14 <puts>
		HAL_Delay(1000);
 80096c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80096c6:	f7f8 f95f 	bl	8001988 <HAL_Delay>
		if	( (((*(__IO uint32_t*)APPLICATION_ADDRESS1) & 0x2FFE0000 ) == 0x20000000)
 80096ca:	4b15      	ldr	r3, [pc, #84]	; (8009720 <BootLoaderTask+0x300>)
 80096cc:	681a      	ldr	r2, [r3, #0]
 80096ce:	4b2a      	ldr	r3, [pc, #168]	; (8009778 <BootLoaderTask+0x358>)
 80096d0:	4013      	ands	r3, r2
 80096d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096d6:	d007      	beq.n	80096e8 <BootLoaderTask+0x2c8>
			 ||	( ( ( *( __IO uint32_t* )APPLICATION_ADDRESS1 ) & 0x2FF00000 ) == 0x20000000 )		//	ST4STM32(Ac6 SystemWorkbench) Binary Image
 80096d8:	4b11      	ldr	r3, [pc, #68]	; (8009720 <BootLoaderTask+0x300>)
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	4b1a      	ldr	r3, [pc, #104]	; (8009748 <BootLoaderTask+0x328>)
 80096de:	4013      	ands	r3, r2
 80096e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096e4:	f040 808f 	bne.w	8009806 <BootLoaderTask+0x3e6>
			)
		{
			printf(" Jump to Main Application......\n");
 80096e8:	4824      	ldr	r0, [pc, #144]	; (800977c <BootLoaderTask+0x35c>)
 80096ea:	f001 fa13 	bl	800ab14 <puts>
			JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS1 + 4);
 80096ee:	4b24      	ldr	r3, [pc, #144]	; (8009780 <BootLoaderTask+0x360>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a24      	ldr	r2, [pc, #144]	; (8009784 <BootLoaderTask+0x364>)
 80096f4:	6013      	str	r3, [r2, #0]
			Jump_To_Application = (pFunction) JumpAddress;
 80096f6:	4b23      	ldr	r3, [pc, #140]	; (8009784 <BootLoaderTask+0x364>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	461a      	mov	r2, r3
 80096fc:	4b22      	ldr	r3, [pc, #136]	; (8009788 <BootLoaderTask+0x368>)
 80096fe:	601a      	str	r2, [r3, #0]
//			vPortEnterCritical();
			HAL_DeInit();
 8009700:	f7f8 f8ee 	bl	80018e0 <HAL_DeInit>
			/* Initialize user application's Stack Pointer */
			__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS1);
 8009704:	4b06      	ldr	r3, [pc, #24]	; (8009720 <BootLoaderTask+0x300>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800970c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8009710:	f383 8808 	msr	MSP, r3
}
 8009714:	bf00      	nop
			Jump_To_Application();
 8009716:	4b1c      	ldr	r3, [pc, #112]	; (8009788 <BootLoaderTask+0x368>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4798      	blx	r3
		if	( (((*(__IO uint32_t*)APPLICATION_ADDRESS1) & 0x2FFE0000 ) == 0x20000000)
 800971c:	e073      	b.n	8009806 <BootLoaderTask+0x3e6>
 800971e:	bf00      	nop
 8009720:	08020000 	.word	0x08020000
 8009724:	0800c25c 	.word	0x0800c25c
 8009728:	20000880 	.word	0x20000880
 800972c:	0800e48c 	.word	0x0800e48c
 8009730:	0800c268 	.word	0x0800c268
 8009734:	200006a0 	.word	0x200006a0
 8009738:	40020c00 	.word	0x40020c00
 800973c:	0800c288 	.word	0x0800c288
 8009740:	0800c2a8 	.word	0x0800c2a8
 8009744:	080a0000 	.word	0x080a0000
 8009748:	2ff00000 	.word	0x2ff00000
 800974c:	0800c2b8 	.word	0x0800c2b8
 8009750:	0800c2cc 	.word	0x0800c2cc
 8009754:	0800c2e8 	.word	0x0800c2e8
 8009758:	0800c2f4 	.word	0x0800c2f4
 800975c:	0800c308 	.word	0x0800c308
 8009760:	0800c318 	.word	0x0800c318
 8009764:	0800c340 	.word	0x0800c340
 8009768:	0800c358 	.word	0x0800c358
 800976c:	0800c36c 	.word	0x0800c36c
 8009770:	0800c384 	.word	0x0800c384
 8009774:	0800c3a0 	.word	0x0800c3a0
 8009778:	2ffe0000 	.word	0x2ffe0000
 800977c:	0800c3b0 	.word	0x0800c3b0
 8009780:	08020004 	.word	0x08020004
 8009784:	20000a8c 	.word	0x20000a8c
 8009788:	20000a90 	.word	0x20000a90
		}
	}
	else
	{
		printf("\n");
 800978c:	200a      	movs	r0, #10
 800978e:	f001 f93d 	bl	800aa0c <putchar>
		printf("%s(%d) : Automatic Boot\n", __func__, __LINE__);
 8009792:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
 8009796:	491f      	ldr	r1, [pc, #124]	; (8009814 <BootLoaderTask+0x3f4>)
 8009798:	481f      	ldr	r0, [pc, #124]	; (8009818 <BootLoaderTask+0x3f8>)
 800979a:	f001 f91f 	bl	800a9dc <iprintf>
		HAL_Delay(1000);
 800979e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80097a2:	f7f8 f8f1 	bl	8001988 <HAL_Delay>

		printf("0x%08X : 0x%08X\n", APPLICATION_ADDRESS1, *(__IO uint32_t*)APPLICATION_ADDRESS1 );
 80097a6:	4b1d      	ldr	r3, [pc, #116]	; (800981c <BootLoaderTask+0x3fc>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	491b      	ldr	r1, [pc, #108]	; (800981c <BootLoaderTask+0x3fc>)
 80097ae:	481c      	ldr	r0, [pc, #112]	; (8009820 <BootLoaderTask+0x400>)
 80097b0:	f001 f914 	bl	800a9dc <iprintf>

		if	( (((*(__IO uint32_t*)APPLICATION_ADDRESS1) & 0x2FFE0000 ) == 0x20000000)			//	Keil Binary Image
 80097b4:	4b19      	ldr	r3, [pc, #100]	; (800981c <BootLoaderTask+0x3fc>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	4b1a      	ldr	r3, [pc, #104]	; (8009824 <BootLoaderTask+0x404>)
 80097ba:	4013      	ands	r3, r2
 80097bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097c0:	d006      	beq.n	80097d0 <BootLoaderTask+0x3b0>
			|| (((*(__IO uint32_t*)APPLICATION_ADDRESS1) & 0x2FF00000 ) == 0x20000000)		//	ST4STM32(Ac6 SystemWorkbench) Binary Image
 80097c2:	4b16      	ldr	r3, [pc, #88]	; (800981c <BootLoaderTask+0x3fc>)
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	4b18      	ldr	r3, [pc, #96]	; (8009828 <BootLoaderTask+0x408>)
 80097c8:	4013      	ands	r3, r2
 80097ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80097ce:	d102      	bne.n	80097d6 <BootLoaderTask+0x3b6>
			)
		{
			printf(" Jump to Main Application......\n");
 80097d0:	4816      	ldr	r0, [pc, #88]	; (800982c <BootLoaderTask+0x40c>)
 80097d2:	f001 f99f 	bl	800ab14 <puts>
		}

		JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS1 + 4);
 80097d6:	4b16      	ldr	r3, [pc, #88]	; (8009830 <BootLoaderTask+0x410>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a16      	ldr	r2, [pc, #88]	; (8009834 <BootLoaderTask+0x414>)
 80097dc:	6013      	str	r3, [r2, #0]
		Jump_To_Application = (pFunction) JumpAddress;
 80097de:	4b15      	ldr	r3, [pc, #84]	; (8009834 <BootLoaderTask+0x414>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	461a      	mov	r2, r3
 80097e4:	4b14      	ldr	r3, [pc, #80]	; (8009838 <BootLoaderTask+0x418>)
 80097e6:	601a      	str	r2, [r3, #0]
		//========================================================================
		//	De-Initialize
//		HAL_TIM_Base_Stop( &htim2 );

//		vPortEnterCritical();
		HAL_DeInit();
 80097e8:	f7f8 f87a 	bl	80018e0 <HAL_DeInit>
		//========================================================================

		/* Initialize user application's Stack Pointer */
		__set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS1);
 80097ec:	4b0b      	ldr	r3, [pc, #44]	; (800981c <BootLoaderTask+0x3fc>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80097f4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80097f8:	f383 8808 	msr	MSP, r3
}
 80097fc:	bf00      	nop

		Jump_To_Application();
 80097fe:	4b0e      	ldr	r3, [pc, #56]	; (8009838 <BootLoaderTask+0x418>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4798      	blx	r3
 8009804:	e000      	b.n	8009808 <BootLoaderTask+0x3e8>
		if	( (((*(__IO uint32_t*)APPLICATION_ADDRESS1) & 0x2FFE0000 ) == 0x20000000)
 8009806:	bf00      	nop
	}

	while ( 1 )
	{
		//	while(1) - Task 종료시 Blocking 됨.
		HAL_Delay( 1000 );
 8009808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800980c:	f7f8 f8bc 	bl	8001988 <HAL_Delay>
 8009810:	e7fa      	b.n	8009808 <BootLoaderTask+0x3e8>
 8009812:	bf00      	nop
 8009814:	0800e48c 	.word	0x0800e48c
 8009818:	0800c3d0 	.word	0x0800c3d0
 800981c:	08020000 	.word	0x08020000
 8009820:	0800c3ec 	.word	0x0800c3ec
 8009824:	2ffe0000 	.word	0x2ffe0000
 8009828:	2ff00000 	.word	0x2ff00000
 800982c:	0800c3b0 	.word	0x0800c3b0
 8009830:	08020004 	.word	0x08020004
 8009834:	20000a8c 	.word	0x20000a8c
 8009838:	20000a90 	.word	0x20000a90

0800983c <I2C_BusScan>:
#include "main.h"		//	hi2c1

//========================================================================
void I2C_BusScan( I2C_HandleTypeDef *phi2c )
//========================================================================
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]

	printf( "Scanning I2C bus:\r\n" );
 8009844:	4816      	ldr	r0, [pc, #88]	; (80098a0 <I2C_BusScan+0x64>)
 8009846:	f001 f965 	bl	800ab14 <puts>
	HAL_StatusTypeDef result;
	uint8_t i;
	for ( i = 1; i < 128; i++ )
 800984a:	2301      	movs	r3, #1
 800984c:	73fb      	strb	r3, [r7, #15]
 800984e:	e01b      	b.n	8009888 <I2C_BusScan+0x4c>
		 * &hi2c1 is the handle
		 * (uint16_t)(i<<1) is the i2c address left aligned
		 * retries 2
		 * timeout 2
		 */
		result = HAL_I2C_IsDeviceReady( phi2c, (uint16_t)( i << 1 ), 2, 2 );
 8009850:	7bfb      	ldrb	r3, [r7, #15]
 8009852:	b29b      	uxth	r3, r3
 8009854:	005b      	lsls	r3, r3, #1
 8009856:	b299      	uxth	r1, r3
 8009858:	2302      	movs	r3, #2
 800985a:	2202      	movs	r2, #2
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7fa f8fb 	bl	8003a58 <HAL_I2C_IsDeviceReady>
 8009862:	4603      	mov	r3, r0
 8009864:	73bb      	strb	r3, [r7, #14]
		if ( result != HAL_OK ) // HAL_ERROR or HAL_BUSY or HAL_TIMEOUT
 8009866:	7bbb      	ldrb	r3, [r7, #14]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <I2C_BusScan+0x36>
		{
			printf( "." ); // No ACK received at that address
 800986c:	202e      	movs	r0, #46	; 0x2e
 800986e:	f001 f8cd 	bl	800aa0c <putchar>
		}
		if ( result == HAL_OK )
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d104      	bne.n	8009882 <I2C_BusScan+0x46>
		{
			printf( "0x%X", i ); // Received an ACK at that address
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	4619      	mov	r1, r3
 800987c:	4809      	ldr	r0, [pc, #36]	; (80098a4 <I2C_BusScan+0x68>)
 800987e:	f001 f8ad 	bl	800a9dc <iprintf>
	for ( i = 1; i < 128; i++ )
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	3301      	adds	r3, #1
 8009886:	73fb      	strb	r3, [r7, #15]
 8009888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800988c:	2b00      	cmp	r3, #0
 800988e:	dadf      	bge.n	8009850 <I2C_BusScan+0x14>
		}
	}
	printf( "\r\n" );
 8009890:	4805      	ldr	r0, [pc, #20]	; (80098a8 <I2C_BusScan+0x6c>)
 8009892:	f001 f93f 	bl	800ab14 <puts>
}
 8009896:	bf00      	nop
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	0800c41c 	.word	0x0800c41c
 80098a4:	0800c430 	.word	0x0800c430
 80098a8:	0800c438 	.word	0x0800c438

080098ac <M24_HAL_WriteBytes>:
  * @retval
  */
//========================================================================
int M24_HAL_WriteBytes( I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t TxBufferSize )
//========================================================================
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af04      	add	r7, sp, #16
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	607b      	str	r3, [r7, #4]
 80098b6:	460b      	mov	r3, r1
 80098b8:	817b      	strh	r3, [r7, #10]
 80098ba:	4613      	mov	r3, r2
 80098bc:	813b      	strh	r3, [r7, #8]
	while ( HAL_I2C_Mem_Write( hi2c, (uint16_t)DevAddress, (uint16_t)MemAddress, I2C_MEMADD_SIZE_16BIT, pData, (uint16_t)TxBufferSize, 1000 ) != HAL_OK );
 80098be:	bf00      	nop
 80098c0:	893a      	ldrh	r2, [r7, #8]
 80098c2:	8979      	ldrh	r1, [r7, #10]
 80098c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80098c8:	9302      	str	r3, [sp, #8]
 80098ca:	8b3b      	ldrh	r3, [r7, #24]
 80098cc:	9301      	str	r3, [sp, #4]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	2310      	movs	r3, #16
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f7f9 fd9f 	bl	8003418 <HAL_I2C_Mem_Write>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1ef      	bne.n	80098c0 <M24_HAL_WriteBytes+0x14>

	HAL_Delay(5);
 80098e0:	2005      	movs	r0, #5
 80098e2:	f7f8 f851 	bl	8001988 <HAL_Delay>

	return 1;
 80098e6:	2301      	movs	r3, #1
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <M24_HAL_ReadBytes>:


//========================================================================
int M24_HAL_ReadBytes( I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint8_t *pData, uint16_t RxBufferSize )
//========================================================================
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b08a      	sub	sp, #40	; 0x28
 80098f4:	af04      	add	r7, sp, #16
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	607b      	str	r3, [r7, #4]
 80098fa:	460b      	mov	r3, r1
 80098fc:	817b      	strh	r3, [r7, #10]
 80098fe:	4613      	mov	r3, r2
 8009900:	813b      	strh	r3, [r7, #8]
	int TimeOut;

	TimeOut = 0;
 8009902:	2300      	movs	r3, #0
 8009904:	617b      	str	r3, [r7, #20]
	while ( HAL_I2C_Mem_Read( hi2c, (uint16_t)DevAddress, (uint16_t)MemAddress, I2C_MEMADD_SIZE_16BIT, pData, (uint16_t)RxBufferSize, 1000 ) != HAL_OK && TimeOut < 10 ) TimeOut++;
 8009906:	e002      	b.n	800990e <M24_HAL_ReadBytes+0x1e>
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	3301      	adds	r3, #1
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	893a      	ldrh	r2, [r7, #8]
 8009910:	8979      	ldrh	r1, [r7, #10]
 8009912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009916:	9302      	str	r3, [sp, #8]
 8009918:	8c3b      	ldrh	r3, [r7, #32]
 800991a:	9301      	str	r3, [sp, #4]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	2310      	movs	r3, #16
 8009922:	68f8      	ldr	r0, [r7, #12]
 8009924:	f7f9 fe72 	bl	800360c <HAL_I2C_Mem_Read>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d002      	beq.n	8009934 <M24_HAL_ReadBytes+0x44>
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	2b09      	cmp	r3, #9
 8009932:	dde9      	ble.n	8009908 <M24_HAL_ReadBytes+0x18>

	return 1;
 8009934:	2301      	movs	r3, #1
}
 8009936:	4618      	mov	r0, r3
 8009938:	3718      	adds	r7, #24
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
	...

08009940 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{ 
 8009940:	b580      	push	{r7, lr}
 8009942:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock(); 
 8009944:	f7f8 fd0c 	bl	8002360 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
 8009948:	4b02      	ldr	r3, [pc, #8]	; (8009954 <FLASH_If_Init+0x14>)
 800994a:	22f3      	movs	r2, #243	; 0xf3
 800994c:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
}
 800994e:	bf00      	nop
 8009950:	bd80      	pop	{r7, pc}
 8009952:	bf00      	nop
 8009954:	40023c00 	.word	0x40023c00

08009958 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b08a      	sub	sp, #40	; 0x28
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  FLASH_If_Init();
 8009960:	f7ff ffee 	bl	8009940 <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(StartSector);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f89d 	bl	8009aa4 <GetSector>
 800996a:	6278      	str	r0, [r7, #36]	; 0x24
  
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 800996c:	2300      	movs	r3, #0
 800996e:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = UserStartSector;
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors = 10;
 8009974:	230a      	movs	r3, #10
 8009976:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 8009978:	2302      	movs	r3, #2
 800997a:	61fb      	str	r3, [r7, #28]
    
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 800997c:	f107 0220 	add.w	r2, r7, #32
 8009980:	f107 030c 	add.w	r3, r7, #12
 8009984:	4611      	mov	r1, r2
 8009986:	4618      	mov	r0, r3
 8009988:	f7f8 fe68 	bl	800265c <HAL_FLASHEx_Erase>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <FLASH_If_Erase+0x3e>
  {
     /* Error occurred while page erase */
     return (1);
 8009992:	2301      	movs	r3, #1
 8009994:	e000      	b.n	8009998 <FLASH_If_Erase+0x40>
  }
  
  return (0);
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	3728      	adds	r7, #40	; 0x28
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <FLASH_If_EraseSectors>:

//========================================================================
uint32_t FLASH_If_EraseSectors(uint32_t StartSector, uint32_t nSectorNum)
//========================================================================
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08a      	sub	sp, #40	; 0x28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/
  FLASH_If_Init();
 80099aa:	f7ff ffc9 	bl	8009940 <FLASH_If_Init>

  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(StartSector);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 f878 	bl	8009aa4 <GetSector>
 80099b4:	6278      	str	r0, [r7, #36]	; 0x24

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = UserStartSector;
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors = nSectorNum;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 80099c2:	2302      	movs	r3, #2
 80099c4:	61fb      	str	r3, [r7, #28]

  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 80099c6:	f107 0220 	add.w	r2, r7, #32
 80099ca:	f107 030c 	add.w	r3, r7, #12
 80099ce:	4611      	mov	r1, r2
 80099d0:	4618      	mov	r0, r3
 80099d2:	f7f8 fe43 	bl	800265c <HAL_FLASHEx_Erase>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d001      	beq.n	80099e0 <FLASH_If_EraseSectors+0x40>
  {
     /* Error occurred while page erase */
     return (1);
 80099dc:	2301      	movs	r3, #1
 80099de:	e000      	b.n	80099e2 <FLASH_If_EraseSectors+0x42>
  }

  return (0);
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3728      	adds	r7, #40	; 0x28
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t FlashAddress, uint32_t* Data ,uint32_t DataLength)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b086      	sub	sp, #24
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 80099f8:	2300      	movs	r3, #0
 80099fa:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 80099fc:	2300      	movs	r3, #0
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	e022      	b.n	8009a48 <FLASH_If_Write+0x5c>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)      
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	4413      	add	r3, r2
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	f04f 0300 	mov.w	r3, #0
 8009a12:	68f9      	ldr	r1, [r7, #12]
 8009a14:	2002      	movs	r0, #2
 8009a16:	f7f8 fc4f 	bl	80022b8 <HAL_FLASH_Program>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10e      	bne.n	8009a3e <FLASH_If_Write+0x52>
    {
     /* Check the written value */
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	68b9      	ldr	r1, [r7, #8]
 8009a2a:	440b      	add	r3, r1
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d001      	beq.n	8009a36 <FLASH_If_Write+0x4a>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 8009a32:	2302      	movs	r3, #2
 8009a34:	e011      	b.n	8009a5a <FLASH_If_Write+0x6e>
      }
      /* Increment FLASH destination address */
      FlashAddress += 4;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	3304      	adds	r3, #4
 8009a3a:	60fb      	str	r3, [r7, #12]
 8009a3c:	e001      	b.n	8009a42 <FLASH_If_Write+0x56>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 8009a3e:	2303      	movs	r3, #3
 8009a40:	e00b      	b.n	8009a5a <FLASH_If_Write+0x6e>
  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	3301      	adds	r3, #1
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d203      	bcs.n	8009a58 <FLASH_If_Write+0x6c>
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4a04      	ldr	r2, [pc, #16]	; (8009a64 <FLASH_If_Write+0x78>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d9d4      	bls.n	8009a02 <FLASH_If_Write+0x16>
    }
  }

  return (FLASHIF_OK);
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3718      	adds	r7, #24
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	080ffffb 	.word	0x080ffffb

08009a68 <FLASH_If_GetWriteProtectionStatus>:
  * @param  None
  * @retval 0: No write protected sectors inside the user flash area
  *         1: Some sectors inside the user flash area are write protected
  */
uint16_t FLASH_If_GetWriteProtectionStatus(void)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b088      	sub	sp, #32
 8009a6c:	af00      	add	r7, sp, #0
  uint32_t ProtectedSECTOR = 0xFFF;
 8009a6e:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009a72:	61fb      	str	r3, [r7, #28]
  FLASH_OBProgramInitTypeDef OptionsBytesStruct;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8009a74:	f7f8 fc74 	bl	8002360 <HAL_FLASH_Unlock>

  /* Check if there are write protected sectors inside the user flash area ****/
  HAL_FLASHEx_OBGetConfig(&OptionsBytesStruct);
 8009a78:	463b      	mov	r3, r7
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7f8 fecc 	bl	8002818 <HAL_FLASHEx_OBGetConfig>

  /* Lock the Flash to disable the flash control register access (recommended
     to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8009a80:	f7f8 fc90 	bl	80023a4 <HAL_FLASH_Lock>

  /* Get pages already write protected ****************************************/
  ProtectedSECTOR = ~(OptionsBytesStruct.WRPSector) & FLASH_SECTOR_TO_BE_PROTECTED;
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	43db      	mvns	r3, r3
 8009a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a8c:	61fb      	str	r3, [r7, #28]

  /* Check if desired pages are already write protected ***********************/
  if(ProtectedSECTOR != 0)
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <FLASH_If_GetWriteProtectionStatus+0x30>
  {
    /* Some sectors inside the user flash area are write protected */
    return FLASHIF_PROTECTION_WRPENABLED;
 8009a94:	2302      	movs	r3, #2
 8009a96:	e000      	b.n	8009a9a <FLASH_If_GetWriteProtectionStatus+0x32>
  }
  else
  { 
    /* No write protected sectors inside the user flash area */
    return FLASHIF_PROTECTION_NONE;
 8009a98:	2300      	movs	r3, #0
  }
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3720      	adds	r7, #32
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}
	...

08009aa4 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8009aac:	2300      	movs	r3, #0
 8009aae:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a40      	ldr	r2, [pc, #256]	; (8009bb4 <GetSector+0x110>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d206      	bcs.n	8009ac6 <GetSector+0x22>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009abe:	d302      	bcc.n	8009ac6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	e06f      	b.n	8009ba6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a3b      	ldr	r2, [pc, #236]	; (8009bb8 <GetSector+0x114>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d206      	bcs.n	8009adc <GetSector+0x38>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a38      	ldr	r2, [pc, #224]	; (8009bb4 <GetSector+0x110>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d302      	bcc.n	8009adc <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	60fb      	str	r3, [r7, #12]
 8009ada:	e064      	b.n	8009ba6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a37      	ldr	r2, [pc, #220]	; (8009bbc <GetSector+0x118>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d206      	bcs.n	8009af2 <GetSector+0x4e>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a34      	ldr	r2, [pc, #208]	; (8009bb8 <GetSector+0x114>)
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d302      	bcc.n	8009af2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 8009aec:	2302      	movs	r3, #2
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	e059      	b.n	8009ba6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a32      	ldr	r2, [pc, #200]	; (8009bc0 <GetSector+0x11c>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d806      	bhi.n	8009b08 <GetSector+0x64>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	4a2f      	ldr	r2, [pc, #188]	; (8009bbc <GetSector+0x118>)
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d302      	bcc.n	8009b08 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 8009b02:	2303      	movs	r3, #3
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	e04e      	b.n	8009ba6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	4a2e      	ldr	r2, [pc, #184]	; (8009bc4 <GetSector+0x120>)
 8009b0c:	4293      	cmp	r3, r2
 8009b0e:	d806      	bhi.n	8009b1e <GetSector+0x7a>
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	4a2b      	ldr	r2, [pc, #172]	; (8009bc0 <GetSector+0x11c>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d902      	bls.n	8009b1e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 8009b18:	2304      	movs	r3, #4
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	e043      	b.n	8009ba6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a29      	ldr	r2, [pc, #164]	; (8009bc8 <GetSector+0x124>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d806      	bhi.n	8009b34 <GetSector+0x90>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a26      	ldr	r2, [pc, #152]	; (8009bc4 <GetSector+0x120>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d902      	bls.n	8009b34 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 8009b2e:	2305      	movs	r3, #5
 8009b30:	60fb      	str	r3, [r7, #12]
 8009b32:	e038      	b.n	8009ba6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	4a25      	ldr	r2, [pc, #148]	; (8009bcc <GetSector+0x128>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d806      	bhi.n	8009b4a <GetSector+0xa6>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	4a22      	ldr	r2, [pc, #136]	; (8009bc8 <GetSector+0x124>)
 8009b40:	4293      	cmp	r3, r2
 8009b42:	d902      	bls.n	8009b4a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 8009b44:	2306      	movs	r3, #6
 8009b46:	60fb      	str	r3, [r7, #12]
 8009b48:	e02d      	b.n	8009ba6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_8) && (Address >= ADDR_FLASH_SECTOR_7))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	4a20      	ldr	r2, [pc, #128]	; (8009bd0 <GetSector+0x12c>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d806      	bhi.n	8009b60 <GetSector+0xbc>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	4a1d      	ldr	r2, [pc, #116]	; (8009bcc <GetSector+0x128>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d902      	bls.n	8009b60 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;  
 8009b5a:	2307      	movs	r3, #7
 8009b5c:	60fb      	str	r3, [r7, #12]
 8009b5e:	e022      	b.n	8009ba6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_9) && (Address >= ADDR_FLASH_SECTOR_8))
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a1c      	ldr	r2, [pc, #112]	; (8009bd4 <GetSector+0x130>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d806      	bhi.n	8009b76 <GetSector+0xd2>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a19      	ldr	r2, [pc, #100]	; (8009bd0 <GetSector+0x12c>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d902      	bls.n	8009b76 <GetSector+0xd2>
  {
    sector = FLASH_SECTOR_8;  
 8009b70:	2308      	movs	r3, #8
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	e017      	b.n	8009ba6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_10) && (Address >= ADDR_FLASH_SECTOR_9))
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a17      	ldr	r2, [pc, #92]	; (8009bd8 <GetSector+0x134>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d806      	bhi.n	8009b8c <GetSector+0xe8>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	4a14      	ldr	r2, [pc, #80]	; (8009bd4 <GetSector+0x130>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d902      	bls.n	8009b8c <GetSector+0xe8>
  {
    sector = FLASH_SECTOR_9;  
 8009b86:	2309      	movs	r3, #9
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	e00c      	b.n	8009ba6 <GetSector+0x102>
  }
  else if((Address < ADDR_FLASH_SECTOR_11) && (Address >= ADDR_FLASH_SECTOR_10))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a13      	ldr	r2, [pc, #76]	; (8009bdc <GetSector+0x138>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d806      	bhi.n	8009ba2 <GetSector+0xfe>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a10      	ldr	r2, [pc, #64]	; (8009bd8 <GetSector+0x134>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d902      	bls.n	8009ba2 <GetSector+0xfe>
  {
    sector = FLASH_SECTOR_10;  
 8009b9c:	230a      	movs	r3, #10
 8009b9e:	60fb      	str	r3, [r7, #12]
 8009ba0:	e001      	b.n	8009ba6 <GetSector+0x102>
  }
  else /*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
  {
    sector = FLASH_SECTOR_11;  
 8009ba2:	230b      	movs	r3, #11
 8009ba4:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	08004000 	.word	0x08004000
 8009bb8:	08008000 	.word	0x08008000
 8009bbc:	0800c000 	.word	0x0800c000
 8009bc0:	0800ffff 	.word	0x0800ffff
 8009bc4:	0801ffff 	.word	0x0801ffff
 8009bc8:	0803ffff 	.word	0x0803ffff
 8009bcc:	0805ffff 	.word	0x0805ffff
 8009bd0:	0807ffff 	.word	0x0807ffff
 8009bd4:	0809ffff 	.word	0x0809ffff
 8009bd8:	080bffff 	.word	0x080bffff
 8009bdc:	080dffff 	.word	0x080dffff

08009be0 <FLASH_If_WriteProtectionConfig>:
  * @brief  Configure the write protection status of user flash area.
  * @param  modifier DISABLE or ENABLE the protection
  * @retval HAL_StatusTypeDef HAL_OK if change is applied.
  */
HAL_StatusTypeDef FLASH_If_WriteProtectionConfig(uint32_t modifier)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b092      	sub	sp, #72	; 0x48
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  uint32_t ProtectedSECTOR = 0xFFF;
 8009be8:	f640 73ff 	movw	r3, #4095	; 0xfff
 8009bec:	647b      	str	r3, [r7, #68]	; 0x44
  FLASH_OBProgramInitTypeDef config_new, config_old;
  HAL_StatusTypeDef result = HAL_OK;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  /* Get pages write protection status ****************************************/
  HAL_FLASHEx_OBGetConfig(&config_old);
 8009bf4:	f107 0308 	add.w	r3, r7, #8
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7f8 fe0d 	bl	8002818 <HAL_FLASHEx_OBGetConfig>

  /* The parameter says whether we turn the protection on or off */
  config_new.WRPState = modifier;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* We want to modify only the Write protection */
  config_new.OptionType = OPTIONBYTE_WRP;
 8009c02:	2301      	movs	r3, #1
 8009c04:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* No read protection, keep BOR and reset settings */
  config_new.RDPLevel = OB_RDP_LEVEL_0;
 8009c06:	23aa      	movs	r3, #170	; 0xaa
 8009c08:	637b      	str	r3, [r7, #52]	; 0x34
  config_new.USERConfig = config_old.USERConfig;  
 8009c0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009c0e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  /* Get pages already write protected ****************************************/
  ProtectedSECTOR = config_old.WRPSector | FLASH_SECTOR_TO_BE_PROTECTED;
 8009c12:	693b      	ldr	r3, [r7, #16]
 8009c14:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8009c18:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8009c1c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock();
 8009c1e:	f7f8 fb9f 	bl	8002360 <HAL_FLASH_Unlock>

  /* Unlock the Options Bytes *************************************************/
  HAL_FLASH_OB_Unlock();
 8009c22:	f7f8 fbcf 	bl	80023c4 <HAL_FLASH_OB_Unlock>
  
  config_new.WRPSector    = ProtectedSECTOR;
 8009c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  result = HAL_FLASHEx_OBProgram(&config_new);
 8009c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7f8 fd84 	bl	800273c <HAL_FLASHEx_OBProgram>
 8009c34:	4603      	mov	r3, r0
 8009c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  
  return result;
 8009c3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3748      	adds	r7, #72	; 0x48
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
	...

08009c48 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b087      	sub	sp, #28
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 8009c52:	4b26      	ldr	r3, [pc, #152]	; (8009cec <Int2Str+0xa4>)
 8009c54:	613b      	str	r3, [r7, #16]
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 8009c5e:	2300      	movs	r3, #0
 8009c60:	617b      	str	r3, [r7, #20]
 8009c62:	e038      	b.n	8009cd6 <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8009c64:	683a      	ldr	r2, [r7, #0]
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c6c:	b2da      	uxtb	r2, r3
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	1c59      	adds	r1, r3, #1
 8009c72:	60f9      	str	r1, [r7, #12]
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	440b      	add	r3, r1
 8009c78:	3230      	adds	r2, #48	; 0x30
 8009c7a:	b2d2      	uxtb	r2, r2
 8009c7c:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c86:	6939      	ldr	r1, [r7, #16]
 8009c88:	fb01 f202 	mul.w	r2, r1, r2
 8009c8c:	1a9b      	subs	r3, r3, r2
 8009c8e:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	4a17      	ldr	r2, [pc, #92]	; (8009cf0 <Int2Str+0xa8>)
 8009c94:	fba2 2303 	umull	r2, r3, r2, r3
 8009c98:	08db      	lsrs	r3, r3, #3
 8009c9a:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	781b      	ldrb	r3, [r3, #0]
 8009ca6:	2b30      	cmp	r3, #48	; 0x30
 8009ca8:	bf0c      	ite	eq
 8009caa:	2301      	moveq	r3, #1
 8009cac:	2300      	movne	r3, #0
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	bf0c      	ite	eq
 8009cb6:	2301      	moveq	r3, #1
 8009cb8:	2300      	movne	r3, #0
 8009cba:	b2db      	uxtb	r3, r3
 8009cbc:	4013      	ands	r3, r2
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d002      	beq.n	8009cca <Int2Str+0x82>
    {
      pos = 0;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	60fb      	str	r3, [r7, #12]
 8009cc8:	e002      	b.n	8009cd0 <Int2Str+0x88>
    }
    else
    {
      status++;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	617b      	str	r3, [r7, #20]
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	2b09      	cmp	r3, #9
 8009cda:	d9c3      	bls.n	8009c64 <Int2Str+0x1c>
    }
  }
}
 8009cdc:	bf00      	nop
 8009cde:	bf00      	nop
 8009ce0:	371c      	adds	r7, #28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr
 8009cea:	bf00      	nop
 8009cec:	3b9aca00 	.word	0x3b9aca00
 8009cf0:	cccccccd 	.word	0xcccccccd

08009cf4 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	617b      	str	r3, [r7, #20]
 8009d02:	2300      	movs	r3, #0
 8009d04:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b30      	cmp	r3, #48	; 0x30
 8009d10:	f040 80d7 	bne.w	8009ec2 <Str2Int+0x1ce>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	3301      	adds	r3, #1
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	2b78      	cmp	r3, #120	; 0x78
 8009d1c:	d005      	beq.n	8009d2a <Str2Int+0x36>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	3301      	adds	r3, #1
 8009d22:	781b      	ldrb	r3, [r3, #0]
 8009d24:	2b58      	cmp	r3, #88	; 0x58
 8009d26:	f040 80cc 	bne.w	8009ec2 <Str2Int+0x1ce>
  {
    i = 2;
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8009d2e:	e057      	b.n	8009de0 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	4413      	add	r3, r2
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	2b40      	cmp	r3, #64	; 0x40
 8009d3a:	d905      	bls.n	8009d48 <Str2Int+0x54>
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	4413      	add	r3, r2
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	2b46      	cmp	r3, #70	; 0x46
 8009d46:	d917      	bls.n	8009d78 <Str2Int+0x84>
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	2b60      	cmp	r3, #96	; 0x60
 8009d52:	d905      	bls.n	8009d60 <Str2Int+0x6c>
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	4413      	add	r3, r2
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	2b66      	cmp	r3, #102	; 0x66
 8009d5e:	d90b      	bls.n	8009d78 <Str2Int+0x84>
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	4413      	add	r3, r2
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	2b2f      	cmp	r3, #47	; 0x2f
 8009d6a:	d936      	bls.n	8009dda <Str2Int+0xe6>
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	4413      	add	r3, r2
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	2b39      	cmp	r3, #57	; 0x39
 8009d76:	d830      	bhi.n	8009dda <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	011b      	lsls	r3, r3, #4
 8009d7c:	6879      	ldr	r1, [r7, #4]
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	440a      	add	r2, r1
 8009d82:	7812      	ldrb	r2, [r2, #0]
 8009d84:	2a2f      	cmp	r2, #47	; 0x2f
 8009d86:	d90b      	bls.n	8009da0 <Str2Int+0xac>
 8009d88:	6879      	ldr	r1, [r7, #4]
 8009d8a:	697a      	ldr	r2, [r7, #20]
 8009d8c:	440a      	add	r2, r1
 8009d8e:	7812      	ldrb	r2, [r2, #0]
 8009d90:	2a39      	cmp	r2, #57	; 0x39
 8009d92:	d805      	bhi.n	8009da0 <Str2Int+0xac>
 8009d94:	6879      	ldr	r1, [r7, #4]
 8009d96:	697a      	ldr	r2, [r7, #20]
 8009d98:	440a      	add	r2, r1
 8009d9a:	7812      	ldrb	r2, [r2, #0]
 8009d9c:	3a30      	subs	r2, #48	; 0x30
 8009d9e:	e016      	b.n	8009dce <Str2Int+0xda>
 8009da0:	6879      	ldr	r1, [r7, #4]
 8009da2:	697a      	ldr	r2, [r7, #20]
 8009da4:	440a      	add	r2, r1
 8009da6:	7812      	ldrb	r2, [r2, #0]
 8009da8:	2a40      	cmp	r2, #64	; 0x40
 8009daa:	d90b      	bls.n	8009dc4 <Str2Int+0xd0>
 8009dac:	6879      	ldr	r1, [r7, #4]
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	440a      	add	r2, r1
 8009db2:	7812      	ldrb	r2, [r2, #0]
 8009db4:	2a46      	cmp	r2, #70	; 0x46
 8009db6:	d805      	bhi.n	8009dc4 <Str2Int+0xd0>
 8009db8:	6879      	ldr	r1, [r7, #4]
 8009dba:	697a      	ldr	r2, [r7, #20]
 8009dbc:	440a      	add	r2, r1
 8009dbe:	7812      	ldrb	r2, [r2, #0]
 8009dc0:	3a37      	subs	r2, #55	; 0x37
 8009dc2:	e004      	b.n	8009dce <Str2Int+0xda>
 8009dc4:	6879      	ldr	r1, [r7, #4]
 8009dc6:	697a      	ldr	r2, [r7, #20]
 8009dc8:	440a      	add	r2, r1
 8009dca:	7812      	ldrb	r2, [r2, #0]
 8009dcc:	3a57      	subs	r2, #87	; 0x57
 8009dce:	4413      	add	r3, r2
 8009dd0:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	617b      	str	r3, [r7, #20]
 8009dd8:	e002      	b.n	8009de0 <Str2Int+0xec>
        res = 0;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	613b      	str	r3, [r7, #16]
        break;
 8009dde:	e008      	b.n	8009df2 <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	2b0a      	cmp	r3, #10
 8009de4:	d805      	bhi.n	8009df2 <Str2Int+0xfe>
 8009de6:	687a      	ldr	r2, [r7, #4]
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	4413      	add	r3, r2
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d19e      	bne.n	8009d30 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	4413      	add	r3, r2
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d167      	bne.n	8009ece <Str2Int+0x1da>
    {
      *p_intnum = val;
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	601a      	str	r2, [r3, #0]
      res = 1;
 8009e04:	2301      	movs	r3, #1
 8009e06:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8009e08:	e061      	b.n	8009ece <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	4413      	add	r3, r2
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d105      	bne.n	8009e22 <Str2Int+0x12e>
      {
        *p_intnum = val;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	613b      	str	r3, [r7, #16]
 8009e20:	e04c      	b.n	8009ebc <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	4413      	add	r3, r2
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	2b6b      	cmp	r3, #107	; 0x6b
 8009e2c:	d005      	beq.n	8009e3a <Str2Int+0x146>
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	4413      	add	r3, r2
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b4b      	cmp	r3, #75	; 0x4b
 8009e38:	d10b      	bne.n	8009e52 <Str2Int+0x15e>
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d008      	beq.n	8009e52 <Str2Int+0x15e>
      {
        val = val << 10;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	029b      	lsls	r3, r3, #10
 8009e44:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	68fa      	ldr	r2, [r7, #12]
 8009e4a:	601a      	str	r2, [r3, #0]
        res = 1;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	613b      	str	r3, [r7, #16]
 8009e50:	e034      	b.n	8009ebc <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	4413      	add	r3, r2
 8009e58:	781b      	ldrb	r3, [r3, #0]
 8009e5a:	2b6d      	cmp	r3, #109	; 0x6d
 8009e5c:	d005      	beq.n	8009e6a <Str2Int+0x176>
 8009e5e:	687a      	ldr	r2, [r7, #4]
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	4413      	add	r3, r2
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	2b4d      	cmp	r3, #77	; 0x4d
 8009e68:	d10b      	bne.n	8009e82 <Str2Int+0x18e>
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d008      	beq.n	8009e82 <Str2Int+0x18e>
      {
        val = val << 20;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	051b      	lsls	r3, r3, #20
 8009e74:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	601a      	str	r2, [r3, #0]
        res = 1;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	613b      	str	r3, [r7, #16]
 8009e80:	e01c      	b.n	8009ebc <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	4413      	add	r3, r2
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	2b2f      	cmp	r3, #47	; 0x2f
 8009e8c:	d913      	bls.n	8009eb6 <Str2Int+0x1c2>
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	4413      	add	r3, r2
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	2b39      	cmp	r3, #57	; 0x39
 8009e98:	d80d      	bhi.n	8009eb6 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4413      	add	r3, r2
 8009ea2:	005b      	lsls	r3, r3, #1
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	697b      	ldr	r3, [r7, #20]
 8009eaa:	4413      	add	r3, r2
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	440b      	add	r3, r1
 8009eb0:	3b30      	subs	r3, #48	; 0x30
 8009eb2:	60fb      	str	r3, [r7, #12]
 8009eb4:	e002      	b.n	8009ebc <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	613b      	str	r3, [r7, #16]
        break;
 8009eba:	e008      	b.n	8009ece <Str2Int+0x1da>
      }
      i++;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	2b0a      	cmp	r3, #10
 8009ec6:	d802      	bhi.n	8009ece <Str2Int+0x1da>
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d19d      	bne.n	8009e0a <Str2Int+0x116>
    }
  }

  return res;
 8009ece:	693b      	ldr	r3, [r7, #16]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	371c      	adds	r7, #28
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eda:	4770      	bx	lr

08009edc <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b084      	sub	sp, #16
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( huart2.gState == HAL_UART_STATE_TIMEOUT )
 8009ee6:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <Serial_PutByte+0x44>)
 8009ee8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009eec:	b2db      	uxtb	r3, r3
 8009eee:	2ba0      	cmp	r3, #160	; 0xa0
 8009ef0:	d103      	bne.n	8009efa <Serial_PutByte+0x1e>
  {
      huart2.gState = HAL_UART_STATE_READY;
 8009ef2:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <Serial_PutByte+0x44>)
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  HAL_StatusTypeDef ret;

  if ( IsYModemMaster() )
 8009efa:	f000 f977 	bl	800a1ec <IsYModemMaster>
 8009efe:	4603      	mov	r3, r0
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d007      	beq.n	8009f14 <Serial_PutByte+0x38>
//      HAL_Delay( 100 );

      //===========================================================================
      //     RS485 Send
//      rts_high( &huart1 );
      ret = HAL_UART_Transmit( &huart2, &param, 1, TX_TIMEOUT );
 8009f04:	1df9      	adds	r1, r7, #7
 8009f06:	2364      	movs	r3, #100	; 0x64
 8009f08:	2201      	movs	r2, #1
 8009f0a:	4805      	ldr	r0, [pc, #20]	; (8009f20 <Serial_PutByte+0x44>)
 8009f0c:	f7fc fefe 	bl	8006d0c <HAL_UART_Transmit>
 8009f10:	4603      	mov	r3, r0
 8009f12:	73fb      	strb	r3, [r7, #15]
//      ret = HAL_UART_Receive( &huart1, &param, 1, RX_TIMEOUT );
//
//      //===========================================================================
//  }

  return ret;
 8009f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20000880 	.word	0x20000880

08009f24 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b084      	sub	sp, #16
 8009f28:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	607b      	str	r3, [r7, #4]
 8009f2e:	f107 0308 	add.w	r3, r7, #8
 8009f32:	2200      	movs	r2, #0
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	f8c3 2003 	str.w	r2, [r3, #3]
  uint32_t size = 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;

  printf((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 8009f3e:	4821      	ldr	r0, [pc, #132]	; (8009fc4 <SerialDownload+0xa0>)
 8009f40:	f000 fd4c 	bl	800a9dc <iprintf>
  result = Ymodem_Receive( &size );
 8009f44:	463b      	mov	r3, r7
 8009f46:	4618      	mov	r0, r3
 8009f48:	f000 faf4 	bl	800a534 <Ymodem_Receive>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	73fb      	strb	r3, [r7, #15]
  if (result == COM_OK)
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d119      	bne.n	8009f8a <SerialDownload+0x66>
  {
    printf((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8009f56:	481c      	ldr	r0, [pc, #112]	; (8009fc8 <SerialDownload+0xa4>)
 8009f58:	f000 fd40 	bl	800a9dc <iprintf>
    printf(aFileName);
 8009f5c:	481b      	ldr	r0, [pc, #108]	; (8009fcc <SerialDownload+0xa8>)
 8009f5e:	f000 fd3d 	bl	800a9dc <iprintf>
    Int2Str(number, size);
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	1d3b      	adds	r3, r7, #4
 8009f66:	4611      	mov	r1, r2
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7ff fe6d 	bl	8009c48 <Int2Str>
    printf((uint8_t *)"\n\r Size: ");
 8009f6e:	4818      	ldr	r0, [pc, #96]	; (8009fd0 <SerialDownload+0xac>)
 8009f70:	f000 fd34 	bl	800a9dc <iprintf>
    printf(number);
 8009f74:	1d3b      	adds	r3, r7, #4
 8009f76:	4618      	mov	r0, r3
 8009f78:	f000 fd30 	bl	800a9dc <iprintf>
    printf((uint8_t *)" Bytes\r\n");
 8009f7c:	4815      	ldr	r0, [pc, #84]	; (8009fd4 <SerialDownload+0xb0>)
 8009f7e:	f000 fdc9 	bl	800ab14 <puts>
    printf((uint8_t *)"-------------------\n");
 8009f82:	4815      	ldr	r0, [pc, #84]	; (8009fd8 <SerialDownload+0xb4>)
 8009f84:	f000 fdc6 	bl	800ab14 <puts>
  }
  else
  {
    printf((uint8_t *)"\n\rFailed to receive the file!\n\r");
  }
}
 8009f88:	e017      	b.n	8009fba <SerialDownload+0x96>
  else if (result == COM_LIMIT)
 8009f8a:	7bfb      	ldrb	r3, [r7, #15]
 8009f8c:	2b05      	cmp	r3, #5
 8009f8e:	d103      	bne.n	8009f98 <SerialDownload+0x74>
    printf((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8009f90:	4812      	ldr	r0, [pc, #72]	; (8009fdc <SerialDownload+0xb8>)
 8009f92:	f000 fd23 	bl	800a9dc <iprintf>
}
 8009f96:	e010      	b.n	8009fba <SerialDownload+0x96>
  else if (result == COM_DATA)
 8009f98:	7bfb      	ldrb	r3, [r7, #15]
 8009f9a:	2b04      	cmp	r3, #4
 8009f9c:	d103      	bne.n	8009fa6 <SerialDownload+0x82>
    printf((uint8_t *)"\n\n\rVerification failed!\n\r");
 8009f9e:	4810      	ldr	r0, [pc, #64]	; (8009fe0 <SerialDownload+0xbc>)
 8009fa0:	f000 fd1c 	bl	800a9dc <iprintf>
}
 8009fa4:	e009      	b.n	8009fba <SerialDownload+0x96>
  else if (result == COM_ABORT)
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	2b02      	cmp	r3, #2
 8009faa:	d103      	bne.n	8009fb4 <SerialDownload+0x90>
    printf((uint8_t *)"\r\n\nAborted by user.\n\r");
 8009fac:	480d      	ldr	r0, [pc, #52]	; (8009fe4 <SerialDownload+0xc0>)
 8009fae:	f000 fd15 	bl	800a9dc <iprintf>
}
 8009fb2:	e002      	b.n	8009fba <SerialDownload+0x96>
    printf((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8009fb4:	480c      	ldr	r0, [pc, #48]	; (8009fe8 <SerialDownload+0xc4>)
 8009fb6:	f000 fd11 	bl	800a9dc <iprintf>
}
 8009fba:	bf00      	nop
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	0800c490 	.word	0x0800c490
 8009fc8:	0800c4cc 	.word	0x0800c4cc
 8009fcc:	20000a9c 	.word	0x20000a9c
 8009fd0:	0800c520 	.word	0x0800c520
 8009fd4:	0800c52c 	.word	0x0800c52c
 8009fd8:	0800c534 	.word	0x0800c534
 8009fdc:	0800c548 	.word	0x0800c548
 8009fe0:	0800c588 	.word	0x0800c588
 8009fe4:	0800c5a4 	.word	0x0800c5a4
 8009fe8:	0800c5bc 	.word	0x0800c5bc

08009fec <__io_putchar>:
  * @retval None
  */
//===========================================================================
PUTCHAR_PROTOTYPE
//===========================================================================
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */

	//========================================================================
	//	Console
	if ( phuart2 )
 8009ff4:	4b19      	ldr	r3, [pc, #100]	; (800a05c <__io_putchar+0x70>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d012      	beq.n	800a022 <__io_putchar+0x36>
	{
		HAL_UART_Transmit( phuart2, (uint8_t *)&ch, 1, 0xFFFF );
 8009ffc:	4b17      	ldr	r3, [pc, #92]	; (800a05c <__io_putchar+0x70>)
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	1d39      	adds	r1, r7, #4
 800a002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a006:	2201      	movs	r2, #1
 800a008:	f7fc fe80 	bl	8006d0c <HAL_UART_Transmit>
		if ( ch == '\n' )
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b0a      	cmp	r3, #10
 800a010:	d107      	bne.n	800a022 <__io_putchar+0x36>
		{
			HAL_UART_Transmit( phuart2, (uint8_t *)"\r", 1, 0xFFFF );
 800a012:	4b12      	ldr	r3, [pc, #72]	; (800a05c <__io_putchar+0x70>)
 800a014:	6818      	ldr	r0, [r3, #0]
 800a016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a01a:	2201      	movs	r2, #1
 800a01c:	4910      	ldr	r1, [pc, #64]	; (800a060 <__io_putchar+0x74>)
 800a01e:	f7fc fe75 	bl	8006d0c <HAL_UART_Transmit>
	}

	//========================================================================
	//	RS232
	//*
	if ( phuart1 )
 800a022:	4b10      	ldr	r3, [pc, #64]	; (800a064 <__io_putchar+0x78>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d012      	beq.n	800a050 <__io_putchar+0x64>
	{
		HAL_UART_Transmit( phuart1, (uint8_t *)&ch, 1, 0xFFFF );
 800a02a:	4b0e      	ldr	r3, [pc, #56]	; (800a064 <__io_putchar+0x78>)
 800a02c:	6818      	ldr	r0, [r3, #0]
 800a02e:	1d39      	adds	r1, r7, #4
 800a030:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a034:	2201      	movs	r2, #1
 800a036:	f7fc fe69 	bl	8006d0c <HAL_UART_Transmit>

		if ( ch == '\n' )
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2b0a      	cmp	r3, #10
 800a03e:	d107      	bne.n	800a050 <__io_putchar+0x64>
		{
			HAL_UART_Transmit( phuart1, (uint8_t *)"\r", 1, 0xFFFF );
 800a040:	4b08      	ldr	r3, [pc, #32]	; (800a064 <__io_putchar+0x78>)
 800a042:	6818      	ldr	r0, [r3, #0]
 800a044:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a048:	2201      	movs	r2, #1
 800a04a:	4905      	ldr	r1, [pc, #20]	; (800a060 <__io_putchar+0x74>)
 800a04c:	f7fc fe5e 	bl	8006d0c <HAL_UART_Transmit>
		}
	}
	//	*/
	//========================================================================

	return ch;
 800a050:	687b      	ldr	r3, [r7, #4]
}
 800a052:	4618      	mov	r0, r3
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	200005e0 	.word	0x200005e0
 800a060:	0800cab0 	.word	0x0800cab0
 800a064:	200005dc 	.word	0x200005dc

0800a068 <__io_getchar>:

//===========================================================================
GETCHAR_PROTOTYPE
//===========================================================================
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
	char	c;

	while( !qcount( &g_qDebug ) )
 800a06e:	bf00      	nop
 800a070:	4809      	ldr	r0, [pc, #36]	; (800a098 <__io_getchar+0x30>)
 800a072:	f7ff f8ad 	bl	80091d0 <qcount>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d102      	bne.n	800a082 <__io_getchar+0x1a>
	{
//		osDelay(0);
#if defined( USE_FREERTOS )
		taskYIELD();
#else
		return -1;		//	Non-Blocking ( OS less )
 800a07c:	f04f 33ff 	mov.w	r3, #4294967295
 800a080:	e005      	b.n	800a08e <__io_getchar+0x26>
//		HAL_Delay( 0 );
#endif
	}
	c = qget( &g_qDebug );
 800a082:	4805      	ldr	r0, [pc, #20]	; (800a098 <__io_getchar+0x30>)
 800a084:	f7ff f8ec 	bl	8009260 <qget>
 800a088:	4603      	mov	r3, r0
 800a08a:	71fb      	strb	r3, [r7, #7]

	return c;
 800a08c:	79fb      	ldrb	r3, [r7, #7]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	20000adc 	.word	0x20000adc

0800a09c <HAL_UART_RxCpltCallback>:
  * @retval None
  */
//===========================================================================
void HAL_UART_RxCpltCallback( UART_HandleTypeDef *huart )
//===========================================================================
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
	//	portBASE_TYPE	xHigherPriorityTaskWoken = pdFALSE;
	//	인터럽트.

	//===========================================================================
	//	Debug Console
	if ( huart->Instance == USART2 )
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a10      	ldr	r2, [pc, #64]	; (800a0ec <HAL_UART_RxCpltCallback+0x50>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d10a      	bne.n	800a0c4 <HAL_UART_RxCpltCallback+0x28>
	{
		//	문자 Queue에 쌓기.
		qput( &g_qDebug, dataDbgTx[0] );
 800a0ae:	4b10      	ldr	r3, [pc, #64]	; (800a0f0 <HAL_UART_RxCpltCallback+0x54>)
 800a0b0:	781b      	ldrb	r3, [r3, #0]
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	480f      	ldr	r0, [pc, #60]	; (800a0f4 <HAL_UART_RxCpltCallback+0x58>)
 800a0b6:	f7ff f8a3 	bl	8009200 <qput>

		//	입력내용 콘솔로 출력.
//DEL		HAL_UART_Transmit( huart, (uint8_t *)&dataDbgTx[0], 1, 0xFFFF );

		HAL_UART_Receive_IT( huart, dataDbgTx, 1 );
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	490c      	ldr	r1, [pc, #48]	; (800a0f0 <HAL_UART_RxCpltCallback+0x54>)
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7fc ff63 	bl	8006f8a <HAL_UART_Receive_IT>
	}

	//===========================================================================
	//	RS232
	if ( huart->Instance == USART1 )
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a0b      	ldr	r2, [pc, #44]	; (800a0f8 <HAL_UART_RxCpltCallback+0x5c>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d10a      	bne.n	800a0e4 <HAL_UART_RxCpltCallback+0x48>
	{
		qput( &g_qDebug, dataTx1[0] );
 800a0ce:	4b0b      	ldr	r3, [pc, #44]	; (800a0fc <HAL_UART_RxCpltCallback+0x60>)
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	4807      	ldr	r0, [pc, #28]	; (800a0f4 <HAL_UART_RxCpltCallback+0x58>)
 800a0d6:	f7ff f893 	bl	8009200 <qput>
//		qput( &g_qRS485, dataTx1[0] );	//	입력내용 콘솔로 출력.

//DEL		HAL_UART_Transmit( huart, (uint8_t *)&dataTx1[0], 1, 0xFFFF );

		HAL_UART_Receive_IT( huart, dataTx1, 1 );
 800a0da:	2201      	movs	r2, #1
 800a0dc:	4907      	ldr	r1, [pc, #28]	; (800a0fc <HAL_UART_RxCpltCallback+0x60>)
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7fc ff53 	bl	8006f8a <HAL_UART_Receive_IT>
	}

	//===========================================================================
}
 800a0e4:	bf00      	nop
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	40004400 	.word	0x40004400
 800a0f0:	20000cec 	.word	0x20000cec
 800a0f4:	20000adc 	.word	0x20000adc
 800a0f8:	40011000 	.word	0x40011000
 800a0fc:	20000cf4 	.word	0x20000cf4

0800a100 <SerialInitQueue>:


// ============================================================================
void SerialInitQueue( void )
//===========================================================================
{
 800a100:	b580      	push	{r7, lr}
 800a102:	af00      	add	r7, sp, #0
//	xDebugQueueRx = xQueueCreate( DEBUG_RX_QUEUE_SIZE, sizeof( char ) );

	//	Debug Queue
	init_queue( &g_qDebug );
 800a104:	4803      	ldr	r0, [pc, #12]	; (800a114 <SerialInitQueue+0x14>)
 800a106:	f7ff f84f 	bl	80091a8 <init_queue>

	//	RS485 Queue
	init_queue( &g_qRS485 );
 800a10a:	4803      	ldr	r0, [pc, #12]	; (800a118 <SerialInitQueue+0x18>)
 800a10c:	f7ff f84c 	bl	80091a8 <init_queue>
}
 800a110:	bf00      	nop
 800a112:	bd80      	pop	{r7, pc}
 800a114:	20000adc 	.word	0x20000adc
 800a118:	20000be4 	.word	0x20000be4

0800a11c <SerialInit>:

//===========================================================================
void SerialInit( UART_HandleTypeDef *_phuart1, UART_HandleTypeDef *_phuart2 )
//===========================================================================
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
	SerialInitQueue();
 800a126:	f7ff ffeb 	bl	800a100 <SerialInitQueue>

	//===========================================================================
	//	Set Serial Handle
	phuart1 = _phuart1;
 800a12a:	4a10      	ldr	r2, [pc, #64]	; (800a16c <SerialInit+0x50>)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6013      	str	r3, [r2, #0]
	phuart2 = _phuart2;
 800a130:	4a0f      	ldr	r2, [pc, #60]	; (800a170 <SerialInit+0x54>)
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	6013      	str	r3, [r2, #0]

#if defined(_WIN32)
#else

	//	UART Console
	if ( phuart2 )
 800a136:	4b0e      	ldr	r3, [pc, #56]	; (800a170 <SerialInit+0x54>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d006      	beq.n	800a14c <SerialInit+0x30>
	{
		HAL_UART_Receive_IT( phuart2, dataDbgTx, 1 );
 800a13e:	4b0c      	ldr	r3, [pc, #48]	; (800a170 <SerialInit+0x54>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2201      	movs	r2, #1
 800a144:	490b      	ldr	r1, [pc, #44]	; (800a174 <SerialInit+0x58>)
 800a146:	4618      	mov	r0, r3
 800a148:	f7fc ff1f 	bl	8006f8a <HAL_UART_Receive_IT>
	}

	//	UART RS485
	if ( phuart1 )
 800a14c:	4b07      	ldr	r3, [pc, #28]	; (800a16c <SerialInit+0x50>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d006      	beq.n	800a162 <SerialInit+0x46>
	{
		HAL_UART_Receive_IT( phuart1, dataTx1, 1 );
 800a154:	4b05      	ldr	r3, [pc, #20]	; (800a16c <SerialInit+0x50>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	2201      	movs	r2, #1
 800a15a:	4907      	ldr	r1, [pc, #28]	; (800a178 <SerialInit+0x5c>)
 800a15c:	4618      	mov	r0, r3
 800a15e:	f7fc ff14 	bl	8006f8a <HAL_UART_Receive_IT>
	}

#endif
}
 800a162:	bf00      	nop
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	200005dc 	.word	0x200005dc
 800a170:	200005e0 	.word	0x200005e0
 800a174:	20000cec 	.word	0x20000cec
 800a178:	20000cf4 	.word	0x20000cf4

0800a17c <DispLedText>:
int 		g_totPktYModem = 0;		    //	LED Y-Modem Packet Total

//========================================================================
void    DispLedText ( char *sText, int color )
//========================================================================
{
 800a17c:	b480      	push	{r7}
 800a17e:	b083      	sub	sp, #12
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
 800a184:	6039      	str	r1, [r7, #0]

#if 0
    LedEFont( &stFDI, sText, color, 0, 0, 1 );
#endif
}
 800a186:	bf00      	nop
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr
	...

0800a194 <DispLedProgress>:

//========================================================================
void    DispLedProgress ( int nProgress, int nTotal, int color )
//========================================================================
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b08c      	sub	sp, #48	; 0x30
 800a198:	af00      	add	r7, sp, #0
 800a19a:	60f8      	str	r0, [r7, #12]
 800a19c:	60b9      	str	r1, [r7, #8]
 800a19e:	607a      	str	r2, [r7, #4]
//    LedProgress( &stSDI, nProgress, nTotal, color );
//    LedProgress( &stGDI, nProgress, nTotal, color );
    
    char		sProgress[32];

    sprintf( sProgress, "%3d/%3d", nProgress, nTotal );
 800a1a0:	f107 0010 	add.w	r0, r7, #16
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	68fa      	ldr	r2, [r7, #12]
 800a1a8:	4903      	ldr	r1, [pc, #12]	; (800a1b8 <DispLedProgress+0x24>)
 800a1aa:	f000 fdcd 	bl	800ad48 <siprintf>
    LedEFont( &stFDI, sProgress, color, 0, 0, 1 );
    LedEFont( &stSDI, sProgress, color, 0, 0, 1 );
    LedEFont( &stTNI, sProgress, color, 0, 0, 1 );
    LedEFont( &stGDI, sProgress, color, 0, 0, 1 );
#endif
}
 800a1ae:	bf00      	nop
 800a1b0:	3730      	adds	r7, #48	; 0x30
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}
 800a1b6:	bf00      	nop
 800a1b8:	0800cab4 	.word	0x0800cab4

0800a1bc <SetYModemMaster>:
//========================================================================

//========================================================================
void        SetYModemMaster ( int bMaster )
//========================================================================
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b082      	sub	sp, #8
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
    printf( "%s(%d) - %d\n", __func__, __LINE__, bMaster );
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2261      	movs	r2, #97	; 0x61
 800a1c8:	4905      	ldr	r1, [pc, #20]	; (800a1e0 <SetYModemMaster+0x24>)
 800a1ca:	4806      	ldr	r0, [pc, #24]	; (800a1e4 <SetYModemMaster+0x28>)
 800a1cc:	f000 fc06 	bl	800a9dc <iprintf>

    g_masterYmodem = bMaster;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	b2da      	uxtb	r2, r3
 800a1d4:	4b04      	ldr	r3, [pc, #16]	; (800a1e8 <SetYModemMaster+0x2c>)
 800a1d6:	701a      	strb	r2, [r3, #0]
}
 800a1d8:	bf00      	nop
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	0800e49c 	.word	0x0800e49c
 800a1e4:	0800cabc 	.word	0x0800cabc
 800a1e8:	200005e4 	.word	0x200005e4

0800a1ec <IsYModemMaster>:

//========================================================================
uint8_t     IsYModemMaster  ( void )
//========================================================================
{
 800a1ec:	b480      	push	{r7}
 800a1ee:	af00      	add	r7, sp, #0
    return g_masterYmodem;
 800a1f0:	4b03      	ldr	r3, [pc, #12]	; (800a200 <IsYModemMaster+0x14>)
 800a1f2:	781b      	ldrb	r3, [r3, #0]
}
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr
 800a1fe:	bf00      	nop
 800a200:	200005e4 	.word	0x200005e4

0800a204 <ReceivePacket>:
  *         HAL_BUSY: abort by user
  */
//========================================================================
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
//========================================================================
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b088      	sub	sp, #32
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  SKIP_C:   //  'C'

  *p_length = 0;
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	2200      	movs	r2, #0
 800a218:	601a      	str	r2, [r3, #0]
  status = HAL_UART_Receive(&huart2, &char1, 1, timeout);
 800a21a:	f107 0113 	add.w	r1, r7, #19
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	488d      	ldr	r0, [pc, #564]	; (800a458 <ReceivePacket+0x254>)
 800a224:	f7fc fe0b 	bl	8006e3e <HAL_UART_Receive>
 800a228:	4603      	mov	r3, r0
 800a22a:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 800a22c:	7efb      	ldrb	r3, [r7, #27]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f040 8109 	bne.w	800a446 <ReceivePacket+0x242>
  {
//      printf( "%s(%d) - 0x%02X\n", __func__, __LINE__, char1 );
    printf( "[0x%02X]", char1 );
 800a234:	7cfb      	ldrb	r3, [r7, #19]
 800a236:	4619      	mov	r1, r3
 800a238:	4888      	ldr	r0, [pc, #544]	; (800a45c <ReceivePacket+0x258>)
 800a23a:	f000 fbcf 	bl	800a9dc <iprintf>

    switch (char1)
 800a23e:	7cfb      	ldrb	r3, [r7, #19]
 800a240:	2b43      	cmp	r3, #67	; 0x43
 800a242:	f300 8091 	bgt.w	800a368 <ReceivePacket+0x164>
 800a246:	2b00      	cmp	r3, #0
 800a248:	f2c0 80ae 	blt.w	800a3a8 <ReceivePacket+0x1a4>
 800a24c:	2b43      	cmp	r3, #67	; 0x43
 800a24e:	f200 80ab 	bhi.w	800a3a8 <ReceivePacket+0x1a4>
 800a252:	a201      	add	r2, pc, #4	; (adr r2, 800a258 <ReceivePacket+0x54>)
 800a254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a258:	0800a215 	.word	0x0800a215
 800a25c:	0800a36f 	.word	0x0800a36f
 800a260:	0800a375 	.word	0x0800a375
 800a264:	0800a3a9 	.word	0x0800a3a9
 800a268:	0800a3af 	.word	0x0800a3af
 800a26c:	0800a3a9 	.word	0x0800a3a9
 800a270:	0800a215 	.word	0x0800a215
 800a274:	0800a3a9 	.word	0x0800a3a9
 800a278:	0800a3a9 	.word	0x0800a3a9
 800a27c:	0800a3a9 	.word	0x0800a3a9
 800a280:	0800a3a9 	.word	0x0800a3a9
 800a284:	0800a3a9 	.word	0x0800a3a9
 800a288:	0800a3a9 	.word	0x0800a3a9
 800a28c:	0800a3a9 	.word	0x0800a3a9
 800a290:	0800a3a9 	.word	0x0800a3a9
 800a294:	0800a3a9 	.word	0x0800a3a9
 800a298:	0800a3a9 	.word	0x0800a3a9
 800a29c:	0800a3a9 	.word	0x0800a3a9
 800a2a0:	0800a3a9 	.word	0x0800a3a9
 800a2a4:	0800a3a9 	.word	0x0800a3a9
 800a2a8:	0800a3a9 	.word	0x0800a3a9
 800a2ac:	0800a215 	.word	0x0800a215
 800a2b0:	0800a3a9 	.word	0x0800a3a9
 800a2b4:	0800a3a9 	.word	0x0800a3a9
 800a2b8:	0800a37d 	.word	0x0800a37d
 800a2bc:	0800a3a9 	.word	0x0800a3a9
 800a2c0:	0800a3a9 	.word	0x0800a3a9
 800a2c4:	0800a3a9 	.word	0x0800a3a9
 800a2c8:	0800a3a9 	.word	0x0800a3a9
 800a2cc:	0800a3a9 	.word	0x0800a3a9
 800a2d0:	0800a3a9 	.word	0x0800a3a9
 800a2d4:	0800a3a9 	.word	0x0800a3a9
 800a2d8:	0800a3a9 	.word	0x0800a3a9
 800a2dc:	0800a3a9 	.word	0x0800a3a9
 800a2e0:	0800a3a9 	.word	0x0800a3a9
 800a2e4:	0800a3a9 	.word	0x0800a3a9
 800a2e8:	0800a3a9 	.word	0x0800a3a9
 800a2ec:	0800a3a9 	.word	0x0800a3a9
 800a2f0:	0800a3a9 	.word	0x0800a3a9
 800a2f4:	0800a3a9 	.word	0x0800a3a9
 800a2f8:	0800a3a9 	.word	0x0800a3a9
 800a2fc:	0800a3a9 	.word	0x0800a3a9
 800a300:	0800a3a9 	.word	0x0800a3a9
 800a304:	0800a3a9 	.word	0x0800a3a9
 800a308:	0800a3a9 	.word	0x0800a3a9
 800a30c:	0800a3a9 	.word	0x0800a3a9
 800a310:	0800a3a9 	.word	0x0800a3a9
 800a314:	0800a3a9 	.word	0x0800a3a9
 800a318:	0800a3a9 	.word	0x0800a3a9
 800a31c:	0800a3a9 	.word	0x0800a3a9
 800a320:	0800a3a9 	.word	0x0800a3a9
 800a324:	0800a3a9 	.word	0x0800a3a9
 800a328:	0800a3a9 	.word	0x0800a3a9
 800a32c:	0800a3a9 	.word	0x0800a3a9
 800a330:	0800a3a9 	.word	0x0800a3a9
 800a334:	0800a3a9 	.word	0x0800a3a9
 800a338:	0800a3a9 	.word	0x0800a3a9
 800a33c:	0800a3a9 	.word	0x0800a3a9
 800a340:	0800a3a9 	.word	0x0800a3a9
 800a344:	0800a3a9 	.word	0x0800a3a9
 800a348:	0800a3a9 	.word	0x0800a3a9
 800a34c:	0800a3a9 	.word	0x0800a3a9
 800a350:	0800a3a9 	.word	0x0800a3a9
 800a354:	0800a3a9 	.word	0x0800a3a9
 800a358:	0800a3a9 	.word	0x0800a3a9
 800a35c:	0800a3a3 	.word	0x0800a3a3
 800a360:	0800a3a9 	.word	0x0800a3a9
 800a364:	0800a215 	.word	0x0800a215
 800a368:	2b61      	cmp	r3, #97	; 0x61
 800a36a:	d01a      	beq.n	800a3a2 <ReceivePacket+0x19e>
 800a36c:	e01c      	b.n	800a3a8 <ReceivePacket+0x1a4>
      case NAK:     //  NAK
          goto SKIP_C;
          break;

      case SOH:
        packet_size = PACKET_SIZE;
 800a36e:	2380      	movs	r3, #128	; 0x80
 800a370:	61fb      	str	r3, [r7, #28]
        break;
 800a372:	e01d      	b.n	800a3b0 <ReceivePacket+0x1ac>
      case STX:
        packet_size = PACKET_1K_SIZE;
 800a374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a378:	61fb      	str	r3, [r7, #28]
        break;
 800a37a:	e019      	b.n	800a3b0 <ReceivePacket+0x1ac>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&huart2, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 800a37c:	f107 0113 	add.w	r1, r7, #19
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	4834      	ldr	r0, [pc, #208]	; (800a458 <ReceivePacket+0x254>)
 800a386:	f7fc fd5a 	bl	8006e3e <HAL_UART_Receive>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d105      	bne.n	800a39c <ReceivePacket+0x198>
 800a390:	7cfb      	ldrb	r3, [r7, #19]
 800a392:	2b18      	cmp	r3, #24
 800a394:	d102      	bne.n	800a39c <ReceivePacket+0x198>
        {
          packet_size = 2;
 800a396:	2302      	movs	r3, #2
 800a398:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 800a39a:	e009      	b.n	800a3b0 <ReceivePacket+0x1ac>
          status = HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	76fb      	strb	r3, [r7, #27]
        break;
 800a3a0:	e006      	b.n	800a3b0 <ReceivePacket+0x1ac>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	76fb      	strb	r3, [r7, #27]
        break;
 800a3a6:	e003      	b.n	800a3b0 <ReceivePacket+0x1ac>
      default:
        status = HAL_ERROR;
 800a3a8:	2301      	movs	r3, #1
 800a3aa:	76fb      	strb	r3, [r7, #27]
        break;
 800a3ac:	e000      	b.n	800a3b0 <ReceivePacket+0x1ac>
        break;
 800a3ae:	bf00      	nop
    }
    *p_data = char1;
 800a3b0:	7cfa      	ldrb	r2, [r7, #19]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	2b7f      	cmp	r3, #127	; 0x7f
 800a3ba:	d944      	bls.n	800a446 <ReceivePacket+0x242>
    {
      status = HAL_UART_Receive(&huart2, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	1c99      	adds	r1, r3, #2
 800a3c0:	69fb      	ldr	r3, [r7, #28]
 800a3c2:	b29b      	uxth	r3, r3
 800a3c4:	3304      	adds	r3, #4
 800a3c6:	b29a      	uxth	r2, r3
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4823      	ldr	r0, [pc, #140]	; (800a458 <ReceivePacket+0x254>)
 800a3cc:	f7fc fd37 	bl	8006e3e <HAL_UART_Receive>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 800a3d4:	7efb      	ldrb	r3, [r7, #27]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d133      	bne.n	800a442 <ReceivePacket+0x23e>
      {
//        printf( "%s(%d)\n", __func__, __LINE__ );

        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3302      	adds	r3, #2
 800a3de:	781a      	ldrb	r2, [r3, #0]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	3303      	adds	r3, #3
 800a3e4:	781b      	ldrb	r3, [r3, #0]
 800a3e6:	43db      	mvns	r3, r3
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	d004      	beq.n	800a3f8 <ReceivePacket+0x1f4>
        {
//          printf( "%s(%d) - Error ( 0x%02X != ( 0x%02X ^ 0xFF ) )\n", __func__, __LINE__, 
//                                p_data[PACKET_NUMBER_INDEX], p_data[PACKET_CNUMBER_INDEX] );
          packet_size = 0;
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	76fb      	strb	r3, [r7, #27]
 800a3f6:	e026      	b.n	800a446 <ReceivePacket+0x242>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 800a3f8:	69fb      	ldr	r3, [r7, #28]
 800a3fa:	3304      	adds	r3, #4
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	4413      	add	r3, r2
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	021b      	lsls	r3, r3, #8
 800a404:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	3305      	adds	r3, #5
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	4413      	add	r3, r2
 800a40e:	781b      	ldrb	r3, [r3, #0]
 800a410:	461a      	mov	r2, r3
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	4413      	add	r3, r2
 800a416:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3304      	adds	r3, #4
 800a41c:	69f9      	ldr	r1, [r7, #28]
 800a41e:	4618      	mov	r0, r3
 800a420:	f000 f856 	bl	800a4d0 <Cal_CRC16>
 800a424:	4603      	mov	r3, r0
 800a426:	461a      	mov	r2, r3
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d00b      	beq.n	800a446 <ReceivePacket+0x242>
          {
            printf( "%s(%d) - CRC Error\n", __func__, __LINE__ );
 800a42e:	22d4      	movs	r2, #212	; 0xd4
 800a430:	490b      	ldr	r1, [pc, #44]	; (800a460 <ReceivePacket+0x25c>)
 800a432:	480c      	ldr	r0, [pc, #48]	; (800a464 <ReceivePacket+0x260>)
 800a434:	f000 fad2 	bl	800a9dc <iprintf>
            packet_size = 0;
 800a438:	2300      	movs	r3, #0
 800a43a:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 800a43c:	2301      	movs	r3, #1
 800a43e:	76fb      	strb	r3, [r7, #27]
 800a440:	e001      	b.n	800a446 <ReceivePacket+0x242>
      }
      else
      {
//        printf( "%s(%d) - 0x%02X\n", __func__, __LINE__, char1 );

        packet_size = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	69fa      	ldr	r2, [r7, #28]
 800a44a:	601a      	str	r2, [r3, #0]
  return status;
 800a44c:	7efb      	ldrb	r3, [r7, #27]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3720      	adds	r7, #32
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20000880 	.word	0x20000880
 800a45c:	0800cacc 	.word	0x0800cacc
 800a460:	0800e4ac 	.word	0x0800e4ac
 800a464:	0800cad8 	.word	0x0800cad8

0800a468 <UpdateCRC16>:
  * @retval None
  */
//========================================================================
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
//========================================================================
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	4603      	mov	r3, r0
 800a470:	460a      	mov	r2, r1
 800a472:	80fb      	strh	r3, [r7, #6]
 800a474:	4613      	mov	r3, r2
 800a476:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 800a478:	88fb      	ldrh	r3, [r7, #6]
 800a47a:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 800a47c:	797b      	ldrb	r3, [r7, #5]
 800a47e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a482:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	005b      	lsls	r3, r3, #1
 800a488:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	005b      	lsls	r3, r3, #1
 800a48e:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a496:	2b00      	cmp	r3, #0
 800a498:	d002      	beq.n	800a4a0 <UpdateCRC16+0x38>
      ++crc;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3301      	adds	r3, #1
 800a49e:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d005      	beq.n	800a4b6 <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800a4b0:	f083 0301 	eor.w	r3, r3, #1
 800a4b4:	60fb      	str	r3, [r7, #12]
  }
  
  while(!(in & 0x10000));
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d0e1      	beq.n	800a484 <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	b29b      	uxth	r3, r3
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <Cal_CRC16>:
  * @retval None
  */
//========================================================================
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
//========================================================================
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 800a4e6:	e00a      	b.n	800a4fe <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	b298      	uxth	r0, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	607a      	str	r2, [r7, #4]
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	f7ff ffb7 	bl	800a468 <UpdateCRC16>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 800a4fe:	687a      	ldr	r2, [r7, #4]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	429a      	cmp	r2, r3
 800a504:	d3f0      	bcc.n	800a4e8 <Cal_CRC16+0x18>
 
  crc = UpdateCRC16(crc, 0);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	b29b      	uxth	r3, r3
 800a50a:	2100      	movs	r1, #0
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff ffab 	bl	800a468 <UpdateCRC16>
 800a512:	4603      	mov	r3, r0
 800a514:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	b29b      	uxth	r3, r3
 800a51a:	2100      	movs	r1, #0
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7ff ffa3 	bl	800a468 <UpdateCRC16>
 800a522:	4603      	mov	r3, r0
 800a524:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	b29b      	uxth	r3, r3
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3710      	adds	r7, #16
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
	...

0800a534 <Ymodem_Receive>:
  * @retval COM_StatusTypeDef result of reception/programming
  */
//========================================================================
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
//========================================================================
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b0d6      	sub	sp, #344	; 0x158
 800a538:	af02      	add	r7, sp, #8
 800a53a:	1d3b      	adds	r3, r7, #4
 800a53c:	6018      	str	r0, [r3, #0]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800a544:	2300      	movs	r3, #0
 800a546:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800a54a:	2300      	movs	r3, #0
 800a54c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 // uint32_t flashdestination;
  uint32_t ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;
 800a550:	2300      	movs	r3, #0
 800a552:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136

  char buf[256];

  uint8_t ret = 0;
 800a556:	2300      	movs	r3, #0
 800a558:	f887 3135 	strb.w	r3, [r7, #309]	; 0x135

  addrExtFlash      =   0x020000;

#else

  flashdestination  =   ADDR_FLASH_APP;
 800a55c:	4bd1      	ldr	r3, [pc, #836]	; (800a8a4 <Ymodem_Receive+0x370>)
 800a55e:	4ad2      	ldr	r2, [pc, #840]	; (800a8a8 <Ymodem_Receive+0x374>)
 800a560:	601a      	str	r2, [r3, #0]

#endif

  //========================================================================
  DispLedText( "Upgrade LED App", 3 );   //    DIsplay LED Text
 800a562:	2103      	movs	r1, #3
 800a564:	48d1      	ldr	r0, [pc, #836]	; (800a8ac <Ymodem_Receive+0x378>)
 800a566:	f7ff fe09 	bl	800a17c <DispLedText>
  //========================================================================

  while ((session_done == 0) && (result == COM_OK))
 800a56a:	e1ca      	b.n	800a902 <Ymodem_Receive+0x3ce>
  {
    packets_received = 0;
 800a56c:	2300      	movs	r3, #0
 800a56e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
    file_done = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    while ((file_done == 0) && (result == COM_OK))
 800a578:	e1ba      	b.n	800a8f0 <Ymodem_Receive+0x3bc>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 800a57a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800a57e:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 800a582:	4619      	mov	r1, r3
 800a584:	48ca      	ldr	r0, [pc, #808]	; (800a8b0 <Ymodem_Receive+0x37c>)
 800a586:	f7ff fe3d 	bl	800a204 <ReceivePacket>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d003      	beq.n	800a598 <Ymodem_Receive+0x64>
 800a590:	2b02      	cmp	r3, #2
 800a592:	f000 8152 	beq.w	800a83a <Ymodem_Receive+0x306>
 800a596:	e160      	b.n	800a85a <Ymodem_Receive+0x326>
      {
        case HAL_OK:
          errors = 0;
 800a598:	2300      	movs	r3, #0
 800a59a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
          switch (packet_length)
 800a59e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d010      	beq.n	800a5c8 <Ymodem_Receive+0x94>
 800a5a6:	2b02      	cmp	r3, #2
 800a5a8:	d11d      	bne.n	800a5e6 <Ymodem_Receive+0xb2>
          {
            case 2:
              /* Abort by sender */
              printf( "%s(%d) - Abort by sender (%d)\n", __func__, __LINE__, packet_length );
 800a5aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a5ae:	f240 12b7 	movw	r2, #439	; 0x1b7
 800a5b2:	49c0      	ldr	r1, [pc, #768]	; (800a8b4 <Ymodem_Receive+0x380>)
 800a5b4:	48c0      	ldr	r0, [pc, #768]	; (800a8b8 <Ymodem_Receive+0x384>)
 800a5b6:	f000 fa11 	bl	800a9dc <iprintf>

              Serial_PutByte(ACK);
 800a5ba:	2006      	movs	r0, #6
 800a5bc:	f7ff fc8e 	bl	8009edc <Serial_PutByte>
              result = COM_ABORT;
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
              break;
 800a5c6:	e137      	b.n	800a838 <Ymodem_Receive+0x304>
            case 0:
              /* End of transmission */
              printf( "%s(%d) - End of transmission (%d)\n", __func__, __LINE__, packet_length );
 800a5c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a5cc:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800a5d0:	49b8      	ldr	r1, [pc, #736]	; (800a8b4 <Ymodem_Receive+0x380>)
 800a5d2:	48ba      	ldr	r0, [pc, #744]	; (800a8bc <Ymodem_Receive+0x388>)
 800a5d4:	f000 fa02 	bl	800a9dc <iprintf>
                  //========================================================================
              }

#endif

              Serial_PutByte(ACK);
 800a5d8:	2006      	movs	r0, #6
 800a5da:	f7ff fc7f 	bl	8009edc <Serial_PutByte>
              file_done = 1;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
              break;
 800a5e4:	e128      	b.n	800a838 <Ymodem_Receive+0x304>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 800a5e6:	4bb2      	ldr	r3, [pc, #712]	; (800a8b0 <Ymodem_Receive+0x37c>)
 800a5e8:	789b      	ldrb	r3, [r3, #2]
 800a5ea:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d003      	beq.n	800a5fa <Ymodem_Receive+0xc6>
              {
                Serial_PutByte(NAK);
 800a5f2:	2015      	movs	r0, #21
 800a5f4:	f7ff fc72 	bl	8009edc <Serial_PutByte>
                packets_received ++;
                session_begin = 1;

                printf( "%s(%d) - packets_received (%d)\n", __func__, __LINE__, packets_received );
              }
              break;
 800a5f8:	e11d      	b.n	800a836 <Ymodem_Receive+0x302>
                if (packets_received == 0)
 800a5fa:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f040 80e5 	bne.w	800a7ce <Ymodem_Receive+0x29a>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 800a604:	4baa      	ldr	r3, [pc, #680]	; (800a8b0 <Ymodem_Receive+0x37c>)
 800a606:	791b      	ldrb	r3, [r3, #4]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 80d6 	beq.w	800a7ba <Ymodem_Receive+0x286>
                    i = 0;
 800a60e:	2300      	movs	r3, #0
 800a610:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 800a614:	4baa      	ldr	r3, [pc, #680]	; (800a8c0 <Ymodem_Receive+0x38c>)
 800a616:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800a61a:	e00c      	b.n	800a636 <Ymodem_Receive+0x102>
                      aFileName[i++] = *file_ptr++;
 800a61c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800a620:	1c53      	adds	r3, r2, #1
 800a622:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800a626:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a62a:	1c59      	adds	r1, r3, #1
 800a62c:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800a630:	7811      	ldrb	r1, [r2, #0]
 800a632:	4aa4      	ldr	r2, [pc, #656]	; (800a8c4 <Ymodem_Receive+0x390>)
 800a634:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800a636:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d003      	beq.n	800a648 <Ymodem_Receive+0x114>
 800a640:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a644:	2b3f      	cmp	r3, #63	; 0x3f
 800a646:	d9e9      	bls.n	800a61c <Ymodem_Receive+0xe8>
                    aFileName[i++] = '\0';
 800a648:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800a652:	4a9c      	ldr	r2, [pc, #624]	; (800a8c4 <Ymodem_Receive+0x390>)
 800a654:	2100      	movs	r1, #0
 800a656:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 800a658:	2300      	movs	r3, #0
 800a65a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
                    file_ptr ++;
 800a65e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a662:	3301      	adds	r3, #1
 800a664:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800a668:	e00f      	b.n	800a68a <Ymodem_Receive+0x156>
                      file_size[i++] = *file_ptr++;
 800a66a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800a66e:	1c53      	adds	r3, r2, #1
 800a670:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800a674:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a678:	1c59      	adds	r1, r3, #1
 800a67a:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 800a67e:	7812      	ldrb	r2, [r2, #0]
 800a680:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800a684:	440b      	add	r3, r1
 800a686:	f803 2c40 	strb.w	r2, [r3, #-64]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800a68a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	2b20      	cmp	r3, #32
 800a692:	d003      	beq.n	800a69c <Ymodem_Receive+0x168>
 800a694:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a698:	2b0f      	cmp	r3, #15
 800a69a:	d9e6      	bls.n	800a66a <Ymodem_Receive+0x136>
                    file_size[i++] = '\0';
 800a69c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800a6a0:	1c5a      	adds	r2, r3, #1
 800a6a2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800a6a6:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800a6aa:	4413      	add	r3, r2
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f803 2c40 	strb.w	r2, [r3, #-64]
                    Str2Int(file_size, &filesize);
 800a6b2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800a6b6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800a6ba:	4611      	mov	r1, r2
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff fb19 	bl	8009cf4 <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 800a6c2:	1d3b      	adds	r3, r7, #4
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a7f      	ldr	r2, [pc, #508]	; (800a8c8 <Ymodem_Receive+0x394>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d91a      	bls.n	800a704 <Ymodem_Receive+0x1d0>
                      tmp = CA;
 800a6ce:	2318      	movs	r3, #24
 800a6d0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
                      if ( IsYModemMaster() )
 800a6d4:	f7ff fd8a 	bl	800a1ec <IsYModemMaster>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00f      	beq.n	800a6fe <Ymodem_Receive+0x1ca>
                          HAL_UART_Transmit( &huart2, &tmp, 1, NAK_TIMEOUT );
 800a6de:	f207 110f 	addw	r1, r7, #271	; 0x10f
 800a6e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	4878      	ldr	r0, [pc, #480]	; (800a8cc <Ymodem_Receive+0x398>)
 800a6ea:	f7fc fb0f 	bl	8006d0c <HAL_UART_Transmit>
                          HAL_UART_Transmit( &huart2, &tmp, 1, NAK_TIMEOUT );
 800a6ee:	f207 110f 	addw	r1, r7, #271	; 0x10f
 800a6f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	4874      	ldr	r0, [pc, #464]	; (800a8cc <Ymodem_Receive+0x398>)
 800a6fa:	f7fc fb07 	bl	8006d0c <HAL_UART_Transmit>
                      result = COM_LIMIT;
 800a6fe:	2305      	movs	r3, #5
 800a700:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
                    tickStart = HAL_GetTick();
 800a704:	f7f7 f934 	bl	8001970 <HAL_GetTick>
 800a708:	4603      	mov	r3, r0
 800a70a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
                    FLASH_If_Erase( ADDR_FLASH_APP );
 800a70e:	4866      	ldr	r0, [pc, #408]	; (800a8a8 <Ymodem_Receive+0x374>)
 800a710:	f7ff f922 	bl	8009958 <FLASH_If_Erase>
                    tickEnd = HAL_GetTick();
 800a714:	f7f7 f92c 	bl	8001970 <HAL_GetTick>
 800a718:	4603      	mov	r3, r0
 800a71a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
                    printf( "Flash Erase Time [%d]\n", tickEnd - tickStart );
 800a71e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	4619      	mov	r1, r3
 800a72a:	4869      	ldr	r0, [pc, #420]	; (800a8d0 <Ymodem_Receive+0x39c>)
 800a72c:	f000 f956 	bl	800a9dc <iprintf>
                    g_totPktYModem = ( filesize + PACKET_1K_SIZE - 1 ) / PACKET_1K_SIZE;
 800a730:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a734:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a738:	0a9b      	lsrs	r3, r3, #10
 800a73a:	461a      	mov	r2, r3
 800a73c:	4b65      	ldr	r3, [pc, #404]	; (800a8d4 <Ymodem_Receive+0x3a0>)
 800a73e:	601a      	str	r2, [r3, #0]
                    DispLedProgress( 0, g_totPktYModem, 3 );   //  Amber Progress
 800a740:	4b64      	ldr	r3, [pc, #400]	; (800a8d4 <Ymodem_Receive+0x3a0>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	2203      	movs	r2, #3
 800a746:	4619      	mov	r1, r3
 800a748:	2000      	movs	r0, #0
 800a74a:	f7ff fd23 	bl	800a194 <DispLedProgress>
                    if ( IsYModemMaster() )
 800a74e:	f7ff fd4d 	bl	800a1ec <IsYModemMaster>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d018      	beq.n	800a78a <Ymodem_Receive+0x256>
                        if ( 15000 < ( tickEnd - tickStart ) )   HAL_Delay( 2000 );
 800a758:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a75c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a760:	1ad3      	subs	r3, r2, r3
 800a762:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a766:	4293      	cmp	r3, r2
 800a768:	dd04      	ble.n	800a774 <Ymodem_Receive+0x240>
 800a76a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800a76e:	f7f7 f90b 	bl	8001988 <HAL_Delay>
 800a772:	e00a      	b.n	800a78a <Ymodem_Receive+0x256>
                        else HAL_Delay( 15000 - ( tickEnd - tickStart ) );
 800a774:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800a778:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a77c:	1ad3      	subs	r3, r2, r3
 800a77e:	f5c3 536a 	rsb	r3, r3, #14976	; 0x3a80
 800a782:	3318      	adds	r3, #24
 800a784:	4618      	mov	r0, r3
 800a786:	f7f7 f8ff 	bl	8001988 <HAL_Delay>
                    *p_size = filesize;
 800a78a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800a78e:	1d3b      	adds	r3, r7, #4
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 800a794:	2006      	movs	r0, #6
 800a796:	f7ff fba1 	bl	8009edc <Serial_PutByte>
                    Serial_PutByte(CRC16);
 800a79a:	2043      	movs	r0, #67	; 0x43
 800a79c:	f7ff fb9e 	bl	8009edc <Serial_PutByte>
                    printf( "%s(%d) - size (%d) / totPkt (%d)\n", __func__, __LINE__, filesize, g_totPktYModem );
 800a7a0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800a7a4:	4b4b      	ldr	r3, [pc, #300]	; (800a8d4 <Ymodem_Receive+0x3a0>)
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	9300      	str	r3, [sp, #0]
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	f240 2257 	movw	r2, #599	; 0x257
 800a7b0:	4940      	ldr	r1, [pc, #256]	; (800a8b4 <Ymodem_Receive+0x380>)
 800a7b2:	4849      	ldr	r0, [pc, #292]	; (800a8d8 <Ymodem_Receive+0x3a4>)
 800a7b4:	f000 f912 	bl	800a9dc <iprintf>
 800a7b8:	e02d      	b.n	800a816 <Ymodem_Receive+0x2e2>
                    Serial_PutByte(ACK);
 800a7ba:	2006      	movs	r0, #6
 800a7bc:	f7ff fb8e 	bl	8009edc <Serial_PutByte>
                    file_done = 1;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                    session_done = 1;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
                    break;
 800a7cc:	e034      	b.n	800a838 <Ymodem_Receive+0x304>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 800a7ce:	4b3c      	ldr	r3, [pc, #240]	; (800a8c0 <Ymodem_Receive+0x38c>)
 800a7d0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
                  if ( FLASH_If_Write( flashdestination, (uint32_t*)ramsource, packet_length / 4 ) == FLASHIF_OK )
 800a7d4:	4b33      	ldr	r3, [pc, #204]	; (800a8a4 <Ymodem_Receive+0x370>)
 800a7d6:	6818      	ldr	r0, [r3, #0]
 800a7d8:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800a7dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a7e0:	089b      	lsrs	r3, r3, #2
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f7ff f902 	bl	80099ec <FLASH_If_Write>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10a      	bne.n	800a804 <Ymodem_Receive+0x2d0>
                      flashdestination += packet_length;
 800a7ee:	4b2d      	ldr	r3, [pc, #180]	; (800a8a4 <Ymodem_Receive+0x370>)
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a7f6:	4413      	add	r3, r2
 800a7f8:	4a2a      	ldr	r2, [pc, #168]	; (800a8a4 <Ymodem_Receive+0x370>)
 800a7fa:	6013      	str	r3, [r2, #0]
                      Serial_PutByte( ACK );
 800a7fc:	2006      	movs	r0, #6
 800a7fe:	f7ff fb6d 	bl	8009edc <Serial_PutByte>
 800a802:	e008      	b.n	800a816 <Ymodem_Receive+0x2e2>
                    Serial_PutByte(CA);
 800a804:	2018      	movs	r0, #24
 800a806:	f7ff fb69 	bl	8009edc <Serial_PutByte>
                    Serial_PutByte(CA);
 800a80a:	2018      	movs	r0, #24
 800a80c:	f7ff fb66 	bl	8009edc <Serial_PutByte>
                    result = COM_DATA;
 800a810:	2304      	movs	r3, #4
 800a812:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
                packets_received ++;
 800a816:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800a81a:	3301      	adds	r3, #1
 800a81c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
                session_begin = 1;
 800a820:	2301      	movs	r3, #1
 800a822:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
                printf( "%s(%d) - packets_received (%d)\n", __func__, __LINE__, packets_received );
 800a826:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800a82a:	f240 228d 	movw	r2, #653	; 0x28d
 800a82e:	4921      	ldr	r1, [pc, #132]	; (800a8b4 <Ymodem_Receive+0x380>)
 800a830:	482a      	ldr	r0, [pc, #168]	; (800a8dc <Ymodem_Receive+0x3a8>)
 800a832:	f000 f8d3 	bl	800a9dc <iprintf>
              break;
 800a836:	bf00      	nop
          }
          break;
 800a838:	e05a      	b.n	800a8f0 <Ymodem_Receive+0x3bc>
        case HAL_BUSY: /* Abort actually */
          printf( "%s(%d)Abort\n", __func__, __LINE__ );
 800a83a:	f240 2293 	movw	r2, #659	; 0x293
 800a83e:	491d      	ldr	r1, [pc, #116]	; (800a8b4 <Ymodem_Receive+0x380>)
 800a840:	4827      	ldr	r0, [pc, #156]	; (800a8e0 <Ymodem_Receive+0x3ac>)
 800a842:	f000 f8cb 	bl	800a9dc <iprintf>
          Serial_PutByte(CA);
 800a846:	2018      	movs	r0, #24
 800a848:	f7ff fb48 	bl	8009edc <Serial_PutByte>
          Serial_PutByte(CA);
 800a84c:	2018      	movs	r0, #24
 800a84e:	f7ff fb45 	bl	8009edc <Serial_PutByte>
          result = COM_ABORT;
 800a852:	2302      	movs	r3, #2
 800a854:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
          break;
 800a858:	e04a      	b.n	800a8f0 <Ymodem_Receive+0x3bc>
        default:
          if (session_begin > 0)
 800a85a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00c      	beq.n	800a87c <Ymodem_Receive+0x348>
          {
              errors ++;
 800a862:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a866:	3301      	adds	r3, #1
 800a868:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
              printf( "%s(%d) - errors (%u)\n", __func__, __LINE__, (unsigned int)errors );
 800a86c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a870:	f44f 7227 	mov.w	r2, #668	; 0x29c
 800a874:	490f      	ldr	r1, [pc, #60]	; (800a8b4 <Ymodem_Receive+0x380>)
 800a876:	481b      	ldr	r0, [pc, #108]	; (800a8e4 <Ymodem_Receive+0x3b0>)
 800a878:	f000 f8b0 	bl	800a9dc <iprintf>
          }
          if (errors > MAX_ERRORS)
 800a87c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a880:	2b05      	cmp	r3, #5
 800a882:	d931      	bls.n	800a8e8 <Ymodem_Receive+0x3b4>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 800a884:	2018      	movs	r0, #24
 800a886:	f7ff fb29 	bl	8009edc <Serial_PutByte>
            Serial_PutByte(CA);
 800a88a:	2018      	movs	r0, #24
 800a88c:	f7ff fb26 	bl	8009edc <Serial_PutByte>

            printf( "%s(%d) - errors (%u)\n", __func__, __LINE__, (unsigned int)errors );
 800a890:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800a894:	f44f 7229 	mov.w	r2, #676	; 0x2a4
 800a898:	4906      	ldr	r1, [pc, #24]	; (800a8b4 <Ymodem_Receive+0x380>)
 800a89a:	4812      	ldr	r0, [pc, #72]	; (800a8e4 <Ymodem_Receive+0x3b0>)
 800a89c:	f000 f89e 	bl	800a9dc <iprintf>
 800a8a0:	e025      	b.n	800a8ee <Ymodem_Receive+0x3ba>
 800a8a2:	bf00      	nop
 800a8a4:	20001104 	.word	0x20001104
 800a8a8:	08020000 	.word	0x08020000
 800a8ac:	0800caec 	.word	0x0800caec
 800a8b0:	20000cfc 	.word	0x20000cfc
 800a8b4:	0800e4bc 	.word	0x0800e4bc
 800a8b8:	0800cafc 	.word	0x0800cafc
 800a8bc:	0800cb1c 	.word	0x0800cb1c
 800a8c0:	20000d00 	.word	0x20000d00
 800a8c4:	20000a9c 	.word	0x20000a9c
 800a8c8:	000e0001 	.word	0x000e0001
 800a8cc:	20000880 	.word	0x20000880
 800a8d0:	0800cb40 	.word	0x0800cb40
 800a8d4:	200005e8 	.word	0x200005e8
 800a8d8:	0800cb58 	.word	0x0800cb58
 800a8dc:	0800cb7c 	.word	0x0800cb7c
 800a8e0:	0800cb9c 	.word	0x0800cb9c
 800a8e4:	0800cbac 	.word	0x0800cbac
            //  -> Default Task로 이동.
            //===========================================================================
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 800a8e8:	2043      	movs	r0, #67	; 0x43
 800a8ea:	f7ff faf7 	bl	8009edc <Serial_PutByte>
          }
          break;
 800a8ee:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 800a8f0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d104      	bne.n	800a902 <Ymodem_Receive+0x3ce>
 800a8f8:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	f43f ae3c 	beq.w	800a57a <Ymodem_Receive+0x46>
  while ((session_done == 0) && (result == COM_OK))
 800a902:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800a906:	2b00      	cmp	r3, #0
 800a908:	d104      	bne.n	800a914 <Ymodem_Receive+0x3e0>
 800a90a:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f43f ae2c 	beq.w	800a56c <Ymodem_Receive+0x38>
    }
  }

//  printf( "%s(%d) - result (%d)\n", __func__, __LINE__, result );

  return result;
 800a914:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
}
 800a918:	4618      	mov	r0, r3
 800a91a:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop

0800a924 <__cxa_pure_virtual>:
 800a924:	b508      	push	{r3, lr}
 800a926:	f000 f80d 	bl	800a944 <_ZSt9terminatev>

0800a92a <_ZN10__cxxabiv111__terminateEPFvvE>:
 800a92a:	b508      	push	{r3, lr}
 800a92c:	4780      	blx	r0
 800a92e:	f000 f80e 	bl	800a94e <abort>
	...

0800a934 <_ZSt13get_terminatev>:
 800a934:	4b02      	ldr	r3, [pc, #8]	; (800a940 <_ZSt13get_terminatev+0xc>)
 800a936:	6818      	ldr	r0, [r3, #0]
 800a938:	f3bf 8f5b 	dmb	ish
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	200002a4 	.word	0x200002a4

0800a944 <_ZSt9terminatev>:
 800a944:	b508      	push	{r3, lr}
 800a946:	f7ff fff5 	bl	800a934 <_ZSt13get_terminatev>
 800a94a:	f7ff ffee 	bl	800a92a <_ZN10__cxxabiv111__terminateEPFvvE>

0800a94e <abort>:
 800a94e:	b508      	push	{r3, lr}
 800a950:	2006      	movs	r0, #6
 800a952:	f000 f9dd 	bl	800ad10 <raise>
 800a956:	2001      	movs	r0, #1
 800a958:	f7f6 febd 	bl	80016d6 <_exit>

0800a95c <__errno>:
 800a95c:	4b01      	ldr	r3, [pc, #4]	; (800a964 <__errno+0x8>)
 800a95e:	6818      	ldr	r0, [r3, #0]
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	200002a8 	.word	0x200002a8

0800a968 <__libc_init_array>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	4d0d      	ldr	r5, [pc, #52]	; (800a9a0 <__libc_init_array+0x38>)
 800a96c:	4c0d      	ldr	r4, [pc, #52]	; (800a9a4 <__libc_init_array+0x3c>)
 800a96e:	1b64      	subs	r4, r4, r5
 800a970:	10a4      	asrs	r4, r4, #2
 800a972:	2600      	movs	r6, #0
 800a974:	42a6      	cmp	r6, r4
 800a976:	d109      	bne.n	800a98c <__libc_init_array+0x24>
 800a978:	4d0b      	ldr	r5, [pc, #44]	; (800a9a8 <__libc_init_array+0x40>)
 800a97a:	4c0c      	ldr	r4, [pc, #48]	; (800a9ac <__libc_init_array+0x44>)
 800a97c:	f001 fb36 	bl	800bfec <_init>
 800a980:	1b64      	subs	r4, r4, r5
 800a982:	10a4      	asrs	r4, r4, #2
 800a984:	2600      	movs	r6, #0
 800a986:	42a6      	cmp	r6, r4
 800a988:	d105      	bne.n	800a996 <__libc_init_array+0x2e>
 800a98a:	bd70      	pop	{r4, r5, r6, pc}
 800a98c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a990:	4798      	blx	r3
 800a992:	3601      	adds	r6, #1
 800a994:	e7ee      	b.n	800a974 <__libc_init_array+0xc>
 800a996:	f855 3b04 	ldr.w	r3, [r5], #4
 800a99a:	4798      	blx	r3
 800a99c:	3601      	adds	r6, #1
 800a99e:	e7f2      	b.n	800a986 <__libc_init_array+0x1e>
 800a9a0:	0800e56c 	.word	0x0800e56c
 800a9a4:	0800e56c 	.word	0x0800e56c
 800a9a8:	0800e56c 	.word	0x0800e56c
 800a9ac:	0800e574 	.word	0x0800e574

0800a9b0 <memcpy>:
 800a9b0:	440a      	add	r2, r1
 800a9b2:	4291      	cmp	r1, r2
 800a9b4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9b8:	d100      	bne.n	800a9bc <memcpy+0xc>
 800a9ba:	4770      	bx	lr
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9c6:	4291      	cmp	r1, r2
 800a9c8:	d1f9      	bne.n	800a9be <memcpy+0xe>
 800a9ca:	bd10      	pop	{r4, pc}

0800a9cc <memset>:
 800a9cc:	4402      	add	r2, r0
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d100      	bne.n	800a9d6 <memset+0xa>
 800a9d4:	4770      	bx	lr
 800a9d6:	f803 1b01 	strb.w	r1, [r3], #1
 800a9da:	e7f9      	b.n	800a9d0 <memset+0x4>

0800a9dc <iprintf>:
 800a9dc:	b40f      	push	{r0, r1, r2, r3}
 800a9de:	4b0a      	ldr	r3, [pc, #40]	; (800aa08 <iprintf+0x2c>)
 800a9e0:	b513      	push	{r0, r1, r4, lr}
 800a9e2:	681c      	ldr	r4, [r3, #0]
 800a9e4:	b124      	cbz	r4, 800a9f0 <iprintf+0x14>
 800a9e6:	69a3      	ldr	r3, [r4, #24]
 800a9e8:	b913      	cbnz	r3, 800a9f0 <iprintf+0x14>
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f000 fc0c 	bl	800b208 <__sinit>
 800a9f0:	ab05      	add	r3, sp, #20
 800a9f2:	9a04      	ldr	r2, [sp, #16]
 800a9f4:	68a1      	ldr	r1, [r4, #8]
 800a9f6:	9301      	str	r3, [sp, #4]
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f000 ff53 	bl	800b8a4 <_vfiprintf_r>
 800a9fe:	b002      	add	sp, #8
 800aa00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa04:	b004      	add	sp, #16
 800aa06:	4770      	bx	lr
 800aa08:	200002a8 	.word	0x200002a8

0800aa0c <putchar>:
 800aa0c:	4b09      	ldr	r3, [pc, #36]	; (800aa34 <putchar+0x28>)
 800aa0e:	b513      	push	{r0, r1, r4, lr}
 800aa10:	681c      	ldr	r4, [r3, #0]
 800aa12:	4601      	mov	r1, r0
 800aa14:	b134      	cbz	r4, 800aa24 <putchar+0x18>
 800aa16:	69a3      	ldr	r3, [r4, #24]
 800aa18:	b923      	cbnz	r3, 800aa24 <putchar+0x18>
 800aa1a:	9001      	str	r0, [sp, #4]
 800aa1c:	4620      	mov	r0, r4
 800aa1e:	f000 fbf3 	bl	800b208 <__sinit>
 800aa22:	9901      	ldr	r1, [sp, #4]
 800aa24:	68a2      	ldr	r2, [r4, #8]
 800aa26:	4620      	mov	r0, r4
 800aa28:	b002      	add	sp, #8
 800aa2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa2e:	f001 b9fd 	b.w	800be2c <_putc_r>
 800aa32:	bf00      	nop
 800aa34:	200002a8 	.word	0x200002a8

0800aa38 <_puts_r>:
 800aa38:	b570      	push	{r4, r5, r6, lr}
 800aa3a:	460e      	mov	r6, r1
 800aa3c:	4605      	mov	r5, r0
 800aa3e:	b118      	cbz	r0, 800aa48 <_puts_r+0x10>
 800aa40:	6983      	ldr	r3, [r0, #24]
 800aa42:	b90b      	cbnz	r3, 800aa48 <_puts_r+0x10>
 800aa44:	f000 fbe0 	bl	800b208 <__sinit>
 800aa48:	69ab      	ldr	r3, [r5, #24]
 800aa4a:	68ac      	ldr	r4, [r5, #8]
 800aa4c:	b913      	cbnz	r3, 800aa54 <_puts_r+0x1c>
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 fbda 	bl	800b208 <__sinit>
 800aa54:	4b2c      	ldr	r3, [pc, #176]	; (800ab08 <_puts_r+0xd0>)
 800aa56:	429c      	cmp	r4, r3
 800aa58:	d120      	bne.n	800aa9c <_puts_r+0x64>
 800aa5a:	686c      	ldr	r4, [r5, #4]
 800aa5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa5e:	07db      	lsls	r3, r3, #31
 800aa60:	d405      	bmi.n	800aa6e <_puts_r+0x36>
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	0598      	lsls	r0, r3, #22
 800aa66:	d402      	bmi.n	800aa6e <_puts_r+0x36>
 800aa68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa6a:	f000 fc6b 	bl	800b344 <__retarget_lock_acquire_recursive>
 800aa6e:	89a3      	ldrh	r3, [r4, #12]
 800aa70:	0719      	lsls	r1, r3, #28
 800aa72:	d51d      	bpl.n	800aab0 <_puts_r+0x78>
 800aa74:	6923      	ldr	r3, [r4, #16]
 800aa76:	b1db      	cbz	r3, 800aab0 <_puts_r+0x78>
 800aa78:	3e01      	subs	r6, #1
 800aa7a:	68a3      	ldr	r3, [r4, #8]
 800aa7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa80:	3b01      	subs	r3, #1
 800aa82:	60a3      	str	r3, [r4, #8]
 800aa84:	bb39      	cbnz	r1, 800aad6 <_puts_r+0x9e>
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	da38      	bge.n	800aafc <_puts_r+0xc4>
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	210a      	movs	r1, #10
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f000 f9be 	bl	800ae10 <__swbuf_r>
 800aa94:	3001      	adds	r0, #1
 800aa96:	d011      	beq.n	800aabc <_puts_r+0x84>
 800aa98:	250a      	movs	r5, #10
 800aa9a:	e011      	b.n	800aac0 <_puts_r+0x88>
 800aa9c:	4b1b      	ldr	r3, [pc, #108]	; (800ab0c <_puts_r+0xd4>)
 800aa9e:	429c      	cmp	r4, r3
 800aaa0:	d101      	bne.n	800aaa6 <_puts_r+0x6e>
 800aaa2:	68ac      	ldr	r4, [r5, #8]
 800aaa4:	e7da      	b.n	800aa5c <_puts_r+0x24>
 800aaa6:	4b1a      	ldr	r3, [pc, #104]	; (800ab10 <_puts_r+0xd8>)
 800aaa8:	429c      	cmp	r4, r3
 800aaaa:	bf08      	it	eq
 800aaac:	68ec      	ldreq	r4, [r5, #12]
 800aaae:	e7d5      	b.n	800aa5c <_puts_r+0x24>
 800aab0:	4621      	mov	r1, r4
 800aab2:	4628      	mov	r0, r5
 800aab4:	f000 fa10 	bl	800aed8 <__swsetup_r>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d0dd      	beq.n	800aa78 <_puts_r+0x40>
 800aabc:	f04f 35ff 	mov.w	r5, #4294967295
 800aac0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aac2:	07da      	lsls	r2, r3, #31
 800aac4:	d405      	bmi.n	800aad2 <_puts_r+0x9a>
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	059b      	lsls	r3, r3, #22
 800aaca:	d402      	bmi.n	800aad2 <_puts_r+0x9a>
 800aacc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aace:	f000 fc3a 	bl	800b346 <__retarget_lock_release_recursive>
 800aad2:	4628      	mov	r0, r5
 800aad4:	bd70      	pop	{r4, r5, r6, pc}
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	da04      	bge.n	800aae4 <_puts_r+0xac>
 800aada:	69a2      	ldr	r2, [r4, #24]
 800aadc:	429a      	cmp	r2, r3
 800aade:	dc06      	bgt.n	800aaee <_puts_r+0xb6>
 800aae0:	290a      	cmp	r1, #10
 800aae2:	d004      	beq.n	800aaee <_puts_r+0xb6>
 800aae4:	6823      	ldr	r3, [r4, #0]
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	6022      	str	r2, [r4, #0]
 800aaea:	7019      	strb	r1, [r3, #0]
 800aaec:	e7c5      	b.n	800aa7a <_puts_r+0x42>
 800aaee:	4622      	mov	r2, r4
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	f000 f98d 	bl	800ae10 <__swbuf_r>
 800aaf6:	3001      	adds	r0, #1
 800aaf8:	d1bf      	bne.n	800aa7a <_puts_r+0x42>
 800aafa:	e7df      	b.n	800aabc <_puts_r+0x84>
 800aafc:	6823      	ldr	r3, [r4, #0]
 800aafe:	250a      	movs	r5, #10
 800ab00:	1c5a      	adds	r2, r3, #1
 800ab02:	6022      	str	r2, [r4, #0]
 800ab04:	701d      	strb	r5, [r3, #0]
 800ab06:	e7db      	b.n	800aac0 <_puts_r+0x88>
 800ab08:	0800e4f0 	.word	0x0800e4f0
 800ab0c:	0800e510 	.word	0x0800e510
 800ab10:	0800e4d0 	.word	0x0800e4d0

0800ab14 <puts>:
 800ab14:	4b02      	ldr	r3, [pc, #8]	; (800ab20 <puts+0xc>)
 800ab16:	4601      	mov	r1, r0
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	f7ff bf8d 	b.w	800aa38 <_puts_r>
 800ab1e:	bf00      	nop
 800ab20:	200002a8 	.word	0x200002a8

0800ab24 <setbuf>:
 800ab24:	2900      	cmp	r1, #0
 800ab26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab2a:	bf0c      	ite	eq
 800ab2c:	2202      	moveq	r2, #2
 800ab2e:	2200      	movne	r2, #0
 800ab30:	f000 b800 	b.w	800ab34 <setvbuf>

0800ab34 <setvbuf>:
 800ab34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab38:	461d      	mov	r5, r3
 800ab3a:	4b5d      	ldr	r3, [pc, #372]	; (800acb0 <setvbuf+0x17c>)
 800ab3c:	681f      	ldr	r7, [r3, #0]
 800ab3e:	4604      	mov	r4, r0
 800ab40:	460e      	mov	r6, r1
 800ab42:	4690      	mov	r8, r2
 800ab44:	b127      	cbz	r7, 800ab50 <setvbuf+0x1c>
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	b913      	cbnz	r3, 800ab50 <setvbuf+0x1c>
 800ab4a:	4638      	mov	r0, r7
 800ab4c:	f000 fb5c 	bl	800b208 <__sinit>
 800ab50:	4b58      	ldr	r3, [pc, #352]	; (800acb4 <setvbuf+0x180>)
 800ab52:	429c      	cmp	r4, r3
 800ab54:	d167      	bne.n	800ac26 <setvbuf+0xf2>
 800ab56:	687c      	ldr	r4, [r7, #4]
 800ab58:	f1b8 0f02 	cmp.w	r8, #2
 800ab5c:	d006      	beq.n	800ab6c <setvbuf+0x38>
 800ab5e:	f1b8 0f01 	cmp.w	r8, #1
 800ab62:	f200 809f 	bhi.w	800aca4 <setvbuf+0x170>
 800ab66:	2d00      	cmp	r5, #0
 800ab68:	f2c0 809c 	blt.w	800aca4 <setvbuf+0x170>
 800ab6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab6e:	07db      	lsls	r3, r3, #31
 800ab70:	d405      	bmi.n	800ab7e <setvbuf+0x4a>
 800ab72:	89a3      	ldrh	r3, [r4, #12]
 800ab74:	0598      	lsls	r0, r3, #22
 800ab76:	d402      	bmi.n	800ab7e <setvbuf+0x4a>
 800ab78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab7a:	f000 fbe3 	bl	800b344 <__retarget_lock_acquire_recursive>
 800ab7e:	4621      	mov	r1, r4
 800ab80:	4638      	mov	r0, r7
 800ab82:	f000 faad 	bl	800b0e0 <_fflush_r>
 800ab86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab88:	b141      	cbz	r1, 800ab9c <setvbuf+0x68>
 800ab8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab8e:	4299      	cmp	r1, r3
 800ab90:	d002      	beq.n	800ab98 <setvbuf+0x64>
 800ab92:	4638      	mov	r0, r7
 800ab94:	f000 fc56 	bl	800b444 <_free_r>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	6363      	str	r3, [r4, #52]	; 0x34
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	61a3      	str	r3, [r4, #24]
 800aba0:	6063      	str	r3, [r4, #4]
 800aba2:	89a3      	ldrh	r3, [r4, #12]
 800aba4:	0619      	lsls	r1, r3, #24
 800aba6:	d503      	bpl.n	800abb0 <setvbuf+0x7c>
 800aba8:	6921      	ldr	r1, [r4, #16]
 800abaa:	4638      	mov	r0, r7
 800abac:	f000 fc4a 	bl	800b444 <_free_r>
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800abb6:	f023 0303 	bic.w	r3, r3, #3
 800abba:	f1b8 0f02 	cmp.w	r8, #2
 800abbe:	81a3      	strh	r3, [r4, #12]
 800abc0:	d06c      	beq.n	800ac9c <setvbuf+0x168>
 800abc2:	ab01      	add	r3, sp, #4
 800abc4:	466a      	mov	r2, sp
 800abc6:	4621      	mov	r1, r4
 800abc8:	4638      	mov	r0, r7
 800abca:	f000 fbcf 	bl	800b36c <__swhatbuf_r>
 800abce:	89a3      	ldrh	r3, [r4, #12]
 800abd0:	4318      	orrs	r0, r3
 800abd2:	81a0      	strh	r0, [r4, #12]
 800abd4:	2d00      	cmp	r5, #0
 800abd6:	d130      	bne.n	800ac3a <setvbuf+0x106>
 800abd8:	9d00      	ldr	r5, [sp, #0]
 800abda:	4628      	mov	r0, r5
 800abdc:	f000 fc2a 	bl	800b434 <malloc>
 800abe0:	4606      	mov	r6, r0
 800abe2:	2800      	cmp	r0, #0
 800abe4:	d155      	bne.n	800ac92 <setvbuf+0x15e>
 800abe6:	f8dd 9000 	ldr.w	r9, [sp]
 800abea:	45a9      	cmp	r9, r5
 800abec:	d14a      	bne.n	800ac84 <setvbuf+0x150>
 800abee:	f04f 35ff 	mov.w	r5, #4294967295
 800abf2:	2200      	movs	r2, #0
 800abf4:	60a2      	str	r2, [r4, #8]
 800abf6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800abfa:	6022      	str	r2, [r4, #0]
 800abfc:	6122      	str	r2, [r4, #16]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac04:	6162      	str	r2, [r4, #20]
 800ac06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ac08:	f043 0302 	orr.w	r3, r3, #2
 800ac0c:	07d2      	lsls	r2, r2, #31
 800ac0e:	81a3      	strh	r3, [r4, #12]
 800ac10:	d405      	bmi.n	800ac1e <setvbuf+0xea>
 800ac12:	f413 7f00 	tst.w	r3, #512	; 0x200
 800ac16:	d102      	bne.n	800ac1e <setvbuf+0xea>
 800ac18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac1a:	f000 fb94 	bl	800b346 <__retarget_lock_release_recursive>
 800ac1e:	4628      	mov	r0, r5
 800ac20:	b003      	add	sp, #12
 800ac22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac26:	4b24      	ldr	r3, [pc, #144]	; (800acb8 <setvbuf+0x184>)
 800ac28:	429c      	cmp	r4, r3
 800ac2a:	d101      	bne.n	800ac30 <setvbuf+0xfc>
 800ac2c:	68bc      	ldr	r4, [r7, #8]
 800ac2e:	e793      	b.n	800ab58 <setvbuf+0x24>
 800ac30:	4b22      	ldr	r3, [pc, #136]	; (800acbc <setvbuf+0x188>)
 800ac32:	429c      	cmp	r4, r3
 800ac34:	bf08      	it	eq
 800ac36:	68fc      	ldreq	r4, [r7, #12]
 800ac38:	e78e      	b.n	800ab58 <setvbuf+0x24>
 800ac3a:	2e00      	cmp	r6, #0
 800ac3c:	d0cd      	beq.n	800abda <setvbuf+0xa6>
 800ac3e:	69bb      	ldr	r3, [r7, #24]
 800ac40:	b913      	cbnz	r3, 800ac48 <setvbuf+0x114>
 800ac42:	4638      	mov	r0, r7
 800ac44:	f000 fae0 	bl	800b208 <__sinit>
 800ac48:	f1b8 0f01 	cmp.w	r8, #1
 800ac4c:	bf08      	it	eq
 800ac4e:	89a3      	ldrheq	r3, [r4, #12]
 800ac50:	6026      	str	r6, [r4, #0]
 800ac52:	bf04      	itt	eq
 800ac54:	f043 0301 	orreq.w	r3, r3, #1
 800ac58:	81a3      	strheq	r3, [r4, #12]
 800ac5a:	89a2      	ldrh	r2, [r4, #12]
 800ac5c:	f012 0308 	ands.w	r3, r2, #8
 800ac60:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ac64:	d01c      	beq.n	800aca0 <setvbuf+0x16c>
 800ac66:	07d3      	lsls	r3, r2, #31
 800ac68:	bf41      	itttt	mi
 800ac6a:	2300      	movmi	r3, #0
 800ac6c:	426d      	negmi	r5, r5
 800ac6e:	60a3      	strmi	r3, [r4, #8]
 800ac70:	61a5      	strmi	r5, [r4, #24]
 800ac72:	bf58      	it	pl
 800ac74:	60a5      	strpl	r5, [r4, #8]
 800ac76:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800ac78:	f015 0501 	ands.w	r5, r5, #1
 800ac7c:	d115      	bne.n	800acaa <setvbuf+0x176>
 800ac7e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800ac82:	e7c8      	b.n	800ac16 <setvbuf+0xe2>
 800ac84:	4648      	mov	r0, r9
 800ac86:	f000 fbd5 	bl	800b434 <malloc>
 800ac8a:	4606      	mov	r6, r0
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d0ae      	beq.n	800abee <setvbuf+0xba>
 800ac90:	464d      	mov	r5, r9
 800ac92:	89a3      	ldrh	r3, [r4, #12]
 800ac94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac98:	81a3      	strh	r3, [r4, #12]
 800ac9a:	e7d0      	b.n	800ac3e <setvbuf+0x10a>
 800ac9c:	2500      	movs	r5, #0
 800ac9e:	e7a8      	b.n	800abf2 <setvbuf+0xbe>
 800aca0:	60a3      	str	r3, [r4, #8]
 800aca2:	e7e8      	b.n	800ac76 <setvbuf+0x142>
 800aca4:	f04f 35ff 	mov.w	r5, #4294967295
 800aca8:	e7b9      	b.n	800ac1e <setvbuf+0xea>
 800acaa:	2500      	movs	r5, #0
 800acac:	e7b7      	b.n	800ac1e <setvbuf+0xea>
 800acae:	bf00      	nop
 800acb0:	200002a8 	.word	0x200002a8
 800acb4:	0800e4f0 	.word	0x0800e4f0
 800acb8:	0800e510 	.word	0x0800e510
 800acbc:	0800e4d0 	.word	0x0800e4d0

0800acc0 <_raise_r>:
 800acc0:	291f      	cmp	r1, #31
 800acc2:	b538      	push	{r3, r4, r5, lr}
 800acc4:	4604      	mov	r4, r0
 800acc6:	460d      	mov	r5, r1
 800acc8:	d904      	bls.n	800acd4 <_raise_r+0x14>
 800acca:	2316      	movs	r3, #22
 800accc:	6003      	str	r3, [r0, #0]
 800acce:	f04f 30ff 	mov.w	r0, #4294967295
 800acd2:	bd38      	pop	{r3, r4, r5, pc}
 800acd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800acd6:	b112      	cbz	r2, 800acde <_raise_r+0x1e>
 800acd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acdc:	b94b      	cbnz	r3, 800acf2 <_raise_r+0x32>
 800acde:	4620      	mov	r0, r4
 800ace0:	f000 f830 	bl	800ad44 <_getpid_r>
 800ace4:	462a      	mov	r2, r5
 800ace6:	4601      	mov	r1, r0
 800ace8:	4620      	mov	r0, r4
 800acea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acee:	f000 b817 	b.w	800ad20 <_kill_r>
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d00a      	beq.n	800ad0c <_raise_r+0x4c>
 800acf6:	1c59      	adds	r1, r3, #1
 800acf8:	d103      	bne.n	800ad02 <_raise_r+0x42>
 800acfa:	2316      	movs	r3, #22
 800acfc:	6003      	str	r3, [r0, #0]
 800acfe:	2001      	movs	r0, #1
 800ad00:	e7e7      	b.n	800acd2 <_raise_r+0x12>
 800ad02:	2400      	movs	r4, #0
 800ad04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad08:	4628      	mov	r0, r5
 800ad0a:	4798      	blx	r3
 800ad0c:	2000      	movs	r0, #0
 800ad0e:	e7e0      	b.n	800acd2 <_raise_r+0x12>

0800ad10 <raise>:
 800ad10:	4b02      	ldr	r3, [pc, #8]	; (800ad1c <raise+0xc>)
 800ad12:	4601      	mov	r1, r0
 800ad14:	6818      	ldr	r0, [r3, #0]
 800ad16:	f7ff bfd3 	b.w	800acc0 <_raise_r>
 800ad1a:	bf00      	nop
 800ad1c:	200002a8 	.word	0x200002a8

0800ad20 <_kill_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d07      	ldr	r5, [pc, #28]	; (800ad40 <_kill_r+0x20>)
 800ad24:	2300      	movs	r3, #0
 800ad26:	4604      	mov	r4, r0
 800ad28:	4608      	mov	r0, r1
 800ad2a:	4611      	mov	r1, r2
 800ad2c:	602b      	str	r3, [r5, #0]
 800ad2e:	f7f6 fcc2 	bl	80016b6 <_kill>
 800ad32:	1c43      	adds	r3, r0, #1
 800ad34:	d102      	bne.n	800ad3c <_kill_r+0x1c>
 800ad36:	682b      	ldr	r3, [r5, #0]
 800ad38:	b103      	cbz	r3, 800ad3c <_kill_r+0x1c>
 800ad3a:	6023      	str	r3, [r4, #0]
 800ad3c:	bd38      	pop	{r3, r4, r5, pc}
 800ad3e:	bf00      	nop
 800ad40:	20001114 	.word	0x20001114

0800ad44 <_getpid_r>:
 800ad44:	f7f6 bcaf 	b.w	80016a6 <_getpid>

0800ad48 <siprintf>:
 800ad48:	b40e      	push	{r1, r2, r3}
 800ad4a:	b500      	push	{lr}
 800ad4c:	b09c      	sub	sp, #112	; 0x70
 800ad4e:	ab1d      	add	r3, sp, #116	; 0x74
 800ad50:	9002      	str	r0, [sp, #8]
 800ad52:	9006      	str	r0, [sp, #24]
 800ad54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad58:	4809      	ldr	r0, [pc, #36]	; (800ad80 <siprintf+0x38>)
 800ad5a:	9107      	str	r1, [sp, #28]
 800ad5c:	9104      	str	r1, [sp, #16]
 800ad5e:	4909      	ldr	r1, [pc, #36]	; (800ad84 <siprintf+0x3c>)
 800ad60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad64:	9105      	str	r1, [sp, #20]
 800ad66:	6800      	ldr	r0, [r0, #0]
 800ad68:	9301      	str	r3, [sp, #4]
 800ad6a:	a902      	add	r1, sp, #8
 800ad6c:	f000 fc70 	bl	800b650 <_svfiprintf_r>
 800ad70:	9b02      	ldr	r3, [sp, #8]
 800ad72:	2200      	movs	r2, #0
 800ad74:	701a      	strb	r2, [r3, #0]
 800ad76:	b01c      	add	sp, #112	; 0x70
 800ad78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad7c:	b003      	add	sp, #12
 800ad7e:	4770      	bx	lr
 800ad80:	200002a8 	.word	0x200002a8
 800ad84:	ffff0208 	.word	0xffff0208

0800ad88 <__sread>:
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad90:	f001 f894 	bl	800bebc <_read_r>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	bfab      	itete	ge
 800ad98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ad9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad9c:	181b      	addge	r3, r3, r0
 800ad9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ada2:	bfac      	ite	ge
 800ada4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ada6:	81a3      	strhlt	r3, [r4, #12]
 800ada8:	bd10      	pop	{r4, pc}

0800adaa <__swrite>:
 800adaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adae:	461f      	mov	r7, r3
 800adb0:	898b      	ldrh	r3, [r1, #12]
 800adb2:	05db      	lsls	r3, r3, #23
 800adb4:	4605      	mov	r5, r0
 800adb6:	460c      	mov	r4, r1
 800adb8:	4616      	mov	r6, r2
 800adba:	d505      	bpl.n	800adc8 <__swrite+0x1e>
 800adbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc0:	2302      	movs	r3, #2
 800adc2:	2200      	movs	r2, #0
 800adc4:	f000 fac0 	bl	800b348 <_lseek_r>
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800add2:	81a3      	strh	r3, [r4, #12]
 800add4:	4632      	mov	r2, r6
 800add6:	463b      	mov	r3, r7
 800add8:	4628      	mov	r0, r5
 800adda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adde:	f000 b869 	b.w	800aeb4 <_write_r>

0800ade2 <__sseek>:
 800ade2:	b510      	push	{r4, lr}
 800ade4:	460c      	mov	r4, r1
 800ade6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adea:	f000 faad 	bl	800b348 <_lseek_r>
 800adee:	1c43      	adds	r3, r0, #1
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	bf15      	itete	ne
 800adf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800adf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800adfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800adfe:	81a3      	strheq	r3, [r4, #12]
 800ae00:	bf18      	it	ne
 800ae02:	81a3      	strhne	r3, [r4, #12]
 800ae04:	bd10      	pop	{r4, pc}

0800ae06 <__sclose>:
 800ae06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae0a:	f000 b8d3 	b.w	800afb4 <_close_r>
	...

0800ae10 <__swbuf_r>:
 800ae10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae12:	460e      	mov	r6, r1
 800ae14:	4614      	mov	r4, r2
 800ae16:	4605      	mov	r5, r0
 800ae18:	b118      	cbz	r0, 800ae22 <__swbuf_r+0x12>
 800ae1a:	6983      	ldr	r3, [r0, #24]
 800ae1c:	b90b      	cbnz	r3, 800ae22 <__swbuf_r+0x12>
 800ae1e:	f000 f9f3 	bl	800b208 <__sinit>
 800ae22:	4b21      	ldr	r3, [pc, #132]	; (800aea8 <__swbuf_r+0x98>)
 800ae24:	429c      	cmp	r4, r3
 800ae26:	d12b      	bne.n	800ae80 <__swbuf_r+0x70>
 800ae28:	686c      	ldr	r4, [r5, #4]
 800ae2a:	69a3      	ldr	r3, [r4, #24]
 800ae2c:	60a3      	str	r3, [r4, #8]
 800ae2e:	89a3      	ldrh	r3, [r4, #12]
 800ae30:	071a      	lsls	r2, r3, #28
 800ae32:	d52f      	bpl.n	800ae94 <__swbuf_r+0x84>
 800ae34:	6923      	ldr	r3, [r4, #16]
 800ae36:	b36b      	cbz	r3, 800ae94 <__swbuf_r+0x84>
 800ae38:	6923      	ldr	r3, [r4, #16]
 800ae3a:	6820      	ldr	r0, [r4, #0]
 800ae3c:	1ac0      	subs	r0, r0, r3
 800ae3e:	6963      	ldr	r3, [r4, #20]
 800ae40:	b2f6      	uxtb	r6, r6
 800ae42:	4283      	cmp	r3, r0
 800ae44:	4637      	mov	r7, r6
 800ae46:	dc04      	bgt.n	800ae52 <__swbuf_r+0x42>
 800ae48:	4621      	mov	r1, r4
 800ae4a:	4628      	mov	r0, r5
 800ae4c:	f000 f948 	bl	800b0e0 <_fflush_r>
 800ae50:	bb30      	cbnz	r0, 800aea0 <__swbuf_r+0x90>
 800ae52:	68a3      	ldr	r3, [r4, #8]
 800ae54:	3b01      	subs	r3, #1
 800ae56:	60a3      	str	r3, [r4, #8]
 800ae58:	6823      	ldr	r3, [r4, #0]
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	6022      	str	r2, [r4, #0]
 800ae5e:	701e      	strb	r6, [r3, #0]
 800ae60:	6963      	ldr	r3, [r4, #20]
 800ae62:	3001      	adds	r0, #1
 800ae64:	4283      	cmp	r3, r0
 800ae66:	d004      	beq.n	800ae72 <__swbuf_r+0x62>
 800ae68:	89a3      	ldrh	r3, [r4, #12]
 800ae6a:	07db      	lsls	r3, r3, #31
 800ae6c:	d506      	bpl.n	800ae7c <__swbuf_r+0x6c>
 800ae6e:	2e0a      	cmp	r6, #10
 800ae70:	d104      	bne.n	800ae7c <__swbuf_r+0x6c>
 800ae72:	4621      	mov	r1, r4
 800ae74:	4628      	mov	r0, r5
 800ae76:	f000 f933 	bl	800b0e0 <_fflush_r>
 800ae7a:	b988      	cbnz	r0, 800aea0 <__swbuf_r+0x90>
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae80:	4b0a      	ldr	r3, [pc, #40]	; (800aeac <__swbuf_r+0x9c>)
 800ae82:	429c      	cmp	r4, r3
 800ae84:	d101      	bne.n	800ae8a <__swbuf_r+0x7a>
 800ae86:	68ac      	ldr	r4, [r5, #8]
 800ae88:	e7cf      	b.n	800ae2a <__swbuf_r+0x1a>
 800ae8a:	4b09      	ldr	r3, [pc, #36]	; (800aeb0 <__swbuf_r+0xa0>)
 800ae8c:	429c      	cmp	r4, r3
 800ae8e:	bf08      	it	eq
 800ae90:	68ec      	ldreq	r4, [r5, #12]
 800ae92:	e7ca      	b.n	800ae2a <__swbuf_r+0x1a>
 800ae94:	4621      	mov	r1, r4
 800ae96:	4628      	mov	r0, r5
 800ae98:	f000 f81e 	bl	800aed8 <__swsetup_r>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d0cb      	beq.n	800ae38 <__swbuf_r+0x28>
 800aea0:	f04f 37ff 	mov.w	r7, #4294967295
 800aea4:	e7ea      	b.n	800ae7c <__swbuf_r+0x6c>
 800aea6:	bf00      	nop
 800aea8:	0800e4f0 	.word	0x0800e4f0
 800aeac:	0800e510 	.word	0x0800e510
 800aeb0:	0800e4d0 	.word	0x0800e4d0

0800aeb4 <_write_r>:
 800aeb4:	b538      	push	{r3, r4, r5, lr}
 800aeb6:	4d07      	ldr	r5, [pc, #28]	; (800aed4 <_write_r+0x20>)
 800aeb8:	4604      	mov	r4, r0
 800aeba:	4608      	mov	r0, r1
 800aebc:	4611      	mov	r1, r2
 800aebe:	2200      	movs	r2, #0
 800aec0:	602a      	str	r2, [r5, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	f7f6 fc2e 	bl	8001724 <_write>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_write_r+0x1e>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_write_r+0x1e>
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	20001114 	.word	0x20001114

0800aed8 <__swsetup_r>:
 800aed8:	4b32      	ldr	r3, [pc, #200]	; (800afa4 <__swsetup_r+0xcc>)
 800aeda:	b570      	push	{r4, r5, r6, lr}
 800aedc:	681d      	ldr	r5, [r3, #0]
 800aede:	4606      	mov	r6, r0
 800aee0:	460c      	mov	r4, r1
 800aee2:	b125      	cbz	r5, 800aeee <__swsetup_r+0x16>
 800aee4:	69ab      	ldr	r3, [r5, #24]
 800aee6:	b913      	cbnz	r3, 800aeee <__swsetup_r+0x16>
 800aee8:	4628      	mov	r0, r5
 800aeea:	f000 f98d 	bl	800b208 <__sinit>
 800aeee:	4b2e      	ldr	r3, [pc, #184]	; (800afa8 <__swsetup_r+0xd0>)
 800aef0:	429c      	cmp	r4, r3
 800aef2:	d10f      	bne.n	800af14 <__swsetup_r+0x3c>
 800aef4:	686c      	ldr	r4, [r5, #4]
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aefc:	0719      	lsls	r1, r3, #28
 800aefe:	d42c      	bmi.n	800af5a <__swsetup_r+0x82>
 800af00:	06dd      	lsls	r5, r3, #27
 800af02:	d411      	bmi.n	800af28 <__swsetup_r+0x50>
 800af04:	2309      	movs	r3, #9
 800af06:	6033      	str	r3, [r6, #0]
 800af08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af0c:	81a3      	strh	r3, [r4, #12]
 800af0e:	f04f 30ff 	mov.w	r0, #4294967295
 800af12:	e03e      	b.n	800af92 <__swsetup_r+0xba>
 800af14:	4b25      	ldr	r3, [pc, #148]	; (800afac <__swsetup_r+0xd4>)
 800af16:	429c      	cmp	r4, r3
 800af18:	d101      	bne.n	800af1e <__swsetup_r+0x46>
 800af1a:	68ac      	ldr	r4, [r5, #8]
 800af1c:	e7eb      	b.n	800aef6 <__swsetup_r+0x1e>
 800af1e:	4b24      	ldr	r3, [pc, #144]	; (800afb0 <__swsetup_r+0xd8>)
 800af20:	429c      	cmp	r4, r3
 800af22:	bf08      	it	eq
 800af24:	68ec      	ldreq	r4, [r5, #12]
 800af26:	e7e6      	b.n	800aef6 <__swsetup_r+0x1e>
 800af28:	0758      	lsls	r0, r3, #29
 800af2a:	d512      	bpl.n	800af52 <__swsetup_r+0x7a>
 800af2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af2e:	b141      	cbz	r1, 800af42 <__swsetup_r+0x6a>
 800af30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af34:	4299      	cmp	r1, r3
 800af36:	d002      	beq.n	800af3e <__swsetup_r+0x66>
 800af38:	4630      	mov	r0, r6
 800af3a:	f000 fa83 	bl	800b444 <_free_r>
 800af3e:	2300      	movs	r3, #0
 800af40:	6363      	str	r3, [r4, #52]	; 0x34
 800af42:	89a3      	ldrh	r3, [r4, #12]
 800af44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af48:	81a3      	strh	r3, [r4, #12]
 800af4a:	2300      	movs	r3, #0
 800af4c:	6063      	str	r3, [r4, #4]
 800af4e:	6923      	ldr	r3, [r4, #16]
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	f043 0308 	orr.w	r3, r3, #8
 800af58:	81a3      	strh	r3, [r4, #12]
 800af5a:	6923      	ldr	r3, [r4, #16]
 800af5c:	b94b      	cbnz	r3, 800af72 <__swsetup_r+0x9a>
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af68:	d003      	beq.n	800af72 <__swsetup_r+0x9a>
 800af6a:	4621      	mov	r1, r4
 800af6c:	4630      	mov	r0, r6
 800af6e:	f000 fa21 	bl	800b3b4 <__smakebuf_r>
 800af72:	89a0      	ldrh	r0, [r4, #12]
 800af74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af78:	f010 0301 	ands.w	r3, r0, #1
 800af7c:	d00a      	beq.n	800af94 <__swsetup_r+0xbc>
 800af7e:	2300      	movs	r3, #0
 800af80:	60a3      	str	r3, [r4, #8]
 800af82:	6963      	ldr	r3, [r4, #20]
 800af84:	425b      	negs	r3, r3
 800af86:	61a3      	str	r3, [r4, #24]
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	b943      	cbnz	r3, 800af9e <__swsetup_r+0xc6>
 800af8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af90:	d1ba      	bne.n	800af08 <__swsetup_r+0x30>
 800af92:	bd70      	pop	{r4, r5, r6, pc}
 800af94:	0781      	lsls	r1, r0, #30
 800af96:	bf58      	it	pl
 800af98:	6963      	ldrpl	r3, [r4, #20]
 800af9a:	60a3      	str	r3, [r4, #8]
 800af9c:	e7f4      	b.n	800af88 <__swsetup_r+0xb0>
 800af9e:	2000      	movs	r0, #0
 800afa0:	e7f7      	b.n	800af92 <__swsetup_r+0xba>
 800afa2:	bf00      	nop
 800afa4:	200002a8 	.word	0x200002a8
 800afa8:	0800e4f0 	.word	0x0800e4f0
 800afac:	0800e510 	.word	0x0800e510
 800afb0:	0800e4d0 	.word	0x0800e4d0

0800afb4 <_close_r>:
 800afb4:	b538      	push	{r3, r4, r5, lr}
 800afb6:	4d06      	ldr	r5, [pc, #24]	; (800afd0 <_close_r+0x1c>)
 800afb8:	2300      	movs	r3, #0
 800afba:	4604      	mov	r4, r0
 800afbc:	4608      	mov	r0, r1
 800afbe:	602b      	str	r3, [r5, #0]
 800afc0:	f7f6 fbcc 	bl	800175c <_close>
 800afc4:	1c43      	adds	r3, r0, #1
 800afc6:	d102      	bne.n	800afce <_close_r+0x1a>
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	b103      	cbz	r3, 800afce <_close_r+0x1a>
 800afcc:	6023      	str	r3, [r4, #0]
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	20001114 	.word	0x20001114

0800afd4 <__sflush_r>:
 800afd4:	898a      	ldrh	r2, [r1, #12]
 800afd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afda:	4605      	mov	r5, r0
 800afdc:	0710      	lsls	r0, r2, #28
 800afde:	460c      	mov	r4, r1
 800afe0:	d458      	bmi.n	800b094 <__sflush_r+0xc0>
 800afe2:	684b      	ldr	r3, [r1, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	dc05      	bgt.n	800aff4 <__sflush_r+0x20>
 800afe8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afea:	2b00      	cmp	r3, #0
 800afec:	dc02      	bgt.n	800aff4 <__sflush_r+0x20>
 800afee:	2000      	movs	r0, #0
 800aff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aff6:	2e00      	cmp	r6, #0
 800aff8:	d0f9      	beq.n	800afee <__sflush_r+0x1a>
 800affa:	2300      	movs	r3, #0
 800affc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b000:	682f      	ldr	r7, [r5, #0]
 800b002:	602b      	str	r3, [r5, #0]
 800b004:	d032      	beq.n	800b06c <__sflush_r+0x98>
 800b006:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b008:	89a3      	ldrh	r3, [r4, #12]
 800b00a:	075a      	lsls	r2, r3, #29
 800b00c:	d505      	bpl.n	800b01a <__sflush_r+0x46>
 800b00e:	6863      	ldr	r3, [r4, #4]
 800b010:	1ac0      	subs	r0, r0, r3
 800b012:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b014:	b10b      	cbz	r3, 800b01a <__sflush_r+0x46>
 800b016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b018:	1ac0      	subs	r0, r0, r3
 800b01a:	2300      	movs	r3, #0
 800b01c:	4602      	mov	r2, r0
 800b01e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b020:	6a21      	ldr	r1, [r4, #32]
 800b022:	4628      	mov	r0, r5
 800b024:	47b0      	blx	r6
 800b026:	1c43      	adds	r3, r0, #1
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	d106      	bne.n	800b03a <__sflush_r+0x66>
 800b02c:	6829      	ldr	r1, [r5, #0]
 800b02e:	291d      	cmp	r1, #29
 800b030:	d82c      	bhi.n	800b08c <__sflush_r+0xb8>
 800b032:	4a2a      	ldr	r2, [pc, #168]	; (800b0dc <__sflush_r+0x108>)
 800b034:	40ca      	lsrs	r2, r1
 800b036:	07d6      	lsls	r6, r2, #31
 800b038:	d528      	bpl.n	800b08c <__sflush_r+0xb8>
 800b03a:	2200      	movs	r2, #0
 800b03c:	6062      	str	r2, [r4, #4]
 800b03e:	04d9      	lsls	r1, r3, #19
 800b040:	6922      	ldr	r2, [r4, #16]
 800b042:	6022      	str	r2, [r4, #0]
 800b044:	d504      	bpl.n	800b050 <__sflush_r+0x7c>
 800b046:	1c42      	adds	r2, r0, #1
 800b048:	d101      	bne.n	800b04e <__sflush_r+0x7a>
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	b903      	cbnz	r3, 800b050 <__sflush_r+0x7c>
 800b04e:	6560      	str	r0, [r4, #84]	; 0x54
 800b050:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b052:	602f      	str	r7, [r5, #0]
 800b054:	2900      	cmp	r1, #0
 800b056:	d0ca      	beq.n	800afee <__sflush_r+0x1a>
 800b058:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b05c:	4299      	cmp	r1, r3
 800b05e:	d002      	beq.n	800b066 <__sflush_r+0x92>
 800b060:	4628      	mov	r0, r5
 800b062:	f000 f9ef 	bl	800b444 <_free_r>
 800b066:	2000      	movs	r0, #0
 800b068:	6360      	str	r0, [r4, #52]	; 0x34
 800b06a:	e7c1      	b.n	800aff0 <__sflush_r+0x1c>
 800b06c:	6a21      	ldr	r1, [r4, #32]
 800b06e:	2301      	movs	r3, #1
 800b070:	4628      	mov	r0, r5
 800b072:	47b0      	blx	r6
 800b074:	1c41      	adds	r1, r0, #1
 800b076:	d1c7      	bne.n	800b008 <__sflush_r+0x34>
 800b078:	682b      	ldr	r3, [r5, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d0c4      	beq.n	800b008 <__sflush_r+0x34>
 800b07e:	2b1d      	cmp	r3, #29
 800b080:	d001      	beq.n	800b086 <__sflush_r+0xb2>
 800b082:	2b16      	cmp	r3, #22
 800b084:	d101      	bne.n	800b08a <__sflush_r+0xb6>
 800b086:	602f      	str	r7, [r5, #0]
 800b088:	e7b1      	b.n	800afee <__sflush_r+0x1a>
 800b08a:	89a3      	ldrh	r3, [r4, #12]
 800b08c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b090:	81a3      	strh	r3, [r4, #12]
 800b092:	e7ad      	b.n	800aff0 <__sflush_r+0x1c>
 800b094:	690f      	ldr	r7, [r1, #16]
 800b096:	2f00      	cmp	r7, #0
 800b098:	d0a9      	beq.n	800afee <__sflush_r+0x1a>
 800b09a:	0793      	lsls	r3, r2, #30
 800b09c:	680e      	ldr	r6, [r1, #0]
 800b09e:	bf08      	it	eq
 800b0a0:	694b      	ldreq	r3, [r1, #20]
 800b0a2:	600f      	str	r7, [r1, #0]
 800b0a4:	bf18      	it	ne
 800b0a6:	2300      	movne	r3, #0
 800b0a8:	eba6 0807 	sub.w	r8, r6, r7
 800b0ac:	608b      	str	r3, [r1, #8]
 800b0ae:	f1b8 0f00 	cmp.w	r8, #0
 800b0b2:	dd9c      	ble.n	800afee <__sflush_r+0x1a>
 800b0b4:	6a21      	ldr	r1, [r4, #32]
 800b0b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0b8:	4643      	mov	r3, r8
 800b0ba:	463a      	mov	r2, r7
 800b0bc:	4628      	mov	r0, r5
 800b0be:	47b0      	blx	r6
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	dc06      	bgt.n	800b0d2 <__sflush_r+0xfe>
 800b0c4:	89a3      	ldrh	r3, [r4, #12]
 800b0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0ca:	81a3      	strh	r3, [r4, #12]
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	e78e      	b.n	800aff0 <__sflush_r+0x1c>
 800b0d2:	4407      	add	r7, r0
 800b0d4:	eba8 0800 	sub.w	r8, r8, r0
 800b0d8:	e7e9      	b.n	800b0ae <__sflush_r+0xda>
 800b0da:	bf00      	nop
 800b0dc:	20400001 	.word	0x20400001

0800b0e0 <_fflush_r>:
 800b0e0:	b538      	push	{r3, r4, r5, lr}
 800b0e2:	690b      	ldr	r3, [r1, #16]
 800b0e4:	4605      	mov	r5, r0
 800b0e6:	460c      	mov	r4, r1
 800b0e8:	b913      	cbnz	r3, 800b0f0 <_fflush_r+0x10>
 800b0ea:	2500      	movs	r5, #0
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	bd38      	pop	{r3, r4, r5, pc}
 800b0f0:	b118      	cbz	r0, 800b0fa <_fflush_r+0x1a>
 800b0f2:	6983      	ldr	r3, [r0, #24]
 800b0f4:	b90b      	cbnz	r3, 800b0fa <_fflush_r+0x1a>
 800b0f6:	f000 f887 	bl	800b208 <__sinit>
 800b0fa:	4b14      	ldr	r3, [pc, #80]	; (800b14c <_fflush_r+0x6c>)
 800b0fc:	429c      	cmp	r4, r3
 800b0fe:	d11b      	bne.n	800b138 <_fflush_r+0x58>
 800b100:	686c      	ldr	r4, [r5, #4]
 800b102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d0ef      	beq.n	800b0ea <_fflush_r+0xa>
 800b10a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b10c:	07d0      	lsls	r0, r2, #31
 800b10e:	d404      	bmi.n	800b11a <_fflush_r+0x3a>
 800b110:	0599      	lsls	r1, r3, #22
 800b112:	d402      	bmi.n	800b11a <_fflush_r+0x3a>
 800b114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b116:	f000 f915 	bl	800b344 <__retarget_lock_acquire_recursive>
 800b11a:	4628      	mov	r0, r5
 800b11c:	4621      	mov	r1, r4
 800b11e:	f7ff ff59 	bl	800afd4 <__sflush_r>
 800b122:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b124:	07da      	lsls	r2, r3, #31
 800b126:	4605      	mov	r5, r0
 800b128:	d4e0      	bmi.n	800b0ec <_fflush_r+0xc>
 800b12a:	89a3      	ldrh	r3, [r4, #12]
 800b12c:	059b      	lsls	r3, r3, #22
 800b12e:	d4dd      	bmi.n	800b0ec <_fflush_r+0xc>
 800b130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b132:	f000 f908 	bl	800b346 <__retarget_lock_release_recursive>
 800b136:	e7d9      	b.n	800b0ec <_fflush_r+0xc>
 800b138:	4b05      	ldr	r3, [pc, #20]	; (800b150 <_fflush_r+0x70>)
 800b13a:	429c      	cmp	r4, r3
 800b13c:	d101      	bne.n	800b142 <_fflush_r+0x62>
 800b13e:	68ac      	ldr	r4, [r5, #8]
 800b140:	e7df      	b.n	800b102 <_fflush_r+0x22>
 800b142:	4b04      	ldr	r3, [pc, #16]	; (800b154 <_fflush_r+0x74>)
 800b144:	429c      	cmp	r4, r3
 800b146:	bf08      	it	eq
 800b148:	68ec      	ldreq	r4, [r5, #12]
 800b14a:	e7da      	b.n	800b102 <_fflush_r+0x22>
 800b14c:	0800e4f0 	.word	0x0800e4f0
 800b150:	0800e510 	.word	0x0800e510
 800b154:	0800e4d0 	.word	0x0800e4d0

0800b158 <std>:
 800b158:	2300      	movs	r3, #0
 800b15a:	b510      	push	{r4, lr}
 800b15c:	4604      	mov	r4, r0
 800b15e:	e9c0 3300 	strd	r3, r3, [r0]
 800b162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b166:	6083      	str	r3, [r0, #8]
 800b168:	8181      	strh	r1, [r0, #12]
 800b16a:	6643      	str	r3, [r0, #100]	; 0x64
 800b16c:	81c2      	strh	r2, [r0, #14]
 800b16e:	6183      	str	r3, [r0, #24]
 800b170:	4619      	mov	r1, r3
 800b172:	2208      	movs	r2, #8
 800b174:	305c      	adds	r0, #92	; 0x5c
 800b176:	f7ff fc29 	bl	800a9cc <memset>
 800b17a:	4b05      	ldr	r3, [pc, #20]	; (800b190 <std+0x38>)
 800b17c:	6263      	str	r3, [r4, #36]	; 0x24
 800b17e:	4b05      	ldr	r3, [pc, #20]	; (800b194 <std+0x3c>)
 800b180:	62a3      	str	r3, [r4, #40]	; 0x28
 800b182:	4b05      	ldr	r3, [pc, #20]	; (800b198 <std+0x40>)
 800b184:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b186:	4b05      	ldr	r3, [pc, #20]	; (800b19c <std+0x44>)
 800b188:	6224      	str	r4, [r4, #32]
 800b18a:	6323      	str	r3, [r4, #48]	; 0x30
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	bf00      	nop
 800b190:	0800ad89 	.word	0x0800ad89
 800b194:	0800adab 	.word	0x0800adab
 800b198:	0800ade3 	.word	0x0800ade3
 800b19c:	0800ae07 	.word	0x0800ae07

0800b1a0 <_cleanup_r>:
 800b1a0:	4901      	ldr	r1, [pc, #4]	; (800b1a8 <_cleanup_r+0x8>)
 800b1a2:	f000 b8af 	b.w	800b304 <_fwalk_reent>
 800b1a6:	bf00      	nop
 800b1a8:	0800b0e1 	.word	0x0800b0e1

0800b1ac <__sfmoreglue>:
 800b1ac:	b570      	push	{r4, r5, r6, lr}
 800b1ae:	1e4a      	subs	r2, r1, #1
 800b1b0:	2568      	movs	r5, #104	; 0x68
 800b1b2:	4355      	muls	r5, r2
 800b1b4:	460e      	mov	r6, r1
 800b1b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1ba:	f000 f993 	bl	800b4e4 <_malloc_r>
 800b1be:	4604      	mov	r4, r0
 800b1c0:	b140      	cbz	r0, 800b1d4 <__sfmoreglue+0x28>
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	e9c0 1600 	strd	r1, r6, [r0]
 800b1c8:	300c      	adds	r0, #12
 800b1ca:	60a0      	str	r0, [r4, #8]
 800b1cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b1d0:	f7ff fbfc 	bl	800a9cc <memset>
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	bd70      	pop	{r4, r5, r6, pc}

0800b1d8 <__sfp_lock_acquire>:
 800b1d8:	4801      	ldr	r0, [pc, #4]	; (800b1e0 <__sfp_lock_acquire+0x8>)
 800b1da:	f000 b8b3 	b.w	800b344 <__retarget_lock_acquire_recursive>
 800b1de:	bf00      	nop
 800b1e0:	20001110 	.word	0x20001110

0800b1e4 <__sfp_lock_release>:
 800b1e4:	4801      	ldr	r0, [pc, #4]	; (800b1ec <__sfp_lock_release+0x8>)
 800b1e6:	f000 b8ae 	b.w	800b346 <__retarget_lock_release_recursive>
 800b1ea:	bf00      	nop
 800b1ec:	20001110 	.word	0x20001110

0800b1f0 <__sinit_lock_acquire>:
 800b1f0:	4801      	ldr	r0, [pc, #4]	; (800b1f8 <__sinit_lock_acquire+0x8>)
 800b1f2:	f000 b8a7 	b.w	800b344 <__retarget_lock_acquire_recursive>
 800b1f6:	bf00      	nop
 800b1f8:	2000110b 	.word	0x2000110b

0800b1fc <__sinit_lock_release>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	; (800b204 <__sinit_lock_release+0x8>)
 800b1fe:	f000 b8a2 	b.w	800b346 <__retarget_lock_release_recursive>
 800b202:	bf00      	nop
 800b204:	2000110b 	.word	0x2000110b

0800b208 <__sinit>:
 800b208:	b510      	push	{r4, lr}
 800b20a:	4604      	mov	r4, r0
 800b20c:	f7ff fff0 	bl	800b1f0 <__sinit_lock_acquire>
 800b210:	69a3      	ldr	r3, [r4, #24]
 800b212:	b11b      	cbz	r3, 800b21c <__sinit+0x14>
 800b214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b218:	f7ff bff0 	b.w	800b1fc <__sinit_lock_release>
 800b21c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b220:	6523      	str	r3, [r4, #80]	; 0x50
 800b222:	4b13      	ldr	r3, [pc, #76]	; (800b270 <__sinit+0x68>)
 800b224:	4a13      	ldr	r2, [pc, #76]	; (800b274 <__sinit+0x6c>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	62a2      	str	r2, [r4, #40]	; 0x28
 800b22a:	42a3      	cmp	r3, r4
 800b22c:	bf04      	itt	eq
 800b22e:	2301      	moveq	r3, #1
 800b230:	61a3      	streq	r3, [r4, #24]
 800b232:	4620      	mov	r0, r4
 800b234:	f000 f820 	bl	800b278 <__sfp>
 800b238:	6060      	str	r0, [r4, #4]
 800b23a:	4620      	mov	r0, r4
 800b23c:	f000 f81c 	bl	800b278 <__sfp>
 800b240:	60a0      	str	r0, [r4, #8]
 800b242:	4620      	mov	r0, r4
 800b244:	f000 f818 	bl	800b278 <__sfp>
 800b248:	2200      	movs	r2, #0
 800b24a:	60e0      	str	r0, [r4, #12]
 800b24c:	2104      	movs	r1, #4
 800b24e:	6860      	ldr	r0, [r4, #4]
 800b250:	f7ff ff82 	bl	800b158 <std>
 800b254:	68a0      	ldr	r0, [r4, #8]
 800b256:	2201      	movs	r2, #1
 800b258:	2109      	movs	r1, #9
 800b25a:	f7ff ff7d 	bl	800b158 <std>
 800b25e:	68e0      	ldr	r0, [r4, #12]
 800b260:	2202      	movs	r2, #2
 800b262:	2112      	movs	r1, #18
 800b264:	f7ff ff78 	bl	800b158 <std>
 800b268:	2301      	movs	r3, #1
 800b26a:	61a3      	str	r3, [r4, #24]
 800b26c:	e7d2      	b.n	800b214 <__sinit+0xc>
 800b26e:	bf00      	nop
 800b270:	0800e4cc 	.word	0x0800e4cc
 800b274:	0800b1a1 	.word	0x0800b1a1

0800b278 <__sfp>:
 800b278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b27a:	4607      	mov	r7, r0
 800b27c:	f7ff ffac 	bl	800b1d8 <__sfp_lock_acquire>
 800b280:	4b1e      	ldr	r3, [pc, #120]	; (800b2fc <__sfp+0x84>)
 800b282:	681e      	ldr	r6, [r3, #0]
 800b284:	69b3      	ldr	r3, [r6, #24]
 800b286:	b913      	cbnz	r3, 800b28e <__sfp+0x16>
 800b288:	4630      	mov	r0, r6
 800b28a:	f7ff ffbd 	bl	800b208 <__sinit>
 800b28e:	3648      	adds	r6, #72	; 0x48
 800b290:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b294:	3b01      	subs	r3, #1
 800b296:	d503      	bpl.n	800b2a0 <__sfp+0x28>
 800b298:	6833      	ldr	r3, [r6, #0]
 800b29a:	b30b      	cbz	r3, 800b2e0 <__sfp+0x68>
 800b29c:	6836      	ldr	r6, [r6, #0]
 800b29e:	e7f7      	b.n	800b290 <__sfp+0x18>
 800b2a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2a4:	b9d5      	cbnz	r5, 800b2dc <__sfp+0x64>
 800b2a6:	4b16      	ldr	r3, [pc, #88]	; (800b300 <__sfp+0x88>)
 800b2a8:	60e3      	str	r3, [r4, #12]
 800b2aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2ae:	6665      	str	r5, [r4, #100]	; 0x64
 800b2b0:	f000 f847 	bl	800b342 <__retarget_lock_init_recursive>
 800b2b4:	f7ff ff96 	bl	800b1e4 <__sfp_lock_release>
 800b2b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2c0:	6025      	str	r5, [r4, #0]
 800b2c2:	61a5      	str	r5, [r4, #24]
 800b2c4:	2208      	movs	r2, #8
 800b2c6:	4629      	mov	r1, r5
 800b2c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2cc:	f7ff fb7e 	bl	800a9cc <memset>
 800b2d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b2d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b2d8:	4620      	mov	r0, r4
 800b2da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2dc:	3468      	adds	r4, #104	; 0x68
 800b2de:	e7d9      	b.n	800b294 <__sfp+0x1c>
 800b2e0:	2104      	movs	r1, #4
 800b2e2:	4638      	mov	r0, r7
 800b2e4:	f7ff ff62 	bl	800b1ac <__sfmoreglue>
 800b2e8:	4604      	mov	r4, r0
 800b2ea:	6030      	str	r0, [r6, #0]
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	d1d5      	bne.n	800b29c <__sfp+0x24>
 800b2f0:	f7ff ff78 	bl	800b1e4 <__sfp_lock_release>
 800b2f4:	230c      	movs	r3, #12
 800b2f6:	603b      	str	r3, [r7, #0]
 800b2f8:	e7ee      	b.n	800b2d8 <__sfp+0x60>
 800b2fa:	bf00      	nop
 800b2fc:	0800e4cc 	.word	0x0800e4cc
 800b300:	ffff0001 	.word	0xffff0001

0800b304 <_fwalk_reent>:
 800b304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b308:	4606      	mov	r6, r0
 800b30a:	4688      	mov	r8, r1
 800b30c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b310:	2700      	movs	r7, #0
 800b312:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b316:	f1b9 0901 	subs.w	r9, r9, #1
 800b31a:	d505      	bpl.n	800b328 <_fwalk_reent+0x24>
 800b31c:	6824      	ldr	r4, [r4, #0]
 800b31e:	2c00      	cmp	r4, #0
 800b320:	d1f7      	bne.n	800b312 <_fwalk_reent+0xe>
 800b322:	4638      	mov	r0, r7
 800b324:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b328:	89ab      	ldrh	r3, [r5, #12]
 800b32a:	2b01      	cmp	r3, #1
 800b32c:	d907      	bls.n	800b33e <_fwalk_reent+0x3a>
 800b32e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b332:	3301      	adds	r3, #1
 800b334:	d003      	beq.n	800b33e <_fwalk_reent+0x3a>
 800b336:	4629      	mov	r1, r5
 800b338:	4630      	mov	r0, r6
 800b33a:	47c0      	blx	r8
 800b33c:	4307      	orrs	r7, r0
 800b33e:	3568      	adds	r5, #104	; 0x68
 800b340:	e7e9      	b.n	800b316 <_fwalk_reent+0x12>

0800b342 <__retarget_lock_init_recursive>:
 800b342:	4770      	bx	lr

0800b344 <__retarget_lock_acquire_recursive>:
 800b344:	4770      	bx	lr

0800b346 <__retarget_lock_release_recursive>:
 800b346:	4770      	bx	lr

0800b348 <_lseek_r>:
 800b348:	b538      	push	{r3, r4, r5, lr}
 800b34a:	4d07      	ldr	r5, [pc, #28]	; (800b368 <_lseek_r+0x20>)
 800b34c:	4604      	mov	r4, r0
 800b34e:	4608      	mov	r0, r1
 800b350:	4611      	mov	r1, r2
 800b352:	2200      	movs	r2, #0
 800b354:	602a      	str	r2, [r5, #0]
 800b356:	461a      	mov	r2, r3
 800b358:	f7f6 fa27 	bl	80017aa <_lseek>
 800b35c:	1c43      	adds	r3, r0, #1
 800b35e:	d102      	bne.n	800b366 <_lseek_r+0x1e>
 800b360:	682b      	ldr	r3, [r5, #0]
 800b362:	b103      	cbz	r3, 800b366 <_lseek_r+0x1e>
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	bd38      	pop	{r3, r4, r5, pc}
 800b368:	20001114 	.word	0x20001114

0800b36c <__swhatbuf_r>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	460e      	mov	r6, r1
 800b370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b374:	2900      	cmp	r1, #0
 800b376:	b096      	sub	sp, #88	; 0x58
 800b378:	4614      	mov	r4, r2
 800b37a:	461d      	mov	r5, r3
 800b37c:	da07      	bge.n	800b38e <__swhatbuf_r+0x22>
 800b37e:	2300      	movs	r3, #0
 800b380:	602b      	str	r3, [r5, #0]
 800b382:	89b3      	ldrh	r3, [r6, #12]
 800b384:	061a      	lsls	r2, r3, #24
 800b386:	d410      	bmi.n	800b3aa <__swhatbuf_r+0x3e>
 800b388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b38c:	e00e      	b.n	800b3ac <__swhatbuf_r+0x40>
 800b38e:	466a      	mov	r2, sp
 800b390:	f000 fdb6 	bl	800bf00 <_fstat_r>
 800b394:	2800      	cmp	r0, #0
 800b396:	dbf2      	blt.n	800b37e <__swhatbuf_r+0x12>
 800b398:	9a01      	ldr	r2, [sp, #4]
 800b39a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b39e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3a2:	425a      	negs	r2, r3
 800b3a4:	415a      	adcs	r2, r3
 800b3a6:	602a      	str	r2, [r5, #0]
 800b3a8:	e7ee      	b.n	800b388 <__swhatbuf_r+0x1c>
 800b3aa:	2340      	movs	r3, #64	; 0x40
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	6023      	str	r3, [r4, #0]
 800b3b0:	b016      	add	sp, #88	; 0x58
 800b3b2:	bd70      	pop	{r4, r5, r6, pc}

0800b3b4 <__smakebuf_r>:
 800b3b4:	898b      	ldrh	r3, [r1, #12]
 800b3b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3b8:	079d      	lsls	r5, r3, #30
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	460c      	mov	r4, r1
 800b3be:	d507      	bpl.n	800b3d0 <__smakebuf_r+0x1c>
 800b3c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3c4:	6023      	str	r3, [r4, #0]
 800b3c6:	6123      	str	r3, [r4, #16]
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	6163      	str	r3, [r4, #20]
 800b3cc:	b002      	add	sp, #8
 800b3ce:	bd70      	pop	{r4, r5, r6, pc}
 800b3d0:	ab01      	add	r3, sp, #4
 800b3d2:	466a      	mov	r2, sp
 800b3d4:	f7ff ffca 	bl	800b36c <__swhatbuf_r>
 800b3d8:	9900      	ldr	r1, [sp, #0]
 800b3da:	4605      	mov	r5, r0
 800b3dc:	4630      	mov	r0, r6
 800b3de:	f000 f881 	bl	800b4e4 <_malloc_r>
 800b3e2:	b948      	cbnz	r0, 800b3f8 <__smakebuf_r+0x44>
 800b3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3e8:	059a      	lsls	r2, r3, #22
 800b3ea:	d4ef      	bmi.n	800b3cc <__smakebuf_r+0x18>
 800b3ec:	f023 0303 	bic.w	r3, r3, #3
 800b3f0:	f043 0302 	orr.w	r3, r3, #2
 800b3f4:	81a3      	strh	r3, [r4, #12]
 800b3f6:	e7e3      	b.n	800b3c0 <__smakebuf_r+0xc>
 800b3f8:	4b0d      	ldr	r3, [pc, #52]	; (800b430 <__smakebuf_r+0x7c>)
 800b3fa:	62b3      	str	r3, [r6, #40]	; 0x28
 800b3fc:	89a3      	ldrh	r3, [r4, #12]
 800b3fe:	6020      	str	r0, [r4, #0]
 800b400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b404:	81a3      	strh	r3, [r4, #12]
 800b406:	9b00      	ldr	r3, [sp, #0]
 800b408:	6163      	str	r3, [r4, #20]
 800b40a:	9b01      	ldr	r3, [sp, #4]
 800b40c:	6120      	str	r0, [r4, #16]
 800b40e:	b15b      	cbz	r3, 800b428 <__smakebuf_r+0x74>
 800b410:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b414:	4630      	mov	r0, r6
 800b416:	f000 fd85 	bl	800bf24 <_isatty_r>
 800b41a:	b128      	cbz	r0, 800b428 <__smakebuf_r+0x74>
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	f023 0303 	bic.w	r3, r3, #3
 800b422:	f043 0301 	orr.w	r3, r3, #1
 800b426:	81a3      	strh	r3, [r4, #12]
 800b428:	89a0      	ldrh	r0, [r4, #12]
 800b42a:	4305      	orrs	r5, r0
 800b42c:	81a5      	strh	r5, [r4, #12]
 800b42e:	e7cd      	b.n	800b3cc <__smakebuf_r+0x18>
 800b430:	0800b1a1 	.word	0x0800b1a1

0800b434 <malloc>:
 800b434:	4b02      	ldr	r3, [pc, #8]	; (800b440 <malloc+0xc>)
 800b436:	4601      	mov	r1, r0
 800b438:	6818      	ldr	r0, [r3, #0]
 800b43a:	f000 b853 	b.w	800b4e4 <_malloc_r>
 800b43e:	bf00      	nop
 800b440:	200002a8 	.word	0x200002a8

0800b444 <_free_r>:
 800b444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b446:	2900      	cmp	r1, #0
 800b448:	d048      	beq.n	800b4dc <_free_r+0x98>
 800b44a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b44e:	9001      	str	r0, [sp, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	f1a1 0404 	sub.w	r4, r1, #4
 800b456:	bfb8      	it	lt
 800b458:	18e4      	addlt	r4, r4, r3
 800b45a:	f000 fd8d 	bl	800bf78 <__malloc_lock>
 800b45e:	4a20      	ldr	r2, [pc, #128]	; (800b4e0 <_free_r+0x9c>)
 800b460:	9801      	ldr	r0, [sp, #4]
 800b462:	6813      	ldr	r3, [r2, #0]
 800b464:	4615      	mov	r5, r2
 800b466:	b933      	cbnz	r3, 800b476 <_free_r+0x32>
 800b468:	6063      	str	r3, [r4, #4]
 800b46a:	6014      	str	r4, [r2, #0]
 800b46c:	b003      	add	sp, #12
 800b46e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b472:	f000 bd87 	b.w	800bf84 <__malloc_unlock>
 800b476:	42a3      	cmp	r3, r4
 800b478:	d90b      	bls.n	800b492 <_free_r+0x4e>
 800b47a:	6821      	ldr	r1, [r4, #0]
 800b47c:	1862      	adds	r2, r4, r1
 800b47e:	4293      	cmp	r3, r2
 800b480:	bf04      	itt	eq
 800b482:	681a      	ldreq	r2, [r3, #0]
 800b484:	685b      	ldreq	r3, [r3, #4]
 800b486:	6063      	str	r3, [r4, #4]
 800b488:	bf04      	itt	eq
 800b48a:	1852      	addeq	r2, r2, r1
 800b48c:	6022      	streq	r2, [r4, #0]
 800b48e:	602c      	str	r4, [r5, #0]
 800b490:	e7ec      	b.n	800b46c <_free_r+0x28>
 800b492:	461a      	mov	r2, r3
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	b10b      	cbz	r3, 800b49c <_free_r+0x58>
 800b498:	42a3      	cmp	r3, r4
 800b49a:	d9fa      	bls.n	800b492 <_free_r+0x4e>
 800b49c:	6811      	ldr	r1, [r2, #0]
 800b49e:	1855      	adds	r5, r2, r1
 800b4a0:	42a5      	cmp	r5, r4
 800b4a2:	d10b      	bne.n	800b4bc <_free_r+0x78>
 800b4a4:	6824      	ldr	r4, [r4, #0]
 800b4a6:	4421      	add	r1, r4
 800b4a8:	1854      	adds	r4, r2, r1
 800b4aa:	42a3      	cmp	r3, r4
 800b4ac:	6011      	str	r1, [r2, #0]
 800b4ae:	d1dd      	bne.n	800b46c <_free_r+0x28>
 800b4b0:	681c      	ldr	r4, [r3, #0]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	6053      	str	r3, [r2, #4]
 800b4b6:	4421      	add	r1, r4
 800b4b8:	6011      	str	r1, [r2, #0]
 800b4ba:	e7d7      	b.n	800b46c <_free_r+0x28>
 800b4bc:	d902      	bls.n	800b4c4 <_free_r+0x80>
 800b4be:	230c      	movs	r3, #12
 800b4c0:	6003      	str	r3, [r0, #0]
 800b4c2:	e7d3      	b.n	800b46c <_free_r+0x28>
 800b4c4:	6825      	ldr	r5, [r4, #0]
 800b4c6:	1961      	adds	r1, r4, r5
 800b4c8:	428b      	cmp	r3, r1
 800b4ca:	bf04      	itt	eq
 800b4cc:	6819      	ldreq	r1, [r3, #0]
 800b4ce:	685b      	ldreq	r3, [r3, #4]
 800b4d0:	6063      	str	r3, [r4, #4]
 800b4d2:	bf04      	itt	eq
 800b4d4:	1949      	addeq	r1, r1, r5
 800b4d6:	6021      	streq	r1, [r4, #0]
 800b4d8:	6054      	str	r4, [r2, #4]
 800b4da:	e7c7      	b.n	800b46c <_free_r+0x28>
 800b4dc:	b003      	add	sp, #12
 800b4de:	bd30      	pop	{r4, r5, pc}
 800b4e0:	200005ec 	.word	0x200005ec

0800b4e4 <_malloc_r>:
 800b4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e6:	1ccd      	adds	r5, r1, #3
 800b4e8:	f025 0503 	bic.w	r5, r5, #3
 800b4ec:	3508      	adds	r5, #8
 800b4ee:	2d0c      	cmp	r5, #12
 800b4f0:	bf38      	it	cc
 800b4f2:	250c      	movcc	r5, #12
 800b4f4:	2d00      	cmp	r5, #0
 800b4f6:	4606      	mov	r6, r0
 800b4f8:	db01      	blt.n	800b4fe <_malloc_r+0x1a>
 800b4fa:	42a9      	cmp	r1, r5
 800b4fc:	d903      	bls.n	800b506 <_malloc_r+0x22>
 800b4fe:	230c      	movs	r3, #12
 800b500:	6033      	str	r3, [r6, #0]
 800b502:	2000      	movs	r0, #0
 800b504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b506:	f000 fd37 	bl	800bf78 <__malloc_lock>
 800b50a:	4921      	ldr	r1, [pc, #132]	; (800b590 <_malloc_r+0xac>)
 800b50c:	680a      	ldr	r2, [r1, #0]
 800b50e:	4614      	mov	r4, r2
 800b510:	b99c      	cbnz	r4, 800b53a <_malloc_r+0x56>
 800b512:	4f20      	ldr	r7, [pc, #128]	; (800b594 <_malloc_r+0xb0>)
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	b923      	cbnz	r3, 800b522 <_malloc_r+0x3e>
 800b518:	4621      	mov	r1, r4
 800b51a:	4630      	mov	r0, r6
 800b51c:	f000 fce0 	bl	800bee0 <_sbrk_r>
 800b520:	6038      	str	r0, [r7, #0]
 800b522:	4629      	mov	r1, r5
 800b524:	4630      	mov	r0, r6
 800b526:	f000 fcdb 	bl	800bee0 <_sbrk_r>
 800b52a:	1c43      	adds	r3, r0, #1
 800b52c:	d123      	bne.n	800b576 <_malloc_r+0x92>
 800b52e:	230c      	movs	r3, #12
 800b530:	6033      	str	r3, [r6, #0]
 800b532:	4630      	mov	r0, r6
 800b534:	f000 fd26 	bl	800bf84 <__malloc_unlock>
 800b538:	e7e3      	b.n	800b502 <_malloc_r+0x1e>
 800b53a:	6823      	ldr	r3, [r4, #0]
 800b53c:	1b5b      	subs	r3, r3, r5
 800b53e:	d417      	bmi.n	800b570 <_malloc_r+0x8c>
 800b540:	2b0b      	cmp	r3, #11
 800b542:	d903      	bls.n	800b54c <_malloc_r+0x68>
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	441c      	add	r4, r3
 800b548:	6025      	str	r5, [r4, #0]
 800b54a:	e004      	b.n	800b556 <_malloc_r+0x72>
 800b54c:	6863      	ldr	r3, [r4, #4]
 800b54e:	42a2      	cmp	r2, r4
 800b550:	bf0c      	ite	eq
 800b552:	600b      	streq	r3, [r1, #0]
 800b554:	6053      	strne	r3, [r2, #4]
 800b556:	4630      	mov	r0, r6
 800b558:	f000 fd14 	bl	800bf84 <__malloc_unlock>
 800b55c:	f104 000b 	add.w	r0, r4, #11
 800b560:	1d23      	adds	r3, r4, #4
 800b562:	f020 0007 	bic.w	r0, r0, #7
 800b566:	1ac2      	subs	r2, r0, r3
 800b568:	d0cc      	beq.n	800b504 <_malloc_r+0x20>
 800b56a:	1a1b      	subs	r3, r3, r0
 800b56c:	50a3      	str	r3, [r4, r2]
 800b56e:	e7c9      	b.n	800b504 <_malloc_r+0x20>
 800b570:	4622      	mov	r2, r4
 800b572:	6864      	ldr	r4, [r4, #4]
 800b574:	e7cc      	b.n	800b510 <_malloc_r+0x2c>
 800b576:	1cc4      	adds	r4, r0, #3
 800b578:	f024 0403 	bic.w	r4, r4, #3
 800b57c:	42a0      	cmp	r0, r4
 800b57e:	d0e3      	beq.n	800b548 <_malloc_r+0x64>
 800b580:	1a21      	subs	r1, r4, r0
 800b582:	4630      	mov	r0, r6
 800b584:	f000 fcac 	bl	800bee0 <_sbrk_r>
 800b588:	3001      	adds	r0, #1
 800b58a:	d1dd      	bne.n	800b548 <_malloc_r+0x64>
 800b58c:	e7cf      	b.n	800b52e <_malloc_r+0x4a>
 800b58e:	bf00      	nop
 800b590:	200005ec 	.word	0x200005ec
 800b594:	200005f0 	.word	0x200005f0

0800b598 <__ssputs_r>:
 800b598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b59c:	688e      	ldr	r6, [r1, #8]
 800b59e:	429e      	cmp	r6, r3
 800b5a0:	4682      	mov	sl, r0
 800b5a2:	460c      	mov	r4, r1
 800b5a4:	4690      	mov	r8, r2
 800b5a6:	461f      	mov	r7, r3
 800b5a8:	d838      	bhi.n	800b61c <__ssputs_r+0x84>
 800b5aa:	898a      	ldrh	r2, [r1, #12]
 800b5ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5b0:	d032      	beq.n	800b618 <__ssputs_r+0x80>
 800b5b2:	6825      	ldr	r5, [r4, #0]
 800b5b4:	6909      	ldr	r1, [r1, #16]
 800b5b6:	eba5 0901 	sub.w	r9, r5, r1
 800b5ba:	6965      	ldr	r5, [r4, #20]
 800b5bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	444b      	add	r3, r9
 800b5c8:	106d      	asrs	r5, r5, #1
 800b5ca:	429d      	cmp	r5, r3
 800b5cc:	bf38      	it	cc
 800b5ce:	461d      	movcc	r5, r3
 800b5d0:	0553      	lsls	r3, r2, #21
 800b5d2:	d531      	bpl.n	800b638 <__ssputs_r+0xa0>
 800b5d4:	4629      	mov	r1, r5
 800b5d6:	f7ff ff85 	bl	800b4e4 <_malloc_r>
 800b5da:	4606      	mov	r6, r0
 800b5dc:	b950      	cbnz	r0, 800b5f4 <__ssputs_r+0x5c>
 800b5de:	230c      	movs	r3, #12
 800b5e0:	f8ca 3000 	str.w	r3, [sl]
 800b5e4:	89a3      	ldrh	r3, [r4, #12]
 800b5e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5ea:	81a3      	strh	r3, [r4, #12]
 800b5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5f4:	6921      	ldr	r1, [r4, #16]
 800b5f6:	464a      	mov	r2, r9
 800b5f8:	f7ff f9da 	bl	800a9b0 <memcpy>
 800b5fc:	89a3      	ldrh	r3, [r4, #12]
 800b5fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b606:	81a3      	strh	r3, [r4, #12]
 800b608:	6126      	str	r6, [r4, #16]
 800b60a:	6165      	str	r5, [r4, #20]
 800b60c:	444e      	add	r6, r9
 800b60e:	eba5 0509 	sub.w	r5, r5, r9
 800b612:	6026      	str	r6, [r4, #0]
 800b614:	60a5      	str	r5, [r4, #8]
 800b616:	463e      	mov	r6, r7
 800b618:	42be      	cmp	r6, r7
 800b61a:	d900      	bls.n	800b61e <__ssputs_r+0x86>
 800b61c:	463e      	mov	r6, r7
 800b61e:	4632      	mov	r2, r6
 800b620:	6820      	ldr	r0, [r4, #0]
 800b622:	4641      	mov	r1, r8
 800b624:	f000 fc8e 	bl	800bf44 <memmove>
 800b628:	68a3      	ldr	r3, [r4, #8]
 800b62a:	6822      	ldr	r2, [r4, #0]
 800b62c:	1b9b      	subs	r3, r3, r6
 800b62e:	4432      	add	r2, r6
 800b630:	60a3      	str	r3, [r4, #8]
 800b632:	6022      	str	r2, [r4, #0]
 800b634:	2000      	movs	r0, #0
 800b636:	e7db      	b.n	800b5f0 <__ssputs_r+0x58>
 800b638:	462a      	mov	r2, r5
 800b63a:	f000 fca9 	bl	800bf90 <_realloc_r>
 800b63e:	4606      	mov	r6, r0
 800b640:	2800      	cmp	r0, #0
 800b642:	d1e1      	bne.n	800b608 <__ssputs_r+0x70>
 800b644:	6921      	ldr	r1, [r4, #16]
 800b646:	4650      	mov	r0, sl
 800b648:	f7ff fefc 	bl	800b444 <_free_r>
 800b64c:	e7c7      	b.n	800b5de <__ssputs_r+0x46>
	...

0800b650 <_svfiprintf_r>:
 800b650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b654:	4698      	mov	r8, r3
 800b656:	898b      	ldrh	r3, [r1, #12]
 800b658:	061b      	lsls	r3, r3, #24
 800b65a:	b09d      	sub	sp, #116	; 0x74
 800b65c:	4607      	mov	r7, r0
 800b65e:	460d      	mov	r5, r1
 800b660:	4614      	mov	r4, r2
 800b662:	d50e      	bpl.n	800b682 <_svfiprintf_r+0x32>
 800b664:	690b      	ldr	r3, [r1, #16]
 800b666:	b963      	cbnz	r3, 800b682 <_svfiprintf_r+0x32>
 800b668:	2140      	movs	r1, #64	; 0x40
 800b66a:	f7ff ff3b 	bl	800b4e4 <_malloc_r>
 800b66e:	6028      	str	r0, [r5, #0]
 800b670:	6128      	str	r0, [r5, #16]
 800b672:	b920      	cbnz	r0, 800b67e <_svfiprintf_r+0x2e>
 800b674:	230c      	movs	r3, #12
 800b676:	603b      	str	r3, [r7, #0]
 800b678:	f04f 30ff 	mov.w	r0, #4294967295
 800b67c:	e0d1      	b.n	800b822 <_svfiprintf_r+0x1d2>
 800b67e:	2340      	movs	r3, #64	; 0x40
 800b680:	616b      	str	r3, [r5, #20]
 800b682:	2300      	movs	r3, #0
 800b684:	9309      	str	r3, [sp, #36]	; 0x24
 800b686:	2320      	movs	r3, #32
 800b688:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b68c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b690:	2330      	movs	r3, #48	; 0x30
 800b692:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b83c <_svfiprintf_r+0x1ec>
 800b696:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b69a:	f04f 0901 	mov.w	r9, #1
 800b69e:	4623      	mov	r3, r4
 800b6a0:	469a      	mov	sl, r3
 800b6a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6a6:	b10a      	cbz	r2, 800b6ac <_svfiprintf_r+0x5c>
 800b6a8:	2a25      	cmp	r2, #37	; 0x25
 800b6aa:	d1f9      	bne.n	800b6a0 <_svfiprintf_r+0x50>
 800b6ac:	ebba 0b04 	subs.w	fp, sl, r4
 800b6b0:	d00b      	beq.n	800b6ca <_svfiprintf_r+0x7a>
 800b6b2:	465b      	mov	r3, fp
 800b6b4:	4622      	mov	r2, r4
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	4638      	mov	r0, r7
 800b6ba:	f7ff ff6d 	bl	800b598 <__ssputs_r>
 800b6be:	3001      	adds	r0, #1
 800b6c0:	f000 80aa 	beq.w	800b818 <_svfiprintf_r+0x1c8>
 800b6c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b6c6:	445a      	add	r2, fp
 800b6c8:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	f000 80a2 	beq.w	800b818 <_svfiprintf_r+0x1c8>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6de:	f10a 0a01 	add.w	sl, sl, #1
 800b6e2:	9304      	str	r3, [sp, #16]
 800b6e4:	9307      	str	r3, [sp, #28]
 800b6e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6ea:	931a      	str	r3, [sp, #104]	; 0x68
 800b6ec:	4654      	mov	r4, sl
 800b6ee:	2205      	movs	r2, #5
 800b6f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6f4:	4851      	ldr	r0, [pc, #324]	; (800b83c <_svfiprintf_r+0x1ec>)
 800b6f6:	f7f4 fd6b 	bl	80001d0 <memchr>
 800b6fa:	9a04      	ldr	r2, [sp, #16]
 800b6fc:	b9d8      	cbnz	r0, 800b736 <_svfiprintf_r+0xe6>
 800b6fe:	06d0      	lsls	r0, r2, #27
 800b700:	bf44      	itt	mi
 800b702:	2320      	movmi	r3, #32
 800b704:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b708:	0711      	lsls	r1, r2, #28
 800b70a:	bf44      	itt	mi
 800b70c:	232b      	movmi	r3, #43	; 0x2b
 800b70e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b712:	f89a 3000 	ldrb.w	r3, [sl]
 800b716:	2b2a      	cmp	r3, #42	; 0x2a
 800b718:	d015      	beq.n	800b746 <_svfiprintf_r+0xf6>
 800b71a:	9a07      	ldr	r2, [sp, #28]
 800b71c:	4654      	mov	r4, sl
 800b71e:	2000      	movs	r0, #0
 800b720:	f04f 0c0a 	mov.w	ip, #10
 800b724:	4621      	mov	r1, r4
 800b726:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b72a:	3b30      	subs	r3, #48	; 0x30
 800b72c:	2b09      	cmp	r3, #9
 800b72e:	d94e      	bls.n	800b7ce <_svfiprintf_r+0x17e>
 800b730:	b1b0      	cbz	r0, 800b760 <_svfiprintf_r+0x110>
 800b732:	9207      	str	r2, [sp, #28]
 800b734:	e014      	b.n	800b760 <_svfiprintf_r+0x110>
 800b736:	eba0 0308 	sub.w	r3, r0, r8
 800b73a:	fa09 f303 	lsl.w	r3, r9, r3
 800b73e:	4313      	orrs	r3, r2
 800b740:	9304      	str	r3, [sp, #16]
 800b742:	46a2      	mov	sl, r4
 800b744:	e7d2      	b.n	800b6ec <_svfiprintf_r+0x9c>
 800b746:	9b03      	ldr	r3, [sp, #12]
 800b748:	1d19      	adds	r1, r3, #4
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	9103      	str	r1, [sp, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	bfbb      	ittet	lt
 800b752:	425b      	neglt	r3, r3
 800b754:	f042 0202 	orrlt.w	r2, r2, #2
 800b758:	9307      	strge	r3, [sp, #28]
 800b75a:	9307      	strlt	r3, [sp, #28]
 800b75c:	bfb8      	it	lt
 800b75e:	9204      	strlt	r2, [sp, #16]
 800b760:	7823      	ldrb	r3, [r4, #0]
 800b762:	2b2e      	cmp	r3, #46	; 0x2e
 800b764:	d10c      	bne.n	800b780 <_svfiprintf_r+0x130>
 800b766:	7863      	ldrb	r3, [r4, #1]
 800b768:	2b2a      	cmp	r3, #42	; 0x2a
 800b76a:	d135      	bne.n	800b7d8 <_svfiprintf_r+0x188>
 800b76c:	9b03      	ldr	r3, [sp, #12]
 800b76e:	1d1a      	adds	r2, r3, #4
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	9203      	str	r2, [sp, #12]
 800b774:	2b00      	cmp	r3, #0
 800b776:	bfb8      	it	lt
 800b778:	f04f 33ff 	movlt.w	r3, #4294967295
 800b77c:	3402      	adds	r4, #2
 800b77e:	9305      	str	r3, [sp, #20]
 800b780:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b84c <_svfiprintf_r+0x1fc>
 800b784:	7821      	ldrb	r1, [r4, #0]
 800b786:	2203      	movs	r2, #3
 800b788:	4650      	mov	r0, sl
 800b78a:	f7f4 fd21 	bl	80001d0 <memchr>
 800b78e:	b140      	cbz	r0, 800b7a2 <_svfiprintf_r+0x152>
 800b790:	2340      	movs	r3, #64	; 0x40
 800b792:	eba0 000a 	sub.w	r0, r0, sl
 800b796:	fa03 f000 	lsl.w	r0, r3, r0
 800b79a:	9b04      	ldr	r3, [sp, #16]
 800b79c:	4303      	orrs	r3, r0
 800b79e:	3401      	adds	r4, #1
 800b7a0:	9304      	str	r3, [sp, #16]
 800b7a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7a6:	4826      	ldr	r0, [pc, #152]	; (800b840 <_svfiprintf_r+0x1f0>)
 800b7a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7ac:	2206      	movs	r2, #6
 800b7ae:	f7f4 fd0f 	bl	80001d0 <memchr>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d038      	beq.n	800b828 <_svfiprintf_r+0x1d8>
 800b7b6:	4b23      	ldr	r3, [pc, #140]	; (800b844 <_svfiprintf_r+0x1f4>)
 800b7b8:	bb1b      	cbnz	r3, 800b802 <_svfiprintf_r+0x1b2>
 800b7ba:	9b03      	ldr	r3, [sp, #12]
 800b7bc:	3307      	adds	r3, #7
 800b7be:	f023 0307 	bic.w	r3, r3, #7
 800b7c2:	3308      	adds	r3, #8
 800b7c4:	9303      	str	r3, [sp, #12]
 800b7c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c8:	4433      	add	r3, r6
 800b7ca:	9309      	str	r3, [sp, #36]	; 0x24
 800b7cc:	e767      	b.n	800b69e <_svfiprintf_r+0x4e>
 800b7ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	2001      	movs	r0, #1
 800b7d6:	e7a5      	b.n	800b724 <_svfiprintf_r+0xd4>
 800b7d8:	2300      	movs	r3, #0
 800b7da:	3401      	adds	r4, #1
 800b7dc:	9305      	str	r3, [sp, #20]
 800b7de:	4619      	mov	r1, r3
 800b7e0:	f04f 0c0a 	mov.w	ip, #10
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7ea:	3a30      	subs	r2, #48	; 0x30
 800b7ec:	2a09      	cmp	r2, #9
 800b7ee:	d903      	bls.n	800b7f8 <_svfiprintf_r+0x1a8>
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d0c5      	beq.n	800b780 <_svfiprintf_r+0x130>
 800b7f4:	9105      	str	r1, [sp, #20]
 800b7f6:	e7c3      	b.n	800b780 <_svfiprintf_r+0x130>
 800b7f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7fc:	4604      	mov	r4, r0
 800b7fe:	2301      	movs	r3, #1
 800b800:	e7f0      	b.n	800b7e4 <_svfiprintf_r+0x194>
 800b802:	ab03      	add	r3, sp, #12
 800b804:	9300      	str	r3, [sp, #0]
 800b806:	462a      	mov	r2, r5
 800b808:	4b0f      	ldr	r3, [pc, #60]	; (800b848 <_svfiprintf_r+0x1f8>)
 800b80a:	a904      	add	r1, sp, #16
 800b80c:	4638      	mov	r0, r7
 800b80e:	f3af 8000 	nop.w
 800b812:	1c42      	adds	r2, r0, #1
 800b814:	4606      	mov	r6, r0
 800b816:	d1d6      	bne.n	800b7c6 <_svfiprintf_r+0x176>
 800b818:	89ab      	ldrh	r3, [r5, #12]
 800b81a:	065b      	lsls	r3, r3, #25
 800b81c:	f53f af2c 	bmi.w	800b678 <_svfiprintf_r+0x28>
 800b820:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b822:	b01d      	add	sp, #116	; 0x74
 800b824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b828:	ab03      	add	r3, sp, #12
 800b82a:	9300      	str	r3, [sp, #0]
 800b82c:	462a      	mov	r2, r5
 800b82e:	4b06      	ldr	r3, [pc, #24]	; (800b848 <_svfiprintf_r+0x1f8>)
 800b830:	a904      	add	r1, sp, #16
 800b832:	4638      	mov	r0, r7
 800b834:	f000 f9d4 	bl	800bbe0 <_printf_i>
 800b838:	e7eb      	b.n	800b812 <_svfiprintf_r+0x1c2>
 800b83a:	bf00      	nop
 800b83c:	0800e530 	.word	0x0800e530
 800b840:	0800e53a 	.word	0x0800e53a
 800b844:	00000000 	.word	0x00000000
 800b848:	0800b599 	.word	0x0800b599
 800b84c:	0800e536 	.word	0x0800e536

0800b850 <__sfputc_r>:
 800b850:	6893      	ldr	r3, [r2, #8]
 800b852:	3b01      	subs	r3, #1
 800b854:	2b00      	cmp	r3, #0
 800b856:	b410      	push	{r4}
 800b858:	6093      	str	r3, [r2, #8]
 800b85a:	da08      	bge.n	800b86e <__sfputc_r+0x1e>
 800b85c:	6994      	ldr	r4, [r2, #24]
 800b85e:	42a3      	cmp	r3, r4
 800b860:	db01      	blt.n	800b866 <__sfputc_r+0x16>
 800b862:	290a      	cmp	r1, #10
 800b864:	d103      	bne.n	800b86e <__sfputc_r+0x1e>
 800b866:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b86a:	f7ff bad1 	b.w	800ae10 <__swbuf_r>
 800b86e:	6813      	ldr	r3, [r2, #0]
 800b870:	1c58      	adds	r0, r3, #1
 800b872:	6010      	str	r0, [r2, #0]
 800b874:	7019      	strb	r1, [r3, #0]
 800b876:	4608      	mov	r0, r1
 800b878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b87c:	4770      	bx	lr

0800b87e <__sfputs_r>:
 800b87e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b880:	4606      	mov	r6, r0
 800b882:	460f      	mov	r7, r1
 800b884:	4614      	mov	r4, r2
 800b886:	18d5      	adds	r5, r2, r3
 800b888:	42ac      	cmp	r4, r5
 800b88a:	d101      	bne.n	800b890 <__sfputs_r+0x12>
 800b88c:	2000      	movs	r0, #0
 800b88e:	e007      	b.n	800b8a0 <__sfputs_r+0x22>
 800b890:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b894:	463a      	mov	r2, r7
 800b896:	4630      	mov	r0, r6
 800b898:	f7ff ffda 	bl	800b850 <__sfputc_r>
 800b89c:	1c43      	adds	r3, r0, #1
 800b89e:	d1f3      	bne.n	800b888 <__sfputs_r+0xa>
 800b8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b8a4 <_vfiprintf_r>:
 800b8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a8:	460d      	mov	r5, r1
 800b8aa:	b09d      	sub	sp, #116	; 0x74
 800b8ac:	4614      	mov	r4, r2
 800b8ae:	4698      	mov	r8, r3
 800b8b0:	4606      	mov	r6, r0
 800b8b2:	b118      	cbz	r0, 800b8bc <_vfiprintf_r+0x18>
 800b8b4:	6983      	ldr	r3, [r0, #24]
 800b8b6:	b90b      	cbnz	r3, 800b8bc <_vfiprintf_r+0x18>
 800b8b8:	f7ff fca6 	bl	800b208 <__sinit>
 800b8bc:	4b89      	ldr	r3, [pc, #548]	; (800bae4 <_vfiprintf_r+0x240>)
 800b8be:	429d      	cmp	r5, r3
 800b8c0:	d11b      	bne.n	800b8fa <_vfiprintf_r+0x56>
 800b8c2:	6875      	ldr	r5, [r6, #4]
 800b8c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8c6:	07d9      	lsls	r1, r3, #31
 800b8c8:	d405      	bmi.n	800b8d6 <_vfiprintf_r+0x32>
 800b8ca:	89ab      	ldrh	r3, [r5, #12]
 800b8cc:	059a      	lsls	r2, r3, #22
 800b8ce:	d402      	bmi.n	800b8d6 <_vfiprintf_r+0x32>
 800b8d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b8d2:	f7ff fd37 	bl	800b344 <__retarget_lock_acquire_recursive>
 800b8d6:	89ab      	ldrh	r3, [r5, #12]
 800b8d8:	071b      	lsls	r3, r3, #28
 800b8da:	d501      	bpl.n	800b8e0 <_vfiprintf_r+0x3c>
 800b8dc:	692b      	ldr	r3, [r5, #16]
 800b8de:	b9eb      	cbnz	r3, 800b91c <_vfiprintf_r+0x78>
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	4630      	mov	r0, r6
 800b8e4:	f7ff faf8 	bl	800aed8 <__swsetup_r>
 800b8e8:	b1c0      	cbz	r0, 800b91c <_vfiprintf_r+0x78>
 800b8ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b8ec:	07dc      	lsls	r4, r3, #31
 800b8ee:	d50e      	bpl.n	800b90e <_vfiprintf_r+0x6a>
 800b8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f4:	b01d      	add	sp, #116	; 0x74
 800b8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fa:	4b7b      	ldr	r3, [pc, #492]	; (800bae8 <_vfiprintf_r+0x244>)
 800b8fc:	429d      	cmp	r5, r3
 800b8fe:	d101      	bne.n	800b904 <_vfiprintf_r+0x60>
 800b900:	68b5      	ldr	r5, [r6, #8]
 800b902:	e7df      	b.n	800b8c4 <_vfiprintf_r+0x20>
 800b904:	4b79      	ldr	r3, [pc, #484]	; (800baec <_vfiprintf_r+0x248>)
 800b906:	429d      	cmp	r5, r3
 800b908:	bf08      	it	eq
 800b90a:	68f5      	ldreq	r5, [r6, #12]
 800b90c:	e7da      	b.n	800b8c4 <_vfiprintf_r+0x20>
 800b90e:	89ab      	ldrh	r3, [r5, #12]
 800b910:	0598      	lsls	r0, r3, #22
 800b912:	d4ed      	bmi.n	800b8f0 <_vfiprintf_r+0x4c>
 800b914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b916:	f7ff fd16 	bl	800b346 <__retarget_lock_release_recursive>
 800b91a:	e7e9      	b.n	800b8f0 <_vfiprintf_r+0x4c>
 800b91c:	2300      	movs	r3, #0
 800b91e:	9309      	str	r3, [sp, #36]	; 0x24
 800b920:	2320      	movs	r3, #32
 800b922:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b926:	f8cd 800c 	str.w	r8, [sp, #12]
 800b92a:	2330      	movs	r3, #48	; 0x30
 800b92c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800baf0 <_vfiprintf_r+0x24c>
 800b930:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b934:	f04f 0901 	mov.w	r9, #1
 800b938:	4623      	mov	r3, r4
 800b93a:	469a      	mov	sl, r3
 800b93c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b940:	b10a      	cbz	r2, 800b946 <_vfiprintf_r+0xa2>
 800b942:	2a25      	cmp	r2, #37	; 0x25
 800b944:	d1f9      	bne.n	800b93a <_vfiprintf_r+0x96>
 800b946:	ebba 0b04 	subs.w	fp, sl, r4
 800b94a:	d00b      	beq.n	800b964 <_vfiprintf_r+0xc0>
 800b94c:	465b      	mov	r3, fp
 800b94e:	4622      	mov	r2, r4
 800b950:	4629      	mov	r1, r5
 800b952:	4630      	mov	r0, r6
 800b954:	f7ff ff93 	bl	800b87e <__sfputs_r>
 800b958:	3001      	adds	r0, #1
 800b95a:	f000 80aa 	beq.w	800bab2 <_vfiprintf_r+0x20e>
 800b95e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b960:	445a      	add	r2, fp
 800b962:	9209      	str	r2, [sp, #36]	; 0x24
 800b964:	f89a 3000 	ldrb.w	r3, [sl]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 80a2 	beq.w	800bab2 <_vfiprintf_r+0x20e>
 800b96e:	2300      	movs	r3, #0
 800b970:	f04f 32ff 	mov.w	r2, #4294967295
 800b974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b978:	f10a 0a01 	add.w	sl, sl, #1
 800b97c:	9304      	str	r3, [sp, #16]
 800b97e:	9307      	str	r3, [sp, #28]
 800b980:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b984:	931a      	str	r3, [sp, #104]	; 0x68
 800b986:	4654      	mov	r4, sl
 800b988:	2205      	movs	r2, #5
 800b98a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b98e:	4858      	ldr	r0, [pc, #352]	; (800baf0 <_vfiprintf_r+0x24c>)
 800b990:	f7f4 fc1e 	bl	80001d0 <memchr>
 800b994:	9a04      	ldr	r2, [sp, #16]
 800b996:	b9d8      	cbnz	r0, 800b9d0 <_vfiprintf_r+0x12c>
 800b998:	06d1      	lsls	r1, r2, #27
 800b99a:	bf44      	itt	mi
 800b99c:	2320      	movmi	r3, #32
 800b99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9a2:	0713      	lsls	r3, r2, #28
 800b9a4:	bf44      	itt	mi
 800b9a6:	232b      	movmi	r3, #43	; 0x2b
 800b9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ac:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b9b2:	d015      	beq.n	800b9e0 <_vfiprintf_r+0x13c>
 800b9b4:	9a07      	ldr	r2, [sp, #28]
 800b9b6:	4654      	mov	r4, sl
 800b9b8:	2000      	movs	r0, #0
 800b9ba:	f04f 0c0a 	mov.w	ip, #10
 800b9be:	4621      	mov	r1, r4
 800b9c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9c4:	3b30      	subs	r3, #48	; 0x30
 800b9c6:	2b09      	cmp	r3, #9
 800b9c8:	d94e      	bls.n	800ba68 <_vfiprintf_r+0x1c4>
 800b9ca:	b1b0      	cbz	r0, 800b9fa <_vfiprintf_r+0x156>
 800b9cc:	9207      	str	r2, [sp, #28]
 800b9ce:	e014      	b.n	800b9fa <_vfiprintf_r+0x156>
 800b9d0:	eba0 0308 	sub.w	r3, r0, r8
 800b9d4:	fa09 f303 	lsl.w	r3, r9, r3
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	9304      	str	r3, [sp, #16]
 800b9dc:	46a2      	mov	sl, r4
 800b9de:	e7d2      	b.n	800b986 <_vfiprintf_r+0xe2>
 800b9e0:	9b03      	ldr	r3, [sp, #12]
 800b9e2:	1d19      	adds	r1, r3, #4
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	9103      	str	r1, [sp, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	bfbb      	ittet	lt
 800b9ec:	425b      	neglt	r3, r3
 800b9ee:	f042 0202 	orrlt.w	r2, r2, #2
 800b9f2:	9307      	strge	r3, [sp, #28]
 800b9f4:	9307      	strlt	r3, [sp, #28]
 800b9f6:	bfb8      	it	lt
 800b9f8:	9204      	strlt	r2, [sp, #16]
 800b9fa:	7823      	ldrb	r3, [r4, #0]
 800b9fc:	2b2e      	cmp	r3, #46	; 0x2e
 800b9fe:	d10c      	bne.n	800ba1a <_vfiprintf_r+0x176>
 800ba00:	7863      	ldrb	r3, [r4, #1]
 800ba02:	2b2a      	cmp	r3, #42	; 0x2a
 800ba04:	d135      	bne.n	800ba72 <_vfiprintf_r+0x1ce>
 800ba06:	9b03      	ldr	r3, [sp, #12]
 800ba08:	1d1a      	adds	r2, r3, #4
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	9203      	str	r2, [sp, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	bfb8      	it	lt
 800ba12:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba16:	3402      	adds	r4, #2
 800ba18:	9305      	str	r3, [sp, #20]
 800ba1a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb00 <_vfiprintf_r+0x25c>
 800ba1e:	7821      	ldrb	r1, [r4, #0]
 800ba20:	2203      	movs	r2, #3
 800ba22:	4650      	mov	r0, sl
 800ba24:	f7f4 fbd4 	bl	80001d0 <memchr>
 800ba28:	b140      	cbz	r0, 800ba3c <_vfiprintf_r+0x198>
 800ba2a:	2340      	movs	r3, #64	; 0x40
 800ba2c:	eba0 000a 	sub.w	r0, r0, sl
 800ba30:	fa03 f000 	lsl.w	r0, r3, r0
 800ba34:	9b04      	ldr	r3, [sp, #16]
 800ba36:	4303      	orrs	r3, r0
 800ba38:	3401      	adds	r4, #1
 800ba3a:	9304      	str	r3, [sp, #16]
 800ba3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba40:	482c      	ldr	r0, [pc, #176]	; (800baf4 <_vfiprintf_r+0x250>)
 800ba42:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba46:	2206      	movs	r2, #6
 800ba48:	f7f4 fbc2 	bl	80001d0 <memchr>
 800ba4c:	2800      	cmp	r0, #0
 800ba4e:	d03f      	beq.n	800bad0 <_vfiprintf_r+0x22c>
 800ba50:	4b29      	ldr	r3, [pc, #164]	; (800baf8 <_vfiprintf_r+0x254>)
 800ba52:	bb1b      	cbnz	r3, 800ba9c <_vfiprintf_r+0x1f8>
 800ba54:	9b03      	ldr	r3, [sp, #12]
 800ba56:	3307      	adds	r3, #7
 800ba58:	f023 0307 	bic.w	r3, r3, #7
 800ba5c:	3308      	adds	r3, #8
 800ba5e:	9303      	str	r3, [sp, #12]
 800ba60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba62:	443b      	add	r3, r7
 800ba64:	9309      	str	r3, [sp, #36]	; 0x24
 800ba66:	e767      	b.n	800b938 <_vfiprintf_r+0x94>
 800ba68:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba6c:	460c      	mov	r4, r1
 800ba6e:	2001      	movs	r0, #1
 800ba70:	e7a5      	b.n	800b9be <_vfiprintf_r+0x11a>
 800ba72:	2300      	movs	r3, #0
 800ba74:	3401      	adds	r4, #1
 800ba76:	9305      	str	r3, [sp, #20]
 800ba78:	4619      	mov	r1, r3
 800ba7a:	f04f 0c0a 	mov.w	ip, #10
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba84:	3a30      	subs	r2, #48	; 0x30
 800ba86:	2a09      	cmp	r2, #9
 800ba88:	d903      	bls.n	800ba92 <_vfiprintf_r+0x1ee>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d0c5      	beq.n	800ba1a <_vfiprintf_r+0x176>
 800ba8e:	9105      	str	r1, [sp, #20]
 800ba90:	e7c3      	b.n	800ba1a <_vfiprintf_r+0x176>
 800ba92:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba96:	4604      	mov	r4, r0
 800ba98:	2301      	movs	r3, #1
 800ba9a:	e7f0      	b.n	800ba7e <_vfiprintf_r+0x1da>
 800ba9c:	ab03      	add	r3, sp, #12
 800ba9e:	9300      	str	r3, [sp, #0]
 800baa0:	462a      	mov	r2, r5
 800baa2:	4b16      	ldr	r3, [pc, #88]	; (800bafc <_vfiprintf_r+0x258>)
 800baa4:	a904      	add	r1, sp, #16
 800baa6:	4630      	mov	r0, r6
 800baa8:	f3af 8000 	nop.w
 800baac:	4607      	mov	r7, r0
 800baae:	1c78      	adds	r0, r7, #1
 800bab0:	d1d6      	bne.n	800ba60 <_vfiprintf_r+0x1bc>
 800bab2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bab4:	07d9      	lsls	r1, r3, #31
 800bab6:	d405      	bmi.n	800bac4 <_vfiprintf_r+0x220>
 800bab8:	89ab      	ldrh	r3, [r5, #12]
 800baba:	059a      	lsls	r2, r3, #22
 800babc:	d402      	bmi.n	800bac4 <_vfiprintf_r+0x220>
 800babe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bac0:	f7ff fc41 	bl	800b346 <__retarget_lock_release_recursive>
 800bac4:	89ab      	ldrh	r3, [r5, #12]
 800bac6:	065b      	lsls	r3, r3, #25
 800bac8:	f53f af12 	bmi.w	800b8f0 <_vfiprintf_r+0x4c>
 800bacc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bace:	e711      	b.n	800b8f4 <_vfiprintf_r+0x50>
 800bad0:	ab03      	add	r3, sp, #12
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	462a      	mov	r2, r5
 800bad6:	4b09      	ldr	r3, [pc, #36]	; (800bafc <_vfiprintf_r+0x258>)
 800bad8:	a904      	add	r1, sp, #16
 800bada:	4630      	mov	r0, r6
 800badc:	f000 f880 	bl	800bbe0 <_printf_i>
 800bae0:	e7e4      	b.n	800baac <_vfiprintf_r+0x208>
 800bae2:	bf00      	nop
 800bae4:	0800e4f0 	.word	0x0800e4f0
 800bae8:	0800e510 	.word	0x0800e510
 800baec:	0800e4d0 	.word	0x0800e4d0
 800baf0:	0800e530 	.word	0x0800e530
 800baf4:	0800e53a 	.word	0x0800e53a
 800baf8:	00000000 	.word	0x00000000
 800bafc:	0800b87f 	.word	0x0800b87f
 800bb00:	0800e536 	.word	0x0800e536

0800bb04 <_printf_common>:
 800bb04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb08:	4616      	mov	r6, r2
 800bb0a:	4699      	mov	r9, r3
 800bb0c:	688a      	ldr	r2, [r1, #8]
 800bb0e:	690b      	ldr	r3, [r1, #16]
 800bb10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb14:	4293      	cmp	r3, r2
 800bb16:	bfb8      	it	lt
 800bb18:	4613      	movlt	r3, r2
 800bb1a:	6033      	str	r3, [r6, #0]
 800bb1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb20:	4607      	mov	r7, r0
 800bb22:	460c      	mov	r4, r1
 800bb24:	b10a      	cbz	r2, 800bb2a <_printf_common+0x26>
 800bb26:	3301      	adds	r3, #1
 800bb28:	6033      	str	r3, [r6, #0]
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	0699      	lsls	r1, r3, #26
 800bb2e:	bf42      	ittt	mi
 800bb30:	6833      	ldrmi	r3, [r6, #0]
 800bb32:	3302      	addmi	r3, #2
 800bb34:	6033      	strmi	r3, [r6, #0]
 800bb36:	6825      	ldr	r5, [r4, #0]
 800bb38:	f015 0506 	ands.w	r5, r5, #6
 800bb3c:	d106      	bne.n	800bb4c <_printf_common+0x48>
 800bb3e:	f104 0a19 	add.w	sl, r4, #25
 800bb42:	68e3      	ldr	r3, [r4, #12]
 800bb44:	6832      	ldr	r2, [r6, #0]
 800bb46:	1a9b      	subs	r3, r3, r2
 800bb48:	42ab      	cmp	r3, r5
 800bb4a:	dc26      	bgt.n	800bb9a <_printf_common+0x96>
 800bb4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb50:	1e13      	subs	r3, r2, #0
 800bb52:	6822      	ldr	r2, [r4, #0]
 800bb54:	bf18      	it	ne
 800bb56:	2301      	movne	r3, #1
 800bb58:	0692      	lsls	r2, r2, #26
 800bb5a:	d42b      	bmi.n	800bbb4 <_printf_common+0xb0>
 800bb5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb60:	4649      	mov	r1, r9
 800bb62:	4638      	mov	r0, r7
 800bb64:	47c0      	blx	r8
 800bb66:	3001      	adds	r0, #1
 800bb68:	d01e      	beq.n	800bba8 <_printf_common+0xa4>
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	68e5      	ldr	r5, [r4, #12]
 800bb6e:	6832      	ldr	r2, [r6, #0]
 800bb70:	f003 0306 	and.w	r3, r3, #6
 800bb74:	2b04      	cmp	r3, #4
 800bb76:	bf08      	it	eq
 800bb78:	1aad      	subeq	r5, r5, r2
 800bb7a:	68a3      	ldr	r3, [r4, #8]
 800bb7c:	6922      	ldr	r2, [r4, #16]
 800bb7e:	bf0c      	ite	eq
 800bb80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb84:	2500      	movne	r5, #0
 800bb86:	4293      	cmp	r3, r2
 800bb88:	bfc4      	itt	gt
 800bb8a:	1a9b      	subgt	r3, r3, r2
 800bb8c:	18ed      	addgt	r5, r5, r3
 800bb8e:	2600      	movs	r6, #0
 800bb90:	341a      	adds	r4, #26
 800bb92:	42b5      	cmp	r5, r6
 800bb94:	d11a      	bne.n	800bbcc <_printf_common+0xc8>
 800bb96:	2000      	movs	r0, #0
 800bb98:	e008      	b.n	800bbac <_printf_common+0xa8>
 800bb9a:	2301      	movs	r3, #1
 800bb9c:	4652      	mov	r2, sl
 800bb9e:	4649      	mov	r1, r9
 800bba0:	4638      	mov	r0, r7
 800bba2:	47c0      	blx	r8
 800bba4:	3001      	adds	r0, #1
 800bba6:	d103      	bne.n	800bbb0 <_printf_common+0xac>
 800bba8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb0:	3501      	adds	r5, #1
 800bbb2:	e7c6      	b.n	800bb42 <_printf_common+0x3e>
 800bbb4:	18e1      	adds	r1, r4, r3
 800bbb6:	1c5a      	adds	r2, r3, #1
 800bbb8:	2030      	movs	r0, #48	; 0x30
 800bbba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbbe:	4422      	add	r2, r4
 800bbc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbc8:	3302      	adds	r3, #2
 800bbca:	e7c7      	b.n	800bb5c <_printf_common+0x58>
 800bbcc:	2301      	movs	r3, #1
 800bbce:	4622      	mov	r2, r4
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	4638      	mov	r0, r7
 800bbd4:	47c0      	blx	r8
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	d0e6      	beq.n	800bba8 <_printf_common+0xa4>
 800bbda:	3601      	adds	r6, #1
 800bbdc:	e7d9      	b.n	800bb92 <_printf_common+0x8e>
	...

0800bbe0 <_printf_i>:
 800bbe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe4:	460c      	mov	r4, r1
 800bbe6:	4691      	mov	r9, r2
 800bbe8:	7e27      	ldrb	r7, [r4, #24]
 800bbea:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bbec:	2f78      	cmp	r7, #120	; 0x78
 800bbee:	4680      	mov	r8, r0
 800bbf0:	469a      	mov	sl, r3
 800bbf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bbf6:	d807      	bhi.n	800bc08 <_printf_i+0x28>
 800bbf8:	2f62      	cmp	r7, #98	; 0x62
 800bbfa:	d80a      	bhi.n	800bc12 <_printf_i+0x32>
 800bbfc:	2f00      	cmp	r7, #0
 800bbfe:	f000 80d8 	beq.w	800bdb2 <_printf_i+0x1d2>
 800bc02:	2f58      	cmp	r7, #88	; 0x58
 800bc04:	f000 80a3 	beq.w	800bd4e <_printf_i+0x16e>
 800bc08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc10:	e03a      	b.n	800bc88 <_printf_i+0xa8>
 800bc12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc16:	2b15      	cmp	r3, #21
 800bc18:	d8f6      	bhi.n	800bc08 <_printf_i+0x28>
 800bc1a:	a001      	add	r0, pc, #4	; (adr r0, 800bc20 <_printf_i+0x40>)
 800bc1c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bc20:	0800bc79 	.word	0x0800bc79
 800bc24:	0800bc8d 	.word	0x0800bc8d
 800bc28:	0800bc09 	.word	0x0800bc09
 800bc2c:	0800bc09 	.word	0x0800bc09
 800bc30:	0800bc09 	.word	0x0800bc09
 800bc34:	0800bc09 	.word	0x0800bc09
 800bc38:	0800bc8d 	.word	0x0800bc8d
 800bc3c:	0800bc09 	.word	0x0800bc09
 800bc40:	0800bc09 	.word	0x0800bc09
 800bc44:	0800bc09 	.word	0x0800bc09
 800bc48:	0800bc09 	.word	0x0800bc09
 800bc4c:	0800bd99 	.word	0x0800bd99
 800bc50:	0800bcbd 	.word	0x0800bcbd
 800bc54:	0800bd7b 	.word	0x0800bd7b
 800bc58:	0800bc09 	.word	0x0800bc09
 800bc5c:	0800bc09 	.word	0x0800bc09
 800bc60:	0800bdbb 	.word	0x0800bdbb
 800bc64:	0800bc09 	.word	0x0800bc09
 800bc68:	0800bcbd 	.word	0x0800bcbd
 800bc6c:	0800bc09 	.word	0x0800bc09
 800bc70:	0800bc09 	.word	0x0800bc09
 800bc74:	0800bd83 	.word	0x0800bd83
 800bc78:	680b      	ldr	r3, [r1, #0]
 800bc7a:	1d1a      	adds	r2, r3, #4
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	600a      	str	r2, [r1, #0]
 800bc80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bc84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc88:	2301      	movs	r3, #1
 800bc8a:	e0a3      	b.n	800bdd4 <_printf_i+0x1f4>
 800bc8c:	6825      	ldr	r5, [r4, #0]
 800bc8e:	6808      	ldr	r0, [r1, #0]
 800bc90:	062e      	lsls	r6, r5, #24
 800bc92:	f100 0304 	add.w	r3, r0, #4
 800bc96:	d50a      	bpl.n	800bcae <_printf_i+0xce>
 800bc98:	6805      	ldr	r5, [r0, #0]
 800bc9a:	600b      	str	r3, [r1, #0]
 800bc9c:	2d00      	cmp	r5, #0
 800bc9e:	da03      	bge.n	800bca8 <_printf_i+0xc8>
 800bca0:	232d      	movs	r3, #45	; 0x2d
 800bca2:	426d      	negs	r5, r5
 800bca4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bca8:	485e      	ldr	r0, [pc, #376]	; (800be24 <_printf_i+0x244>)
 800bcaa:	230a      	movs	r3, #10
 800bcac:	e019      	b.n	800bce2 <_printf_i+0x102>
 800bcae:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bcb2:	6805      	ldr	r5, [r0, #0]
 800bcb4:	600b      	str	r3, [r1, #0]
 800bcb6:	bf18      	it	ne
 800bcb8:	b22d      	sxthne	r5, r5
 800bcba:	e7ef      	b.n	800bc9c <_printf_i+0xbc>
 800bcbc:	680b      	ldr	r3, [r1, #0]
 800bcbe:	6825      	ldr	r5, [r4, #0]
 800bcc0:	1d18      	adds	r0, r3, #4
 800bcc2:	6008      	str	r0, [r1, #0]
 800bcc4:	0628      	lsls	r0, r5, #24
 800bcc6:	d501      	bpl.n	800bccc <_printf_i+0xec>
 800bcc8:	681d      	ldr	r5, [r3, #0]
 800bcca:	e002      	b.n	800bcd2 <_printf_i+0xf2>
 800bccc:	0669      	lsls	r1, r5, #25
 800bcce:	d5fb      	bpl.n	800bcc8 <_printf_i+0xe8>
 800bcd0:	881d      	ldrh	r5, [r3, #0]
 800bcd2:	4854      	ldr	r0, [pc, #336]	; (800be24 <_printf_i+0x244>)
 800bcd4:	2f6f      	cmp	r7, #111	; 0x6f
 800bcd6:	bf0c      	ite	eq
 800bcd8:	2308      	moveq	r3, #8
 800bcda:	230a      	movne	r3, #10
 800bcdc:	2100      	movs	r1, #0
 800bcde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bce2:	6866      	ldr	r6, [r4, #4]
 800bce4:	60a6      	str	r6, [r4, #8]
 800bce6:	2e00      	cmp	r6, #0
 800bce8:	bfa2      	ittt	ge
 800bcea:	6821      	ldrge	r1, [r4, #0]
 800bcec:	f021 0104 	bicge.w	r1, r1, #4
 800bcf0:	6021      	strge	r1, [r4, #0]
 800bcf2:	b90d      	cbnz	r5, 800bcf8 <_printf_i+0x118>
 800bcf4:	2e00      	cmp	r6, #0
 800bcf6:	d04d      	beq.n	800bd94 <_printf_i+0x1b4>
 800bcf8:	4616      	mov	r6, r2
 800bcfa:	fbb5 f1f3 	udiv	r1, r5, r3
 800bcfe:	fb03 5711 	mls	r7, r3, r1, r5
 800bd02:	5dc7      	ldrb	r7, [r0, r7]
 800bd04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd08:	462f      	mov	r7, r5
 800bd0a:	42bb      	cmp	r3, r7
 800bd0c:	460d      	mov	r5, r1
 800bd0e:	d9f4      	bls.n	800bcfa <_printf_i+0x11a>
 800bd10:	2b08      	cmp	r3, #8
 800bd12:	d10b      	bne.n	800bd2c <_printf_i+0x14c>
 800bd14:	6823      	ldr	r3, [r4, #0]
 800bd16:	07df      	lsls	r7, r3, #31
 800bd18:	d508      	bpl.n	800bd2c <_printf_i+0x14c>
 800bd1a:	6923      	ldr	r3, [r4, #16]
 800bd1c:	6861      	ldr	r1, [r4, #4]
 800bd1e:	4299      	cmp	r1, r3
 800bd20:	bfde      	ittt	le
 800bd22:	2330      	movle	r3, #48	; 0x30
 800bd24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd28:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd2c:	1b92      	subs	r2, r2, r6
 800bd2e:	6122      	str	r2, [r4, #16]
 800bd30:	f8cd a000 	str.w	sl, [sp]
 800bd34:	464b      	mov	r3, r9
 800bd36:	aa03      	add	r2, sp, #12
 800bd38:	4621      	mov	r1, r4
 800bd3a:	4640      	mov	r0, r8
 800bd3c:	f7ff fee2 	bl	800bb04 <_printf_common>
 800bd40:	3001      	adds	r0, #1
 800bd42:	d14c      	bne.n	800bdde <_printf_i+0x1fe>
 800bd44:	f04f 30ff 	mov.w	r0, #4294967295
 800bd48:	b004      	add	sp, #16
 800bd4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd4e:	4835      	ldr	r0, [pc, #212]	; (800be24 <_printf_i+0x244>)
 800bd50:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd54:	6823      	ldr	r3, [r4, #0]
 800bd56:	680e      	ldr	r6, [r1, #0]
 800bd58:	061f      	lsls	r7, r3, #24
 800bd5a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bd5e:	600e      	str	r6, [r1, #0]
 800bd60:	d514      	bpl.n	800bd8c <_printf_i+0x1ac>
 800bd62:	07d9      	lsls	r1, r3, #31
 800bd64:	bf44      	itt	mi
 800bd66:	f043 0320 	orrmi.w	r3, r3, #32
 800bd6a:	6023      	strmi	r3, [r4, #0]
 800bd6c:	b91d      	cbnz	r5, 800bd76 <_printf_i+0x196>
 800bd6e:	6823      	ldr	r3, [r4, #0]
 800bd70:	f023 0320 	bic.w	r3, r3, #32
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	2310      	movs	r3, #16
 800bd78:	e7b0      	b.n	800bcdc <_printf_i+0xfc>
 800bd7a:	6823      	ldr	r3, [r4, #0]
 800bd7c:	f043 0320 	orr.w	r3, r3, #32
 800bd80:	6023      	str	r3, [r4, #0]
 800bd82:	2378      	movs	r3, #120	; 0x78
 800bd84:	4828      	ldr	r0, [pc, #160]	; (800be28 <_printf_i+0x248>)
 800bd86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd8a:	e7e3      	b.n	800bd54 <_printf_i+0x174>
 800bd8c:	065e      	lsls	r6, r3, #25
 800bd8e:	bf48      	it	mi
 800bd90:	b2ad      	uxthmi	r5, r5
 800bd92:	e7e6      	b.n	800bd62 <_printf_i+0x182>
 800bd94:	4616      	mov	r6, r2
 800bd96:	e7bb      	b.n	800bd10 <_printf_i+0x130>
 800bd98:	680b      	ldr	r3, [r1, #0]
 800bd9a:	6826      	ldr	r6, [r4, #0]
 800bd9c:	6960      	ldr	r0, [r4, #20]
 800bd9e:	1d1d      	adds	r5, r3, #4
 800bda0:	600d      	str	r5, [r1, #0]
 800bda2:	0635      	lsls	r5, r6, #24
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	d501      	bpl.n	800bdac <_printf_i+0x1cc>
 800bda8:	6018      	str	r0, [r3, #0]
 800bdaa:	e002      	b.n	800bdb2 <_printf_i+0x1d2>
 800bdac:	0671      	lsls	r1, r6, #25
 800bdae:	d5fb      	bpl.n	800bda8 <_printf_i+0x1c8>
 800bdb0:	8018      	strh	r0, [r3, #0]
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	6123      	str	r3, [r4, #16]
 800bdb6:	4616      	mov	r6, r2
 800bdb8:	e7ba      	b.n	800bd30 <_printf_i+0x150>
 800bdba:	680b      	ldr	r3, [r1, #0]
 800bdbc:	1d1a      	adds	r2, r3, #4
 800bdbe:	600a      	str	r2, [r1, #0]
 800bdc0:	681e      	ldr	r6, [r3, #0]
 800bdc2:	6862      	ldr	r2, [r4, #4]
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f7f4 fa02 	bl	80001d0 <memchr>
 800bdcc:	b108      	cbz	r0, 800bdd2 <_printf_i+0x1f2>
 800bdce:	1b80      	subs	r0, r0, r6
 800bdd0:	6060      	str	r0, [r4, #4]
 800bdd2:	6863      	ldr	r3, [r4, #4]
 800bdd4:	6123      	str	r3, [r4, #16]
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bddc:	e7a8      	b.n	800bd30 <_printf_i+0x150>
 800bdde:	6923      	ldr	r3, [r4, #16]
 800bde0:	4632      	mov	r2, r6
 800bde2:	4649      	mov	r1, r9
 800bde4:	4640      	mov	r0, r8
 800bde6:	47d0      	blx	sl
 800bde8:	3001      	adds	r0, #1
 800bdea:	d0ab      	beq.n	800bd44 <_printf_i+0x164>
 800bdec:	6823      	ldr	r3, [r4, #0]
 800bdee:	079b      	lsls	r3, r3, #30
 800bdf0:	d413      	bmi.n	800be1a <_printf_i+0x23a>
 800bdf2:	68e0      	ldr	r0, [r4, #12]
 800bdf4:	9b03      	ldr	r3, [sp, #12]
 800bdf6:	4298      	cmp	r0, r3
 800bdf8:	bfb8      	it	lt
 800bdfa:	4618      	movlt	r0, r3
 800bdfc:	e7a4      	b.n	800bd48 <_printf_i+0x168>
 800bdfe:	2301      	movs	r3, #1
 800be00:	4632      	mov	r2, r6
 800be02:	4649      	mov	r1, r9
 800be04:	4640      	mov	r0, r8
 800be06:	47d0      	blx	sl
 800be08:	3001      	adds	r0, #1
 800be0a:	d09b      	beq.n	800bd44 <_printf_i+0x164>
 800be0c:	3501      	adds	r5, #1
 800be0e:	68e3      	ldr	r3, [r4, #12]
 800be10:	9903      	ldr	r1, [sp, #12]
 800be12:	1a5b      	subs	r3, r3, r1
 800be14:	42ab      	cmp	r3, r5
 800be16:	dcf2      	bgt.n	800bdfe <_printf_i+0x21e>
 800be18:	e7eb      	b.n	800bdf2 <_printf_i+0x212>
 800be1a:	2500      	movs	r5, #0
 800be1c:	f104 0619 	add.w	r6, r4, #25
 800be20:	e7f5      	b.n	800be0e <_printf_i+0x22e>
 800be22:	bf00      	nop
 800be24:	0800e541 	.word	0x0800e541
 800be28:	0800e552 	.word	0x0800e552

0800be2c <_putc_r>:
 800be2c:	b570      	push	{r4, r5, r6, lr}
 800be2e:	460d      	mov	r5, r1
 800be30:	4614      	mov	r4, r2
 800be32:	4606      	mov	r6, r0
 800be34:	b118      	cbz	r0, 800be3e <_putc_r+0x12>
 800be36:	6983      	ldr	r3, [r0, #24]
 800be38:	b90b      	cbnz	r3, 800be3e <_putc_r+0x12>
 800be3a:	f7ff f9e5 	bl	800b208 <__sinit>
 800be3e:	4b1c      	ldr	r3, [pc, #112]	; (800beb0 <_putc_r+0x84>)
 800be40:	429c      	cmp	r4, r3
 800be42:	d124      	bne.n	800be8e <_putc_r+0x62>
 800be44:	6874      	ldr	r4, [r6, #4]
 800be46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be48:	07d8      	lsls	r0, r3, #31
 800be4a:	d405      	bmi.n	800be58 <_putc_r+0x2c>
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	0599      	lsls	r1, r3, #22
 800be50:	d402      	bmi.n	800be58 <_putc_r+0x2c>
 800be52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be54:	f7ff fa76 	bl	800b344 <__retarget_lock_acquire_recursive>
 800be58:	68a3      	ldr	r3, [r4, #8]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	60a3      	str	r3, [r4, #8]
 800be60:	da05      	bge.n	800be6e <_putc_r+0x42>
 800be62:	69a2      	ldr	r2, [r4, #24]
 800be64:	4293      	cmp	r3, r2
 800be66:	db1c      	blt.n	800bea2 <_putc_r+0x76>
 800be68:	b2eb      	uxtb	r3, r5
 800be6a:	2b0a      	cmp	r3, #10
 800be6c:	d019      	beq.n	800bea2 <_putc_r+0x76>
 800be6e:	6823      	ldr	r3, [r4, #0]
 800be70:	1c5a      	adds	r2, r3, #1
 800be72:	6022      	str	r2, [r4, #0]
 800be74:	701d      	strb	r5, [r3, #0]
 800be76:	b2ed      	uxtb	r5, r5
 800be78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be7a:	07da      	lsls	r2, r3, #31
 800be7c:	d405      	bmi.n	800be8a <_putc_r+0x5e>
 800be7e:	89a3      	ldrh	r3, [r4, #12]
 800be80:	059b      	lsls	r3, r3, #22
 800be82:	d402      	bmi.n	800be8a <_putc_r+0x5e>
 800be84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be86:	f7ff fa5e 	bl	800b346 <__retarget_lock_release_recursive>
 800be8a:	4628      	mov	r0, r5
 800be8c:	bd70      	pop	{r4, r5, r6, pc}
 800be8e:	4b09      	ldr	r3, [pc, #36]	; (800beb4 <_putc_r+0x88>)
 800be90:	429c      	cmp	r4, r3
 800be92:	d101      	bne.n	800be98 <_putc_r+0x6c>
 800be94:	68b4      	ldr	r4, [r6, #8]
 800be96:	e7d6      	b.n	800be46 <_putc_r+0x1a>
 800be98:	4b07      	ldr	r3, [pc, #28]	; (800beb8 <_putc_r+0x8c>)
 800be9a:	429c      	cmp	r4, r3
 800be9c:	bf08      	it	eq
 800be9e:	68f4      	ldreq	r4, [r6, #12]
 800bea0:	e7d1      	b.n	800be46 <_putc_r+0x1a>
 800bea2:	4629      	mov	r1, r5
 800bea4:	4622      	mov	r2, r4
 800bea6:	4630      	mov	r0, r6
 800bea8:	f7fe ffb2 	bl	800ae10 <__swbuf_r>
 800beac:	4605      	mov	r5, r0
 800beae:	e7e3      	b.n	800be78 <_putc_r+0x4c>
 800beb0:	0800e4f0 	.word	0x0800e4f0
 800beb4:	0800e510 	.word	0x0800e510
 800beb8:	0800e4d0 	.word	0x0800e4d0

0800bebc <_read_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4d07      	ldr	r5, [pc, #28]	; (800bedc <_read_r+0x20>)
 800bec0:	4604      	mov	r4, r0
 800bec2:	4608      	mov	r0, r1
 800bec4:	4611      	mov	r1, r2
 800bec6:	2200      	movs	r2, #0
 800bec8:	602a      	str	r2, [r5, #0]
 800beca:	461a      	mov	r2, r3
 800becc:	f7f5 fc0d 	bl	80016ea <_read>
 800bed0:	1c43      	adds	r3, r0, #1
 800bed2:	d102      	bne.n	800beda <_read_r+0x1e>
 800bed4:	682b      	ldr	r3, [r5, #0]
 800bed6:	b103      	cbz	r3, 800beda <_read_r+0x1e>
 800bed8:	6023      	str	r3, [r4, #0]
 800beda:	bd38      	pop	{r3, r4, r5, pc}
 800bedc:	20001114 	.word	0x20001114

0800bee0 <_sbrk_r>:
 800bee0:	b538      	push	{r3, r4, r5, lr}
 800bee2:	4d06      	ldr	r5, [pc, #24]	; (800befc <_sbrk_r+0x1c>)
 800bee4:	2300      	movs	r3, #0
 800bee6:	4604      	mov	r4, r0
 800bee8:	4608      	mov	r0, r1
 800beea:	602b      	str	r3, [r5, #0]
 800beec:	f7f5 fc6a 	bl	80017c4 <_sbrk>
 800bef0:	1c43      	adds	r3, r0, #1
 800bef2:	d102      	bne.n	800befa <_sbrk_r+0x1a>
 800bef4:	682b      	ldr	r3, [r5, #0]
 800bef6:	b103      	cbz	r3, 800befa <_sbrk_r+0x1a>
 800bef8:	6023      	str	r3, [r4, #0]
 800befa:	bd38      	pop	{r3, r4, r5, pc}
 800befc:	20001114 	.word	0x20001114

0800bf00 <_fstat_r>:
 800bf00:	b538      	push	{r3, r4, r5, lr}
 800bf02:	4d07      	ldr	r5, [pc, #28]	; (800bf20 <_fstat_r+0x20>)
 800bf04:	2300      	movs	r3, #0
 800bf06:	4604      	mov	r4, r0
 800bf08:	4608      	mov	r0, r1
 800bf0a:	4611      	mov	r1, r2
 800bf0c:	602b      	str	r3, [r5, #0]
 800bf0e:	f7f5 fc31 	bl	8001774 <_fstat>
 800bf12:	1c43      	adds	r3, r0, #1
 800bf14:	d102      	bne.n	800bf1c <_fstat_r+0x1c>
 800bf16:	682b      	ldr	r3, [r5, #0]
 800bf18:	b103      	cbz	r3, 800bf1c <_fstat_r+0x1c>
 800bf1a:	6023      	str	r3, [r4, #0]
 800bf1c:	bd38      	pop	{r3, r4, r5, pc}
 800bf1e:	bf00      	nop
 800bf20:	20001114 	.word	0x20001114

0800bf24 <_isatty_r>:
 800bf24:	b538      	push	{r3, r4, r5, lr}
 800bf26:	4d06      	ldr	r5, [pc, #24]	; (800bf40 <_isatty_r+0x1c>)
 800bf28:	2300      	movs	r3, #0
 800bf2a:	4604      	mov	r4, r0
 800bf2c:	4608      	mov	r0, r1
 800bf2e:	602b      	str	r3, [r5, #0]
 800bf30:	f7f5 fc30 	bl	8001794 <_isatty>
 800bf34:	1c43      	adds	r3, r0, #1
 800bf36:	d102      	bne.n	800bf3e <_isatty_r+0x1a>
 800bf38:	682b      	ldr	r3, [r5, #0]
 800bf3a:	b103      	cbz	r3, 800bf3e <_isatty_r+0x1a>
 800bf3c:	6023      	str	r3, [r4, #0]
 800bf3e:	bd38      	pop	{r3, r4, r5, pc}
 800bf40:	20001114 	.word	0x20001114

0800bf44 <memmove>:
 800bf44:	4288      	cmp	r0, r1
 800bf46:	b510      	push	{r4, lr}
 800bf48:	eb01 0402 	add.w	r4, r1, r2
 800bf4c:	d902      	bls.n	800bf54 <memmove+0x10>
 800bf4e:	4284      	cmp	r4, r0
 800bf50:	4623      	mov	r3, r4
 800bf52:	d807      	bhi.n	800bf64 <memmove+0x20>
 800bf54:	1e43      	subs	r3, r0, #1
 800bf56:	42a1      	cmp	r1, r4
 800bf58:	d008      	beq.n	800bf6c <memmove+0x28>
 800bf5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf62:	e7f8      	b.n	800bf56 <memmove+0x12>
 800bf64:	4402      	add	r2, r0
 800bf66:	4601      	mov	r1, r0
 800bf68:	428a      	cmp	r2, r1
 800bf6a:	d100      	bne.n	800bf6e <memmove+0x2a>
 800bf6c:	bd10      	pop	{r4, pc}
 800bf6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf76:	e7f7      	b.n	800bf68 <memmove+0x24>

0800bf78 <__malloc_lock>:
 800bf78:	4801      	ldr	r0, [pc, #4]	; (800bf80 <__malloc_lock+0x8>)
 800bf7a:	f7ff b9e3 	b.w	800b344 <__retarget_lock_acquire_recursive>
 800bf7e:	bf00      	nop
 800bf80:	2000110c 	.word	0x2000110c

0800bf84 <__malloc_unlock>:
 800bf84:	4801      	ldr	r0, [pc, #4]	; (800bf8c <__malloc_unlock+0x8>)
 800bf86:	f7ff b9de 	b.w	800b346 <__retarget_lock_release_recursive>
 800bf8a:	bf00      	nop
 800bf8c:	2000110c 	.word	0x2000110c

0800bf90 <_realloc_r>:
 800bf90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf92:	4607      	mov	r7, r0
 800bf94:	4614      	mov	r4, r2
 800bf96:	460e      	mov	r6, r1
 800bf98:	b921      	cbnz	r1, 800bfa4 <_realloc_r+0x14>
 800bf9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bf9e:	4611      	mov	r1, r2
 800bfa0:	f7ff baa0 	b.w	800b4e4 <_malloc_r>
 800bfa4:	b922      	cbnz	r2, 800bfb0 <_realloc_r+0x20>
 800bfa6:	f7ff fa4d 	bl	800b444 <_free_r>
 800bfaa:	4625      	mov	r5, r4
 800bfac:	4628      	mov	r0, r5
 800bfae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfb0:	f000 f814 	bl	800bfdc <_malloc_usable_size_r>
 800bfb4:	42a0      	cmp	r0, r4
 800bfb6:	d20f      	bcs.n	800bfd8 <_realloc_r+0x48>
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4638      	mov	r0, r7
 800bfbc:	f7ff fa92 	bl	800b4e4 <_malloc_r>
 800bfc0:	4605      	mov	r5, r0
 800bfc2:	2800      	cmp	r0, #0
 800bfc4:	d0f2      	beq.n	800bfac <_realloc_r+0x1c>
 800bfc6:	4631      	mov	r1, r6
 800bfc8:	4622      	mov	r2, r4
 800bfca:	f7fe fcf1 	bl	800a9b0 <memcpy>
 800bfce:	4631      	mov	r1, r6
 800bfd0:	4638      	mov	r0, r7
 800bfd2:	f7ff fa37 	bl	800b444 <_free_r>
 800bfd6:	e7e9      	b.n	800bfac <_realloc_r+0x1c>
 800bfd8:	4635      	mov	r5, r6
 800bfda:	e7e7      	b.n	800bfac <_realloc_r+0x1c>

0800bfdc <_malloc_usable_size_r>:
 800bfdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfe0:	1f18      	subs	r0, r3, #4
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	bfbc      	itt	lt
 800bfe6:	580b      	ldrlt	r3, [r1, r0]
 800bfe8:	18c0      	addlt	r0, r0, r3
 800bfea:	4770      	bx	lr

0800bfec <_init>:
 800bfec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfee:	bf00      	nop
 800bff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bff2:	bc08      	pop	{r3}
 800bff4:	469e      	mov	lr, r3
 800bff6:	4770      	bx	lr

0800bff8 <_fini>:
 800bff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffa:	bf00      	nop
 800bffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bffe:	bc08      	pop	{r3}
 800c000:	469e      	mov	lr, r3
 800c002:	4770      	bx	lr
